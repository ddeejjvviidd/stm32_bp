
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf9c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800c158  0800c158  0000d158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c210  0800c210  0000e10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c210  0800c210  0000d210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c218  0800c218  0000e10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c218  0800c218  0000d218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c21c  0800c21c  0000d21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800c220  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010474  2000010c  0800c32c  0000e10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010580  0800c32c  0000e580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ea6  00000000  00000000  0000e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dad  00000000  00000000  00031fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00036d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015da  00000000  00000000  000389e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff19  00000000  00000000  00039fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000237c1  00000000  00000000  00069edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d7d3  00000000  00000000  0008d69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aae6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007780  00000000  00000000  001aaeb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b2634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800c140 	.word	0x0800c140

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800c140 	.word	0x0800c140

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2201      	movs	r2, #1
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fba9 	bl	8001cc0 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fdb3 	bl	80010de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f001 ff25 	bl	80023e4 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fd9d 	bl	80010de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f001 ff17 	bl	80023e4 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 fd8f 	bl	80010de <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00b fd67 	bl	800c0cc <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fc13 	bl	8005e64 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 fd4b 	bl	80010de <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 f8a7 	bl	80037e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 fdcd 	bl	8003270 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 fcff 	bl	80010de <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 fd86 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 fd9f 	bl	800323a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 fd70 	bl	8003270 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fca2 	bl	80010de <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 fd2f 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 fd48 	bl	800323a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 fd27 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 fd40 	bl	800323a <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 fc19 	bl	8005094 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 f941 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 f93c 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 f937 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f002 ff97 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f002 ff88 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f002 ff7c 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f002 ff6e 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f002 ff60 	bl	80037e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fc6a 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fc83 	bl	800323a <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d119      	bne.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000974:	f003 f8c8 	bl	8003b08 <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000988:	f003 f8be 	bl	8003b08 <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000250 	.word	0x20000250
 80009a0:	48000400 	.word	0x48000400

080009a4 <comms_reset_active_buffer>:
} comms_return_codes;

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);
extern void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values);

void comms_reset_active_buffer(){
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	*((uint16_t *)(comms_active_buffer+1)) = 0;
 80009a8:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <comms_reset_active_buffer+0x24>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	2200      	movs	r2, #0
 80009b0:	801a      	strh	r2, [r3, #0]
	//comms_active_buffer[1] = 0;
	comms_active_wr_pointer = comms_active_buffer+3;
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <comms_reset_active_buffer+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3303      	adds	r3, #3
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <comms_reset_active_buffer+0x28>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000c254 	.word	0x2000c254
 80009cc:	2000c658 	.word	0x2000c658

080009d0 <comms_init>:

void comms_init(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	comms_active_buffer = comms_tx_buffer1;
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <comms_init+0x24>)
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <comms_init+0x28>)
 80009d8:	601a      	str	r2, [r3, #0]
	comms_prepared_buffer = comms_tx_buffer2;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <comms_init+0x2c>)
 80009dc:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <comms_init+0x30>)
 80009de:	601a      	str	r2, [r3, #0]

	comms_reset_active_buffer();
 80009e0:	f7ff ffe0 	bl	80009a4 <comms_reset_active_buffer>
	comms_prepared_wr_pointer = comms_prepared_buffer+3;
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <comms_init+0x2c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3303      	adds	r3, #3
 80009ea:	4a06      	ldr	r2, [pc, #24]	@ (8000a04 <comms_init+0x34>)
 80009ec:	6013      	str	r3, [r2, #0]
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000c254 	.word	0x2000c254
 80009f8:	20004254 	.word	0x20004254
 80009fc:	2000c258 	.word	0x2000c258
 8000a00:	20008254 	.word	0x20008254
 8000a04:	2000c65c 	.word	0x2000c65c

08000a08 <comms_purge_id_register>:

void comms_purge_id_register(){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	memset(comms_id_register, NULL, sizeof(comms_id_register));
 8000a0c:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000a10:	2100      	movs	r1, #0
 8000a12:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <comms_purge_id_register+0x14>)
 8000a14:	f00b fb5a 	bl	800c0cc <memset>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000c25c 	.word	0x2000c25c

08000a20 <comms_find_existing_data>:

void * comms_find_existing_data(uint8_t data_id){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if (comms_id_register[data_id] != NULL) {
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <comms_find_existing_data+0x30>)
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <comms_find_existing_data+0x20>
		return comms_id_register[data_id];
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <comms_find_existing_data+0x30>)
 8000a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3e:	e000      	b.n	8000a42 <comms_find_existing_data+0x22>
	}
	return NULL;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000c25c 	.word	0x2000c25c

08000a54 <comms_increment_active_buffer_data>:

void comms_increment_active_buffer_data(){
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	*((uint16_t *)(comms_active_buffer+1)) += 1;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <comms_increment_active_buffer_data+0x24>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	881a      	ldrh	r2, [r3, #0]
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <comms_increment_active_buffer_data+0x24>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	3201      	adds	r2, #1
 8000a68:	b292      	uxth	r2, r2
 8000a6a:	801a      	strh	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	2000c254 	.word	0x2000c254

08000a7c <comms_append_int32>:

int comms_append_int32(uint8_t data_id, uint8_t data_count, int data){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	603a      	str	r2, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	71bb      	strb	r3, [r7, #6]
	//check tx_register for same data id, return if existing
	if (wr_status) {
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <comms_append_int32+0x84>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <comms_append_int32+0x1c>
		return COMMS_WR_LOCKED;
 8000a94:	2305      	movs	r3, #5
 8000a96:	e02f      	b.n	8000af8 <comms_append_int32+0x7c>
	} else {
		wr_status = COMMS_INPROGRESS;
 8000a98:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <comms_append_int32+0x84>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
	}

	if (comms_find_existing_data(data_id) != NULL) {
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ffbd 	bl	8000a20 <comms_find_existing_data>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <comms_append_int32+0x34>
		return 1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e023      	b.n	8000af8 <comms_append_int32+0x7c>
	}

	// save the pointer to new data to register
	comms_id_register[data_id] = (void *)comms_active_wr_pointer;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <comms_append_int32+0x88>)
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	4914      	ldr	r1, [pc, #80]	@ (8000b08 <comms_append_int32+0x8c>)
 8000ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_increment_active_buffer_data();
 8000abc:	f7ff ffca 	bl	8000a54 <comms_increment_active_buffer_data>

	// write id, bytes and count
	*comms_active_wr_pointer = data_id;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <comms_append_int32+0x88>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer+1) = (uint8_t)sizeof(data);
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <comms_append_int32+0x88>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	2204      	movs	r2, #4
 8000ad0:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer+2) = data_count;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <comms_append_int32+0x88>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int *)(comms_active_wr_pointer+3)) = data;
 8000adc:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <comms_append_int32+0x88>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3303      	adds	r3, #3
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_active_wr_pointer = (comms_active_wr_pointer+3+sizeof(data));
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <comms_append_int32+0x88>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3307      	adds	r3, #7
 8000aec:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <comms_append_int32+0x88>)
 8000aee:	6013      	str	r3, [r2, #0]

	wr_status = COMMS_READY;
 8000af0:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <comms_append_int32+0x84>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
	return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000c660 	.word	0x2000c660
 8000b04:	2000c658 	.word	0x2000c658
 8000b08:	2000c25c 	.word	0x2000c25c

08000b0c <comms_switch_buffers>:

void comms_switch_buffers(){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b12:	f3ef 8310 	mrs	r3, PRIMASK
 8000b16:	603b      	str	r3, [r7, #0]
  return(result);
 8000b18:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000b1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t * _temp = comms_prepared_buffer;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <comms_switch_buffers+0x4c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60bb      	str	r3, [r7, #8]
	comms_prepared_buffer = comms_active_buffer;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <comms_switch_buffers+0x50>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b58 <comms_switch_buffers+0x4c>)
 8000b2c:	6013      	str	r3, [r2, #0]
	comms_active_buffer = _temp;
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <comms_switch_buffers+0x50>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_prepared_wr_pointer = comms_active_wr_pointer;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <comms_switch_buffers+0x54>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <comms_switch_buffers+0x58>)
 8000b3a:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_buffer();
 8000b3c:	f7ff ff32 	bl	80009a4 <comms_reset_active_buffer>
	comms_purge_id_register();
 8000b40:	f7ff ff62 	bl	8000a08 <comms_purge_id_register>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f383 8810 	msr	PRIMASK, r3
}
 8000b4e:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000c258 	.word	0x2000c258
 8000b5c:	2000c254 	.word	0x2000c254
 8000b60:	2000c658 	.word	0x2000c658
 8000b64:	2000c65c 	.word	0x2000c65c

08000b68 <comms_send>:

int comms_send(){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

	if(tx_status > 0){
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <comms_send+0x68>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <comms_send+0x12>
		return COMMS_TX_LOCKED;
 8000b76:	2304      	movs	r3, #4
 8000b78:	e025      	b.n	8000bc6 <comms_send+0x5e>
	}

	tx_status = COMMS_INPROGRESS;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <comms_send+0x68>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]

	// need to switch buffers
	comms_switch_buffers();
 8000b80:	f7ff ffc4 	bl	8000b0c <comms_switch_buffers>


	// buffer is empty
	if (comms_prepared_buffer[1] == 0) {
 8000b84:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <comms_send+0x6c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d104      	bne.n	8000b9a <comms_send+0x32>
		tx_status = COMMS_READY;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <comms_send+0x68>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
		return COMMS_TX_BUFFER_EMPTY;
 8000b96:	2303      	movs	r3, #3
 8000b98:	e015      	b.n	8000bc6 <comms_send+0x5e>
	}

	// send data
	USBD_StatusTypeDef cdc_return = CDC_Transmit_FS(comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer);
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <comms_send+0x6c>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <comms_send+0x70>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <comms_send+0x6c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	f00a fcee 	bl	800b58c <CDC_Transmit_FS>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]

	tx_status = COMMS_READY;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <comms_send+0x68>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]

	if (cdc_return) {
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <comms_send+0x5c>
		return COMMS_TX_CDC_FAIL;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e000      	b.n	8000bc6 <comms_send+0x5e>
	}

	return COMMS_SUCCESS;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000c661 	.word	0x2000c661
 8000bd4:	2000c258 	.word	0x2000c258
 8000bd8:	2000c65c 	.word	0x2000c65c

08000bdc <m2s_Process>:
int SendInt2MTLB(uint16_t iD, int *xInt) {

	return DataTransmit2MTLB(iD, (uint8_t*) xInt, 1);
}

void m2s_Process() {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	// funkce volana z nekonecne smycky

	if (!m2s_Status)
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <m2s_Process+0x50>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d01e      	beq.n	8000c26 <m2s_Process+0x4a>
		return; // pokud neprisla data, ukonci se

	if (m2s_Status == 1) {
 8000be8:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <m2s_Process+0x50>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d111      	bne.n	8000c14 <m2s_Process+0x38>
		// zpracuje data
		DataReceive_MTLB_Callback(m2s_ID, m2s_buf, m2s_nData_in_bytes / 4);
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <m2s_Process+0x54>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	b298      	uxth	r0, r3
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <m2s_Process+0x58>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da00      	bge.n	8000c00 <m2s_Process+0x24>
 8000bfe:	3303      	adds	r3, #3
 8000c00:	109b      	asrs	r3, r3, #2
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <m2s_Process+0x5c>)
 8000c08:	f000 f886 	bl	8000d18 <DataReceive_MTLB_Callback>
		m2s_Status = 0;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <m2s_Process+0x50>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
		return;
 8000c12:	e009      	b.n	8000c28 <m2s_Process+0x4c>
	}

	if (m2s_Status == -1) {
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <m2s_Process+0x50>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c1c:	d104      	bne.n	8000c28 <m2s_Process+0x4c>
		// inicializace
		m2s_Status = 0;
 8000c1e:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <m2s_Process+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
		return;
 8000c24:	e000      	b.n	8000c28 <m2s_Process+0x4c>
		return; // pokud neprisla data, ukonci se
 8000c26:	bf00      	nop
	}

}
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000c664 	.word	0x2000c664
 8000c30:	2000c668 	.word	0x2000c668
 8000c34:	2000c66c 	.word	0x2000c66c
 8000c38:	20000254 	.word	0x20000254

08000c3c <USB_My_Receive>:

void USB_My_Receive(uint8_t *Buf, uint32_t Len) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]

	// callback na prijem dat

	if (m2s_Status == 0) {
 8000c46:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <USB_My_Receive+0x94>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10c      	bne.n	8000c68 <USB_My_Receive+0x2c>
		// iD
		m2s_ID = ((uint16_t*) Buf)[0];
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <USB_My_Receive+0x98>)
 8000c56:	601a      	str	r2, [r3, #0]
		if (m2s_ID == 0)
 8000c58:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <USB_My_Receive+0x98>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d030      	beq.n	8000cc2 <USB_My_Receive+0x86>
			return;
		m2s_Status = 100;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <USB_My_Receive+0x94>)
 8000c62:	2264      	movs	r2, #100	@ 0x64
 8000c64:	601a      	str	r2, [r3, #0]
		return;
 8000c66:	e02f      	b.n	8000cc8 <USB_My_Receive+0x8c>
	}

	if (m2s_Status == 100) {
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <USB_My_Receive+0x94>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b64      	cmp	r3, #100	@ 0x64
 8000c6e:	d110      	bne.n	8000c92 <USB_My_Receive+0x56>
		// nData
		m2s_nData_in_bytes = ((uint16_t*) Buf)[0] * 4;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4a18      	ldr	r2, [pc, #96]	@ (8000cd8 <USB_My_Receive+0x9c>)
 8000c78:	6013      	str	r3, [r2, #0]
		if (m2s_nData_in_bytes == 0) {
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <USB_My_Receive+0x9c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <USB_My_Receive+0x4e>
			m2s_Status = 1;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <USB_My_Receive+0x94>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
			return;
 8000c88:	e01e      	b.n	8000cc8 <USB_My_Receive+0x8c>
		}
		m2s_Status = 3; //wait for xData
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <USB_My_Receive+0x94>)
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	601a      	str	r2, [r3, #0]
		return;
 8000c90:	e01a      	b.n	8000cc8 <USB_My_Receive+0x8c>
	}

	if (m2s_Status == 3) {
 8000c92:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <USB_My_Receive+0x94>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d115      	bne.n	8000cc6 <USB_My_Receive+0x8a>
		// xData
		if (Len < m2s_nData_in_bytes)
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <USB_My_Receive+0x9c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d202      	bcs.n	8000cac <USB_My_Receive+0x70>
			m2s_nData_in_bytes = Len;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd8 <USB_My_Receive+0x9c>)
 8000caa:	6013      	str	r3, [r2, #0]
		memcpy(m2s_buf, Buf, m2s_nData_in_bytes);
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <USB_My_Receive+0x9c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <USB_My_Receive+0xa0>)
 8000cb6:	f00b fa35 	bl	800c124 <memcpy>
		m2s_Status = 1;
 8000cba:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <USB_My_Receive+0x94>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
		return;
 8000cc0:	e002      	b.n	8000cc8 <USB_My_Receive+0x8c>
			return;
 8000cc2:	bf00      	nop
 8000cc4:	e000      	b.n	8000cc8 <USB_My_Receive+0x8c>
	}

	return;
 8000cc6:	bf00      	nop
}
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000c664 	.word	0x2000c664
 8000cd4:	2000c668 	.word	0x2000c668
 8000cd8:	2000c66c 	.word	0x2000c66c
 8000cdc:	20000254 	.word	0x20000254

08000ce0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a08      	ldr	r2, [pc, #32]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d108      	bne.n	8000d02 <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cf0:	2180      	movs	r1, #128	@ 0x80
 8000cf2:	4807      	ldr	r0, [pc, #28]	@ (8000d10 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cf4:	f002 ff20 	bl	8003b38 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	4a05      	ldr	r2, [pc, #20]	@ (8000d14 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d00:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		//DataTransmit2MTLB(1, &periodical, 1);
	}
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000e7fc 	.word	0x2000e7fc
 8000d10:	48000400 	.word	0x48000400
 8000d14:	2000c670 	.word	0x2000c670

08000d18 <DataReceive_MTLB_Callback>:
//    	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);
//    }

}

void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	80fb      	strh	r3, [r7, #6]
 8000d24:	4613      	mov	r3, r2
 8000d26:	80bb      	strh	r3, [r7, #4]
	// funkce volana po prijmu dat

	switch (iD) {
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	2b14      	cmp	r3, #20
		//data odesilam zpet do matlabu
		//DataTransmit2MTLB(20, xData, nData_in_values);
		break;

	default:
		break;
 8000d2c:	bf00      	nop
	}
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <myDmaFunction>:

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <myDmaFunction+0x28>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d4a:	4a07      	ldr	r2, [pc, #28]	@ (8000d68 <myDmaFunction+0x2c>)
 8000d4c:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000d4e:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <myDmaFunction+0x28>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d54:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <myDmaFunction+0x30>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	2000e7b0 	.word	0x2000e7b0
 8000d68:	2000c67c 	.word	0x2000c67c
 8000d6c:	2000c680 	.word	0x2000c680

08000d70 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	@ 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8000d78:	4b51      	ldr	r3, [pc, #324]	@ (8000ec0 <HAL_ADC_ConvCpltCallback+0x150>)
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 8000d80:	4b50      	ldr	r3, [pc, #320]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 100; i++) {
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	e027      	b.n	8000dde <HAL_ADC_ConvCpltCallback+0x6e>
        adcValue += dma_data_buffer[i + 100]; // Použití druhé poloviny DMA bufferu
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3364      	adds	r3, #100	@ 0x64
 8000d92:	4a4d      	ldr	r2, [pc, #308]	@ (8000ec8 <HAL_ADC_ConvCpltCallback+0x158>)
 8000d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da0:	4b47      	ldr	r3, [pc, #284]	@ (8000ec0 <HAL_ADC_ConvCpltCallback+0x150>)
 8000da2:	edd3 7a00 	vldr	s15, [r3]
 8000da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000daa:	4b45      	ldr	r3, [pc, #276]	@ (8000ec0 <HAL_ADC_ConvCpltCallback+0x150>)
 8000dac:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 100];
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	3365      	adds	r3, #101	@ 0x65
 8000db4:	4a44      	ldr	r2, [pc, #272]	@ (8000ec8 <HAL_ADC_ConvCpltCallback+0x158>)
 8000db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dc2:	4b40      	ldr	r3, [pc, #256]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000dc4:	edd3 7a00 	vldr	s15, [r3]
 8000dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000dce:	edc3 7a00 	vstr	s15, [r3]
        i++;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 100; i++) {
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	2b63      	cmp	r3, #99	@ 0x63
 8000de2:	ddd4      	ble.n	8000d8e <HAL_ADC_ConvCpltCallback+0x1e>
    }
    adcValue /= 50.0f;
 8000de4:	4b36      	ldr	r3, [pc, #216]	@ (8000ec0 <HAL_ADC_ConvCpltCallback+0x150>)
 8000de6:	ed93 7a00 	vldr	s14, [r3]
 8000dea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000ecc <HAL_ADC_ConvCpltCallback+0x15c>
 8000dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df2:	4b33      	ldr	r3, [pc, #204]	@ (8000ec0 <HAL_ADC_ConvCpltCallback+0x150>)
 8000df4:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 8000df8:	4b32      	ldr	r3, [pc, #200]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000dfa:	ed93 7a00 	vldr	s14, [r3]
 8000dfe:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8000ecc <HAL_ADC_ConvCpltCallback+0x15c>
 8000e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000e08:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec0 <HAL_ADC_ConvCpltCallback+0x150>)
 8000e0e:	ed93 7a00 	vldr	s14, [r3]
 8000e12:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000ed0 <HAL_ADC_ConvCpltCallback+0x160>
 8000e16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e1a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000ed4 <HAL_ADC_ConvCpltCallback+0x164>
 8000e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e22:	edc7 7a06 	vstr	s15, [r7, #24]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8000e26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed8 <HAL_ADC_ConvCpltCallback+0x168>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e32:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000ed0 <HAL_ADC_ConvCpltCallback+0x160>
 8000e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e3a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000ed4 <HAL_ADC_ConvCpltCallback+0x164>
 8000e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e42:	edc7 7a05 	vstr	s15, [r7, #20]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8000e46:	4b25      	ldr	r3, [pc, #148]	@ (8000edc <HAL_ADC_ConvCpltCallback+0x16c>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	ee07 3a90 	vmov	s15, r3
 8000e4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e52:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000ed0 <HAL_ADC_ConvCpltCallback+0x160>
 8000e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e5a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000ed4 <HAL_ADC_ConvCpltCallback+0x164>
 8000e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e62:	edc7 7a04 	vstr	s15, [r7, #16]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8000e66:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e72:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000ee0 <HAL_ADC_ConvCpltCallback+0x170>
 8000e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e7a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000e7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <HAL_ADC_ConvCpltCallback+0x174>)
 8000e84:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <HAL_ADC_ConvCpltCallback+0x178>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4a16      	ldr	r2, [pc, #88]	@ (8000ee8 <HAL_ADC_ConvCpltCallback+0x178>)
 8000e90:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    int temperatureInt = (int)temperature;
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <HAL_ADC_ConvCpltCallback+0x174>)
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9c:	ee17 3a90 	vmov	r3, s15
 8000ea0:	60fb      	str	r3, [r7, #12]
    //SendInt2MTLB(2, &temperatureInt);

    int adcIn1Int = (int)adcIn1;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0x154>)
 8000ea4:	edd3 7a00 	vldr	s15, [r3]
 8000ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eac:	ee17 3a90 	vmov	r3, s15
 8000eb0:	60bb      	str	r3, [r7, #8]
    //SendInt2MTLB(23, &adcIn1Int);
}
 8000eb2:	bf00      	nop
 8000eb4:	3724      	adds	r7, #36	@ 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000e754 	.word	0x2000e754
 8000ec4:	2000e75c 	.word	0x2000e75c
 8000ec8:	2000e5c4 	.word	0x2000e5c4
 8000ecc:	42480000 	.word	0x42480000
 8000ed0:	45800000 	.word	0x45800000
 8000ed4:	40533333 	.word	0x40533333
 8000ed8:	1fff75a8 	.word	0x1fff75a8
 8000edc:	1fff75ca 	.word	0x1fff75ca
 8000ee0:	42a00000 	.word	0x42a00000
 8000ee4:	2000e758 	.word	0x2000e758
 8000ee8:	2000e760 	.word	0x2000e760

08000eec <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

	//SendInt2MTLB(23, &adcValueInt);
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 fc2e 	bl	8001766 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f895 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f7ff fc5f 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f12:	f7ff fc01 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 8000f16:	f000 fa2f 	bl	8001378 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000f1a:	f00a fa73 	bl	800b404 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000f1e:	f000 f9dd 	bl	80012dc <MX_TIM5_Init>
  MX_ADC1_Init();
 8000f22:	f7ff fae3 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f26:	f000 f98b 	bl	8001240 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000f2a:	f000 fb01 	bl	8001530 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8000f2e:	f000 fab1 	bl	8001494 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2180      	movs	r1, #128	@ 0x80
 8000f36:	4833      	ldr	r0, [pc, #204]	@ (8001004 <main+0x104>)
 8000f38:	f002 fde6 	bl	8003b08 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 8000f3c:	4832      	ldr	r0, [pc, #200]	@ (8001008 <main+0x108>)
 8000f3e:	f005 fd69 	bl	8006a14 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 8000f42:	4832      	ldr	r0, [pc, #200]	@ (800100c <main+0x10c>)
 8000f44:	f005 fcfe 	bl	8006944 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	e00d      	b.n	8000f6a <main+0x6a>
		dma[i] = i;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f58:	4a2d      	ldr	r2, [pc, #180]	@ (8001010 <main+0x110>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3301      	adds	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f70:	dbed      	blt.n	8000f4e <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 8000f72:	4a28      	ldr	r2, [pc, #160]	@ (8001014 <main+0x114>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	4828      	ldr	r0, [pc, #160]	@ (8001018 <main+0x118>)
 8000f78:	f002 fb4c 	bl	8003614 <HAL_DMA_RegisterCallback>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 8000f80:	4b22      	ldr	r3, [pc, #136]	@ (800100c <main+0x10c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f86:	4a25      	ldr	r2, [pc, #148]	@ (800101c <main+0x11c>)
 8000f88:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8000f8a:	4921      	ldr	r1, [pc, #132]	@ (8001010 <main+0x110>)
 8000f8c:	4a24      	ldr	r2, [pc, #144]	@ (8001020 <main+0x120>)
 8000f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f92:	4821      	ldr	r0, [pc, #132]	@ (8001018 <main+0x118>)
 8000f94:	f002 fa14 	bl	80033c0 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <main+0x10c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f9e:	4a21      	ldr	r2, [pc, #132]	@ (8001024 <main+0x124>)
 8000fa0:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <main+0x10c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8001028 <main+0x128>)
 8000faa:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 8000fac:	481f      	ldr	r0, [pc, #124]	@ (800102c <main+0x12c>)
 8000fae:	f005 fd31 	bl	8006a14 <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000fb2:	217f      	movs	r1, #127	@ 0x7f
 8000fb4:	481e      	ldr	r0, [pc, #120]	@ (8001030 <main+0x130>)
 8000fb6:	f001 ffb7 	bl	8002f28 <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 8000fba:	2032      	movs	r0, #50	@ 0x32
 8000fbc:	f000 fc48 	bl	8001850 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 8000fc0:	22c8      	movs	r2, #200	@ 0xc8
 8000fc2:	491c      	ldr	r1, [pc, #112]	@ (8001034 <main+0x134>)
 8000fc4:	481a      	ldr	r0, [pc, #104]	@ (8001030 <main+0x130>)
 8000fc6:	f000 ffc1 	bl	8001f4c <HAL_ADC_Start_DMA>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	70bb      	strb	r3, [r7, #2]

	comms_init();
 8000fce:	f7ff fcff 	bl	80009d0 <comms_init>
//
//		void * nazevpole2[255];
//		memset(nazevpole2, NULL, 255*sizeof(void *));


		comms_append_int32(21, 1, 1111);
 8000fd2:	f240 4257 	movw	r2, #1111	@ 0x457
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2015      	movs	r0, #21
 8000fda:	f7ff fd4f 	bl	8000a7c <comms_append_int32>
		comms_append_int32(22, 1, 2222);
 8000fde:	f640 02ae 	movw	r2, #2222	@ 0x8ae
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2016      	movs	r0, #22
 8000fe6:	f7ff fd49 	bl	8000a7c <comms_append_int32>
		comms_append_int32(23, 1, 3333);
 8000fea:	f640 5205 	movw	r2, #3333	@ 0xd05
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2017      	movs	r0, #23
 8000ff2:	f7ff fd43 	bl	8000a7c <comms_append_int32>
		comms_send();
 8000ff6:	f7ff fdb7 	bl	8000b68 <comms_send>

		//load_CPU();
		m2s_Process();
 8000ffa:	f7ff fdef 	bl	8000bdc <m2s_Process>
		comms_append_int32(21, 1, 1111);
 8000ffe:	bf00      	nop
 8001000:	e7e7      	b.n	8000fd2 <main+0xd2>
 8001002:	bf00      	nop
 8001004:	48000800 	.word	0x48000800
 8001008:	2000e7fc 	.word	0x2000e7fc
 800100c:	2000e7b0 	.word	0x2000e7b0
 8001010:	2000c684 	.word	0x2000c684
 8001014:	08000d3d 	.word	0x08000d3d
 8001018:	200001f0 	.word	0x200001f0
 800101c:	2000c674 	.word	0x2000c674
 8001020:	2000d624 	.word	0x2000d624
 8001024:	2000c680 	.word	0x2000c680
 8001028:	2000c678 	.word	0x2000c678
 800102c:	2000e764 	.word	0x2000e764
 8001030:	20000128 	.word	0x20000128
 8001034:	2000e5c4 	.word	0x2000e5c4

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b096      	sub	sp, #88	@ 0x58
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2244      	movs	r2, #68	@ 0x44
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f00b f840 	bl	800c0cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800105a:	2000      	movs	r0, #0
 800105c:	f003 ff66 	bl	8004f2c <HAL_PWREx_ControlVoltageScaling>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001066:	f000 f83a 	bl	80010de <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800106a:	2322      	movs	r3, #34	@ 0x22
 800106c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	2340      	movs	r3, #64	@ 0x40
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107c:	2302      	movs	r3, #2
 800107e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001080:	2302      	movs	r3, #2
 8001082:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001088:	231e      	movs	r3, #30
 800108a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108c:	2302      	movs	r3, #2
 800108e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001090:	2302      	movs	r3, #2
 8001092:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001094:	2302      	movs	r3, #2
 8001096:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4618      	mov	r0, r3
 800109e:	f004 f809 	bl	80050b4 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80010a8:	f000 f819 	bl	80010de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	2303      	movs	r3, #3
 80010b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	2105      	movs	r1, #5
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 fc0e 	bl	80058e8 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010d2:	f000 f804 	bl	80010de <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3758      	adds	r7, #88	@ 0x58
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010e2:	b672      	cpsid	i
}
 80010e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010e6:	bf00      	nop
 80010e8:	e7fd      	b.n	80010e6 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <HAL_MspInit+0x44>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001130 <HAL_MspInit+0x44>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <HAL_MspInit+0x44>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <HAL_MspInit+0x44>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110e:	4a08      	ldr	r2, [pc, #32]	@ (8001130 <HAL_MspInit+0x44>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001114:	6593      	str	r3, [r2, #88]	@ 0x58
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_MspInit+0x44>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <UsageFault_Handler+0x4>

0800115c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118a:	f000 fb41 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <DMA1_Channel1_IRQHandler+0x10>)
 800119a:	f002 f98c 	bl	80034b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000190 	.word	0x20000190

080011a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <DMA1_Channel2_IRQHandler+0x10>)
 80011ae:	f002 f982 	bl	80034b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001f0 	.word	0x200001f0

080011bc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <ADC1_IRQHandler+0x10>)
 80011c2:	f000 ff47 	bl	8002054 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000128 	.word	0x20000128

080011d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <TIM3_IRQHandler+0x10>)
 80011d6:	f005 fc8d 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000e764 	.word	0x2000e764

080011e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011ec:	f002 fcbe 	bl	8003b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <TIM6_DAC_IRQHandler+0x10>)
 80011fa:	f005 fc7b 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000e7fc 	.word	0x2000e7fc

08001208 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <OTG_FS_IRQHandler+0x10>)
 800120e:	f002 fe18 	bl	8003e42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000fe54 	.word	0x2000fe54

0800121c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <MX_TIM3_Init+0x94>)
 8001260:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <MX_TIM3_Init+0x98>)
 8001262:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <MX_TIM3_Init+0x94>)
 8001266:	2217      	movs	r2, #23
 8001268:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <MX_TIM3_Init+0x94>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001270:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <MX_TIM3_Init+0x94>)
 8001272:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001276:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <MX_TIM3_Init+0x94>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <MX_TIM3_Init+0x94>)
 8001280:	2280      	movs	r2, #128	@ 0x80
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001284:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <MX_TIM3_Init+0x94>)
 8001286:	f005 fb05 	bl	8006894 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001290:	f7ff ff25 	bl	80010de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001298:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	4619      	mov	r1, r3
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <MX_TIM3_Init+0x94>)
 80012a2:	f005 fd29 	bl	8006cf8 <HAL_TIM_ConfigClockSource>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012ac:	f7ff ff17 	bl	80010de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012b0:	2320      	movs	r3, #32
 80012b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_TIM3_Init+0x94>)
 80012be:	f005 ff41 	bl	8007144 <HAL_TIMEx_MasterConfigSynchronization>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012c8:	f7ff ff09 	bl	80010de <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000e764 	.word	0x2000e764
 80012d8:	40000400 	.word	0x40000400

080012dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <MX_TIM5_Init+0x94>)
 80012fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001374 <MX_TIM5_Init+0x98>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <MX_TIM5_Init+0x94>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <MX_TIM5_Init+0x94>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <MX_TIM5_Init+0x94>)
 800130e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001312:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_TIM5_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <MX_TIM5_Init+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001320:	4813      	ldr	r0, [pc, #76]	@ (8001370 <MX_TIM5_Init+0x94>)
 8001322:	f005 fab7 	bl	8006894 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800132c:	f7ff fed7 	bl	80010de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001334:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <MX_TIM5_Init+0x94>)
 800133e:	f005 fcdb 	bl	8006cf8 <HAL_TIM_ConfigClockSource>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001348:	f7ff fec9 	bl	80010de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_TIM5_Init+0x94>)
 800135a:	f005 fef3 	bl	8007144 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001364:	f7ff febb 	bl	80010de <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000e7b0 	.word	0x2000e7b0
 8001374:	40000c00 	.word	0x40000c00

08001378 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <MX_TIM6_Init+0x68>)
 800138a:	4a16      	ldr	r2, [pc, #88]	@ (80013e4 <MX_TIM6_Init+0x6c>)
 800138c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_TIM6_Init+0x68>)
 8001390:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001394:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_TIM6_Init+0x68>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 800139c:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <MX_TIM6_Init+0x68>)
 800139e:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80013a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_TIM6_Init+0x68>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013aa:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <MX_TIM6_Init+0x68>)
 80013ac:	f005 fa72 	bl	8006894 <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80013b6:	f7ff fe92 	bl	80010de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <MX_TIM6_Init+0x68>)
 80013c8:	f005 febc 	bl	8007144 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80013d2:	f7ff fe84 	bl	80010de <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000e7fc 	.word	0x2000e7fc
 80013e4:	40001000 	.word	0x40001000

080013e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a23      	ldr	r2, [pc, #140]	@ (8001484 <HAL_TIM_Base_MspInit+0x9c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d114      	bne.n	8001424 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fa:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <HAL_TIM_Base_MspInit+0xa0>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	4a22      	ldr	r2, [pc, #136]	@ (8001488 <HAL_TIM_Base_MspInit+0xa0>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6593      	str	r3, [r2, #88]	@ 0x58
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <HAL_TIM_Base_MspInit+0xa0>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	201d      	movs	r0, #29
 8001418:	f001 fef3 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800141c:	201d      	movs	r0, #29
 800141e:	f001 ff0c 	bl	800323a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001422:	e02a      	b.n	800147a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a18      	ldr	r2, [pc, #96]	@ (800148c <HAL_TIM_Base_MspInit+0xa4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d10c      	bne.n	8001448 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <HAL_TIM_Base_MspInit+0xa0>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	4a15      	ldr	r2, [pc, #84]	@ (8001488 <HAL_TIM_Base_MspInit+0xa0>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6593      	str	r3, [r2, #88]	@ 0x58
 800143a:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <HAL_TIM_Base_MspInit+0xa0>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
}
 8001446:	e018      	b.n	800147a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <HAL_TIM_Base_MspInit+0xa8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d113      	bne.n	800147a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <HAL_TIM_Base_MspInit+0xa0>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	4a0c      	ldr	r2, [pc, #48]	@ (8001488 <HAL_TIM_Base_MspInit+0xa0>)
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	6593      	str	r3, [r2, #88]	@ 0x58
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <HAL_TIM_Base_MspInit+0xa0>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2036      	movs	r0, #54	@ 0x36
 8001470:	f001 fec7 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001474:	2036      	movs	r0, #54	@ 0x36
 8001476:	f001 fee0 	bl	800323a <HAL_NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40000400 	.word	0x40000400
 8001488:	40021000 	.word	0x40021000
 800148c:	40000c00 	.word	0x40000c00
 8001490:	40001000 	.word	0x40001000

08001494 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001498:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 800149a:	4a23      	ldr	r2, [pc, #140]	@ (8001528 <MX_LPUART1_UART_Init+0x94>)
 800149c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014a0:	4a22      	ldr	r2, [pc, #136]	@ (800152c <MX_LPUART1_UART_Init+0x98>)
 80014a2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80014d6:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014dc:	4811      	ldr	r0, [pc, #68]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014de:	f005 fed7 	bl	8007290 <HAL_UART_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80014e8:	f7ff fdf9 	bl	80010de <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ec:	2100      	movs	r1, #0
 80014ee:	480d      	ldr	r0, [pc, #52]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 80014f0:	f006 fc6c 	bl	8007dcc <HAL_UARTEx_SetTxFifoThreshold>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014fa:	f7ff fdf0 	bl	80010de <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fe:	2100      	movs	r1, #0
 8001500:	4808      	ldr	r0, [pc, #32]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 8001502:	f006 fca1 	bl	8007e48 <HAL_UARTEx_SetRxFifoThreshold>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800150c:	f7ff fde7 	bl	80010de <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_LPUART1_UART_Init+0x90>)
 8001512:	f006 fc22 	bl	8007d5a <HAL_UARTEx_DisableFifoMode>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800151c:	f7ff fddf 	bl	80010de <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000e848 	.word	0x2000e848
 8001528:	40008000 	.word	0x40008000
 800152c:	00033324 	.word	0x00033324

08001530 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001534:	4b22      	ldr	r3, [pc, #136]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 8001536:	4a23      	ldr	r2, [pc, #140]	@ (80015c4 <MX_USART3_UART_Init+0x94>)
 8001538:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800153a:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800154e:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001566:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001572:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001578:	4811      	ldr	r0, [pc, #68]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 800157a:	f005 fe89 	bl	8007290 <HAL_UART_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001584:	f7ff fdab 	bl	80010de <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 800158c:	f006 fc1e 	bl	8007dcc <HAL_UARTEx_SetTxFifoThreshold>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001596:	f7ff fda2 	bl	80010de <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159a:	2100      	movs	r1, #0
 800159c:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 800159e:	f006 fc53 	bl	8007e48 <HAL_UARTEx_SetRxFifoThreshold>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015a8:	f7ff fd99 	bl	80010de <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	@ (80015c0 <MX_USART3_UART_Init+0x90>)
 80015ae:	f006 fbd4 	bl	8007d5a <HAL_UARTEx_DisableFifoMode>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80015b8:	f7ff fd91 	bl	80010de <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000e8dc 	.word	0x2000e8dc
 80015c4:	40004800 	.word	0x40004800

080015c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0b0      	sub	sp, #192	@ 0xc0
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e0:	f107 0318 	add.w	r3, r7, #24
 80015e4:	2294      	movs	r2, #148	@ 0x94
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00a fd6f 	bl	800c0cc <memset>
  if(uartHandle->Instance==LPUART1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a43      	ldr	r2, [pc, #268]	@ (8001700 <HAL_UART_MspInit+0x138>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d13e      	bne.n	8001676 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015f8:	2320      	movs	r3, #32
 80015fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	4618      	mov	r0, r3
 8001606:	f004 fc2d 	bl	8005e64 <HAL_RCCEx_PeriphCLKConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001610:	f7ff fd65 	bl	80010de <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001614:	4b3b      	ldr	r3, [pc, #236]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 8001616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001618:	4a3a      	ldr	r2, [pc, #232]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001620:	4b38      	ldr	r3, [pc, #224]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 8001622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800162c:	4b35      	ldr	r3, [pc, #212]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001630:	4a34      	ldr	r2, [pc, #208]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 8001632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001638:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001644:	f003 fd26 	bl	8005094 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001648:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800164c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001662:	2308      	movs	r3, #8
 8001664:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001668:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800166c:	4619      	mov	r1, r3
 800166e:	4826      	ldr	r0, [pc, #152]	@ (8001708 <HAL_UART_MspInit+0x140>)
 8001670:	f002 f8b8 	bl	80037e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001674:	e040      	b.n	80016f8 <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a24      	ldr	r2, [pc, #144]	@ (800170c <HAL_UART_MspInit+0x144>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d13b      	bne.n	80016f8 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001680:	2304      	movs	r3, #4
 8001682:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001684:	2300      	movs	r3, #0
 8001686:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001688:	f107 0318 	add.w	r3, r7, #24
 800168c:	4618      	mov	r0, r3
 800168e:	f004 fbe9 	bl	8005e64 <HAL_RCCEx_PeriphCLKConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001698:	f7ff fd21 	bl	80010de <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	4a18      	ldr	r2, [pc, #96]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 80016a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a8:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b8:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c0:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <HAL_UART_MspInit+0x13c>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016e6:	2307      	movs	r3, #7
 80016e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016f0:	4619      	mov	r1, r3
 80016f2:	4807      	ldr	r0, [pc, #28]	@ (8001710 <HAL_UART_MspInit+0x148>)
 80016f4:	f002 f876 	bl	80037e4 <HAL_GPIO_Init>
}
 80016f8:	bf00      	nop
 80016fa:	37c0      	adds	r7, #192	@ 0xc0
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40008000 	.word	0x40008000
 8001704:	40021000 	.word	0x40021000
 8001708:	48001800 	.word	0x48001800
 800170c:	40004800 	.word	0x40004800
 8001710:	48000c00 	.word	0x48000c00

08001714 <Reset_Handler>:
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopForever+0x2>
 8001718:	f7ff fd80 	bl	800121c <SystemInit>
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopForever+0x6>)
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopForever+0xa>)
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopForever+0xe>)
 8001722:	2300      	movs	r3, #0
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:
 8001726:	58d4      	ldr	r4, [r2, r3]
 8001728:	50c4      	str	r4, [r0, r3]
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:
 800172c:	18c4      	adds	r4, r0, r3
 800172e:	428c      	cmp	r4, r1
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopForever+0x12>)
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopForever+0x16>)
 8001736:	2300      	movs	r3, #0
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:
 800173e:	42a2      	cmp	r2, r4
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>
 8001742:	f00a fccb 	bl	800c0dc <__libc_init_array>
 8001746:	f7ff fbdb 	bl	8000f00 <main>

0800174a <LoopForever>:
 800174a:	e7fe      	b.n	800174a <LoopForever>
 800174c:	200a0000 	.word	0x200a0000
 8001750:	20000000 	.word	0x20000000
 8001754:	2000010c 	.word	0x2000010c
 8001758:	0800c220 	.word	0x0800c220
 800175c:	2000010c 	.word	0x2000010c
 8001760:	20010580 	.word	0x20010580

08001764 <CAN1_RX0_IRQHandler>:
 8001764:	e7fe      	b.n	8001764 <CAN1_RX0_IRQHandler>

08001766 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f001 fd3b 	bl	80031ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f80e 	bl	8001798 <HAL_InitTick>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e001      	b.n	800178c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001788:	f7ff fcb0 	bl	80010ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800178c:	79fb      	ldrb	r3, [r7, #7]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017a4:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <HAL_InitTick+0x6c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d023      	beq.n	80017f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_InitTick+0x70>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <HAL_InitTick+0x6c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 fd47 	bl	8003256 <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10f      	bne.n	80017ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d809      	bhi.n	80017e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017dc:	f001 fd11 	bl	8003202 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <HAL_InitTick+0x74>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e007      	b.n	80017f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e004      	b.n	80017f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	e001      	b.n	80017f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000008 	.word	0x20000008
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008
 8001834:	2000e970 	.word	0x2000e970

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2000e970 	.word	0x2000e970

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff ffee 	bl	8001838 <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001868:	d005      	beq.n	8001876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_Delay+0x44>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001876:	bf00      	nop
 8001878:	f7ff ffde 	bl	8001838 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8f7      	bhi.n	8001878 <HAL_Delay+0x28>
  {
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008

08001898 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	609a      	str	r2, [r3, #8]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	609a      	str	r2, [r3, #8]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3360      	adds	r3, #96	@ 0x60
 8001912:	461a      	mov	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <LL_ADC_SetOffset+0x44>)
 8001922:	4013      	ands	r3, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	4313      	orrs	r3, r2
 8001930:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001938:	bf00      	nop
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	03fff000 	.word	0x03fff000

08001948 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3360      	adds	r3, #96	@ 0x60
 8001956:	461a      	mov	r2, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3360      	adds	r3, #96	@ 0x60
 8001984:	461a      	mov	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	431a      	orrs	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800199e:	bf00      	nop
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	615a      	str	r2, [r3, #20]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b087      	sub	sp, #28
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3330      	adds	r3, #48	@ 0x30
 8001a06:	461a      	mov	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	4413      	add	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	211f      	movs	r1, #31
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	401a      	ands	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	0e9b      	lsrs	r3, r3, #26
 8001a2e:	f003 011f 	and.w	r1, r3, #31
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3314      	adds	r3, #20
 8001a84:	461a      	mov	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	0e5b      	lsrs	r3, r3, #25
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	4413      	add	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	0d1b      	lsrs	r3, r3, #20
 8001a9c:	f003 031f 	and.w	r3, r3, #31
 8001aa0:	2107      	movs	r1, #7
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	0d1b      	lsrs	r3, r3, #20
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0318 	and.w	r3, r3, #24
 8001aee:	4908      	ldr	r1, [pc, #32]	@ (8001b10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001af0:	40d9      	lsrs	r1, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	400b      	ands	r3, r1
 8001af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afa:	431a      	orrs	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	0007ffff 	.word	0x0007ffff

08001b14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6093      	str	r3, [r2, #8]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b4c:	d101      	bne.n	8001b52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b9c:	d101      	bne.n	8001ba2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc4:	f043 0201 	orr.w	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001be8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bec:	f043 0202 	orr.w	r2, r3, #2
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <LL_ADC_IsEnabled+0x18>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <LL_ADC_IsEnabled+0x1a>
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d101      	bne.n	8001c3e <LL_ADC_IsDisableOngoing+0x18>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <LL_ADC_IsDisableOngoing+0x1a>
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c60:	f043 0204 	orr.w	r2, r3, #4
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d101      	bne.n	8001c8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d101      	bne.n	8001cb2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e129      	b.n	8001f2e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7fe fc75 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff19 	bl	8001b38 <LL_ADC_IsDeepPowerDownEnabled>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d004      	beq.n	8001d16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff feff 	bl	8001b14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff34 	bl	8001b88 <LL_ADC_IsInternalRegulatorEnabled>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d115      	bne.n	8001d52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff18 	bl	8001b60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d30:	4b81      	ldr	r3, [pc, #516]	@ (8001f38 <HAL_ADC_Init+0x278>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	099b      	lsrs	r3, r3, #6
 8001d36:	4a81      	ldr	r2, [pc, #516]	@ (8001f3c <HAL_ADC_Init+0x27c>)
 8001d38:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	3301      	adds	r3, #1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d44:	e002      	b.n	8001d4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f9      	bne.n	8001d46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff16 	bl	8001b88 <LL_ADC_IsInternalRegulatorEnabled>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10d      	bne.n	8001d7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d66:	f043 0210 	orr.w	r2, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	f043 0201 	orr.w	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff76 	bl	8001c74 <LL_ADC_REG_IsConversionOngoing>
 8001d88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f040 80c2 	bne.w	8001f1c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 80be 	bne.w	8001f1c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001da8:	f043 0202 	orr.w	r2, r3, #2
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff23 	bl	8001c00 <LL_ADC_IsEnabled>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dc0:	485f      	ldr	r0, [pc, #380]	@ (8001f40 <HAL_ADC_Init+0x280>)
 8001dc2:	f7ff ff1d 	bl	8001c00 <LL_ADC_IsEnabled>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	485c      	ldr	r0, [pc, #368]	@ (8001f44 <HAL_ADC_Init+0x284>)
 8001dd4:	f7ff fd60 	bl	8001898 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e5b      	ldrb	r3, [r3, #25]
 8001ddc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001de2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001de8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d106      	bne.n	8001e14 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	045b      	lsls	r3, r3, #17
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e20:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	4b44      	ldr	r3, [pc, #272]	@ (8001f48 <HAL_ADC_Init+0x288>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff26 	bl	8001c9a <LL_ADC_INJ_IsConversionOngoing>
 8001e4e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d140      	bne.n	8001ed8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d13d      	bne.n	8001ed8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
 8001e64:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e66:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e6e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e7e:	f023 0306 	bic.w	r3, r3, #6
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d118      	bne.n	8001ec8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001eac:	4311      	orrs	r1, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	e007      	b.n	8001ed8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10c      	bne.n	8001efa <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f023 010f 	bic.w	r1, r3, #15
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	1e5a      	subs	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ef8:	e007      	b.n	8001f0a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 020f 	bic.w	r2, r2, #15
 8001f08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0e:	f023 0303 	bic.w	r3, r3, #3
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f1a:	e007      	b.n	8001f2c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	f043 0210 	orr.w	r2, r3, #16
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	053e2d63 	.word	0x053e2d63
 8001f40:	50040000 	.word	0x50040000
 8001f44:	50040300 	.word	0x50040300
 8001f48:	fff0c007 	.word	0xfff0c007

08001f4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fe89 	bl	8001c74 <LL_ADC_REG_IsConversionOngoing>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d167      	bne.n	8002038 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Start_DMA+0x2a>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e063      	b.n	800203e <HAL_ADC_Start_DMA+0xf2>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fe2c 	bl	8002bdc <ADC_Enable>
 8001f84:	4603      	mov	r3, r0
 8001f86:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d14f      	bne.n	800202e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb2:	f023 0206 	bic.w	r2, r3, #6
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fba:	e002      	b.n	8001fc2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc6:	4a20      	ldr	r2, [pc, #128]	@ (8002048 <HAL_ADC_Start_DMA+0xfc>)
 8001fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fce:	4a1f      	ldr	r2, [pc, #124]	@ (800204c <HAL_ADC_Start_DMA+0x100>)
 8001fd0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <HAL_ADC_Start_DMA+0x104>)
 8001fd8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	221c      	movs	r2, #28
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0210 	orr.w	r2, r2, #16
 8001ff8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0201 	orr.w	r2, r2, #1
 8002008:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3340      	adds	r3, #64	@ 0x40
 8002014:	4619      	mov	r1, r3
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f001 f9d1 	bl	80033c0 <HAL_DMA_Start_IT>
 800201e:	4603      	mov	r3, r0
 8002020:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fe10 	bl	8001c4c <LL_ADC_REG_StartConversion>
 800202c:	e006      	b.n	800203c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002036:	e001      	b.n	800203c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002038:	2302      	movs	r3, #2
 800203a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800203c:	7dfb      	ldrb	r3, [r7, #23]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	08002da7 	.word	0x08002da7
 800204c:	08002e7f 	.word	0x08002e7f
 8002050:	08002e9b 	.word	0x08002e9b

08002054 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d017      	beq.n	80020aa <HAL_ADC_IRQHandler+0x56>
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d012      	beq.n	80020aa <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 ffcb 	bl	8003038 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2202      	movs	r2, #2
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <HAL_ADC_IRQHandler+0x6a>
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d05e      	beq.n	8002186 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d059      	beq.n	8002186 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d105      	bne.n	80020ea <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fc6e 	bl	80019d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d03e      	beq.n	8002178 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d135      	bne.n	8002178 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b08      	cmp	r3, #8
 8002118:	d12e      	bne.n	8002178 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fda8 	bl	8001c74 <LL_ADC_REG_IsConversionOngoing>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11a      	bne.n	8002160 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 020c 	bic.w	r2, r2, #12
 8002138:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d112      	bne.n	8002178 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	659a      	str	r2, [r3, #88]	@ 0x58
 800215e:	e00b      	b.n	8002178 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	f043 0210 	orr.w	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7fe fdf9 	bl	8000d70 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	220c      	movs	r2, #12
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <HAL_ADC_IRQHandler+0x146>
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d072      	beq.n	800228a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d06d      	beq.n	800228a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021be:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fc3f 	bl	8001a4e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80021d0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fbfa 	bl	80019d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021dc:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d047      	beq.n	800227c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d007      	beq.n	8002206 <HAL_ADC_IRQHandler+0x1b2>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d03f      	beq.n	800227c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d13a      	bne.n	800227c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002210:	2b40      	cmp	r3, #64	@ 0x40
 8002212:	d133      	bne.n	800227c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d12e      	bne.n	800227c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fd39 	bl	8001c9a <LL_ADC_INJ_IsConversionOngoing>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d11a      	bne.n	8002264 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800223c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002242:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d112      	bne.n	800227c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	659a      	str	r2, [r3, #88]	@ 0x58
 8002262:	e00b      	b.n	800227c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002268:	f043 0210 	orr.w	r2, r3, #16
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 feb3 	bl	8002fe8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2260      	movs	r2, #96	@ 0x60
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002290:	2b00      	cmp	r3, #0
 8002292:	d011      	beq.n	80022b8 <HAL_ADC_IRQHandler+0x264>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00c      	beq.n	80022b8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f886 	bl	80023bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2280      	movs	r2, #128	@ 0x80
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d012      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x294>
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00d      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fe99 	bl	8003010 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d012      	beq.n	8002318 <HAL_ADC_IRQHandler+0x2c4>
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fe8b 	bl	8003024 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002316:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d02a      	beq.n	8002378 <HAL_ADC_IRQHandler+0x324>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d025      	beq.n	8002378 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002334:	2301      	movs	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	e008      	b.n	800234c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002348:	2301      	movs	r3, #1
 800234a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10e      	bne.n	8002370 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	f043 0202 	orr.w	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f830 	bl	80023d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2210      	movs	r2, #16
 8002376:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237e:	2b00      	cmp	r3, #0
 8002380:	d018      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x360>
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239c:	f043 0208 	orr.w	r2, r3, #8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ac:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fe24 	bl	8002ffc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0b6      	sub	sp, #216	@ 0xd8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x22>
 8002402:	2302      	movs	r3, #2
 8002404:	e3d5      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x7ce>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fc2e 	bl	8001c74 <LL_ADC_REG_IsConversionOngoing>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 83ba 	bne.w	8002b94 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b05      	cmp	r3, #5
 800242e:	d824      	bhi.n	800247a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	3b02      	subs	r3, #2
 8002436:	2b03      	cmp	r3, #3
 8002438:	d81b      	bhi.n	8002472 <HAL_ADC_ConfigChannel+0x8e>
 800243a:	a201      	add	r2, pc, #4	@ (adr r2, 8002440 <HAL_ADC_ConfigChannel+0x5c>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	08002451 	.word	0x08002451
 8002444:	08002459 	.word	0x08002459
 8002448:	08002461 	.word	0x08002461
 800244c:	08002469 	.word	0x08002469
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002450:	230c      	movs	r3, #12
 8002452:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002456:	e010      	b.n	800247a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002458:	2312      	movs	r3, #18
 800245a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800245e:	e00c      	b.n	800247a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002460:	2318      	movs	r3, #24
 8002462:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002466:	e008      	b.n	800247a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002468:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800246c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002470:	e003      	b.n	800247a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002472:	2306      	movs	r3, #6
 8002474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002478:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002488:	f7ff fab5 	bl	80019f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fbef 	bl	8001c74 <LL_ADC_REG_IsConversionOngoing>
 8002496:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fbfb 	bl	8001c9a <LL_ADC_INJ_IsConversionOngoing>
 80024a4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 81bf 	bne.w	8002830 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 81ba 	bne.w	8002830 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024c4:	d10f      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	4619      	mov	r1, r3
 80024d2:	f7ff facf 	bl	8001a74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fa63 	bl	80019aa <LL_ADC_SetSamplingTimeCommonConfig>
 80024e4:	e00e      	b.n	8002504 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	461a      	mov	r2, r3
 80024f4:	f7ff fabe 	bl	8001a74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fa53 	bl	80019aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	08db      	lsrs	r3, r3, #3
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b04      	cmp	r3, #4
 8002524:	d00a      	beq.n	800253c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6919      	ldr	r1, [r3, #16]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002536:	f7ff f9e3 	bl	8001900 <LL_ADC_SetOffset>
 800253a:	e179      	b.n	8002830 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fa00 	bl	8001948 <LL_ADC_GetOffsetChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x184>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff f9f5 	bl	8001948 <LL_ADC_GetOffsetChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	f003 021f 	and.w	r2, r3, #31
 8002566:	e01e      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1c2>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff f9ea 	bl	8001948 <LL_ADC_GetOffsetChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800258a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800258e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002596:	2320      	movs	r3, #32
 8002598:	e004      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800259a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <HAL_ADC_ConfigChannel+0x1da>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0e9b      	lsrs	r3, r3, #26
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	e018      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x20c>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80025d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80025da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e004      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80025e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d106      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff f9b9 	bl	8001974 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2101      	movs	r1, #1
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f99d 	bl	8001948 <LL_ADC_GetOffsetChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <HAL_ADC_ConfigChannel+0x24a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2101      	movs	r1, #1
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f992 	bl	8001948 <LL_ADC_GetOffsetChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	0e9b      	lsrs	r3, r3, #26
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	e01e      	b.n	800266c <HAL_ADC_ConfigChannel+0x288>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2101      	movs	r1, #1
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f987 	bl	8001948 <LL_ADC_GetOffsetChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800264c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002650:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002654:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800265c:	2320      	movs	r3, #32
 800265e:	e004      	b.n	800266a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002660:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x2a0>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	e018      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x2d2>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002698:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800269c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80026a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e004      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80026ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d106      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	2101      	movs	r1, #1
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f956 	bl	8001974 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2102      	movs	r1, #2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f93a 	bl	8001948 <LL_ADC_GetOffsetChannel>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x310>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2102      	movs	r1, #2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff f92f 	bl	8001948 <LL_ADC_GetOffsetChannel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	0e9b      	lsrs	r3, r3, #26
 80026ee:	f003 021f 	and.w	r2, r3, #31
 80026f2:	e01e      	b.n	8002732 <HAL_ADC_ConfigChannel+0x34e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2102      	movs	r1, #2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f924 	bl	8001948 <LL_ADC_GetOffsetChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002712:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002716:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800271a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002722:	2320      	movs	r3, #32
 8002724:	e004      	b.n	8002730 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002726:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <HAL_ADC_ConfigChannel+0x366>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	e014      	b.n	8002774 <HAL_ADC_ConfigChannel+0x390>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002758:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800275a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800275e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e004      	b.n	8002774 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800276a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002774:	429a      	cmp	r2, r3
 8002776:	d106      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	2102      	movs	r1, #2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f8f7 	bl	8001974 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2103      	movs	r1, #3
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff f8db 	bl	8001948 <LL_ADC_GetOffsetChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x3ce>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2103      	movs	r1, #3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff f8d0 	bl	8001948 <LL_ADC_GetOffsetChannel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	0e9b      	lsrs	r3, r3, #26
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	e017      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x3fe>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2103      	movs	r1, #3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f8c5 	bl	8001948 <LL_ADC_GetOffsetChannel>
 80027be:	4603      	mov	r3, r0
 80027c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80027ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027cc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80027ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80027d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x416>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	0e9b      	lsrs	r3, r3, #26
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	e011      	b.n	800281e <HAL_ADC_ConfigChannel+0x43a>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002808:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800280a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800280c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e003      	b.n	800281e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002816:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800281e:	429a      	cmp	r2, r3
 8002820:	d106      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	2103      	movs	r1, #3
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f8a2 	bl	8001974 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f9e3 	bl	8001c00 <LL_ADC_IsEnabled>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	f040 813f 	bne.w	8002ac0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	461a      	mov	r2, r3
 8002850:	f7ff f93c 	bl	8001acc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a8e      	ldr	r2, [pc, #568]	@ (8002a94 <HAL_ADC_ConfigChannel+0x6b0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	f040 8130 	bne.w	8002ac0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x4a4>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	3301      	adds	r3, #1
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2b09      	cmp	r3, #9
 800287e:	bf94      	ite	ls
 8002880:	2301      	movls	r3, #1
 8002882:	2300      	movhi	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e019      	b.n	80028bc <HAL_ADC_ConfigChannel+0x4d8>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002898:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800289a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e003      	b.n	80028ac <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80028a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2b09      	cmp	r3, #9
 80028b4:	bf94      	ite	ls
 80028b6:	2301      	movls	r3, #1
 80028b8:	2300      	movhi	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d079      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x4f8>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0e9b      	lsrs	r3, r3, #26
 80028d2:	3301      	adds	r3, #1
 80028d4:	069b      	lsls	r3, r3, #26
 80028d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028da:	e015      	b.n	8002908 <HAL_ADC_ConfigChannel+0x524>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80028ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80028ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e003      	b.n	8002900 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80028f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	3301      	adds	r3, #1
 8002902:	069b      	lsls	r3, r3, #26
 8002904:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x544>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	3301      	adds	r3, #1
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	e017      	b.n	8002958 <HAL_ADC_ConfigChannel+0x574>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002938:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800293a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002940:	2320      	movs	r3, #32
 8002942:	e003      	b.n	800294c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	ea42 0103 	orr.w	r1, r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_ADC_ConfigChannel+0x59a>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	3301      	adds	r3, #1
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	051b      	lsls	r3, r3, #20
 800297c:	e018      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x5cc>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800298c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002996:	2320      	movs	r3, #32
 8002998:	e003      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800299a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b0:	430b      	orrs	r3, r1
 80029b2:	e080      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x5ec>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	3301      	adds	r3, #1
 80029c8:	069b      	lsls	r3, r3, #26
 80029ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ce:	e015      	b.n	80029fc <HAL_ADC_ConfigChannel+0x618>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80029e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80029e8:	2320      	movs	r3, #32
 80029ea:	e003      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80029ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	069b      	lsls	r3, r3, #26
 80029f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x638>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	e017      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x668>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	61bb      	str	r3, [r7, #24]
  return result;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	ea42 0103 	orr.w	r1, r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10d      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x694>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0e9b      	lsrs	r3, r3, #26
 8002a62:	3301      	adds	r3, #1
 8002a64:	f003 021f 	and.w	r2, r3, #31
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3b1e      	subs	r3, #30
 8002a70:	051b      	lsls	r3, r3, #20
 8002a72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	e01d      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x6d0>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	60fb      	str	r3, [r7, #12]
  return result;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002a90:	2320      	movs	r3, #32
 8002a92:	e005      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x6bc>
 8002a94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 021f 	and.w	r2, r3, #31
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b1e      	subs	r3, #30
 8002aae:	051b      	lsls	r3, r3, #20
 8002ab0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe ffda 	bl	8001a74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <HAL_ADC_ConfigChannel+0x7d8>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d06c      	beq.n	8002ba6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002acc:	483c      	ldr	r0, [pc, #240]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ace:	f7fe ff09 	bl	80018e4 <LL_ADC_GetCommonPathInternalCh>
 8002ad2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a3a      	ldr	r2, [pc, #232]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d127      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ae0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ae4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d121      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a35      	ldr	r2, [pc, #212]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d157      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002afa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002afe:	4619      	mov	r1, r3
 8002b00:	482f      	ldr	r0, [pc, #188]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b02:	f7fe fedc 	bl	80018be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b06:	4b31      	ldr	r3, [pc, #196]	@ (8002bcc <HAL_ADC_ConfigChannel+0x7e8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	099b      	lsrs	r3, r3, #6
 8002b0c:	4a30      	ldr	r2, [pc, #192]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	099b      	lsrs	r3, r3, #6
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b20:	e002      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f9      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b2e:	e03a      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a27      	ldr	r2, [pc, #156]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d113      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10d      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d12a      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4819      	ldr	r0, [pc, #100]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b5c:	f7fe feaf 	bl	80018be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b60:	e021      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d11c      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d116      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a12      	ldr	r2, [pc, #72]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d111      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480c      	ldr	r0, [pc, #48]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b8e:	f7fe fe96 	bl	80018be <LL_ADC_SetCommonPathInternalCh>
 8002b92:	e008      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002bae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	37d8      	adds	r7, #216	@ 0xd8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	80080000 	.word	0x80080000
 8002bc0:	50040300 	.word	0x50040300
 8002bc4:	c7520000 	.word	0xc7520000
 8002bc8:	50040000 	.word	0x50040000
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	053e2d63 	.word	0x053e2d63
 8002bd4:	cb840000 	.word	0xcb840000
 8002bd8:	80000001 	.word	0x80000001

08002bdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff f807 	bl	8001c00 <LL_ADC_IsEnabled>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d169      	bne.n	8002ccc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	4b36      	ldr	r3, [pc, #216]	@ (8002cd8 <ADC_Enable+0xfc>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e055      	b.n	8002cce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe ffc2 	bl	8001bb0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c2c:	482b      	ldr	r0, [pc, #172]	@ (8002cdc <ADC_Enable+0x100>)
 8002c2e:	f7fe fe59 	bl	80018e4 <LL_ADC_GetCommonPathInternalCh>
 8002c32:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ce0 <ADC_Enable+0x104>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	099b      	lsrs	r3, r3, #6
 8002c42:	4a28      	ldr	r2, [pc, #160]	@ (8002ce4 <ADC_Enable+0x108>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c56:	e002      	b.n	8002c5e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f9      	bne.n	8002c58 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c64:	f7fe fde8 	bl	8001838 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c6a:	e028      	b.n	8002cbe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe ffc5 	bl	8001c00 <LL_ADC_IsEnabled>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d104      	bne.n	8002c86 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe ff95 	bl	8001bb0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c86:	f7fe fdd7 	bl	8001838 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d914      	bls.n	8002cbe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d00d      	beq.n	8002cbe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca6:	f043 0210 	orr.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e007      	b.n	8002cce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d1cf      	bne.n	8002c6c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	8000003f 	.word	0x8000003f
 8002cdc:	50040300 	.word	0x50040300
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	053e2d63 	.word	0x053e2d63

08002ce8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe ff96 	bl	8001c26 <LL_ADC_IsDisableOngoing>
 8002cfa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe ff7d 	bl	8001c00 <LL_ADC_IsEnabled>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d047      	beq.n	8002d9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d144      	bne.n	8002d9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030d 	and.w	r3, r3, #13
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d10c      	bne.n	8002d3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe ff57 	bl	8001bd8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2203      	movs	r2, #3
 8002d30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d32:	f7fe fd81 	bl	8001838 <HAL_GetTick>
 8002d36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d38:	e029      	b.n	8002d8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3e:	f043 0210 	orr.w	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4a:	f043 0201 	orr.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e023      	b.n	8002d9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d56:	f7fe fd6f 	bl	8001838 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d914      	bls.n	8002d8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	f043 0210 	orr.w	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d82:	f043 0201 	orr.w	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e007      	b.n	8002d9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1dc      	bne.n	8002d56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d14b      	bne.n	8002e58 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d021      	beq.n	8002e1e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fdf6 	bl	80019d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d032      	beq.n	8002e50 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d12b      	bne.n	8002e50 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d11f      	bne.n	8002e50 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e1c:	e018      	b.n	8002e50 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d111      	bne.n	8002e50 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e48:	f043 0201 	orr.w	r2, r3, #1
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7fd ff8d 	bl	8000d70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e56:	e00e      	b.n	8002e76 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff fab3 	bl	80023d0 <HAL_ADC_ErrorCallback>
}
 8002e6a:	e004      	b.n	8002e76 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7fe f82d 	bl	8000eec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff fa85 	bl	80023d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <LL_ADC_StartCalibration>:
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002ee0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_IsCalibrationOnGoing>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f14:	d101      	bne.n	8002f1a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADCEx_Calibration_Start+0x1c>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e04d      	b.n	8002fe0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fecb 	bl	8002ce8 <ADC_Disable>
 8002f52:	4603      	mov	r3, r0
 8002f54:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d136      	bne.n	8002fca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f64:	f023 0302 	bic.w	r3, r3, #2
 8002f68:	f043 0202 	orr.w	r2, r3, #2
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6839      	ldr	r1, [r7, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ffa9 	bl	8002ece <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f7c:	e014      	b.n	8002fa8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	3301      	adds	r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002f8a:	d30d      	bcc.n	8002fa8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	f023 0312 	bic.w	r3, r3, #18
 8002f94:	f043 0210 	orr.w	r2, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e01b      	b.n	8002fe0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ffa7 	bl	8002f00 <LL_ADC_IsCalibrationOnGoing>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e2      	bne.n	8002f7e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbc:	f023 0303 	bic.w	r3, r3, #3
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fc8:	e005      	b.n	8002fd6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fce:	f043 0210 	orr.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800305c:	4b0c      	ldr	r3, [pc, #48]	@ (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003068:	4013      	ands	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800307c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307e:	4a04      	ldr	r2, [pc, #16]	@ (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	60d3      	str	r3, [r2, #12]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003098:	4b04      	ldr	r3, [pc, #16]	@ (80030ac <__NVIC_GetPriorityGrouping+0x18>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	f003 0307 	and.w	r3, r3, #7
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	db0b      	blt.n	80030da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	f003 021f 	and.w	r2, r3, #31
 80030c8:	4907      	ldr	r1, [pc, #28]	@ (80030e8 <__NVIC_EnableIRQ+0x38>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2001      	movs	r0, #1
 80030d2:	fa00 f202 	lsl.w	r2, r0, r2
 80030d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000e100 	.word	0xe000e100

080030ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	db0a      	blt.n	8003116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	490c      	ldr	r1, [pc, #48]	@ (8003138 <__NVIC_SetPriority+0x4c>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	440b      	add	r3, r1
 8003110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003114:	e00a      	b.n	800312c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4908      	ldr	r1, [pc, #32]	@ (800313c <__NVIC_SetPriority+0x50>)
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	3b04      	subs	r3, #4
 8003124:	0112      	lsls	r2, r2, #4
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	440b      	add	r3, r1
 800312a:	761a      	strb	r2, [r3, #24]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000e100 	.word	0xe000e100
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	@ 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f1c3 0307 	rsb	r3, r3, #7
 800315a:	2b04      	cmp	r3, #4
 800315c:	bf28      	it	cs
 800315e:	2304      	movcs	r3, #4
 8003160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3304      	adds	r3, #4
 8003166:	2b06      	cmp	r3, #6
 8003168:	d902      	bls.n	8003170 <NVIC_EncodePriority+0x30>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3b03      	subs	r3, #3
 800316e:	e000      	b.n	8003172 <NVIC_EncodePriority+0x32>
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43da      	mvns	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	401a      	ands	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003188:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	43d9      	mvns	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	4313      	orrs	r3, r2
         );
}
 800319a:	4618      	mov	r0, r3
 800319c:	3724      	adds	r7, #36	@ 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031b8:	d301      	bcc.n	80031be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00f      	b.n	80031de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031be:	4a0a      	ldr	r2, [pc, #40]	@ (80031e8 <SysTick_Config+0x40>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c6:	210f      	movs	r1, #15
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031cc:	f7ff ff8e 	bl	80030ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d0:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <SysTick_Config+0x40>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d6:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <SysTick_Config+0x40>)
 80031d8:	2207      	movs	r2, #7
 80031da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	e000e010 	.word	0xe000e010

080031ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff29 	bl	800304c <__NVIC_SetPriorityGrouping>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003214:	f7ff ff3e 	bl	8003094 <__NVIC_GetPriorityGrouping>
 8003218:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f7ff ff8e 	bl	8003140 <NVIC_EncodePriority>
 8003224:	4602      	mov	r2, r0
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff5d 	bl	80030ec <__NVIC_SetPriority>
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	4603      	mov	r3, r0
 8003242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff31 	bl	80030b0 <__NVIC_EnableIRQ>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ffa2 	bl	80031a8 <SysTick_Config>
 8003264:	4603      	mov	r3, r0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e08d      	b.n	800339e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	4b47      	ldr	r3, [pc, #284]	@ (80033a8 <HAL_DMA_Init+0x138>)
 800328a:	429a      	cmp	r2, r3
 800328c:	d80f      	bhi.n	80032ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4b45      	ldr	r3, [pc, #276]	@ (80033ac <HAL_DMA_Init+0x13c>)
 8003296:	4413      	add	r3, r2
 8003298:	4a45      	ldr	r2, [pc, #276]	@ (80033b0 <HAL_DMA_Init+0x140>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	009a      	lsls	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a42      	ldr	r2, [pc, #264]	@ (80033b4 <HAL_DMA_Init+0x144>)
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80032ac:	e00e      	b.n	80032cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	4b40      	ldr	r3, [pc, #256]	@ (80033b8 <HAL_DMA_Init+0x148>)
 80032b6:	4413      	add	r3, r2
 80032b8:	4a3d      	ldr	r2, [pc, #244]	@ (80033b0 <HAL_DMA_Init+0x140>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	009a      	lsls	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a3c      	ldr	r2, [pc, #240]	@ (80033bc <HAL_DMA_Init+0x14c>)
 80032ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80032e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f9fe 	bl	8003720 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800332c:	d102      	bne.n	8003334 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003348:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d010      	beq.n	8003374 <HAL_DMA_Init+0x104>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d80c      	bhi.n	8003374 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa1e 	bl	800379c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	e008      	b.n	8003386 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40020407 	.word	0x40020407
 80033ac:	bffdfff8 	.word	0xbffdfff8
 80033b0:	cccccccd 	.word	0xcccccccd
 80033b4:	40020000 	.word	0x40020000
 80033b8:	bffdfbf8 	.word	0xbffdfbf8
 80033bc:	40020400 	.word	0x40020400

080033c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_DMA_Start_IT+0x20>
 80033dc:	2302      	movs	r3, #2
 80033de:	e066      	b.n	80034ae <HAL_DMA_Start_IT+0xee>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d155      	bne.n	80034a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f943 	bl	80036a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 020e 	orr.w	r2, r2, #14
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	e00f      	b.n	8003458 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0204 	bic.w	r2, r2, #4
 8003446:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 020a 	orr.w	r2, r2, #10
 8003456:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003470:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003474:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800348c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e005      	b.n	80034ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
 80034aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	f003 031c 	and.w	r3, r3, #28
 80034d6:	2204      	movs	r2, #4
 80034d8:	409a      	lsls	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d026      	beq.n	8003530 <HAL_DMA_IRQHandler+0x7a>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d021      	beq.n	8003530 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d107      	bne.n	800350a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0204 	bic.w	r2, r2, #4
 8003508:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	f003 021c 	and.w	r2, r3, #28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	2104      	movs	r1, #4
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	2b00      	cmp	r3, #0
 8003524:	d071      	beq.n	800360a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800352e:	e06c      	b.n	800360a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003534:	f003 031c 	and.w	r3, r3, #28
 8003538:	2202      	movs	r2, #2
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d02e      	beq.n	80035a2 <HAL_DMA_IRQHandler+0xec>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d029      	beq.n	80035a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10b      	bne.n	8003574 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 020a 	bic.w	r2, r2, #10
 800356a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003578:	f003 021c 	and.w	r2, r3, #28
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	2102      	movs	r1, #2
 8003582:	fa01 f202 	lsl.w	r2, r1, r2
 8003586:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d038      	beq.n	800360a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80035a0:	e033      	b.n	800360a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	f003 031c 	and.w	r3, r3, #28
 80035aa:	2208      	movs	r2, #8
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d02a      	beq.n	800360c <HAL_DMA_IRQHandler+0x156>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d025      	beq.n	800360c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 020e 	bic.w	r2, r2, #14
 80035ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d4:	f003 021c 	and.w	r2, r3, #28
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f202 	lsl.w	r2, r1, r2
 80035e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800360a:	bf00      	nop
 800360c:	bf00      	nop
}
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	460b      	mov	r3, r1
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_DMA_RegisterCallback+0x20>
 8003630:	2302      	movs	r3, #2
 8003632:	e031      	b.n	8003698 <HAL_DMA_RegisterCallback+0x84>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d120      	bne.n	800368a <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003648:	7afb      	ldrb	r3, [r7, #11]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d81a      	bhi.n	8003684 <HAL_DMA_RegisterCallback+0x70>
 800364e:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <HAL_DMA_RegisterCallback+0x40>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003665 	.word	0x08003665
 8003658:	0800366d 	.word	0x0800366d
 800365c:	08003675 	.word	0x08003675
 8003660:	0800367d 	.word	0x0800367d
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800366a:	e010      	b.n	800368e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8003672:	e00c      	b.n	800368e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 800367a:	e008      	b.n	800368e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003682:	e004      	b.n	800368e <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	75fb      	strb	r3, [r7, #23]
        break;
 8003688:	e001      	b.n	800368e <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003696:	7dfb      	ldrb	r3, [r7, #23]
}
 8003698:	4618      	mov	r0, r3
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036cc:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	f003 021c 	and.w	r2, r3, #28
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	2101      	movs	r1, #1
 80036dc:	fa01 f202 	lsl.w	r2, r1, r2
 80036e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d108      	bne.n	8003704 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003702:	e007      	b.n	8003714 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	4b17      	ldr	r3, [pc, #92]	@ (800378c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003730:	429a      	cmp	r2, r3
 8003732:	d80a      	bhi.n	800374a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003738:	089b      	lsrs	r3, r3, #2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003740:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6493      	str	r3, [r2, #72]	@ 0x48
 8003748:	e007      	b.n	800375a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	009a      	lsls	r2, r3, #2
 8003752:	4b0f      	ldr	r3, [pc, #60]	@ (8003790 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003754:	4413      	add	r3, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	3b08      	subs	r3, #8
 8003762:	4a0c      	ldr	r2, [pc, #48]	@ (8003794 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003770:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	2201      	movs	r2, #1
 800377a:	409a      	lsls	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40020407 	.word	0x40020407
 8003790:	4002081c 	.word	0x4002081c
 8003794:	cccccccd 	.word	0xcccccccd
 8003798:	40020880 	.word	0x40020880

0800379c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	461a      	mov	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a08      	ldr	r2, [pc, #32]	@ (80037e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037be:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2201      	movs	r2, #1
 80037ca:	409a      	lsls	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	1000823f 	.word	0x1000823f
 80037e0:	40020940 	.word	0x40020940

080037e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f2:	e166      	b.n	8003ac2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2101      	movs	r1, #1
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	4013      	ands	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8158 	beq.w	8003abc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d005      	beq.n	8003824 <HAL_GPIO_Init+0x40>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d130      	bne.n	8003886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800385a:	2201      	movs	r2, #1
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	f003 0201 	and.w	r2, r3, #1
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b03      	cmp	r3, #3
 8003890:	d017      	beq.n	80038c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	2203      	movs	r2, #3
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d123      	bne.n	8003916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	08da      	lsrs	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3208      	adds	r2, #8
 80038d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	220f      	movs	r2, #15
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4013      	ands	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	08da      	lsrs	r2, r3, #3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3208      	adds	r2, #8
 8003910:	6939      	ldr	r1, [r7, #16]
 8003912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	2203      	movs	r2, #3
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43db      	mvns	r3, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0203 	and.w	r2, r3, #3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80b2 	beq.w	8003abc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003958:	4b61      	ldr	r3, [pc, #388]	@ (8003ae0 <HAL_GPIO_Init+0x2fc>)
 800395a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800395c:	4a60      	ldr	r2, [pc, #384]	@ (8003ae0 <HAL_GPIO_Init+0x2fc>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6613      	str	r3, [r2, #96]	@ 0x60
 8003964:	4b5e      	ldr	r3, [pc, #376]	@ (8003ae0 <HAL_GPIO_Init+0x2fc>)
 8003966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003970:	4a5c      	ldr	r2, [pc, #368]	@ (8003ae4 <HAL_GPIO_Init+0x300>)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	3302      	adds	r3, #2
 8003978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	220f      	movs	r2, #15
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800399a:	d02b      	beq.n	80039f4 <HAL_GPIO_Init+0x210>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a52      	ldr	r2, [pc, #328]	@ (8003ae8 <HAL_GPIO_Init+0x304>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d025      	beq.n	80039f0 <HAL_GPIO_Init+0x20c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a51      	ldr	r2, [pc, #324]	@ (8003aec <HAL_GPIO_Init+0x308>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d01f      	beq.n	80039ec <HAL_GPIO_Init+0x208>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a50      	ldr	r2, [pc, #320]	@ (8003af0 <HAL_GPIO_Init+0x30c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d019      	beq.n	80039e8 <HAL_GPIO_Init+0x204>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a4f      	ldr	r2, [pc, #316]	@ (8003af4 <HAL_GPIO_Init+0x310>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <HAL_GPIO_Init+0x200>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a4e      	ldr	r2, [pc, #312]	@ (8003af8 <HAL_GPIO_Init+0x314>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00d      	beq.n	80039e0 <HAL_GPIO_Init+0x1fc>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a4d      	ldr	r2, [pc, #308]	@ (8003afc <HAL_GPIO_Init+0x318>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <HAL_GPIO_Init+0x1f8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a4c      	ldr	r2, [pc, #304]	@ (8003b00 <HAL_GPIO_Init+0x31c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_GPIO_Init+0x1f4>
 80039d4:	2307      	movs	r3, #7
 80039d6:	e00e      	b.n	80039f6 <HAL_GPIO_Init+0x212>
 80039d8:	2308      	movs	r3, #8
 80039da:	e00c      	b.n	80039f6 <HAL_GPIO_Init+0x212>
 80039dc:	2306      	movs	r3, #6
 80039de:	e00a      	b.n	80039f6 <HAL_GPIO_Init+0x212>
 80039e0:	2305      	movs	r3, #5
 80039e2:	e008      	b.n	80039f6 <HAL_GPIO_Init+0x212>
 80039e4:	2304      	movs	r3, #4
 80039e6:	e006      	b.n	80039f6 <HAL_GPIO_Init+0x212>
 80039e8:	2303      	movs	r3, #3
 80039ea:	e004      	b.n	80039f6 <HAL_GPIO_Init+0x212>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e002      	b.n	80039f6 <HAL_GPIO_Init+0x212>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_GPIO_Init+0x212>
 80039f4:	2300      	movs	r3, #0
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	f002 0203 	and.w	r2, r2, #3
 80039fc:	0092      	lsls	r2, r2, #2
 80039fe:	4093      	lsls	r3, r2
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a06:	4937      	ldr	r1, [pc, #220]	@ (8003ae4 <HAL_GPIO_Init+0x300>)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a14:	4b3b      	ldr	r3, [pc, #236]	@ (8003b04 <HAL_GPIO_Init+0x320>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a38:	4a32      	ldr	r2, [pc, #200]	@ (8003b04 <HAL_GPIO_Init+0x320>)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a3e:	4b31      	ldr	r3, [pc, #196]	@ (8003b04 <HAL_GPIO_Init+0x320>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a62:	4a28      	ldr	r2, [pc, #160]	@ (8003b04 <HAL_GPIO_Init+0x320>)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a68:	4b26      	ldr	r3, [pc, #152]	@ (8003b04 <HAL_GPIO_Init+0x320>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b04 <HAL_GPIO_Init+0x320>)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a92:	4b1c      	ldr	r3, [pc, #112]	@ (8003b04 <HAL_GPIO_Init+0x320>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ab6:	4a13      	ldr	r2, [pc, #76]	@ (8003b04 <HAL_GPIO_Init+0x320>)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f47f ae91 	bne.w	80037f4 <HAL_GPIO_Init+0x10>
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	48000400 	.word	0x48000400
 8003aec:	48000800 	.word	0x48000800
 8003af0:	48000c00 	.word	0x48000c00
 8003af4:	48001000 	.word	0x48001000
 8003af8:	48001400 	.word	0x48001400
 8003afc:	48001800 	.word	0x48001800
 8003b00:	48001c00 	.word	0x48001c00
 8003b04:	40010400 	.word	0x40010400

08003b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
 8003b14:	4613      	mov	r3, r2
 8003b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b18:	787b      	ldrb	r3, [r7, #1]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b24:	e002      	b.n	8003b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b26:	887a      	ldrh	r2, [r7, #2]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b4a:	887a      	ldrh	r2, [r7, #2]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	041a      	lsls	r2, r3, #16
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	43d9      	mvns	r1, r3
 8003b56:	887b      	ldrh	r3, [r7, #2]
 8003b58:	400b      	ands	r3, r1
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	619a      	str	r2, [r3, #24]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b76:	4b08      	ldr	r3, [pc, #32]	@ (8003b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d006      	beq.n	8003b90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b82:	4a05      	ldr	r2, [pc, #20]	@ (8003b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fc fede 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40010400 	.word	0x40010400

08003b9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b9e:	b08f      	sub	sp, #60	@ 0x3c
 8003ba0:	af0a      	add	r7, sp, #40	@ 0x28
 8003ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e116      	b.n	8003ddc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f007 fe39 	bl	800b840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f004 fa90 	bl	8008112 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	687e      	ldr	r6, [r7, #4]
 8003bfa:	466d      	mov	r5, sp
 8003bfc:	f106 0410 	add.w	r4, r6, #16
 8003c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c10:	1d33      	adds	r3, r6, #4
 8003c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c14:	6838      	ldr	r0, [r7, #0]
 8003c16:	f004 f9a3 	bl	8007f60 <USB_CoreInit>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0d7      	b.n	8003ddc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f004 fa7e 	bl	8008134 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e04a      	b.n	8003cd4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	333d      	adds	r3, #61	@ 0x3d
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	333c      	adds	r3, #60	@ 0x3c
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c66:	7bfa      	ldrb	r2, [r7, #15]
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	b298      	uxth	r0, r3
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3356      	adds	r3, #86	@ 0x56
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c7e:	7bfa      	ldrb	r2, [r7, #15]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3340      	adds	r3, #64	@ 0x40
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c92:	7bfa      	ldrb	r2, [r7, #15]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	3344      	adds	r3, #68	@ 0x44
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3348      	adds	r3, #72	@ 0x48
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	334c      	adds	r3, #76	@ 0x4c
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d3af      	bcc.n	8003c3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
 8003ce2:	e044      	b.n	8003d6e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ce4:	7bfa      	ldrb	r2, [r7, #15]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d52:	7bfa      	ldrb	r2, [r7, #15]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
 8003d6e:	7bfa      	ldrb	r2, [r7, #15]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d3b5      	bcc.n	8003ce4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	687e      	ldr	r6, [r7, #4]
 8003d80:	466d      	mov	r5, sp
 8003d82:	f106 0410 	add.w	r4, r6, #16
 8003d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d92:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d96:	1d33      	adds	r3, r6, #4
 8003d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d9a:	6838      	ldr	r0, [r7, #0]
 8003d9c:	f004 fa16 	bl	80081cc <USB_DevInit>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e014      	b.n	8003ddc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d102      	bne.n	8003dd0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f001 f86a 	bl	8004ea4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f005 f9c4 	bl	8009162 <USB_DevDisconnect>

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003de4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_PCD_Start+0x1c>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e01c      	b.n	8003e3a <HAL_PCD_Start+0x56>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f004 f965 	bl	80080f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f005 f978 	bl	8009120 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e42:	b590      	push	{r4, r7, lr}
 8003e44:	b08d      	sub	sp, #52	@ 0x34
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f005 fa36 	bl	80092ca <USB_GetMode>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f040 847e 	bne.w	8004762 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f005 f99a 	bl	80091a4 <USB_ReadInterrupts>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8474 	beq.w	8004760 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f005 f987 	bl	80091a4 <USB_ReadInterrupts>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d107      	bne.n	8003eb0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f002 0202 	and.w	r2, r2, #2
 8003eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f005 f975 	bl	80091a4 <USB_ReadInterrupts>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d161      	bne.n	8003f88 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0210 	bic.w	r2, r2, #16
 8003ed2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	f003 020f 	and.w	r2, r3, #15
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	0c5b      	lsrs	r3, r3, #17
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d124      	bne.n	8003f4a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d035      	beq.n	8003f78 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6a38      	ldr	r0, [r7, #32]
 8003f20:	f004 ffac 	bl	8008e7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f30:	441a      	add	r2, r3
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f42:	441a      	add	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	615a      	str	r2, [r3, #20]
 8003f48:	e016      	b.n	8003f78 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	0c5b      	lsrs	r3, r3, #17
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d110      	bne.n	8003f78 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6a38      	ldr	r0, [r7, #32]
 8003f62:	f004 ff8b 	bl	8008e7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f72:	441a      	add	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0210 	orr.w	r2, r2, #16
 8003f86:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f005 f909 	bl	80091a4 <USB_ReadInterrupts>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f9c:	f040 80a7 	bne.w	80040ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f005 f90e 	bl	80091ca <USB_ReadDevAllOutEpInterrupt>
 8003fae:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003fb0:	e099      	b.n	80040e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 808e 	beq.w	80040da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f005 f932 	bl	8009232 <USB_ReadDevOutEPInterrupt>
 8003fce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2301      	movs	r3, #1
 8003fea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003fec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fe7e 	bl	8004cf0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00c      	beq.n	8004018 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800400a:	461a      	mov	r2, r3
 800400c:	2308      	movs	r3, #8
 800400e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004010:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 feba 	bl	8004d8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800402e:	461a      	mov	r2, r3
 8004030:	2310      	movs	r3, #16
 8004032:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d030      	beq.n	80040a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004046:	2b80      	cmp	r3, #128	@ 0x80
 8004048:	d109      	bne.n	800405e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004058:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800405c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800405e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	78db      	ldrb	r3, [r3, #3]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d108      	bne.n	800408e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2200      	movs	r2, #0
 8004080:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	b2db      	uxtb	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f007 fd2f 	bl	800baec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800409a:	461a      	mov	r2, r3
 800409c:	2302      	movs	r3, #2
 800409e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b6:	461a      	mov	r2, r3
 80040b8:	2320      	movs	r3, #32
 80040ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d2:	461a      	mov	r2, r3
 80040d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	3301      	adds	r3, #1
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80040e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80040e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f47f af62 	bne.w	8003fb2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f005 f856 	bl	80091a4 <USB_ReadInterrupts>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004102:	f040 80a4 	bne.w	800424e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f005 f877 	bl	80091fe <USB_ReadDevAllInEpInterrupt>
 8004110:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004116:	e096      	b.n	8004246 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 808b 	beq.w	800423a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f005 f89d 	bl	800926e <USB_ReadDevInEPInterrupt>
 8004134:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d020      	beq.n	8004182 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	2201      	movs	r2, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43db      	mvns	r3, r3
 800415a:	69f9      	ldr	r1, [r7, #28]
 800415c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004160:	4013      	ands	r3, r2
 8004162:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004170:	461a      	mov	r2, r3
 8004172:	2301      	movs	r3, #1
 8004174:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	b2db      	uxtb	r3, r3
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f007 fc20 	bl	800b9c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004198:	461a      	mov	r2, r3
 800419a:	2308      	movs	r3, #8
 800419c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b4:	461a      	mov	r2, r3
 80041b6:	2310      	movs	r3, #16
 80041b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d0:	461a      	mov	r2, r3
 80041d2:	2340      	movs	r3, #64	@ 0x40
 80041d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d023      	beq.n	8004228 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041e2:	6a38      	ldr	r0, [r7, #32]
 80041e4:	f004 f934 	bl	8008450 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80041e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	3338      	adds	r3, #56	@ 0x38
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4413      	add	r3, r2
 80041f8:	3304      	adds	r3, #4
 80041fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	78db      	ldrb	r3, [r3, #3]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d108      	bne.n	8004216 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2200      	movs	r2, #0
 8004208:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	b2db      	uxtb	r3, r3
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f007 fc7d 	bl	800bb10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004222:	461a      	mov	r2, r3
 8004224:	2302      	movs	r3, #2
 8004226:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004232:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fcd2 	bl	8004bde <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	3301      	adds	r3, #1
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004248:	2b00      	cmp	r3, #0
 800424a:	f47f af65 	bne.w	8004118 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f004 ffa6 	bl	80091a4 <USB_ReadInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800425e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004262:	d122      	bne.n	80042aa <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800427e:	2b01      	cmp	r3, #1
 8004280:	d108      	bne.n	8004294 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800428a:	2100      	movs	r1, #0
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f007 feb1 	bl	800bff4 <HAL_PCDEx_LPM_Callback>
 8004292:	e002      	b.n	800429a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f007 fc01 	bl	800ba9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80042a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f004 ff78 	bl	80091a4 <USB_ReadInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042be:	d112      	bne.n	80042e6 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d102      	bne.n	80042d6 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f007 fbbd 	bl	800ba50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80042e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f004 ff5a 	bl	80091a4 <USB_ReadInterrupts>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042fa:	d121      	bne.n	8004340 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800430a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d111      	bne.n	800433a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	089b      	lsrs	r3, r3, #2
 8004326:	f003 020f 	and.w	r2, r3, #15
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004330:	2101      	movs	r1, #1
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f007 fe5e 	bl	800bff4 <HAL_PCDEx_LPM_Callback>
 8004338:	e002      	b.n	8004340 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f007 fb88 	bl	800ba50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f004 ff2d 	bl	80091a4 <USB_ReadInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004354:	f040 80b5 	bne.w	80044c2 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2110      	movs	r1, #16
 8004372:	4618      	mov	r0, r3
 8004374:	f004 f86c 	bl	8008450 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004378:	2300      	movs	r3, #0
 800437a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800437c:	e046      	b.n	800440c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800437e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800438a:	461a      	mov	r2, r3
 800438c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004390:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043be:	461a      	mov	r2, r3
 80043c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043d6:	0151      	lsls	r1, r2, #5
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	440a      	add	r2, r1
 80043dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043f6:	0151      	lsls	r1, r2, #5
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	440a      	add	r2, r1
 80043fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004400:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004404:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004408:	3301      	adds	r3, #1
 800440a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004412:	429a      	cmp	r2, r3
 8004414:	d3b3      	bcc.n	800437e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004424:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004428:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442e:	2b00      	cmp	r3, #0
 8004430:	d016      	beq.n	8004460 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004442:	f043 030b 	orr.w	r3, r3, #11
 8004446:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004458:	f043 030b 	orr.w	r3, r3, #11
 800445c:	6453      	str	r3, [r2, #68]	@ 0x44
 800445e:	e015      	b.n	800448c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800446e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004472:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004476:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004486:	f043 030b 	orr.w	r3, r3, #11
 800448a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800449a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800449e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f004 ff3d 	bl	800932c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80044c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f004 fe6c 	bl	80091a4 <USB_ReadInterrupts>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044d6:	d124      	bne.n	8004522 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f004 ff02 	bl	80092e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f004 f82f 	bl	800854a <USB_GetDevSpeed>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681c      	ldr	r4, [r3, #0]
 80044f8:	f001 fbbc 	bl	8005c74 <HAL_RCC_GetHCLKFreq>
 80044fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	4620      	mov	r0, r4
 8004508:	f003 fd56 	bl	8007fb8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f007 fa80 	bl	800ba12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695a      	ldr	r2, [r3, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004520:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f004 fe3c 	bl	80091a4 <USB_ReadInterrupts>
 800452c:	4603      	mov	r3, r0
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b08      	cmp	r3, #8
 8004534:	d10a      	bne.n	800454c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f007 fa5d 	bl	800b9f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f002 0208 	and.w	r2, r2, #8
 800454a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f004 fe27 	bl	80091a4 <USB_ReadInterrupts>
 8004556:	4603      	mov	r3, r0
 8004558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455c:	2b80      	cmp	r3, #128	@ 0x80
 800455e:	d122      	bne.n	80045a6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800456c:	2301      	movs	r3, #1
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004570:	e014      	b.n	800459c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d105      	bne.n	8004596 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	b2db      	uxtb	r3, r3
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 faf3 	bl	8004b7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	3301      	adds	r3, #1
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d3e5      	bcc.n	8004572 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f004 fdfa 	bl	80091a4 <USB_ReadInterrupts>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045ba:	d13b      	bne.n	8004634 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045bc:	2301      	movs	r3, #1
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c0:	e02b      	b.n	800461a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	3340      	adds	r3, #64	@ 0x40
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d115      	bne.n	8004614 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80045e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	da12      	bge.n	8004614 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	333f      	adds	r3, #63	@ 0x3f
 80045fe:	2201      	movs	r2, #1
 8004600:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800460a:	b2db      	uxtb	r3, r3
 800460c:	4619      	mov	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fab4 	bl	8004b7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	3301      	adds	r3, #1
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004620:	429a      	cmp	r2, r3
 8004622:	d3ce      	bcc.n	80045c2 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004632:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f004 fdb3 	bl	80091a4 <USB_ReadInterrupts>
 800463e:	4603      	mov	r3, r0
 8004640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004644:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004648:	d155      	bne.n	80046f6 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800464a:	2301      	movs	r3, #1
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
 800464e:	e045      	b.n	80046dc <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d12e      	bne.n	80046d6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004678:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800467a:	2b00      	cmp	r3, #0
 800467c:	da2b      	bge.n	80046d6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800468a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800468e:	429a      	cmp	r2, r3
 8004690:	d121      	bne.n	80046d6 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004696:	4613      	mov	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80046a4:	2201      	movs	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046d2:	6053      	str	r3, [r2, #4]
            break;
 80046d4:	e007      	b.n	80046e6 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	3301      	adds	r3, #1
 80046da:	627b      	str	r3, [r7, #36]	@ 0x24
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d3b4      	bcc.n	8004650 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695a      	ldr	r2, [r3, #20]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80046f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f004 fd52 	bl	80091a4 <USB_ReadInterrupts>
 8004700:	4603      	mov	r3, r0
 8004702:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470a:	d10a      	bne.n	8004722 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f007 fa11 	bl	800bb34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f004 fd3c 	bl	80091a4 <USB_ReadInterrupts>
 800472c:	4603      	mov	r3, r0
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b04      	cmp	r3, #4
 8004734:	d115      	bne.n	8004762 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f007 fa01 	bl	800bb50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	e000      	b.n	8004762 <HAL_PCD_IRQHandler+0x920>
      return;
 8004760:	bf00      	nop
    }
  }
}
 8004762:	3734      	adds	r7, #52	@ 0x34
 8004764:	46bd      	mov	sp, r7
 8004766:	bd90      	pop	{r4, r7, pc}

08004768 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_PCD_SetAddress+0x1a>
 800477e:	2302      	movs	r3, #2
 8004780:	e013      	b.n	80047aa <HAL_PCD_SetAddress+0x42>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f004 fc9a 	bl	80090d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	4608      	mov	r0, r1
 80047bc:	4611      	mov	r1, r2
 80047be:	461a      	mov	r2, r3
 80047c0:	4603      	mov	r3, r0
 80047c2:	70fb      	strb	r3, [r7, #3]
 80047c4:	460b      	mov	r3, r1
 80047c6:	803b      	strh	r3, [r7, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	da0f      	bge.n	80047f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	f003 020f 	and.w	r2, r3, #15
 80047de:	4613      	mov	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	3338      	adds	r3, #56	@ 0x38
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	4413      	add	r3, r2
 80047ec:	3304      	adds	r3, #4
 80047ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	705a      	strb	r2, [r3, #1]
 80047f6:	e00f      	b.n	8004818 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	f003 020f 	and.w	r2, r3, #15
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	3304      	adds	r3, #4
 8004810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	b2da      	uxtb	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004824:	883a      	ldrh	r2, [r7, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	78ba      	ldrb	r2, [r7, #2]
 800482e:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004842:	78bb      	ldrb	r3, [r7, #2]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d102      	bne.n	800484e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_PCD_EP_Open+0xaa>
 8004858:	2302      	movs	r3, #2
 800485a:	e00e      	b.n	800487a <HAL_PCD_EP_Open+0xc8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68f9      	ldr	r1, [r7, #12]
 800486a:	4618      	mov	r0, r3
 800486c:	f003 fe8c 	bl	8008588 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004878:	7afb      	ldrb	r3, [r7, #11]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800488e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004892:	2b00      	cmp	r3, #0
 8004894:	da0f      	bge.n	80048b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	f003 020f 	and.w	r2, r3, #15
 800489c:	4613      	mov	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	3338      	adds	r3, #56	@ 0x38
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	4413      	add	r3, r2
 80048aa:	3304      	adds	r3, #4
 80048ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	705a      	strb	r2, [r3, #1]
 80048b4:	e00f      	b.n	80048d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	f003 020f 	and.w	r2, r3, #15
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4413      	add	r3, r2
 80048cc:	3304      	adds	r3, #4
 80048ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_PCD_EP_Close+0x6e>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e00e      	b.n	800490e <HAL_PCD_EP_Close+0x8c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68f9      	ldr	r1, [r7, #12]
 80048fe:	4618      	mov	r0, r3
 8004900:	f003 feca 	bl	8008698 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	460b      	mov	r3, r1
 8004924:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004926:	7afb      	ldrb	r3, [r7, #11]
 8004928:	f003 020f 	and.w	r2, r3, #15
 800492c:	4613      	mov	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	3304      	adds	r3, #4
 800493e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2200      	movs	r2, #0
 8004950:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2200      	movs	r2, #0
 8004956:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004958:	7afb      	ldrb	r3, [r7, #11]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	b2da      	uxtb	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6979      	ldr	r1, [r7, #20]
 800496a:	4618      	mov	r0, r3
 800496c:	f003 ff70 	bl	8008850 <USB_EPStartXfer>

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	f003 020f 	and.w	r2, r3, #15
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800499c:	681b      	ldr	r3, [r3, #0]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b086      	sub	sp, #24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	460b      	mov	r3, r1
 80049b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ba:	7afb      	ldrb	r3, [r7, #11]
 80049bc:	f003 020f 	and.w	r2, r3, #15
 80049c0:	4613      	mov	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	3338      	adds	r3, #56	@ 0x38
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4413      	add	r3, r2
 80049ce:	3304      	adds	r3, #4
 80049d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2200      	movs	r2, #0
 80049e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2201      	movs	r2, #1
 80049e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049ea:	7afb      	ldrb	r3, [r7, #11]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6979      	ldr	r1, [r7, #20]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f003 ff27 	bl	8008850 <USB_EPStartXfer>

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	f003 020f 	and.w	r2, r3, #15
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d901      	bls.n	8004a2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e04e      	b.n	8004ac8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	da0f      	bge.n	8004a52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	f003 020f 	and.w	r2, r3, #15
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	3338      	adds	r3, #56	@ 0x38
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	3304      	adds	r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	705a      	strb	r2, [r3, #1]
 8004a50:	e00d      	b.n	8004a6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	4613      	mov	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	4413      	add	r3, r2
 8004a64:	3304      	adds	r3, #4
 8004a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_PCD_EP_SetStall+0x82>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e01c      	b.n	8004ac8 <HAL_PCD_EP_SetStall+0xbc>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68f9      	ldr	r1, [r7, #12]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f004 fa45 	bl	8008f2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d108      	bne.n	8004abe <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f004 fc37 	bl	800932c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 020f 	and.w	r2, r3, #15
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d901      	bls.n	8004aee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e042      	b.n	8004b74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	da0f      	bge.n	8004b16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 020f 	and.w	r2, r3, #15
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	3338      	adds	r3, #56	@ 0x38
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	705a      	strb	r2, [r3, #1]
 8004b14:	e00f      	b.n	8004b36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 020f 	and.w	r2, r3, #15
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_PCD_EP_ClrStall+0x86>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e00e      	b.n	8004b74 <HAL_PCD_EP_ClrStall+0xa4>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f004 fa4f 	bl	8009008 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	da0c      	bge.n	8004baa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	f003 020f 	and.w	r2, r3, #15
 8004b96:	4613      	mov	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	3338      	adds	r3, #56	@ 0x38
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e00c      	b.n	8004bc4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	f003 020f 	and.w	r2, r3, #15
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68f9      	ldr	r1, [r7, #12]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f004 f872 	bl	8008cb4 <USB_EPStopXfer>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004bd4:	7afb      	ldrb	r3, [r7, #11]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b088      	sub	sp, #32
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	3338      	adds	r3, #56	@ 0x38
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	3304      	adds	r3, #4
 8004c04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d901      	bls.n	8004c16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e067      	b.n	8004ce6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d902      	bls.n	8004c32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3303      	adds	r3, #3
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c3a:	e026      	b.n	8004c8a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d902      	bls.n	8004c58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	3303      	adds	r3, #3
 8004c5c:	089b      	lsrs	r3, r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68d9      	ldr	r1, [r3, #12]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	6978      	ldr	r0, [r7, #20]
 8004c6e:	f004 f8cb 	bl	8008e08 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	441a      	add	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	441a      	add	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d809      	bhi.n	8004cb4 <PCD_WriteEmptyTxFifo+0xd6>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d203      	bcs.n	8004cb4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1c3      	bne.n	8004c3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d811      	bhi.n	8004ce4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	6939      	ldr	r1, [r7, #16]
 8004cdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3720      	adds	r7, #32
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	333c      	adds	r3, #60	@ 0x3c
 8004d08:	3304      	adds	r3, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4a19      	ldr	r2, [pc, #100]	@ (8004d88 <PCD_EP_OutXfrComplete_int+0x98>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d124      	bne.n	8004d70 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d42:	6093      	str	r3, [r2, #8]
 8004d44:	e01a      	b.n	8004d7c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2320      	movs	r3, #32
 8004d60:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	4619      	mov	r1, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f006 fe0f 	bl	800b98c <HAL_PCD_DataOutStageCallback>
 8004d6e:	e005      	b.n	8004d7c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	4619      	mov	r1, r3
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f006 fe08 	bl	800b98c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	4f54310a 	.word	0x4f54310a

08004d8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	333c      	adds	r3, #60	@ 0x3c
 8004da4:	3304      	adds	r3, #4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8004df0 <PCD_EP_OutSetupPacket_int+0x64>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d90e      	bls.n	8004de0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f006 fdc1 	bl	800b968 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	4f54300a 	.word	0x4f54300a

08004df4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]
 8004e00:	4613      	mov	r3, r2
 8004e02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d107      	bne.n	8004e22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004e12:	883b      	ldrh	r3, [r7, #0]
 8004e14:	0419      	lsls	r1, r3, #16
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e20:	e028      	b.n	8004e74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e30:	2300      	movs	r3, #0
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e00d      	b.n	8004e52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
 8004e3c:	3340      	adds	r3, #64	@ 0x40
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	4413      	add	r3, r2
 8004e4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
 8004e52:	7bfa      	ldrb	r2, [r7, #15]
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d3ec      	bcc.n	8004e36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e5c:	883b      	ldrh	r3, [r7, #0]
 8004e5e:	0418      	lsls	r0, r3, #16
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6819      	ldr	r1, [r3, #0]
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	4302      	orrs	r2, r0
 8004e6c:	3340      	adds	r3, #64	@ 0x40
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	887a      	ldrh	r2, [r7, #2]
 8004e94:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	f043 0303 	orr.w	r3, r3, #3
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8004f28 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004efc:	d102      	bne.n	8004f04 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004efe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f02:	e00b      	b.n	8004f1c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004f04:	4b08      	ldr	r3, [pc, #32]	@ (8004f28 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f12:	d102      	bne.n	8004f1a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004f14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f18:	e000      	b.n	8004f1c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004f1a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40007000 	.word	0x40007000

08004f2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d141      	bne.n	8004fbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f46:	d131      	bne.n	8004fac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f48:	4b47      	ldr	r3, [pc, #284]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f4e:	4a46      	ldr	r2, [pc, #280]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f58:	4b43      	ldr	r3, [pc, #268]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f60:	4a41      	ldr	r2, [pc, #260]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004f68:	4b40      	ldr	r3, [pc, #256]	@ (800506c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2232      	movs	r2, #50	@ 0x32
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	4a3f      	ldr	r2, [pc, #252]	@ (8005070 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	0c9b      	lsrs	r3, r3, #18
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f7e:	e002      	b.n	8004f86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f86:	4b38      	ldr	r3, [pc, #224]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f92:	d102      	bne.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f2      	bne.n	8004f80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f9a:	4b33      	ldr	r3, [pc, #204]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa6:	d158      	bne.n	800505a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e057      	b.n	800505c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fac:	4b2e      	ldr	r3, [pc, #184]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fbc:	e04d      	b.n	800505a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc4:	d141      	bne.n	800504a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fc6:	4b28      	ldr	r3, [pc, #160]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd2:	d131      	bne.n	8005038 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fd4:	4b24      	ldr	r3, [pc, #144]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fda:	4a23      	ldr	r2, [pc, #140]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fe4:	4b20      	ldr	r3, [pc, #128]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fec:	4a1e      	ldr	r2, [pc, #120]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ff2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800506c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2232      	movs	r2, #50	@ 0x32
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8005070 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005000:	fba2 2303 	umull	r2, r3, r2, r3
 8005004:	0c9b      	lsrs	r3, r3, #18
 8005006:	3301      	adds	r3, #1
 8005008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800500a:	e002      	b.n	8005012 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3b01      	subs	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005012:	4b15      	ldr	r3, [pc, #84]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800501a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501e:	d102      	bne.n	8005026 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f2      	bne.n	800500c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005026:	4b10      	ldr	r3, [pc, #64]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005032:	d112      	bne.n	800505a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e011      	b.n	800505c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005038:	4b0b      	ldr	r3, [pc, #44]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503e:	4a0a      	ldr	r2, [pc, #40]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005044:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005048:	e007      	b.n	800505a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800504a:	4b07      	ldr	r3, [pc, #28]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005052:	4a05      	ldr	r2, [pc, #20]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005054:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005058:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40007000 	.word	0x40007000
 800506c:	20000000 	.word	0x20000000
 8005070:	431bde83 	.word	0x431bde83

08005074 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005078:	4b05      	ldr	r3, [pc, #20]	@ (8005090 <HAL_PWREx_EnableVddUSB+0x1c>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4a04      	ldr	r2, [pc, #16]	@ (8005090 <HAL_PWREx_EnableVddUSB+0x1c>)
 800507e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005082:	6053      	str	r3, [r2, #4]
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40007000 	.word	0x40007000

08005094 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005098:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a04      	ldr	r2, [pc, #16]	@ (80050b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800509e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050a2:	6053      	str	r3, [r2, #4]
}
 80050a4:	bf00      	nop
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40007000 	.word	0x40007000

080050b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f000 bc08 	b.w	80058d8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050c8:	4b96      	ldr	r3, [pc, #600]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 030c 	and.w	r3, r3, #12
 80050d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d2:	4b94      	ldr	r3, [pc, #592]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80e4 	beq.w	80052b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <HAL_RCC_OscConfig+0x4c>
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b0c      	cmp	r3, #12
 80050f4:	f040 808b 	bne.w	800520e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	f040 8087 	bne.w	800520e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005100:	4b88      	ldr	r3, [pc, #544]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCC_OscConfig+0x64>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e3df      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1a      	ldr	r2, [r3, #32]
 800511c:	4b81      	ldr	r3, [pc, #516]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <HAL_RCC_OscConfig+0x7e>
 8005128:	4b7e      	ldr	r3, [pc, #504]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005130:	e005      	b.n	800513e <HAL_RCC_OscConfig+0x8a>
 8005132:	4b7c      	ldr	r3, [pc, #496]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005138:	091b      	lsrs	r3, r3, #4
 800513a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800513e:	4293      	cmp	r3, r2
 8005140:	d223      	bcs.n	800518a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fdcc 	bl	8005ce4 <RCC_SetFlashLatencyFromMSIRange>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e3c0      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005156:	4b73      	ldr	r3, [pc, #460]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a72      	ldr	r2, [pc, #456]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 800515c:	f043 0308 	orr.w	r3, r3, #8
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4b70      	ldr	r3, [pc, #448]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	496d      	ldr	r1, [pc, #436]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005170:	4313      	orrs	r3, r2
 8005172:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005174:	4b6b      	ldr	r3, [pc, #428]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	4968      	ldr	r1, [pc, #416]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005184:	4313      	orrs	r3, r2
 8005186:	604b      	str	r3, [r1, #4]
 8005188:	e025      	b.n	80051d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800518a:	4b66      	ldr	r3, [pc, #408]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a65      	ldr	r2, [pc, #404]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005190:	f043 0308 	orr.w	r3, r3, #8
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	4b63      	ldr	r3, [pc, #396]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	4960      	ldr	r1, [pc, #384]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051a8:	4b5e      	ldr	r3, [pc, #376]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	495b      	ldr	r1, [pc, #364]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fd8c 	bl	8005ce4 <RCC_SetFlashLatencyFromMSIRange>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e380      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051d6:	f000 fcc1 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b51      	ldr	r3, [pc, #324]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	4950      	ldr	r1, [pc, #320]	@ (8005328 <HAL_RCC_OscConfig+0x274>)
 80051e8:	5ccb      	ldrb	r3, [r1, r3]
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	fa22 f303 	lsr.w	r3, r2, r3
 80051f2:	4a4e      	ldr	r2, [pc, #312]	@ (800532c <HAL_RCC_OscConfig+0x278>)
 80051f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051f6:	4b4e      	ldr	r3, [pc, #312]	@ (8005330 <HAL_RCC_OscConfig+0x27c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fc facc 	bl	8001798 <HAL_InitTick>
 8005200:	4603      	mov	r3, r0
 8005202:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d052      	beq.n	80052b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	e364      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d032      	beq.n	800527c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005216:	4b43      	ldr	r3, [pc, #268]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a42      	ldr	r2, [pc, #264]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005222:	f7fc fb09 	bl	8001838 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800522a:	f7fc fb05 	bl	8001838 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e34d      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800523c:	4b39      	ldr	r3, [pc, #228]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0f0      	beq.n	800522a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005248:	4b36      	ldr	r3, [pc, #216]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a35      	ldr	r2, [pc, #212]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 800524e:	f043 0308 	orr.w	r3, r3, #8
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	4b33      	ldr	r3, [pc, #204]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	4930      	ldr	r1, [pc, #192]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005262:	4313      	orrs	r3, r2
 8005264:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005266:	4b2f      	ldr	r3, [pc, #188]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	492b      	ldr	r1, [pc, #172]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005276:	4313      	orrs	r3, r2
 8005278:	604b      	str	r3, [r1, #4]
 800527a:	e01a      	b.n	80052b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800527c:	4b29      	ldr	r3, [pc, #164]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a28      	ldr	r2, [pc, #160]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005288:	f7fc fad6 	bl	8001838 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005290:	f7fc fad2 	bl	8001838 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e31a      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052a2:	4b20      	ldr	r3, [pc, #128]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x1dc>
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d073      	beq.n	80053a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_OscConfig+0x21c>
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b0c      	cmp	r3, #12
 80052c8:	d10e      	bne.n	80052e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d10b      	bne.n	80052e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	4b14      	ldr	r3, [pc, #80]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d063      	beq.n	80053a4 <HAL_RCC_OscConfig+0x2f0>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d15f      	bne.n	80053a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e2f7      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f0:	d106      	bne.n	8005300 <HAL_RCC_OscConfig+0x24c>
 80052f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e025      	b.n	800534c <HAL_RCC_OscConfig+0x298>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005308:	d114      	bne.n	8005334 <HAL_RCC_OscConfig+0x280>
 800530a:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a05      	ldr	r2, [pc, #20]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	4b03      	ldr	r3, [pc, #12]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a02      	ldr	r2, [pc, #8]	@ (8005324 <HAL_RCC_OscConfig+0x270>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e013      	b.n	800534c <HAL_RCC_OscConfig+0x298>
 8005324:	40021000 	.word	0x40021000
 8005328:	0800c1a0 	.word	0x0800c1a0
 800532c:	20000000 	.word	0x20000000
 8005330:	20000004 	.word	0x20000004
 8005334:	4ba0      	ldr	r3, [pc, #640]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a9f      	ldr	r2, [pc, #636]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 800533a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	4b9d      	ldr	r3, [pc, #628]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a9c      	ldr	r2, [pc, #624]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800534a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d013      	beq.n	800537c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fc fa70 	bl	8001838 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800535c:	f7fc fa6c 	bl	8001838 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b64      	cmp	r3, #100	@ 0x64
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e2b4      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800536e:	4b92      	ldr	r3, [pc, #584]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0x2a8>
 800537a:	e014      	b.n	80053a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fc fa5c 	bl	8001838 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005384:	f7fc fa58 	bl	8001838 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	@ 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e2a0      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005396:	4b88      	ldr	r3, [pc, #544]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x2d0>
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d060      	beq.n	8005474 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_OscConfig+0x310>
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b0c      	cmp	r3, #12
 80053bc:	d119      	bne.n	80053f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d116      	bne.n	80053f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c4:	4b7c      	ldr	r3, [pc, #496]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_OscConfig+0x328>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e27d      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053dc:	4b76      	ldr	r3, [pc, #472]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	061b      	lsls	r3, r3, #24
 80053ea:	4973      	ldr	r1, [pc, #460]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053f0:	e040      	b.n	8005474 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d023      	beq.n	8005442 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053fa:	4b6f      	ldr	r3, [pc, #444]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a6e      	ldr	r2, [pc, #440]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005406:	f7fc fa17 	bl	8001838 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800540e:	f7fc fa13 	bl	8001838 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e25b      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005420:	4b65      	ldr	r3, [pc, #404]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542c:	4b62      	ldr	r3, [pc, #392]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	061b      	lsls	r3, r3, #24
 800543a:	495f      	ldr	r1, [pc, #380]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]
 8005440:	e018      	b.n	8005474 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005442:	4b5d      	ldr	r3, [pc, #372]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a5c      	ldr	r2, [pc, #368]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800544c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544e:	f7fc f9f3 	bl	8001838 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005456:	f7fc f9ef 	bl	8001838 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e237      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005468:	4b53      	ldr	r3, [pc, #332]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f0      	bne.n	8005456 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d03c      	beq.n	80054fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01c      	beq.n	80054c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005488:	4b4b      	ldr	r3, [pc, #300]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 800548a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800548e:	4a4a      	ldr	r2, [pc, #296]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005498:	f7fc f9ce 	bl	8001838 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a0:	f7fc f9ca 	bl	8001838 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e212      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054b2:	4b41      	ldr	r3, [pc, #260]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 80054b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0ef      	beq.n	80054a0 <HAL_RCC_OscConfig+0x3ec>
 80054c0:	e01b      	b.n	80054fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054c2:	4b3d      	ldr	r3, [pc, #244]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 80054c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054c8:	4a3b      	ldr	r2, [pc, #236]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d2:	f7fc f9b1 	bl	8001838 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054da:	f7fc f9ad 	bl	8001838 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e1f5      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054ec:	4b32      	ldr	r3, [pc, #200]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 80054ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ef      	bne.n	80054da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 80a6 	beq.w	8005654 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005508:	2300      	movs	r3, #0
 800550a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800550c:	4b2a      	ldr	r3, [pc, #168]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 800550e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10d      	bne.n	8005534 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005518:	4b27      	ldr	r3, [pc, #156]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 800551a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551c:	4a26      	ldr	r2, [pc, #152]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 800551e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005522:	6593      	str	r3, [r2, #88]	@ 0x58
 8005524:	4b24      	ldr	r3, [pc, #144]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005530:	2301      	movs	r3, #1
 8005532:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005534:	4b21      	ldr	r3, [pc, #132]	@ (80055bc <HAL_RCC_OscConfig+0x508>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d118      	bne.n	8005572 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005540:	4b1e      	ldr	r3, [pc, #120]	@ (80055bc <HAL_RCC_OscConfig+0x508>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1d      	ldr	r2, [pc, #116]	@ (80055bc <HAL_RCC_OscConfig+0x508>)
 8005546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800554a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800554c:	f7fc f974 	bl	8001838 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005554:	f7fc f970 	bl	8001838 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e1b8      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005566:	4b15      	ldr	r3, [pc, #84]	@ (80055bc <HAL_RCC_OscConfig+0x508>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d108      	bne.n	800558c <HAL_RCC_OscConfig+0x4d8>
 800557a:	4b0f      	ldr	r3, [pc, #60]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005580:	4a0d      	ldr	r2, [pc, #52]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005582:	f043 0301 	orr.w	r3, r3, #1
 8005586:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800558a:	e029      	b.n	80055e0 <HAL_RCC_OscConfig+0x52c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b05      	cmp	r3, #5
 8005592:	d115      	bne.n	80055c0 <HAL_RCC_OscConfig+0x50c>
 8005594:	4b08      	ldr	r3, [pc, #32]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559a:	4a07      	ldr	r2, [pc, #28]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 800559c:	f043 0304 	orr.w	r3, r3, #4
 80055a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055a4:	4b04      	ldr	r3, [pc, #16]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055aa:	4a03      	ldr	r2, [pc, #12]	@ (80055b8 <HAL_RCC_OscConfig+0x504>)
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055b4:	e014      	b.n	80055e0 <HAL_RCC_OscConfig+0x52c>
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40007000 	.word	0x40007000
 80055c0:	4b9d      	ldr	r3, [pc, #628]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c6:	4a9c      	ldr	r2, [pc, #624]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055d0:	4b99      	ldr	r3, [pc, #612]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d6:	4a98      	ldr	r2, [pc, #608]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80055d8:	f023 0304 	bic.w	r3, r3, #4
 80055dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d016      	beq.n	8005616 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fc f926 	bl	8001838 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7fc f922 	bl	8001838 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e168      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005606:	4b8c      	ldr	r3, [pc, #560]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ed      	beq.n	80055f0 <HAL_RCC_OscConfig+0x53c>
 8005614:	e015      	b.n	8005642 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fc f90f 	bl	8001838 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800561c:	e00a      	b.n	8005634 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800561e:	f7fc f90b 	bl	8001838 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e151      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005634:	4b80      	ldr	r3, [pc, #512]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1ed      	bne.n	800561e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005642:	7ffb      	ldrb	r3, [r7, #31]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d105      	bne.n	8005654 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005648:	4b7b      	ldr	r3, [pc, #492]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 800564a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564c:	4a7a      	ldr	r2, [pc, #488]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 800564e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005652:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d03c      	beq.n	80056da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01c      	beq.n	80056a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005668:	4b73      	ldr	r3, [pc, #460]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 800566a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800566e:	4a72      	ldr	r2, [pc, #456]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fc f8de 	bl	8001838 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005680:	f7fc f8da 	bl	8001838 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e122      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005692:	4b69      	ldr	r3, [pc, #420]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 8005694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0ef      	beq.n	8005680 <HAL_RCC_OscConfig+0x5cc>
 80056a0:	e01b      	b.n	80056da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056a2:	4b65      	ldr	r3, [pc, #404]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80056a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056a8:	4a63      	ldr	r2, [pc, #396]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b2:	f7fc f8c1 	bl	8001838 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056ba:	f7fc f8bd 	bl	8001838 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e105      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80056ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1ef      	bne.n	80056ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80f9 	beq.w	80058d6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	f040 80cf 	bne.w	800588c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80056ee:	4b52      	ldr	r3, [pc, #328]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f003 0203 	and.w	r2, r3, #3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fe:	429a      	cmp	r2, r3
 8005700:	d12c      	bne.n	800575c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	3b01      	subs	r3, #1
 800570e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d123      	bne.n	800575c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005720:	429a      	cmp	r2, r3
 8005722:	d11b      	bne.n	800575c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005730:	429a      	cmp	r2, r3
 8005732:	d113      	bne.n	800575c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	3b01      	subs	r3, #1
 8005742:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d109      	bne.n	800575c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	3b01      	subs	r3, #1
 8005756:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d071      	beq.n	8005840 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b0c      	cmp	r3, #12
 8005760:	d068      	beq.n	8005834 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005762:	4b35      	ldr	r3, [pc, #212]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800576e:	4b32      	ldr	r3, [pc, #200]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e0ac      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800577e:	4b2e      	ldr	r3, [pc, #184]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2d      	ldr	r2, [pc, #180]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 8005784:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005788:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800578a:	f7fc f855 	bl	8001838 <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005792:	f7fc f851 	bl	8001838 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e099      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057a4:	4b24      	ldr	r3, [pc, #144]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1f0      	bne.n	8005792 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057b0:	4b21      	ldr	r3, [pc, #132]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	4b21      	ldr	r3, [pc, #132]	@ (800583c <HAL_RCC_OscConfig+0x788>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057c0:	3a01      	subs	r2, #1
 80057c2:	0112      	lsls	r2, r2, #4
 80057c4:	4311      	orrs	r1, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057ca:	0212      	lsls	r2, r2, #8
 80057cc:	4311      	orrs	r1, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057d2:	0852      	lsrs	r2, r2, #1
 80057d4:	3a01      	subs	r2, #1
 80057d6:	0552      	lsls	r2, r2, #21
 80057d8:	4311      	orrs	r1, r2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80057de:	0852      	lsrs	r2, r2, #1
 80057e0:	3a01      	subs	r2, #1
 80057e2:	0652      	lsls	r2, r2, #25
 80057e4:	4311      	orrs	r1, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057ea:	06d2      	lsls	r2, r2, #27
 80057ec:	430a      	orrs	r2, r1
 80057ee:	4912      	ldr	r1, [pc, #72]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057f4:	4b10      	ldr	r3, [pc, #64]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a0f      	ldr	r2, [pc, #60]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 80057fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005800:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4a0c      	ldr	r2, [pc, #48]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 8005806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800580a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800580c:	f7fc f814 	bl	8001838 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005814:	f7fc f810 	bl	8001838 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e058      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005826:	4b04      	ldr	r3, [pc, #16]	@ (8005838 <HAL_RCC_OscConfig+0x784>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0f0      	beq.n	8005814 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005832:	e050      	b.n	80058d6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e04f      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
 8005838:	40021000 	.word	0x40021000
 800583c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005840:	4b27      	ldr	r3, [pc, #156]	@ (80058e0 <HAL_RCC_OscConfig+0x82c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d144      	bne.n	80058d6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800584c:	4b24      	ldr	r3, [pc, #144]	@ (80058e0 <HAL_RCC_OscConfig+0x82c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a23      	ldr	r2, [pc, #140]	@ (80058e0 <HAL_RCC_OscConfig+0x82c>)
 8005852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005856:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005858:	4b21      	ldr	r3, [pc, #132]	@ (80058e0 <HAL_RCC_OscConfig+0x82c>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4a20      	ldr	r2, [pc, #128]	@ (80058e0 <HAL_RCC_OscConfig+0x82c>)
 800585e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005862:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005864:	f7fb ffe8 	bl	8001838 <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800586c:	f7fb ffe4 	bl	8001838 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e02c      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800587e:	4b18      	ldr	r3, [pc, #96]	@ (80058e0 <HAL_RCC_OscConfig+0x82c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCC_OscConfig+0x7b8>
 800588a:	e024      	b.n	80058d6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d01f      	beq.n	80058d2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005892:	4b13      	ldr	r3, [pc, #76]	@ (80058e0 <HAL_RCC_OscConfig+0x82c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a12      	ldr	r2, [pc, #72]	@ (80058e0 <HAL_RCC_OscConfig+0x82c>)
 8005898:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800589c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fb ffcb 	bl	8001838 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a6:	f7fb ffc7 	bl	8001838 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e00f      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b8:	4b09      	ldr	r3, [pc, #36]	@ (80058e0 <HAL_RCC_OscConfig+0x82c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f0      	bne.n	80058a6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80058c4:	4b06      	ldr	r3, [pc, #24]	@ (80058e0 <HAL_RCC_OscConfig+0x82c>)
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	4905      	ldr	r1, [pc, #20]	@ (80058e0 <HAL_RCC_OscConfig+0x82c>)
 80058ca:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <HAL_RCC_OscConfig+0x830>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	60cb      	str	r3, [r1, #12]
 80058d0:	e001      	b.n	80058d6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40021000 	.word	0x40021000
 80058e4:	feeefffc 	.word	0xfeeefffc

080058e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e11d      	b.n	8005b3c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005900:	4b90      	ldr	r3, [pc, #576]	@ (8005b44 <HAL_RCC_ClockConfig+0x25c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d910      	bls.n	8005930 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b44 <HAL_RCC_ClockConfig+0x25c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f023 020f 	bic.w	r2, r3, #15
 8005916:	498b      	ldr	r1, [pc, #556]	@ (8005b44 <HAL_RCC_ClockConfig+0x25c>)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	4313      	orrs	r3, r2
 800591c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800591e:	4b89      	ldr	r3, [pc, #548]	@ (8005b44 <HAL_RCC_ClockConfig+0x25c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d001      	beq.n	8005930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e105      	b.n	8005b3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d010      	beq.n	800595e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	4b81      	ldr	r3, [pc, #516]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005948:	429a      	cmp	r2, r3
 800594a:	d908      	bls.n	800595e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800594c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	497b      	ldr	r1, [pc, #492]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 800595a:	4313      	orrs	r3, r2
 800595c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d079      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b03      	cmp	r3, #3
 8005970:	d11e      	bne.n	80059b0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005972:	4b75      	ldr	r3, [pc, #468]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e0dc      	b.n	8005b3c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005982:	f000 fa09 	bl	8005d98 <RCC_GetSysClockFreqFromPLLSource>
 8005986:	4603      	mov	r3, r0
 8005988:	4a70      	ldr	r2, [pc, #448]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d946      	bls.n	8005a1c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800598e:	4b6e      	ldr	r3, [pc, #440]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d140      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800599a:	4b6b      	ldr	r3, [pc, #428]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059a2:	4a69      	ldr	r2, [pc, #420]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 80059a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059aa:	2380      	movs	r3, #128	@ 0x80
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	e035      	b.n	8005a1c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d107      	bne.n	80059c8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059b8:	4b63      	ldr	r3, [pc, #396]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d115      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0b9      	b.n	8005b3c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d107      	bne.n	80059e0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059d0:	4b5d      	ldr	r3, [pc, #372]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0ad      	b.n	8005b3c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059e0:	4b59      	ldr	r3, [pc, #356]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0a5      	b.n	8005b3c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80059f0:	f000 f8b4 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4a55      	ldr	r2, [pc, #340]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d90f      	bls.n	8005a1c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80059fc:	4b52      	ldr	r3, [pc, #328]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d109      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a08:	4b4f      	ldr	r3, [pc, #316]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a10:	4a4d      	ldr	r2, [pc, #308]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a16:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a18:	2380      	movs	r3, #128	@ 0x80
 8005a1a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f023 0203 	bic.w	r2, r3, #3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	4947      	ldr	r1, [pc, #284]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a2e:	f7fb ff03 	bl	8001838 <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a34:	e00a      	b.n	8005a4c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a36:	f7fb feff 	bl	8001838 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e077      	b.n	8005b3c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4c:	4b3e      	ldr	r3, [pc, #248]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 020c 	and.w	r2, r3, #12
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d1eb      	bne.n	8005a36 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b80      	cmp	r3, #128	@ 0x80
 8005a62:	d105      	bne.n	8005a70 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a64:	4b38      	ldr	r3, [pc, #224]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	4a37      	ldr	r2, [pc, #220]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a6e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	4b31      	ldr	r3, [pc, #196]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d208      	bcs.n	8005a9e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	492b      	ldr	r1, [pc, #172]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a9e:	4b29      	ldr	r3, [pc, #164]	@ (8005b44 <HAL_RCC_ClockConfig+0x25c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d210      	bcs.n	8005ace <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aac:	4b25      	ldr	r3, [pc, #148]	@ (8005b44 <HAL_RCC_ClockConfig+0x25c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f023 020f 	bic.w	r2, r3, #15
 8005ab4:	4923      	ldr	r1, [pc, #140]	@ (8005b44 <HAL_RCC_ClockConfig+0x25c>)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005abc:	4b21      	ldr	r3, [pc, #132]	@ (8005b44 <HAL_RCC_ClockConfig+0x25c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d001      	beq.n	8005ace <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e036      	b.n	8005b3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ada:	4b1b      	ldr	r3, [pc, #108]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	4918      	ldr	r1, [pc, #96]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005af8:	4b13      	ldr	r3, [pc, #76]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4910      	ldr	r1, [pc, #64]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b0c:	f000 f826 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 8005b10:	4602      	mov	r2, r0
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	091b      	lsrs	r3, r3, #4
 8005b18:	f003 030f 	and.w	r3, r3, #15
 8005b1c:	490c      	ldr	r1, [pc, #48]	@ (8005b50 <HAL_RCC_ClockConfig+0x268>)
 8005b1e:	5ccb      	ldrb	r3, [r1, r3]
 8005b20:	f003 031f 	and.w	r3, r3, #31
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
 8005b28:	4a0a      	ldr	r2, [pc, #40]	@ (8005b54 <HAL_RCC_ClockConfig+0x26c>)
 8005b2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b58 <HAL_RCC_ClockConfig+0x270>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fb fe31 	bl	8001798 <HAL_InitTick>
 8005b36:	4603      	mov	r3, r0
 8005b38:	73fb      	strb	r3, [r7, #15]

  return status;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40022000 	.word	0x40022000
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	04c4b400 	.word	0x04c4b400
 8005b50:	0800c1a0 	.word	0x0800c1a0
 8005b54:	20000000 	.word	0x20000000
 8005b58:	20000004 	.word	0x20000004

08005b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b089      	sub	sp, #36	@ 0x24
 8005b60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	2300      	movs	r3, #0
 8005b68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
 8005b72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b74:	4b3b      	ldr	r3, [pc, #236]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <HAL_RCC_GetSysClockFreq+0x34>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b0c      	cmp	r3, #12
 8005b88:	d121      	bne.n	8005bce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d11e      	bne.n	8005bce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b90:	4b34      	ldr	r3, [pc, #208]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d107      	bne.n	8005bac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b9c:	4b31      	ldr	r3, [pc, #196]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ba2:	0a1b      	lsrs	r3, r3, #8
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	e005      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005bac:	4b2d      	ldr	r3, [pc, #180]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10d      	bne.n	8005be4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bcc:	e00a      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d102      	bne.n	8005bda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bd4:	4b25      	ldr	r3, [pc, #148]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x110>)
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	e004      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d101      	bne.n	8005be4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005be0:	4b23      	ldr	r3, [pc, #140]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x114>)
 8005be2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b0c      	cmp	r3, #12
 8005be8:	d134      	bne.n	8005c54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bea:	4b1e      	ldr	r3, [pc, #120]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d003      	beq.n	8005c02 <HAL_RCC_GetSysClockFreq+0xa6>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d003      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0xac>
 8005c00:	e005      	b.n	8005c0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c02:	4b1a      	ldr	r3, [pc, #104]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x110>)
 8005c04:	617b      	str	r3, [r7, #20]
      break;
 8005c06:	e005      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c08:	4b19      	ldr	r3, [pc, #100]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c0a:	617b      	str	r3, [r7, #20]
      break;
 8005c0c:	e002      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	617b      	str	r3, [r7, #20]
      break;
 8005c12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c14:	4b13      	ldr	r3, [pc, #76]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	3301      	adds	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c22:	4b10      	ldr	r3, [pc, #64]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	0a1b      	lsrs	r3, r3, #8
 8005c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	fb03 f202 	mul.w	r2, r3, r2
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	0e5b      	lsrs	r3, r3, #25
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	3301      	adds	r3, #1
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c54:	69bb      	ldr	r3, [r7, #24]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3724      	adds	r7, #36	@ 0x24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000
 8005c68:	0800c1b8 	.word	0x0800c1b8
 8005c6c:	00f42400 	.word	0x00f42400
 8005c70:	007a1200 	.word	0x007a1200

08005c74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c78:	4b03      	ldr	r3, [pc, #12]	@ (8005c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	20000000 	.word	0x20000000

08005c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c90:	f7ff fff0 	bl	8005c74 <HAL_RCC_GetHCLKFreq>
 8005c94:	4602      	mov	r2, r0
 8005c96:	4b06      	ldr	r3, [pc, #24]	@ (8005cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	4904      	ldr	r1, [pc, #16]	@ (8005cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ca2:	5ccb      	ldrb	r3, [r1, r3]
 8005ca4:	f003 031f 	and.w	r3, r3, #31
 8005ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	0800c1b0 	.word	0x0800c1b0

08005cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005cbc:	f7ff ffda 	bl	8005c74 <HAL_RCC_GetHCLKFreq>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	4b06      	ldr	r3, [pc, #24]	@ (8005cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	0adb      	lsrs	r3, r3, #11
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	4904      	ldr	r1, [pc, #16]	@ (8005ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cce:	5ccb      	ldrb	r3, [r1, r3]
 8005cd0:	f003 031f 	and.w	r3, r3, #31
 8005cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	0800c1b0 	.word	0x0800c1b0

08005ce4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005cf0:	4b27      	ldr	r3, [pc, #156]	@ (8005d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005cfc:	f7ff f8f6 	bl	8004eec <HAL_PWREx_GetVoltageRange>
 8005d00:	6178      	str	r0, [r7, #20]
 8005d02:	e014      	b.n	8005d2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d04:	4b22      	ldr	r3, [pc, #136]	@ (8005d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d08:	4a21      	ldr	r2, [pc, #132]	@ (8005d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d10:	4b1f      	ldr	r3, [pc, #124]	@ (8005d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d1c:	f7ff f8e6 	bl	8004eec <HAL_PWREx_GetVoltageRange>
 8005d20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d22:	4b1b      	ldr	r3, [pc, #108]	@ (8005d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d26:	4a1a      	ldr	r2, [pc, #104]	@ (8005d90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d34:	d10b      	bne.n	8005d4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b80      	cmp	r3, #128	@ 0x80
 8005d3a:	d913      	bls.n	8005d64 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005d40:	d902      	bls.n	8005d48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d42:	2302      	movs	r3, #2
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	e00d      	b.n	8005d64 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d48:	2301      	movs	r3, #1
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	e00a      	b.n	8005d64 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d52:	d902      	bls.n	8005d5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005d54:	2302      	movs	r3, #2
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	e004      	b.n	8005d64 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b70      	cmp	r3, #112	@ 0x70
 8005d5e:	d101      	bne.n	8005d64 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d60:	2301      	movs	r3, #1
 8005d62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d64:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f023 020f 	bic.w	r2, r3, #15
 8005d6c:	4909      	ldr	r1, [pc, #36]	@ (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d74:	4b07      	ldr	r3, [pc, #28]	@ (8005d94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d001      	beq.n	8005d86 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40021000 	.word	0x40021000
 8005d94:	40022000 	.word	0x40022000

08005d98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8005e54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d00b      	beq.n	8005dc6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d825      	bhi.n	8005e00 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d008      	beq.n	8005dcc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d11f      	bne.n	8005e00 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005dc0:	4b25      	ldr	r3, [pc, #148]	@ (8005e58 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005dc2:	613b      	str	r3, [r7, #16]
    break;
 8005dc4:	e01f      	b.n	8005e06 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005dc6:	4b25      	ldr	r3, [pc, #148]	@ (8005e5c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005dc8:	613b      	str	r3, [r7, #16]
    break;
 8005dca:	e01c      	b.n	8005e06 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005dcc:	4b21      	ldr	r3, [pc, #132]	@ (8005e54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d107      	bne.n	8005de8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8005e54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	e005      	b.n	8005df4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005de8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005df4:	4a1a      	ldr	r2, [pc, #104]	@ (8005e60 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dfc:	613b      	str	r3, [r7, #16]
    break;
 8005dfe:	e002      	b.n	8005e06 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
    break;
 8005e04:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e06:	4b13      	ldr	r3, [pc, #76]	@ (8005e54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	091b      	lsrs	r3, r3, #4
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	3301      	adds	r3, #1
 8005e12:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e14:	4b0f      	ldr	r3, [pc, #60]	@ (8005e54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	0a1b      	lsrs	r3, r3, #8
 8005e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	fb03 f202 	mul.w	r2, r3, r2
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e2c:	4b09      	ldr	r3, [pc, #36]	@ (8005e54 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	0e5b      	lsrs	r3, r3, #25
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	3301      	adds	r3, #1
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005e46:	683b      	ldr	r3, [r7, #0]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	40021000 	.word	0x40021000
 8005e58:	00f42400 	.word	0x00f42400
 8005e5c:	007a1200 	.word	0x007a1200
 8005e60:	0800c1b8 	.word	0x0800c1b8

08005e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e70:	2300      	movs	r3, #0
 8005e72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d040      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e84:	2b80      	cmp	r3, #128	@ 0x80
 8005e86:	d02a      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e88:	2b80      	cmp	r3, #128	@ 0x80
 8005e8a:	d825      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005e8c:	2b60      	cmp	r3, #96	@ 0x60
 8005e8e:	d026      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e90:	2b60      	cmp	r3, #96	@ 0x60
 8005e92:	d821      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005e94:	2b40      	cmp	r3, #64	@ 0x40
 8005e96:	d006      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005e98:	2b40      	cmp	r3, #64	@ 0x40
 8005e9a:	d81d      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d010      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005ea4:	e018      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ea6:	4b89      	ldr	r3, [pc, #548]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	4a88      	ldr	r2, [pc, #544]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005eb2:	e015      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fb02 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ec4:	e00c      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3320      	adds	r3, #32
 8005eca:	2100      	movs	r1, #0
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fbed 	bl	80066ac <RCCEx_PLLSAI2_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ed6:	e003      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	74fb      	strb	r3, [r7, #19]
      break;
 8005edc:	e000      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ee0:	7cfb      	ldrb	r3, [r7, #19]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10b      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ee6:	4b79      	ldr	r3, [pc, #484]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ee8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eec:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ef4:	4975      	ldr	r1, [pc, #468]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005efc:	e001      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efe:	7cfb      	ldrb	r3, [r7, #19]
 8005f00:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d047      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f16:	d030      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f1c:	d82a      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f22:	d02a      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f28:	d824      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f2e:	d008      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f34:	d81e      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f3e:	d010      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005f40:	e018      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f42:	4b62      	ldr	r3, [pc, #392]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	4a61      	ldr	r2, [pc, #388]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f4c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f4e:	e015      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3304      	adds	r3, #4
 8005f54:	2100      	movs	r1, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fab4 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f60:	e00c      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3320      	adds	r3, #32
 8005f66:	2100      	movs	r1, #0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fb9f 	bl	80066ac <RCCEx_PLLSAI2_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f72:	e003      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	74fb      	strb	r3, [r7, #19]
      break;
 8005f78:	e000      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f7c:	7cfb      	ldrb	r3, [r7, #19]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10b      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f82:	4b52      	ldr	r3, [pc, #328]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f90:	494e      	ldr	r1, [pc, #312]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005f98:	e001      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9a:	7cfb      	ldrb	r3, [r7, #19]
 8005f9c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 809f 	beq.w	80060ea <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fac:	2300      	movs	r3, #0
 8005fae:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005fb0:	4b46      	ldr	r3, [pc, #280]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00d      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc6:	4b41      	ldr	r3, [pc, #260]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fca:	4a40      	ldr	r2, [pc, #256]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fda:	60bb      	str	r3, [r7, #8]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a3a      	ldr	r2, [pc, #232]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fee:	f7fb fc23 	bl	8001838 <HAL_GetTick>
 8005ff2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ff4:	e009      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff6:	f7fb fc1f 	bl	8001838 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d902      	bls.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	74fb      	strb	r3, [r7, #19]
        break;
 8006008:	e005      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800600a:	4b31      	ldr	r3, [pc, #196]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0ef      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006016:	7cfb      	ldrb	r3, [r7, #19]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d15b      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800601c:	4b2b      	ldr	r3, [pc, #172]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006026:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d01f      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	429a      	cmp	r2, r3
 8006038:	d019      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800603a:	4b24      	ldr	r3, [pc, #144]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800603c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006044:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006046:	4b21      	ldr	r3, [pc, #132]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800604c:	4a1f      	ldr	r2, [pc, #124]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800604e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006052:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006056:	4b1d      	ldr	r3, [pc, #116]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605c:	4a1b      	ldr	r2, [pc, #108]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800605e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006066:	4a19      	ldr	r2, [pc, #100]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d016      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fb fbde 	bl	8001838 <HAL_GetTick>
 800607c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800607e:	e00b      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006080:	f7fb fbda 	bl	8001838 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800608e:	4293      	cmp	r3, r2
 8006090:	d902      	bls.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	74fb      	strb	r3, [r7, #19]
            break;
 8006096:	e006      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006098:	4b0c      	ldr	r3, [pc, #48]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0ec      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80060a6:	7cfb      	ldrb	r3, [r7, #19]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10c      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060ac:	4b07      	ldr	r3, [pc, #28]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060bc:	4903      	ldr	r1, [pc, #12]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80060c4:	e008      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060c6:	7cfb      	ldrb	r3, [r7, #19]
 80060c8:	74bb      	strb	r3, [r7, #18]
 80060ca:	e005      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80060cc:	40021000 	.word	0x40021000
 80060d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d4:	7cfb      	ldrb	r3, [r7, #19]
 80060d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060d8:	7c7b      	ldrb	r3, [r7, #17]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d105      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060de:	4ba0      	ldr	r3, [pc, #640]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e2:	4a9f      	ldr	r2, [pc, #636]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060f6:	4b9a      	ldr	r3, [pc, #616]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fc:	f023 0203 	bic.w	r2, r3, #3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006104:	4996      	ldr	r1, [pc, #600]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006118:	4b91      	ldr	r3, [pc, #580]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800611e:	f023 020c 	bic.w	r2, r3, #12
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006126:	498e      	ldr	r1, [pc, #568]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800613a:	4b89      	ldr	r3, [pc, #548]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006140:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006148:	4985      	ldr	r1, [pc, #532]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0308 	and.w	r3, r3, #8
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800615c:	4b80      	ldr	r3, [pc, #512]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006162:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800616a:	497d      	ldr	r1, [pc, #500]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800617e:	4b78      	ldr	r3, [pc, #480]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800618c:	4974      	ldr	r1, [pc, #464]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061a0:	4b6f      	ldr	r3, [pc, #444]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ae:	496c      	ldr	r1, [pc, #432]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061c2:	4b67      	ldr	r3, [pc, #412]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061d0:	4963      	ldr	r1, [pc, #396]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061e4:	4b5e      	ldr	r3, [pc, #376]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061f2:	495b      	ldr	r1, [pc, #364]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006206:	4b56      	ldr	r3, [pc, #344]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006214:	4952      	ldr	r1, [pc, #328]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006228:	4b4d      	ldr	r3, [pc, #308]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006236:	494a      	ldr	r1, [pc, #296]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800624a:	4b45      	ldr	r3, [pc, #276]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006250:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006258:	4941      	ldr	r1, [pc, #260]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800626c:	4b3c      	ldr	r3, [pc, #240]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800626e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006272:	f023 0203 	bic.w	r2, r3, #3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627a:	4939      	ldr	r1, [pc, #228]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d028      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800628e:	4b34      	ldr	r3, [pc, #208]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006294:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629c:	4930      	ldr	r1, [pc, #192]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062ac:	d106      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062b8:	60d3      	str	r3, [r2, #12]
 80062ba:	e011      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062c4:	d10c      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3304      	adds	r3, #4
 80062ca:	2101      	movs	r1, #1
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 f8f9 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80062d6:	7cfb      	ldrb	r3, [r7, #19]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80062dc:	7cfb      	ldrb	r3, [r7, #19]
 80062de:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d04d      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062f4:	d108      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80062f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062fc:	4a18      	ldr	r2, [pc, #96]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006302:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006306:	e012      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006308:	4b15      	ldr	r3, [pc, #84]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800630a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800630e:	4a14      	ldr	r2, [pc, #80]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006310:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006314:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006318:	4b11      	ldr	r3, [pc, #68]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006326:	490e      	ldr	r1, [pc, #56]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006336:	d106      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006338:	4b09      	ldr	r3, [pc, #36]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4a08      	ldr	r2, [pc, #32]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800633e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006342:	60d3      	str	r3, [r2, #12]
 8006344:	e020      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800634a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800634e:	d109      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006350:	4b03      	ldr	r3, [pc, #12]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	4a02      	ldr	r2, [pc, #8]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800635a:	60d3      	str	r3, [r2, #12]
 800635c:	e014      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800635e:	bf00      	nop
 8006360:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006368:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800636c:	d10c      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3304      	adds	r3, #4
 8006372:	2101      	movs	r1, #1
 8006374:	4618      	mov	r0, r3
 8006376:	f000 f8a5 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 800637a:	4603      	mov	r3, r0
 800637c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800637e:	7cfb      	ldrb	r3, [r7, #19]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d028      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006394:	4b4a      	ldr	r3, [pc, #296]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063a2:	4947      	ldr	r1, [pc, #284]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063b2:	d106      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b4:	4b42      	ldr	r3, [pc, #264]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4a41      	ldr	r2, [pc, #260]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063be:	60d3      	str	r3, [r2, #12]
 80063c0:	e011      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063ca:	d10c      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	2101      	movs	r1, #1
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 f876 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063dc:	7cfb      	ldrb	r3, [r7, #19]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80063e2:	7cfb      	ldrb	r3, [r7, #19]
 80063e4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d01e      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063f2:	4b33      	ldr	r3, [pc, #204]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006402:	492f      	ldr	r1, [pc, #188]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006414:	d10c      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3304      	adds	r3, #4
 800641a:	2102      	movs	r1, #2
 800641c:	4618      	mov	r0, r3
 800641e:	f000 f851 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006426:	7cfb      	ldrb	r3, [r7, #19]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800642c:	7cfb      	ldrb	r3, [r7, #19]
 800642e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800643c:	4b20      	ldr	r3, [pc, #128]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800643e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006442:	f023 0204 	bic.w	r2, r3, #4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800644c:	491c      	ldr	r1, [pc, #112]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006460:	4b17      	ldr	r3, [pc, #92]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006462:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006466:	f023 0218 	bic.w	r2, r3, #24
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006470:	4913      	ldr	r1, [pc, #76]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d017      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006484:	4b0e      	ldr	r3, [pc, #56]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006486:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800648a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006494:	490a      	ldr	r1, [pc, #40]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064a6:	d105      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064a8:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4a04      	ldr	r2, [pc, #16]	@ (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80064b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40021000 	.word	0x40021000

080064c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064d2:	4b72      	ldr	r3, [pc, #456]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00e      	beq.n	80064fc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064de:	4b6f      	ldr	r3, [pc, #444]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0203 	and.w	r2, r3, #3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d103      	bne.n	80064f6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
       ||
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d142      	bne.n	800657c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
 80064fa:	e03f      	b.n	800657c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b03      	cmp	r3, #3
 8006502:	d018      	beq.n	8006536 <RCCEx_PLLSAI1_Config+0x72>
 8006504:	2b03      	cmp	r3, #3
 8006506:	d825      	bhi.n	8006554 <RCCEx_PLLSAI1_Config+0x90>
 8006508:	2b01      	cmp	r3, #1
 800650a:	d002      	beq.n	8006512 <RCCEx_PLLSAI1_Config+0x4e>
 800650c:	2b02      	cmp	r3, #2
 800650e:	d009      	beq.n	8006524 <RCCEx_PLLSAI1_Config+0x60>
 8006510:	e020      	b.n	8006554 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006512:	4b62      	ldr	r3, [pc, #392]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d11d      	bne.n	800655a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006522:	e01a      	b.n	800655a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006524:	4b5d      	ldr	r3, [pc, #372]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800652c:	2b00      	cmp	r3, #0
 800652e:	d116      	bne.n	800655e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006534:	e013      	b.n	800655e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006536:	4b59      	ldr	r3, [pc, #356]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10f      	bne.n	8006562 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006542:	4b56      	ldr	r3, [pc, #344]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006552:	e006      	b.n	8006562 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
      break;
 8006558:	e004      	b.n	8006564 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800655a:	bf00      	nop
 800655c:	e002      	b.n	8006564 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006562:	bf00      	nop
    }

    if(status == HAL_OK)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d108      	bne.n	800657c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800656a:	4b4c      	ldr	r3, [pc, #304]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f023 0203 	bic.w	r2, r3, #3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4949      	ldr	r1, [pc, #292]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006578:	4313      	orrs	r3, r2
 800657a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f040 8086 	bne.w	8006690 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006584:	4b45      	ldr	r3, [pc, #276]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a44      	ldr	r2, [pc, #272]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 800658a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800658e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006590:	f7fb f952 	bl	8001838 <HAL_GetTick>
 8006594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006596:	e009      	b.n	80065ac <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006598:	f7fb f94e 	bl	8001838 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d902      	bls.n	80065ac <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	73fb      	strb	r3, [r7, #15]
        break;
 80065aa:	e005      	b.n	80065b8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065ac:	4b3b      	ldr	r3, [pc, #236]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1ef      	bne.n	8006598 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d168      	bne.n	8006690 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d113      	bne.n	80065ec <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065c4:	4b35      	ldr	r3, [pc, #212]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	4b35      	ldr	r3, [pc, #212]	@ (80066a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6892      	ldr	r2, [r2, #8]
 80065d0:	0211      	lsls	r1, r2, #8
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	68d2      	ldr	r2, [r2, #12]
 80065d6:	06d2      	lsls	r2, r2, #27
 80065d8:	4311      	orrs	r1, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6852      	ldr	r2, [r2, #4]
 80065de:	3a01      	subs	r2, #1
 80065e0:	0112      	lsls	r2, r2, #4
 80065e2:	430a      	orrs	r2, r1
 80065e4:	492d      	ldr	r1, [pc, #180]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	610b      	str	r3, [r1, #16]
 80065ea:	e02d      	b.n	8006648 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d115      	bne.n	800661e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065f2:	4b2a      	ldr	r3, [pc, #168]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	4b2b      	ldr	r3, [pc, #172]	@ (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6892      	ldr	r2, [r2, #8]
 80065fe:	0211      	lsls	r1, r2, #8
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6912      	ldr	r2, [r2, #16]
 8006604:	0852      	lsrs	r2, r2, #1
 8006606:	3a01      	subs	r2, #1
 8006608:	0552      	lsls	r2, r2, #21
 800660a:	4311      	orrs	r1, r2
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6852      	ldr	r2, [r2, #4]
 8006610:	3a01      	subs	r2, #1
 8006612:	0112      	lsls	r2, r2, #4
 8006614:	430a      	orrs	r2, r1
 8006616:	4921      	ldr	r1, [pc, #132]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006618:	4313      	orrs	r3, r2
 800661a:	610b      	str	r3, [r1, #16]
 800661c:	e014      	b.n	8006648 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800661e:	4b1f      	ldr	r3, [pc, #124]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	4b21      	ldr	r3, [pc, #132]	@ (80066a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006624:	4013      	ands	r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6892      	ldr	r2, [r2, #8]
 800662a:	0211      	lsls	r1, r2, #8
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6952      	ldr	r2, [r2, #20]
 8006630:	0852      	lsrs	r2, r2, #1
 8006632:	3a01      	subs	r2, #1
 8006634:	0652      	lsls	r2, r2, #25
 8006636:	4311      	orrs	r1, r2
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6852      	ldr	r2, [r2, #4]
 800663c:	3a01      	subs	r2, #1
 800663e:	0112      	lsls	r2, r2, #4
 8006640:	430a      	orrs	r2, r1
 8006642:	4916      	ldr	r1, [pc, #88]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006644:	4313      	orrs	r3, r2
 8006646:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006648:	4b14      	ldr	r3, [pc, #80]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a13      	ldr	r2, [pc, #76]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 800664e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006652:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006654:	f7fb f8f0 	bl	8001838 <HAL_GetTick>
 8006658:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800665a:	e009      	b.n	8006670 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800665c:	f7fb f8ec 	bl	8001838 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d902      	bls.n	8006670 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	73fb      	strb	r3, [r7, #15]
          break;
 800666e:	e005      	b.n	800667c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006670:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0ef      	beq.n	800665c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d106      	bne.n	8006690 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006682:	4b06      	ldr	r3, [pc, #24]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006684:	691a      	ldr	r2, [r3, #16]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	4904      	ldr	r1, [pc, #16]	@ (800669c <RCCEx_PLLSAI1_Config+0x1d8>)
 800668c:	4313      	orrs	r3, r2
 800668e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006690:	7bfb      	ldrb	r3, [r7, #15]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40021000 	.word	0x40021000
 80066a0:	07ff800f 	.word	0x07ff800f
 80066a4:	ff9f800f 	.word	0xff9f800f
 80066a8:	f9ff800f 	.word	0xf9ff800f

080066ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066ba:	4b72      	ldr	r3, [pc, #456]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00e      	beq.n	80066e4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80066c6:	4b6f      	ldr	r3, [pc, #444]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f003 0203 	and.w	r2, r3, #3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d103      	bne.n	80066de <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
       ||
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d142      	bne.n	8006764 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	73fb      	strb	r3, [r7, #15]
 80066e2:	e03f      	b.n	8006764 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d018      	beq.n	800671e <RCCEx_PLLSAI2_Config+0x72>
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d825      	bhi.n	800673c <RCCEx_PLLSAI2_Config+0x90>
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d002      	beq.n	80066fa <RCCEx_PLLSAI2_Config+0x4e>
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d009      	beq.n	800670c <RCCEx_PLLSAI2_Config+0x60>
 80066f8:	e020      	b.n	800673c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066fa:	4b62      	ldr	r3, [pc, #392]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d11d      	bne.n	8006742 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800670a:	e01a      	b.n	8006742 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800670c:	4b5d      	ldr	r3, [pc, #372]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006714:	2b00      	cmp	r3, #0
 8006716:	d116      	bne.n	8006746 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800671c:	e013      	b.n	8006746 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800671e:	4b59      	ldr	r3, [pc, #356]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10f      	bne.n	800674a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800672a:	4b56      	ldr	r3, [pc, #344]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d109      	bne.n	800674a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800673a:	e006      	b.n	800674a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
      break;
 8006740:	e004      	b.n	800674c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006742:	bf00      	nop
 8006744:	e002      	b.n	800674c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006746:	bf00      	nop
 8006748:	e000      	b.n	800674c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800674a:	bf00      	nop
    }

    if(status == HAL_OK)
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d108      	bne.n	8006764 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006752:	4b4c      	ldr	r3, [pc, #304]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f023 0203 	bic.w	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4949      	ldr	r1, [pc, #292]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006760:	4313      	orrs	r3, r2
 8006762:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f040 8086 	bne.w	8006878 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800676c:	4b45      	ldr	r3, [pc, #276]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a44      	ldr	r2, [pc, #272]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006778:	f7fb f85e 	bl	8001838 <HAL_GetTick>
 800677c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800677e:	e009      	b.n	8006794 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006780:	f7fb f85a 	bl	8001838 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d902      	bls.n	8006794 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	73fb      	strb	r3, [r7, #15]
        break;
 8006792:	e005      	b.n	80067a0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006794:	4b3b      	ldr	r3, [pc, #236]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1ef      	bne.n	8006780 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d168      	bne.n	8006878 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d113      	bne.n	80067d4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067ac:	4b35      	ldr	r3, [pc, #212]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	4b35      	ldr	r3, [pc, #212]	@ (8006888 <RCCEx_PLLSAI2_Config+0x1dc>)
 80067b2:	4013      	ands	r3, r2
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6892      	ldr	r2, [r2, #8]
 80067b8:	0211      	lsls	r1, r2, #8
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	68d2      	ldr	r2, [r2, #12]
 80067be:	06d2      	lsls	r2, r2, #27
 80067c0:	4311      	orrs	r1, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6852      	ldr	r2, [r2, #4]
 80067c6:	3a01      	subs	r2, #1
 80067c8:	0112      	lsls	r2, r2, #4
 80067ca:	430a      	orrs	r2, r1
 80067cc:	492d      	ldr	r1, [pc, #180]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	614b      	str	r3, [r1, #20]
 80067d2:	e02d      	b.n	8006830 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d115      	bne.n	8006806 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067da:	4b2a      	ldr	r3, [pc, #168]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067dc:	695a      	ldr	r2, [r3, #20]
 80067de:	4b2b      	ldr	r3, [pc, #172]	@ (800688c <RCCEx_PLLSAI2_Config+0x1e0>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6892      	ldr	r2, [r2, #8]
 80067e6:	0211      	lsls	r1, r2, #8
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6912      	ldr	r2, [r2, #16]
 80067ec:	0852      	lsrs	r2, r2, #1
 80067ee:	3a01      	subs	r2, #1
 80067f0:	0552      	lsls	r2, r2, #21
 80067f2:	4311      	orrs	r1, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6852      	ldr	r2, [r2, #4]
 80067f8:	3a01      	subs	r2, #1
 80067fa:	0112      	lsls	r2, r2, #4
 80067fc:	430a      	orrs	r2, r1
 80067fe:	4921      	ldr	r1, [pc, #132]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006800:	4313      	orrs	r3, r2
 8006802:	614b      	str	r3, [r1, #20]
 8006804:	e014      	b.n	8006830 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006806:	4b1f      	ldr	r3, [pc, #124]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	4b21      	ldr	r3, [pc, #132]	@ (8006890 <RCCEx_PLLSAI2_Config+0x1e4>)
 800680c:	4013      	ands	r3, r2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6892      	ldr	r2, [r2, #8]
 8006812:	0211      	lsls	r1, r2, #8
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6952      	ldr	r2, [r2, #20]
 8006818:	0852      	lsrs	r2, r2, #1
 800681a:	3a01      	subs	r2, #1
 800681c:	0652      	lsls	r2, r2, #25
 800681e:	4311      	orrs	r1, r2
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6852      	ldr	r2, [r2, #4]
 8006824:	3a01      	subs	r2, #1
 8006826:	0112      	lsls	r2, r2, #4
 8006828:	430a      	orrs	r2, r1
 800682a:	4916      	ldr	r1, [pc, #88]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 800682c:	4313      	orrs	r3, r2
 800682e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006830:	4b14      	ldr	r3, [pc, #80]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a13      	ldr	r2, [pc, #76]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800683a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683c:	f7fa fffc 	bl	8001838 <HAL_GetTick>
 8006840:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006842:	e009      	b.n	8006858 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006844:	f7fa fff8 	bl	8001838 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d902      	bls.n	8006858 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	73fb      	strb	r3, [r7, #15]
          break;
 8006856:	e005      	b.n	8006864 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006858:	4b0a      	ldr	r3, [pc, #40]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0ef      	beq.n	8006844 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800686a:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	4904      	ldr	r1, [pc, #16]	@ (8006884 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006874:	4313      	orrs	r3, r2
 8006876:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40021000 	.word	0x40021000
 8006888:	07ff800f 	.word	0x07ff800f
 800688c:	ff9f800f 	.word	0xff9f800f
 8006890:	f9ff800f 	.word	0xf9ff800f

08006894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e049      	b.n	800693a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fa fd94 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f000 fb02 	bl	8006edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b01      	cmp	r3, #1
 8006956:	d001      	beq.n	800695c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e047      	b.n	80069ec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a23      	ldr	r2, [pc, #140]	@ (80069f8 <HAL_TIM_Base_Start+0xb4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01d      	beq.n	80069aa <HAL_TIM_Base_Start+0x66>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006976:	d018      	beq.n	80069aa <HAL_TIM_Base_Start+0x66>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1f      	ldr	r2, [pc, #124]	@ (80069fc <HAL_TIM_Base_Start+0xb8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d013      	beq.n	80069aa <HAL_TIM_Base_Start+0x66>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a1e      	ldr	r2, [pc, #120]	@ (8006a00 <HAL_TIM_Base_Start+0xbc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_TIM_Base_Start+0x66>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1c      	ldr	r2, [pc, #112]	@ (8006a04 <HAL_TIM_Base_Start+0xc0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d009      	beq.n	80069aa <HAL_TIM_Base_Start+0x66>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1b      	ldr	r2, [pc, #108]	@ (8006a08 <HAL_TIM_Base_Start+0xc4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_TIM_Base_Start+0x66>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a19      	ldr	r2, [pc, #100]	@ (8006a0c <HAL_TIM_Base_Start+0xc8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d115      	bne.n	80069d6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	4b17      	ldr	r3, [pc, #92]	@ (8006a10 <HAL_TIM_Base_Start+0xcc>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b06      	cmp	r3, #6
 80069ba:	d015      	beq.n	80069e8 <HAL_TIM_Base_Start+0xa4>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069c2:	d011      	beq.n	80069e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0201 	orr.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d4:	e008      	b.n	80069e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0201 	orr.w	r2, r2, #1
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	e000      	b.n	80069ea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40012c00 	.word	0x40012c00
 80069fc:	40000400 	.word	0x40000400
 8006a00:	40000800 	.word	0x40000800
 8006a04:	40000c00 	.word	0x40000c00
 8006a08:	40013400 	.word	0x40013400
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	00010007 	.word	0x00010007

08006a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d001      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e04f      	b.n	8006acc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a23      	ldr	r2, [pc, #140]	@ (8006ad8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01d      	beq.n	8006a8a <HAL_TIM_Base_Start_IT+0x76>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a56:	d018      	beq.n	8006a8a <HAL_TIM_Base_Start_IT+0x76>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006adc <HAL_TIM_Base_Start_IT+0xc8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <HAL_TIM_Base_Start_IT+0x76>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00e      	beq.n	8006a8a <HAL_TIM_Base_Start_IT+0x76>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d009      	beq.n	8006a8a <HAL_TIM_Base_Start_IT+0x76>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d004      	beq.n	8006a8a <HAL_TIM_Base_Start_IT+0x76>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a19      	ldr	r2, [pc, #100]	@ (8006aec <HAL_TIM_Base_Start_IT+0xd8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d115      	bne.n	8006ab6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	4b17      	ldr	r3, [pc, #92]	@ (8006af0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b06      	cmp	r3, #6
 8006a9a:	d015      	beq.n	8006ac8 <HAL_TIM_Base_Start_IT+0xb4>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aa2:	d011      	beq.n	8006ac8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab4:	e008      	b.n	8006ac8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0201 	orr.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e000      	b.n	8006aca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	40012c00 	.word	0x40012c00
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	40013400 	.word	0x40013400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	00010007 	.word	0x00010007

08006af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d020      	beq.n	8006b58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01b      	beq.n	8006b58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0202 	mvn.w	r2, #2
 8006b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	f003 0303 	and.w	r3, r3, #3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f9ad 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006b44:	e005      	b.n	8006b52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f99f 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f9b0 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d020      	beq.n	8006ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01b      	beq.n	8006ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0204 	mvn.w	r2, #4
 8006b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f987 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006b90:	e005      	b.n	8006b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f979 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f98a 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d020      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01b      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0208 	mvn.w	r2, #8
 8006bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f961 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006bdc:	e005      	b.n	8006bea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f953 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f964 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f003 0310 	and.w	r3, r3, #16
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d020      	beq.n	8006c3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01b      	beq.n	8006c3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0210 	mvn.w	r2, #16
 8006c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2208      	movs	r2, #8
 8006c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f93b 	bl	8006e9e <HAL_TIM_IC_CaptureCallback>
 8006c28:	e005      	b.n	8006c36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f92d 	bl	8006e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f93e 	bl	8006eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00c      	beq.n	8006c60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f06f 0201 	mvn.w	r2, #1
 8006c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fa f840 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00c      	beq.n	8006c84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d007      	beq.n	8006c84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 faf2 	bl	8007268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00c      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 faea 	bl	800727c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00c      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f8fd 	bl	8006ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00c      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d007      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0220 	mvn.w	r2, #32
 8006ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fab2 	bl	8007254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_TIM_ConfigClockSource+0x1c>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e0b6      	b.n	8006e82 <HAL_TIM_ConfigClockSource+0x18a>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d50:	d03e      	beq.n	8006dd0 <HAL_TIM_ConfigClockSource+0xd8>
 8006d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d56:	f200 8087 	bhi.w	8006e68 <HAL_TIM_ConfigClockSource+0x170>
 8006d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d5e:	f000 8086 	beq.w	8006e6e <HAL_TIM_ConfigClockSource+0x176>
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d66:	d87f      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x170>
 8006d68:	2b70      	cmp	r3, #112	@ 0x70
 8006d6a:	d01a      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0xaa>
 8006d6c:	2b70      	cmp	r3, #112	@ 0x70
 8006d6e:	d87b      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x170>
 8006d70:	2b60      	cmp	r3, #96	@ 0x60
 8006d72:	d050      	beq.n	8006e16 <HAL_TIM_ConfigClockSource+0x11e>
 8006d74:	2b60      	cmp	r3, #96	@ 0x60
 8006d76:	d877      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x170>
 8006d78:	2b50      	cmp	r3, #80	@ 0x50
 8006d7a:	d03c      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0xfe>
 8006d7c:	2b50      	cmp	r3, #80	@ 0x50
 8006d7e:	d873      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x170>
 8006d80:	2b40      	cmp	r3, #64	@ 0x40
 8006d82:	d058      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x13e>
 8006d84:	2b40      	cmp	r3, #64	@ 0x40
 8006d86:	d86f      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x170>
 8006d88:	2b30      	cmp	r3, #48	@ 0x30
 8006d8a:	d064      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x15e>
 8006d8c:	2b30      	cmp	r3, #48	@ 0x30
 8006d8e:	d86b      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x170>
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d060      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x15e>
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d867      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x170>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d05c      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x15e>
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d05a      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x15e>
 8006da0:	e062      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006db2:	f000 f9a7 	bl	8007104 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	609a      	str	r2, [r3, #8]
      break;
 8006dce:	e04f      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006de0:	f000 f990 	bl	8007104 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006df2:	609a      	str	r2, [r3, #8]
      break;
 8006df4:	e03c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e02:	461a      	mov	r2, r3
 8006e04:	f000 f904 	bl	8007010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2150      	movs	r1, #80	@ 0x50
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f95d 	bl	80070ce <TIM_ITRx_SetConfig>
      break;
 8006e14:	e02c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e22:	461a      	mov	r2, r3
 8006e24:	f000 f923 	bl	800706e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2160      	movs	r1, #96	@ 0x60
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f94d 	bl	80070ce <TIM_ITRx_SetConfig>
      break;
 8006e34:	e01c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e42:	461a      	mov	r2, r3
 8006e44:	f000 f8e4 	bl	8007010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2140      	movs	r1, #64	@ 0x40
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f93d 	bl	80070ce <TIM_ITRx_SetConfig>
      break;
 8006e54:	e00c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f000 f934 	bl	80070ce <TIM_ITRx_SetConfig>
      break;
 8006e66:	e003      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6c:	e000      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a40      	ldr	r2, [pc, #256]	@ (8006ff0 <TIM_Base_SetConfig+0x114>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d013      	beq.n	8006f1c <TIM_Base_SetConfig+0x40>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006efa:	d00f      	beq.n	8006f1c <TIM_Base_SetConfig+0x40>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a3d      	ldr	r2, [pc, #244]	@ (8006ff4 <TIM_Base_SetConfig+0x118>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00b      	beq.n	8006f1c <TIM_Base_SetConfig+0x40>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a3c      	ldr	r2, [pc, #240]	@ (8006ff8 <TIM_Base_SetConfig+0x11c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d007      	beq.n	8006f1c <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8006ffc <TIM_Base_SetConfig+0x120>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d003      	beq.n	8006f1c <TIM_Base_SetConfig+0x40>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a3a      	ldr	r2, [pc, #232]	@ (8007000 <TIM_Base_SetConfig+0x124>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d108      	bne.n	8006f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a2f      	ldr	r2, [pc, #188]	@ (8006ff0 <TIM_Base_SetConfig+0x114>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d01f      	beq.n	8006f76 <TIM_Base_SetConfig+0x9a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f3c:	d01b      	beq.n	8006f76 <TIM_Base_SetConfig+0x9a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a2c      	ldr	r2, [pc, #176]	@ (8006ff4 <TIM_Base_SetConfig+0x118>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d017      	beq.n	8006f76 <TIM_Base_SetConfig+0x9a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a2b      	ldr	r2, [pc, #172]	@ (8006ff8 <TIM_Base_SetConfig+0x11c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d013      	beq.n	8006f76 <TIM_Base_SetConfig+0x9a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a2a      	ldr	r2, [pc, #168]	@ (8006ffc <TIM_Base_SetConfig+0x120>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00f      	beq.n	8006f76 <TIM_Base_SetConfig+0x9a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a29      	ldr	r2, [pc, #164]	@ (8007000 <TIM_Base_SetConfig+0x124>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00b      	beq.n	8006f76 <TIM_Base_SetConfig+0x9a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a28      	ldr	r2, [pc, #160]	@ (8007004 <TIM_Base_SetConfig+0x128>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d007      	beq.n	8006f76 <TIM_Base_SetConfig+0x9a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a27      	ldr	r2, [pc, #156]	@ (8007008 <TIM_Base_SetConfig+0x12c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <TIM_Base_SetConfig+0x9a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a26      	ldr	r2, [pc, #152]	@ (800700c <TIM_Base_SetConfig+0x130>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d108      	bne.n	8006f88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a10      	ldr	r2, [pc, #64]	@ (8006ff0 <TIM_Base_SetConfig+0x114>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00f      	beq.n	8006fd4 <TIM_Base_SetConfig+0xf8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a12      	ldr	r2, [pc, #72]	@ (8007000 <TIM_Base_SetConfig+0x124>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00b      	beq.n	8006fd4 <TIM_Base_SetConfig+0xf8>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a11      	ldr	r2, [pc, #68]	@ (8007004 <TIM_Base_SetConfig+0x128>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d007      	beq.n	8006fd4 <TIM_Base_SetConfig+0xf8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a10      	ldr	r2, [pc, #64]	@ (8007008 <TIM_Base_SetConfig+0x12c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_Base_SetConfig+0xf8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a0f      	ldr	r2, [pc, #60]	@ (800700c <TIM_Base_SetConfig+0x130>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d103      	bne.n	8006fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	615a      	str	r2, [r3, #20]
}
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40012c00 	.word	0x40012c00
 8006ff4:	40000400 	.word	0x40000400
 8006ff8:	40000800 	.word	0x40000800
 8006ffc:	40000c00 	.word	0x40000c00
 8007000:	40013400 	.word	0x40013400
 8007004:	40014000 	.word	0x40014000
 8007008:	40014400 	.word	0x40014400
 800700c:	40014800 	.word	0x40014800

08007010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f023 0201 	bic.w	r2, r3, #1
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800703a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4313      	orrs	r3, r2
 8007044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f023 030a 	bic.w	r3, r3, #10
 800704c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800706e:	b480      	push	{r7}
 8007070:	b087      	sub	sp, #28
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	f023 0210 	bic.w	r2, r3, #16
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007098:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	031b      	lsls	r3, r3, #12
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	621a      	str	r2, [r3, #32]
}
 80070c2:	bf00      	nop
 80070c4:	371c      	adds	r7, #28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b085      	sub	sp, #20
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	f043 0307 	orr.w	r3, r3, #7
 80070f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	609a      	str	r2, [r3, #8]
}
 80070f8:	bf00      	nop
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800711e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	021a      	lsls	r2, r3, #8
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	431a      	orrs	r2, r3
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4313      	orrs	r3, r2
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	609a      	str	r2, [r3, #8]
}
 8007138:	bf00      	nop
 800713a:	371c      	adds	r7, #28
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007158:	2302      	movs	r3, #2
 800715a:	e068      	b.n	800722e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a2e      	ldr	r2, [pc, #184]	@ (800723c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d004      	beq.n	8007190 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a2d      	ldr	r2, [pc, #180]	@ (8007240 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d108      	bne.n	80071a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007196:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a1e      	ldr	r2, [pc, #120]	@ (800723c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d01d      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ce:	d018      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007244 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a1a      	ldr	r2, [pc, #104]	@ (8007248 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00e      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a18      	ldr	r2, [pc, #96]	@ (800724c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d009      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a13      	ldr	r2, [pc, #76]	@ (8007240 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a14      	ldr	r2, [pc, #80]	@ (8007250 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d10c      	bne.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	4313      	orrs	r3, r2
 8007212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40012c00 	.word	0x40012c00
 8007240:	40013400 	.word	0x40013400
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800
 800724c:	40000c00 	.word	0x40000c00
 8007250:	40014000 	.word	0x40014000

08007254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e042      	b.n	8007328 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d106      	bne.n	80072ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7fa f987 	bl	80015c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2224      	movs	r2, #36	@ 0x24
 80072be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0201 	bic.w	r2, r2, #1
 80072d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fb24 	bl	8007928 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f825 	bl	8007330 <UART_SetConfig>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d101      	bne.n	80072f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e01b      	b.n	8007328 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689a      	ldr	r2, [r3, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800730e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0201 	orr.w	r2, r2, #1
 800731e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fba3 	bl	8007a6c <UART_CheckIdleState>
 8007326:	4603      	mov	r3, r0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007334:	b08c      	sub	sp, #48	@ 0x30
 8007336:	af00      	add	r7, sp, #0
 8007338:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	431a      	orrs	r2, r3
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	431a      	orrs	r2, r3
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	4313      	orrs	r3, r2
 8007356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	4baa      	ldr	r3, [pc, #680]	@ (8007608 <UART_SetConfig+0x2d8>)
 8007360:	4013      	ands	r3, r2
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	6812      	ldr	r2, [r2, #0]
 8007366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007368:	430b      	orrs	r3, r1
 800736a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a9f      	ldr	r2, [pc, #636]	@ (800760c <UART_SetConfig+0x2dc>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d004      	beq.n	800739c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007398:	4313      	orrs	r3, r2
 800739a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80073a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073b0:	430b      	orrs	r3, r1
 80073b2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ba:	f023 010f 	bic.w	r1, r3, #15
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a90      	ldr	r2, [pc, #576]	@ (8007610 <UART_SetConfig+0x2e0>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d125      	bne.n	8007420 <UART_SetConfig+0xf0>
 80073d4:	4b8f      	ldr	r3, [pc, #572]	@ (8007614 <UART_SetConfig+0x2e4>)
 80073d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d81a      	bhi.n	8007418 <UART_SetConfig+0xe8>
 80073e2:	a201      	add	r2, pc, #4	@ (adr r2, 80073e8 <UART_SetConfig+0xb8>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	080073f9 	.word	0x080073f9
 80073ec:	08007409 	.word	0x08007409
 80073f0:	08007401 	.word	0x08007401
 80073f4:	08007411 	.word	0x08007411
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073fe:	e116      	b.n	800762e <UART_SetConfig+0x2fe>
 8007400:	2302      	movs	r3, #2
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007406:	e112      	b.n	800762e <UART_SetConfig+0x2fe>
 8007408:	2304      	movs	r3, #4
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800740e:	e10e      	b.n	800762e <UART_SetConfig+0x2fe>
 8007410:	2308      	movs	r3, #8
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007416:	e10a      	b.n	800762e <UART_SetConfig+0x2fe>
 8007418:	2310      	movs	r3, #16
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741e:	e106      	b.n	800762e <UART_SetConfig+0x2fe>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a7c      	ldr	r2, [pc, #496]	@ (8007618 <UART_SetConfig+0x2e8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d138      	bne.n	800749c <UART_SetConfig+0x16c>
 800742a:	4b7a      	ldr	r3, [pc, #488]	@ (8007614 <UART_SetConfig+0x2e4>)
 800742c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007430:	f003 030c 	and.w	r3, r3, #12
 8007434:	2b0c      	cmp	r3, #12
 8007436:	d82d      	bhi.n	8007494 <UART_SetConfig+0x164>
 8007438:	a201      	add	r2, pc, #4	@ (adr r2, 8007440 <UART_SetConfig+0x110>)
 800743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	08007475 	.word	0x08007475
 8007444:	08007495 	.word	0x08007495
 8007448:	08007495 	.word	0x08007495
 800744c:	08007495 	.word	0x08007495
 8007450:	08007485 	.word	0x08007485
 8007454:	08007495 	.word	0x08007495
 8007458:	08007495 	.word	0x08007495
 800745c:	08007495 	.word	0x08007495
 8007460:	0800747d 	.word	0x0800747d
 8007464:	08007495 	.word	0x08007495
 8007468:	08007495 	.word	0x08007495
 800746c:	08007495 	.word	0x08007495
 8007470:	0800748d 	.word	0x0800748d
 8007474:	2300      	movs	r3, #0
 8007476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800747a:	e0d8      	b.n	800762e <UART_SetConfig+0x2fe>
 800747c:	2302      	movs	r3, #2
 800747e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007482:	e0d4      	b.n	800762e <UART_SetConfig+0x2fe>
 8007484:	2304      	movs	r3, #4
 8007486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800748a:	e0d0      	b.n	800762e <UART_SetConfig+0x2fe>
 800748c:	2308      	movs	r3, #8
 800748e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007492:	e0cc      	b.n	800762e <UART_SetConfig+0x2fe>
 8007494:	2310      	movs	r3, #16
 8007496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800749a:	e0c8      	b.n	800762e <UART_SetConfig+0x2fe>
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a5e      	ldr	r2, [pc, #376]	@ (800761c <UART_SetConfig+0x2ec>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d125      	bne.n	80074f2 <UART_SetConfig+0x1c2>
 80074a6:	4b5b      	ldr	r3, [pc, #364]	@ (8007614 <UART_SetConfig+0x2e4>)
 80074a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074b0:	2b30      	cmp	r3, #48	@ 0x30
 80074b2:	d016      	beq.n	80074e2 <UART_SetConfig+0x1b2>
 80074b4:	2b30      	cmp	r3, #48	@ 0x30
 80074b6:	d818      	bhi.n	80074ea <UART_SetConfig+0x1ba>
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d00a      	beq.n	80074d2 <UART_SetConfig+0x1a2>
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d814      	bhi.n	80074ea <UART_SetConfig+0x1ba>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <UART_SetConfig+0x19a>
 80074c4:	2b10      	cmp	r3, #16
 80074c6:	d008      	beq.n	80074da <UART_SetConfig+0x1aa>
 80074c8:	e00f      	b.n	80074ea <UART_SetConfig+0x1ba>
 80074ca:	2300      	movs	r3, #0
 80074cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d0:	e0ad      	b.n	800762e <UART_SetConfig+0x2fe>
 80074d2:	2302      	movs	r3, #2
 80074d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d8:	e0a9      	b.n	800762e <UART_SetConfig+0x2fe>
 80074da:	2304      	movs	r3, #4
 80074dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e0:	e0a5      	b.n	800762e <UART_SetConfig+0x2fe>
 80074e2:	2308      	movs	r3, #8
 80074e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e8:	e0a1      	b.n	800762e <UART_SetConfig+0x2fe>
 80074ea:	2310      	movs	r3, #16
 80074ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f0:	e09d      	b.n	800762e <UART_SetConfig+0x2fe>
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a4a      	ldr	r2, [pc, #296]	@ (8007620 <UART_SetConfig+0x2f0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d125      	bne.n	8007548 <UART_SetConfig+0x218>
 80074fc:	4b45      	ldr	r3, [pc, #276]	@ (8007614 <UART_SetConfig+0x2e4>)
 80074fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007502:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007506:	2bc0      	cmp	r3, #192	@ 0xc0
 8007508:	d016      	beq.n	8007538 <UART_SetConfig+0x208>
 800750a:	2bc0      	cmp	r3, #192	@ 0xc0
 800750c:	d818      	bhi.n	8007540 <UART_SetConfig+0x210>
 800750e:	2b80      	cmp	r3, #128	@ 0x80
 8007510:	d00a      	beq.n	8007528 <UART_SetConfig+0x1f8>
 8007512:	2b80      	cmp	r3, #128	@ 0x80
 8007514:	d814      	bhi.n	8007540 <UART_SetConfig+0x210>
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <UART_SetConfig+0x1f0>
 800751a:	2b40      	cmp	r3, #64	@ 0x40
 800751c:	d008      	beq.n	8007530 <UART_SetConfig+0x200>
 800751e:	e00f      	b.n	8007540 <UART_SetConfig+0x210>
 8007520:	2300      	movs	r3, #0
 8007522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007526:	e082      	b.n	800762e <UART_SetConfig+0x2fe>
 8007528:	2302      	movs	r3, #2
 800752a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800752e:	e07e      	b.n	800762e <UART_SetConfig+0x2fe>
 8007530:	2304      	movs	r3, #4
 8007532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007536:	e07a      	b.n	800762e <UART_SetConfig+0x2fe>
 8007538:	2308      	movs	r3, #8
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753e:	e076      	b.n	800762e <UART_SetConfig+0x2fe>
 8007540:	2310      	movs	r3, #16
 8007542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007546:	e072      	b.n	800762e <UART_SetConfig+0x2fe>
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a35      	ldr	r2, [pc, #212]	@ (8007624 <UART_SetConfig+0x2f4>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d12a      	bne.n	80075a8 <UART_SetConfig+0x278>
 8007552:	4b30      	ldr	r3, [pc, #192]	@ (8007614 <UART_SetConfig+0x2e4>)
 8007554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007558:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800755c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007560:	d01a      	beq.n	8007598 <UART_SetConfig+0x268>
 8007562:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007566:	d81b      	bhi.n	80075a0 <UART_SetConfig+0x270>
 8007568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800756c:	d00c      	beq.n	8007588 <UART_SetConfig+0x258>
 800756e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007572:	d815      	bhi.n	80075a0 <UART_SetConfig+0x270>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <UART_SetConfig+0x250>
 8007578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800757c:	d008      	beq.n	8007590 <UART_SetConfig+0x260>
 800757e:	e00f      	b.n	80075a0 <UART_SetConfig+0x270>
 8007580:	2300      	movs	r3, #0
 8007582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007586:	e052      	b.n	800762e <UART_SetConfig+0x2fe>
 8007588:	2302      	movs	r3, #2
 800758a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758e:	e04e      	b.n	800762e <UART_SetConfig+0x2fe>
 8007590:	2304      	movs	r3, #4
 8007592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007596:	e04a      	b.n	800762e <UART_SetConfig+0x2fe>
 8007598:	2308      	movs	r3, #8
 800759a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800759e:	e046      	b.n	800762e <UART_SetConfig+0x2fe>
 80075a0:	2310      	movs	r3, #16
 80075a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075a6:	e042      	b.n	800762e <UART_SetConfig+0x2fe>
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a17      	ldr	r2, [pc, #92]	@ (800760c <UART_SetConfig+0x2dc>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d13a      	bne.n	8007628 <UART_SetConfig+0x2f8>
 80075b2:	4b18      	ldr	r3, [pc, #96]	@ (8007614 <UART_SetConfig+0x2e4>)
 80075b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075c0:	d01a      	beq.n	80075f8 <UART_SetConfig+0x2c8>
 80075c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075c6:	d81b      	bhi.n	8007600 <UART_SetConfig+0x2d0>
 80075c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075cc:	d00c      	beq.n	80075e8 <UART_SetConfig+0x2b8>
 80075ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075d2:	d815      	bhi.n	8007600 <UART_SetConfig+0x2d0>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d003      	beq.n	80075e0 <UART_SetConfig+0x2b0>
 80075d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075dc:	d008      	beq.n	80075f0 <UART_SetConfig+0x2c0>
 80075de:	e00f      	b.n	8007600 <UART_SetConfig+0x2d0>
 80075e0:	2300      	movs	r3, #0
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e6:	e022      	b.n	800762e <UART_SetConfig+0x2fe>
 80075e8:	2302      	movs	r3, #2
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ee:	e01e      	b.n	800762e <UART_SetConfig+0x2fe>
 80075f0:	2304      	movs	r3, #4
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f6:	e01a      	b.n	800762e <UART_SetConfig+0x2fe>
 80075f8:	2308      	movs	r3, #8
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075fe:	e016      	b.n	800762e <UART_SetConfig+0x2fe>
 8007600:	2310      	movs	r3, #16
 8007602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007606:	e012      	b.n	800762e <UART_SetConfig+0x2fe>
 8007608:	cfff69f3 	.word	0xcfff69f3
 800760c:	40008000 	.word	0x40008000
 8007610:	40013800 	.word	0x40013800
 8007614:	40021000 	.word	0x40021000
 8007618:	40004400 	.word	0x40004400
 800761c:	40004800 	.word	0x40004800
 8007620:	40004c00 	.word	0x40004c00
 8007624:	40005000 	.word	0x40005000
 8007628:	2310      	movs	r3, #16
 800762a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4aae      	ldr	r2, [pc, #696]	@ (80078ec <UART_SetConfig+0x5bc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	f040 8097 	bne.w	8007768 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800763a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800763e:	2b08      	cmp	r3, #8
 8007640:	d823      	bhi.n	800768a <UART_SetConfig+0x35a>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <UART_SetConfig+0x318>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	0800766d 	.word	0x0800766d
 800764c:	0800768b 	.word	0x0800768b
 8007650:	08007675 	.word	0x08007675
 8007654:	0800768b 	.word	0x0800768b
 8007658:	0800767b 	.word	0x0800767b
 800765c:	0800768b 	.word	0x0800768b
 8007660:	0800768b 	.word	0x0800768b
 8007664:	0800768b 	.word	0x0800768b
 8007668:	08007683 	.word	0x08007683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800766c:	f7fe fb0e 	bl	8005c8c <HAL_RCC_GetPCLK1Freq>
 8007670:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007672:	e010      	b.n	8007696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007674:	4b9e      	ldr	r3, [pc, #632]	@ (80078f0 <UART_SetConfig+0x5c0>)
 8007676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007678:	e00d      	b.n	8007696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800767a:	f7fe fa6f 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 800767e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007680:	e009      	b.n	8007696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007686:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007688:	e005      	b.n	8007696 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007694:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8130 	beq.w	80078fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a2:	4a94      	ldr	r2, [pc, #592]	@ (80078f4 <UART_SetConfig+0x5c4>)
 80076a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a8:	461a      	mov	r2, r3
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	4413      	add	r3, r2
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d305      	bcc.n	80076ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d903      	bls.n	80076d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076d4:	e113      	b.n	80078fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	2200      	movs	r2, #0
 80076da:	60bb      	str	r3, [r7, #8]
 80076dc:	60fa      	str	r2, [r7, #12]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e2:	4a84      	ldr	r2, [pc, #528]	@ (80078f4 <UART_SetConfig+0x5c4>)
 80076e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2200      	movs	r2, #0
 80076ec:	603b      	str	r3, [r7, #0]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076f8:	f7f8 fd80 	bl	80001fc <__aeabi_uldivmod>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4610      	mov	r0, r2
 8007702:	4619      	mov	r1, r3
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	020b      	lsls	r3, r1, #8
 800770e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007712:	0202      	lsls	r2, r0, #8
 8007714:	6979      	ldr	r1, [r7, #20]
 8007716:	6849      	ldr	r1, [r1, #4]
 8007718:	0849      	lsrs	r1, r1, #1
 800771a:	2000      	movs	r0, #0
 800771c:	460c      	mov	r4, r1
 800771e:	4605      	mov	r5, r0
 8007720:	eb12 0804 	adds.w	r8, r2, r4
 8007724:	eb43 0905 	adc.w	r9, r3, r5
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	469a      	mov	sl, r3
 8007730:	4693      	mov	fp, r2
 8007732:	4652      	mov	r2, sl
 8007734:	465b      	mov	r3, fp
 8007736:	4640      	mov	r0, r8
 8007738:	4649      	mov	r1, r9
 800773a:	f7f8 fd5f 	bl	80001fc <__aeabi_uldivmod>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4613      	mov	r3, r2
 8007744:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800774c:	d308      	bcc.n	8007760 <UART_SetConfig+0x430>
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007754:	d204      	bcs.n	8007760 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6a3a      	ldr	r2, [r7, #32]
 800775c:	60da      	str	r2, [r3, #12]
 800775e:	e0ce      	b.n	80078fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007766:	e0ca      	b.n	80078fe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007770:	d166      	bne.n	8007840 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007772:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007776:	2b08      	cmp	r3, #8
 8007778:	d827      	bhi.n	80077ca <UART_SetConfig+0x49a>
 800777a:	a201      	add	r2, pc, #4	@ (adr r2, 8007780 <UART_SetConfig+0x450>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	080077a5 	.word	0x080077a5
 8007784:	080077ad 	.word	0x080077ad
 8007788:	080077b5 	.word	0x080077b5
 800778c:	080077cb 	.word	0x080077cb
 8007790:	080077bb 	.word	0x080077bb
 8007794:	080077cb 	.word	0x080077cb
 8007798:	080077cb 	.word	0x080077cb
 800779c:	080077cb 	.word	0x080077cb
 80077a0:	080077c3 	.word	0x080077c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077a4:	f7fe fa72 	bl	8005c8c <HAL_RCC_GetPCLK1Freq>
 80077a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077aa:	e014      	b.n	80077d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077ac:	f7fe fa84 	bl	8005cb8 <HAL_RCC_GetPCLK2Freq>
 80077b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077b2:	e010      	b.n	80077d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077b4:	4b4e      	ldr	r3, [pc, #312]	@ (80078f0 <UART_SetConfig+0x5c0>)
 80077b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077b8:	e00d      	b.n	80077d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ba:	f7fe f9cf 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 80077be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077c0:	e009      	b.n	80077d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077c8:	e005      	b.n	80077d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 8090 	beq.w	80078fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e2:	4a44      	ldr	r2, [pc, #272]	@ (80078f4 <UART_SetConfig+0x5c4>)
 80077e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077e8:	461a      	mov	r2, r3
 80077ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80077f0:	005a      	lsls	r2, r3, #1
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	085b      	lsrs	r3, r3, #1
 80077f8:	441a      	add	r2, r3
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007802:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d916      	bls.n	8007838 <UART_SetConfig+0x508>
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007810:	d212      	bcs.n	8007838 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	b29b      	uxth	r3, r3
 8007816:	f023 030f 	bic.w	r3, r3, #15
 800781a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	085b      	lsrs	r3, r3, #1
 8007820:	b29b      	uxth	r3, r3
 8007822:	f003 0307 	and.w	r3, r3, #7
 8007826:	b29a      	uxth	r2, r3
 8007828:	8bfb      	ldrh	r3, [r7, #30]
 800782a:	4313      	orrs	r3, r2
 800782c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	8bfa      	ldrh	r2, [r7, #30]
 8007834:	60da      	str	r2, [r3, #12]
 8007836:	e062      	b.n	80078fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800783e:	e05e      	b.n	80078fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007840:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007844:	2b08      	cmp	r3, #8
 8007846:	d828      	bhi.n	800789a <UART_SetConfig+0x56a>
 8007848:	a201      	add	r2, pc, #4	@ (adr r2, 8007850 <UART_SetConfig+0x520>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	08007875 	.word	0x08007875
 8007854:	0800787d 	.word	0x0800787d
 8007858:	08007885 	.word	0x08007885
 800785c:	0800789b 	.word	0x0800789b
 8007860:	0800788b 	.word	0x0800788b
 8007864:	0800789b 	.word	0x0800789b
 8007868:	0800789b 	.word	0x0800789b
 800786c:	0800789b 	.word	0x0800789b
 8007870:	08007893 	.word	0x08007893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007874:	f7fe fa0a 	bl	8005c8c <HAL_RCC_GetPCLK1Freq>
 8007878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800787a:	e014      	b.n	80078a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800787c:	f7fe fa1c 	bl	8005cb8 <HAL_RCC_GetPCLK2Freq>
 8007880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007882:	e010      	b.n	80078a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007884:	4b1a      	ldr	r3, [pc, #104]	@ (80078f0 <UART_SetConfig+0x5c0>)
 8007886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007888:	e00d      	b.n	80078a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800788a:	f7fe f967 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 800788e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007890:	e009      	b.n	80078a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007896:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007898:	e005      	b.n	80078a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80078a4:	bf00      	nop
    }

    if (pclk != 0U)
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d028      	beq.n	80078fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b0:	4a10      	ldr	r2, [pc, #64]	@ (80078f4 <UART_SetConfig+0x5c4>)
 80078b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078b6:	461a      	mov	r2, r3
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	085b      	lsrs	r3, r3, #1
 80078c4:	441a      	add	r2, r3
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	2b0f      	cmp	r3, #15
 80078d4:	d910      	bls.n	80078f8 <UART_SetConfig+0x5c8>
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078dc:	d20c      	bcs.n	80078f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60da      	str	r2, [r3, #12]
 80078e8:	e009      	b.n	80078fe <UART_SetConfig+0x5ce>
 80078ea:	bf00      	nop
 80078ec:	40008000 	.word	0x40008000
 80078f0:	00f42400 	.word	0x00f42400
 80078f4:	0800c1e8 	.word	0x0800c1e8
      }
      else
      {
        ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2201      	movs	r2, #1
 8007902:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2201      	movs	r2, #1
 800790a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2200      	movs	r2, #0
 8007912:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2200      	movs	r2, #0
 8007918:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800791a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800791e:	4618      	mov	r0, r3
 8007920:	3730      	adds	r7, #48	@ 0x30
 8007922:	46bd      	mov	sp, r7
 8007924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	f003 0310 	and.w	r3, r3, #16
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00a      	beq.n	80079da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079de:	f003 0320 	and.w	r3, r3, #32
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01a      	beq.n	8007a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a26:	d10a      	bne.n	8007a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	605a      	str	r2, [r3, #4]
  }
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b098      	sub	sp, #96	@ 0x60
 8007a70:	af02      	add	r7, sp, #8
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a7c:	f7f9 fedc 	bl	8001838 <HAL_GetTick>
 8007a80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0308 	and.w	r3, r3, #8
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d12f      	bne.n	8007af0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f88e 	bl	8007bc0 <UART_WaitOnFlagUntilTimeout>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d022      	beq.n	8007af0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e6      	bne.n	8007aaa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e063      	b.n	8007bb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0304 	and.w	r3, r3, #4
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d149      	bne.n	8007b92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007afe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b06:	2200      	movs	r2, #0
 8007b08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f857 	bl	8007bc0 <UART_WaitOnFlagUntilTimeout>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d03c      	beq.n	8007b92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	623b      	str	r3, [r7, #32]
   return(result);
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e6      	bne.n	8007b18 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f023 0301 	bic.w	r3, r3, #1
 8007b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3308      	adds	r3, #8
 8007b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b6a:	61fa      	str	r2, [r7, #28]
 8007b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	69b9      	ldr	r1, [r7, #24]
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	617b      	str	r3, [r7, #20]
   return(result);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e5      	bne.n	8007b4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e012      	b.n	8007bb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3758      	adds	r7, #88	@ 0x58
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	603b      	str	r3, [r7, #0]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd0:	e049      	b.n	8007c66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bd8:	d045      	beq.n	8007c66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bda:	f7f9 fe2d 	bl	8001838 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d302      	bcc.n	8007bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e048      	b.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d031      	beq.n	8007c66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d110      	bne.n	8007c32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2208      	movs	r2, #8
 8007c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 f838 	bl	8007c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2208      	movs	r2, #8
 8007c22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e029      	b.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c40:	d111      	bne.n	8007c66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f81e 	bl	8007c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e00f      	b.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69da      	ldr	r2, [r3, #28]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	bf0c      	ite	eq
 8007c76:	2301      	moveq	r3, #1
 8007c78:	2300      	movne	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d0a6      	beq.n	8007bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b095      	sub	sp, #84	@ 0x54
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e6      	bne.n	8007c96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3308      	adds	r3, #8
 8007cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cde:	f023 0301 	bic.w	r3, r3, #1
 8007ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e3      	bne.n	8007cc8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d118      	bne.n	8007d3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f023 0310 	bic.w	r3, r3, #16
 8007d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d26:	61bb      	str	r3, [r7, #24]
 8007d28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6979      	ldr	r1, [r7, #20]
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	613b      	str	r3, [r7, #16]
   return(result);
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e6      	bne.n	8007d08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d4e:	bf00      	nop
 8007d50:	3754      	adds	r7, #84	@ 0x54
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d101      	bne.n	8007d70 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e027      	b.n	8007dc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2224      	movs	r2, #36	@ 0x24
 8007d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0201 	bic.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2220      	movs	r2, #32
 8007db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e02d      	b.n	8007e40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2224      	movs	r2, #36	@ 0x24
 8007df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0201 	bic.w	r2, r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f84f 	bl	8007ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d101      	bne.n	8007e60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e02d      	b.n	8007ebc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2224      	movs	r2, #36	@ 0x24
 8007e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0201 	bic.w	r2, r2, #1
 8007e86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f811 	bl	8007ec4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d108      	bne.n	8007ee6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ee4:	e031      	b.n	8007f4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007eea:	2308      	movs	r3, #8
 8007eec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	0e5b      	lsrs	r3, r3, #25
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	0f5b      	lsrs	r3, r3, #29
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	7b3a      	ldrb	r2, [r7, #12]
 8007f12:	4911      	ldr	r1, [pc, #68]	@ (8007f58 <UARTEx_SetNbDataToProcess+0x94>)
 8007f14:	5c8a      	ldrb	r2, [r1, r2]
 8007f16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f1a:	7b3a      	ldrb	r2, [r7, #12]
 8007f1c:	490f      	ldr	r1, [pc, #60]	@ (8007f5c <UARTEx_SetNbDataToProcess+0x98>)
 8007f1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	7b7a      	ldrb	r2, [r7, #13]
 8007f30:	4909      	ldr	r1, [pc, #36]	@ (8007f58 <UARTEx_SetNbDataToProcess+0x94>)
 8007f32:	5c8a      	ldrb	r2, [r1, r2]
 8007f34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f38:	7b7a      	ldrb	r2, [r7, #13]
 8007f3a:	4908      	ldr	r1, [pc, #32]	@ (8007f5c <UARTEx_SetNbDataToProcess+0x98>)
 8007f3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007f4a:	bf00      	nop
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	0800c200 	.word	0x0800c200
 8007f5c:	0800c208 	.word	0x0800c208

08007f60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f60:	b084      	sub	sp, #16
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	f107 001c 	add.w	r0, r7, #28
 8007f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 fa1c 	bl	80093bc <USB_CoreReset>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f9a:	e005      	b.n	8007fa8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fb4:	b004      	add	sp, #16
 8007fb6:	4770      	bx	lr

08007fb8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007fc6:	79fb      	ldrb	r3, [r7, #7]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d165      	bne.n	8008098 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	4a3e      	ldr	r2, [pc, #248]	@ (80080c8 <USB_SetTurnaroundTime+0x110>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d906      	bls.n	8007fe2 <USB_SetTurnaroundTime+0x2a>
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80080cc <USB_SetTurnaroundTime+0x114>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d202      	bcs.n	8007fe2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007fdc:	230f      	movs	r3, #15
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	e05c      	b.n	800809c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	4a39      	ldr	r2, [pc, #228]	@ (80080cc <USB_SetTurnaroundTime+0x114>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d306      	bcc.n	8007ff8 <USB_SetTurnaroundTime+0x40>
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	4a38      	ldr	r2, [pc, #224]	@ (80080d0 <USB_SetTurnaroundTime+0x118>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d202      	bcs.n	8007ff8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ff2:	230e      	movs	r3, #14
 8007ff4:	617b      	str	r3, [r7, #20]
 8007ff6:	e051      	b.n	800809c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	4a35      	ldr	r2, [pc, #212]	@ (80080d0 <USB_SetTurnaroundTime+0x118>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d306      	bcc.n	800800e <USB_SetTurnaroundTime+0x56>
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	4a34      	ldr	r2, [pc, #208]	@ (80080d4 <USB_SetTurnaroundTime+0x11c>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d202      	bcs.n	800800e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008008:	230d      	movs	r3, #13
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	e046      	b.n	800809c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	4a30      	ldr	r2, [pc, #192]	@ (80080d4 <USB_SetTurnaroundTime+0x11c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d306      	bcc.n	8008024 <USB_SetTurnaroundTime+0x6c>
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	4a2f      	ldr	r2, [pc, #188]	@ (80080d8 <USB_SetTurnaroundTime+0x120>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d802      	bhi.n	8008024 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800801e:	230c      	movs	r3, #12
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	e03b      	b.n	800809c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4a2c      	ldr	r2, [pc, #176]	@ (80080d8 <USB_SetTurnaroundTime+0x120>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d906      	bls.n	800803a <USB_SetTurnaroundTime+0x82>
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4a2b      	ldr	r2, [pc, #172]	@ (80080dc <USB_SetTurnaroundTime+0x124>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d802      	bhi.n	800803a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008034:	230b      	movs	r3, #11
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	e030      	b.n	800809c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	4a27      	ldr	r2, [pc, #156]	@ (80080dc <USB_SetTurnaroundTime+0x124>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d906      	bls.n	8008050 <USB_SetTurnaroundTime+0x98>
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	4a26      	ldr	r2, [pc, #152]	@ (80080e0 <USB_SetTurnaroundTime+0x128>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d802      	bhi.n	8008050 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800804a:	230a      	movs	r3, #10
 800804c:	617b      	str	r3, [r7, #20]
 800804e:	e025      	b.n	800809c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	4a23      	ldr	r2, [pc, #140]	@ (80080e0 <USB_SetTurnaroundTime+0x128>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d906      	bls.n	8008066 <USB_SetTurnaroundTime+0xae>
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	4a22      	ldr	r2, [pc, #136]	@ (80080e4 <USB_SetTurnaroundTime+0x12c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d202      	bcs.n	8008066 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008060:	2309      	movs	r3, #9
 8008062:	617b      	str	r3, [r7, #20]
 8008064:	e01a      	b.n	800809c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	4a1e      	ldr	r2, [pc, #120]	@ (80080e4 <USB_SetTurnaroundTime+0x12c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d306      	bcc.n	800807c <USB_SetTurnaroundTime+0xc4>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	4a1d      	ldr	r2, [pc, #116]	@ (80080e8 <USB_SetTurnaroundTime+0x130>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d802      	bhi.n	800807c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008076:	2308      	movs	r3, #8
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	e00f      	b.n	800809c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4a1a      	ldr	r2, [pc, #104]	@ (80080e8 <USB_SetTurnaroundTime+0x130>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d906      	bls.n	8008092 <USB_SetTurnaroundTime+0xda>
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	4a19      	ldr	r2, [pc, #100]	@ (80080ec <USB_SetTurnaroundTime+0x134>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d202      	bcs.n	8008092 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800808c:	2307      	movs	r3, #7
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	e004      	b.n	800809c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008092:	2306      	movs	r3, #6
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	e001      	b.n	800809c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008098:	2309      	movs	r3, #9
 800809a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	029b      	lsls	r3, r3, #10
 80080b0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80080b4:	431a      	orrs	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	371c      	adds	r7, #28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	00d8acbf 	.word	0x00d8acbf
 80080cc:	00e4e1c0 	.word	0x00e4e1c0
 80080d0:	00f42400 	.word	0x00f42400
 80080d4:	01067380 	.word	0x01067380
 80080d8:	011a499f 	.word	0x011a499f
 80080dc:	01312cff 	.word	0x01312cff
 80080e0:	014ca43f 	.word	0x014ca43f
 80080e4:	016e3600 	.word	0x016e3600
 80080e8:	01a6ab1f 	.word	0x01a6ab1f
 80080ec:	01e84800 	.word	0x01e84800

080080f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f043 0201 	orr.w	r2, r3, #1
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f023 0201 	bic.w	r2, r3, #1
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008140:	2300      	movs	r3, #0
 8008142:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d115      	bne.n	8008182 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008162:	2001      	movs	r0, #1
 8008164:	f7f9 fb74 	bl	8001850 <HAL_Delay>
      ms++;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3301      	adds	r3, #1
 800816c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 f8ab 	bl	80092ca <USB_GetMode>
 8008174:	4603      	mov	r3, r0
 8008176:	2b01      	cmp	r3, #1
 8008178:	d01e      	beq.n	80081b8 <USB_SetCurrentMode+0x84>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b31      	cmp	r3, #49	@ 0x31
 800817e:	d9f0      	bls.n	8008162 <USB_SetCurrentMode+0x2e>
 8008180:	e01a      	b.n	80081b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d115      	bne.n	80081b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008194:	2001      	movs	r0, #1
 8008196:	f7f9 fb5b 	bl	8001850 <HAL_Delay>
      ms++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 f892 	bl	80092ca <USB_GetMode>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d005      	beq.n	80081b8 <USB_SetCurrentMode+0x84>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b31      	cmp	r3, #49	@ 0x31
 80081b0:	d9f0      	bls.n	8008194 <USB_SetCurrentMode+0x60>
 80081b2:	e001      	b.n	80081b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e005      	b.n	80081c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b32      	cmp	r3, #50	@ 0x32
 80081bc:	d101      	bne.n	80081c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e000      	b.n	80081c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081cc:	b084      	sub	sp, #16
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b086      	sub	sp, #24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80081da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80081e6:	2300      	movs	r3, #0
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	e009      	b.n	8008200 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	3340      	adds	r3, #64	@ 0x40
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	2200      	movs	r2, #0
 80081f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	3301      	adds	r3, #1
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	2b0e      	cmp	r3, #14
 8008204:	d9f2      	bls.n	80081ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d11c      	bne.n	8008246 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800821a:	f043 0302 	orr.w	r3, r3, #2
 800821e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008224:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e005      	b.n	8008252 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008258:	461a      	mov	r2, r3
 800825a:	2300      	movs	r3, #0
 800825c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800825e:	2103      	movs	r1, #3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f959 	bl	8008518 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008266:	2110      	movs	r1, #16
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f8f1 	bl	8008450 <USB_FlushTxFifo>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f91d 	bl	80084b8 <USB_FlushRxFifo>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800828e:	461a      	mov	r2, r3
 8008290:	2300      	movs	r3, #0
 8008292:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800829a:	461a      	mov	r2, r3
 800829c:	2300      	movs	r3, #0
 800829e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082a6:	461a      	mov	r2, r3
 80082a8:	2300      	movs	r3, #0
 80082aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082ac:	2300      	movs	r3, #0
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	e043      	b.n	800833a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082c8:	d118      	bne.n	80082fc <USB_DevInit+0x130>
    {
      if (i == 0U)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10a      	bne.n	80082e6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082dc:	461a      	mov	r2, r3
 80082de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	e013      	b.n	800830e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082f2:	461a      	mov	r2, r3
 80082f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	e008      	b.n	800830e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008308:	461a      	mov	r2, r3
 800830a:	2300      	movs	r3, #0
 800830c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800831a:	461a      	mov	r2, r3
 800831c:	2300      	movs	r3, #0
 800831e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800832c:	461a      	mov	r2, r3
 800832e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008332:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	3301      	adds	r3, #1
 8008338:	613b      	str	r3, [r7, #16]
 800833a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	429a      	cmp	r2, r3
 8008340:	d3b7      	bcc.n	80082b2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008342:	2300      	movs	r3, #0
 8008344:	613b      	str	r3, [r7, #16]
 8008346:	e043      	b.n	80083d0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800835a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800835e:	d118      	bne.n	8008392 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10a      	bne.n	800837c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008372:	461a      	mov	r2, r3
 8008374:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008378:	6013      	str	r3, [r2, #0]
 800837a:	e013      	b.n	80083a4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008388:	461a      	mov	r2, r3
 800838a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	e008      	b.n	80083a4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4413      	add	r3, r2
 800839a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839e:	461a      	mov	r2, r3
 80083a0:	2300      	movs	r3, #0
 80083a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083b0:	461a      	mov	r2, r3
 80083b2:	2300      	movs	r3, #0
 80083b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c2:	461a      	mov	r2, r3
 80083c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80083c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	3301      	adds	r3, #1
 80083ce:	613b      	str	r3, [r7, #16]
 80083d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d3b7      	bcc.n	8008348 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80083f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	f043 0210 	orr.w	r2, r3, #16
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	4b10      	ldr	r3, [pc, #64]	@ (800844c <USB_DevInit+0x280>)
 800840c:	4313      	orrs	r3, r2
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d005      	beq.n	8008424 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	f043 0208 	orr.w	r2, r3, #8
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008426:	2b01      	cmp	r3, #1
 8008428:	d107      	bne.n	800843a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008432:	f043 0304 	orr.w	r3, r3, #4
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800843a:	7dfb      	ldrb	r3, [r7, #23]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008446:	b004      	add	sp, #16
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	803c3800 	.word	0x803c3800

08008450 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3301      	adds	r3, #1
 8008462:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4a13      	ldr	r2, [pc, #76]	@ (80084b4 <USB_FlushTxFifo+0x64>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d901      	bls.n	8008470 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e01b      	b.n	80084a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	daf2      	bge.n	800845e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008478:	2300      	movs	r3, #0
 800847a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	019b      	lsls	r3, r3, #6
 8008480:	f043 0220 	orr.w	r2, r3, #32
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3301      	adds	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4a08      	ldr	r2, [pc, #32]	@ (80084b4 <USB_FlushTxFifo+0x64>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d901      	bls.n	800849a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e006      	b.n	80084a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	d0f0      	beq.n	8008488 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	00030d40 	.word	0x00030d40

080084b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3301      	adds	r3, #1
 80084c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4a11      	ldr	r2, [pc, #68]	@ (8008514 <USB_FlushRxFifo+0x5c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d901      	bls.n	80084d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e018      	b.n	8008508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	daf2      	bge.n	80084c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2210      	movs	r2, #16
 80084e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	3301      	adds	r3, #1
 80084ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4a08      	ldr	r2, [pc, #32]	@ (8008514 <USB_FlushRxFifo+0x5c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d901      	bls.n	80084fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e006      	b.n	8008508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	f003 0310 	and.w	r3, r3, #16
 8008502:	2b10      	cmp	r3, #16
 8008504:	d0f0      	beq.n	80084e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	00030d40 	.word	0x00030d40

08008518 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	68f9      	ldr	r1, [r7, #12]
 8008534:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008538:	4313      	orrs	r3, r2
 800853a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800854a:	b480      	push	{r7}
 800854c:	b087      	sub	sp, #28
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f003 0306 	and.w	r3, r3, #6
 8008562:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d002      	beq.n	8008570 <USB_GetDevSpeed+0x26>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b06      	cmp	r3, #6
 800856e:	d102      	bne.n	8008576 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008570:	2302      	movs	r3, #2
 8008572:	75fb      	strb	r3, [r7, #23]
 8008574:	e001      	b.n	800857a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008576:	230f      	movs	r3, #15
 8008578:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800857a:	7dfb      	ldrb	r3, [r7, #23]
}
 800857c:	4618      	mov	r0, r3
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	785b      	ldrb	r3, [r3, #1]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d13a      	bne.n	800861a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085aa:	69da      	ldr	r2, [r3, #28]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	f003 030f 	and.w	r3, r3, #15
 80085b4:	2101      	movs	r1, #1
 80085b6:	fa01 f303 	lsl.w	r3, r1, r3
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	68f9      	ldr	r1, [r7, #12]
 80085be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085c2:	4313      	orrs	r3, r2
 80085c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d155      	bne.n	8008688 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	791b      	ldrb	r3, [r3, #4]
 80085f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80085f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	059b      	lsls	r3, r3, #22
 80085fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008600:	4313      	orrs	r3, r2
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	440a      	add	r2, r1
 800860a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800860e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	e036      	b.n	8008688 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008620:	69da      	ldr	r2, [r3, #28]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	2101      	movs	r1, #1
 800862c:	fa01 f303 	lsl.w	r3, r1, r3
 8008630:	041b      	lsls	r3, r3, #16
 8008632:	68f9      	ldr	r1, [r7, #12]
 8008634:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008638:	4313      	orrs	r3, r2
 800863a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d11a      	bne.n	8008688 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	791b      	ldrb	r3, [r3, #4]
 800866c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800866e:	430b      	orrs	r3, r1
 8008670:	4313      	orrs	r3, r2
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	440a      	add	r2, r1
 800867a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800867e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008686:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
	...

08008698 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d161      	bne.n	8008778 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086ca:	d11f      	bne.n	800870c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	0151      	lsls	r1, r2, #5
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	440a      	add	r2, r1
 80086e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80086ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	0151      	lsls	r1, r2, #5
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	440a      	add	r2, r1
 8008702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008706:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800870a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008712:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	f003 030f 	and.w	r3, r3, #15
 800871c:	2101      	movs	r1, #1
 800871e:	fa01 f303 	lsl.w	r3, r1, r3
 8008722:	b29b      	uxth	r3, r3
 8008724:	43db      	mvns	r3, r3
 8008726:	68f9      	ldr	r1, [r7, #12]
 8008728:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800872c:	4013      	ands	r3, r2
 800872e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008736:	69da      	ldr	r2, [r3, #28]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	f003 030f 	and.w	r3, r3, #15
 8008740:	2101      	movs	r1, #1
 8008742:	fa01 f303 	lsl.w	r3, r1, r3
 8008746:	b29b      	uxth	r3, r3
 8008748:	43db      	mvns	r3, r3
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008750:	4013      	ands	r3, r2
 8008752:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	0159      	lsls	r1, r3, #5
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	440b      	add	r3, r1
 800876a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800876e:	4619      	mov	r1, r3
 8008770:	4b35      	ldr	r3, [pc, #212]	@ (8008848 <USB_DeactivateEndpoint+0x1b0>)
 8008772:	4013      	ands	r3, r2
 8008774:	600b      	str	r3, [r1, #0]
 8008776:	e060      	b.n	800883a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800878a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800878e:	d11f      	bne.n	80087d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	0151      	lsls	r1, r2, #5
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	440a      	add	r2, r1
 80087a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	0151      	lsls	r1, r2, #5
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	440a      	add	r2, r1
 80087c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	f003 030f 	and.w	r3, r3, #15
 80087e0:	2101      	movs	r1, #1
 80087e2:	fa01 f303 	lsl.w	r3, r1, r3
 80087e6:	041b      	lsls	r3, r3, #16
 80087e8:	43db      	mvns	r3, r3
 80087ea:	68f9      	ldr	r1, [r7, #12]
 80087ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087f0:	4013      	ands	r3, r2
 80087f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087fa:	69da      	ldr	r2, [r3, #28]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	f003 030f 	and.w	r3, r3, #15
 8008804:	2101      	movs	r1, #1
 8008806:	fa01 f303 	lsl.w	r3, r1, r3
 800880a:	041b      	lsls	r3, r3, #16
 800880c:	43db      	mvns	r3, r3
 800880e:	68f9      	ldr	r1, [r7, #12]
 8008810:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008814:	4013      	ands	r3, r2
 8008816:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	0159      	lsls	r1, r3, #5
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	440b      	add	r3, r1
 800882e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008832:	4619      	mov	r1, r3
 8008834:	4b05      	ldr	r3, [pc, #20]	@ (800884c <USB_DeactivateEndpoint+0x1b4>)
 8008836:	4013      	ands	r3, r2
 8008838:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	ec337800 	.word	0xec337800
 800884c:	eff37800 	.word	0xeff37800

08008850 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	2b01      	cmp	r3, #1
 800886a:	f040 8128 	bne.w	8008abe <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d132      	bne.n	80088dc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	0151      	lsls	r1, r2, #5
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	440a      	add	r2, r1
 800888c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008890:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008894:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	0151      	lsls	r1, r2, #5
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	440a      	add	r2, r1
 80088b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	0151      	lsls	r1, r2, #5
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	440a      	add	r2, r1
 80088d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088d4:	0cdb      	lsrs	r3, r3, #19
 80088d6:	04db      	lsls	r3, r3, #19
 80088d8:	6113      	str	r3, [r2, #16]
 80088da:	e092      	b.n	8008a02 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	0151      	lsls	r1, r2, #5
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	440a      	add	r2, r1
 80088f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088f6:	0cdb      	lsrs	r3, r3, #19
 80088f8:	04db      	lsls	r3, r3, #19
 80088fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	0151      	lsls	r1, r2, #5
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	440a      	add	r2, r1
 8008912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008916:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800891a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800891e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d11a      	bne.n	800895c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	691a      	ldr	r2, [r3, #16]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	429a      	cmp	r2, r3
 8008930:	d903      	bls.n	800893a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	689a      	ldr	r2, [r3, #8]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	0151      	lsls	r1, r2, #5
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	440a      	add	r2, r1
 8008950:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008954:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008958:	6113      	str	r3, [r2, #16]
 800895a:	e01b      	b.n	8008994 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008968:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	6919      	ldr	r1, [r3, #16]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	440b      	add	r3, r1
 8008974:	1e59      	subs	r1, r3, #1
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	fbb1 f3f3 	udiv	r3, r1, r3
 800897e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008980:	4b8d      	ldr	r3, [pc, #564]	@ (8008bb8 <USB_EPStartXfer+0x368>)
 8008982:	400b      	ands	r3, r1
 8008984:	6939      	ldr	r1, [r7, #16]
 8008986:	0148      	lsls	r0, r1, #5
 8008988:	6979      	ldr	r1, [r7, #20]
 800898a:	4401      	add	r1, r0
 800898c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008990:	4313      	orrs	r3, r2
 8008992:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a0:	691a      	ldr	r2, [r3, #16]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089aa:	6939      	ldr	r1, [r7, #16]
 80089ac:	0148      	lsls	r0, r1, #5
 80089ae:	6979      	ldr	r1, [r7, #20]
 80089b0:	4401      	add	r1, r0
 80089b2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80089b6:	4313      	orrs	r3, r2
 80089b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	791b      	ldrb	r3, [r3, #4]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d11f      	bne.n	8008a02 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	015a      	lsls	r2, r3, #5
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	0151      	lsls	r1, r2, #5
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	440a      	add	r2, r1
 80089d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089dc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80089e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	0151      	lsls	r1, r2, #5
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	440a      	add	r2, r1
 80089f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a00:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	0151      	lsls	r1, r2, #5
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	440a      	add	r2, r1
 8008a18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008a20:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	791b      	ldrb	r3, [r3, #4]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d015      	beq.n	8008a56 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 8139 	beq.w	8008ca6 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	f003 030f 	and.w	r3, r3, #15
 8008a44:	2101      	movs	r1, #1
 8008a46:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4a:	6979      	ldr	r1, [r7, #20]
 8008a4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a50:	4313      	orrs	r3, r2
 8008a52:	634b      	str	r3, [r1, #52]	@ 0x34
 8008a54:	e127      	b.n	8008ca6 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d110      	bne.n	8008a88 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	0151      	lsls	r1, r2, #5
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	440a      	add	r2, r1
 8008a7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	e00f      	b.n	8008aa8 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	0151      	lsls	r1, r2, #5
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	440a      	add	r2, r1
 8008a9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008aa6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	68d9      	ldr	r1, [r3, #12]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781a      	ldrb	r2, [r3, #0]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f9a6 	bl	8008e08 <USB_WritePacket>
 8008abc:	e0f3      	b.n	8008ca6 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ad8:	0cdb      	lsrs	r3, r3, #19
 8008ada:	04db      	lsls	r3, r3, #19
 8008adc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008af8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008afc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008b00:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d12f      	bne.n	8008b68 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b2c:	691a      	ldr	r2, [r3, #16]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b36:	6939      	ldr	r1, [r7, #16]
 8008b38:	0148      	lsls	r0, r1, #5
 8008b3a:	6979      	ldr	r1, [r7, #20]
 8008b3c:	4401      	add	r1, r0
 8008b3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b42:	4313      	orrs	r3, r2
 8008b44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	0151      	lsls	r1, r2, #5
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	440a      	add	r2, r1
 8008b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b64:	6113      	str	r3, [r2, #16]
 8008b66:	e061      	b.n	8008c2c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d125      	bne.n	8008bbc <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b7c:	691a      	ldr	r2, [r3, #16]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b86:	6939      	ldr	r1, [r7, #16]
 8008b88:	0148      	lsls	r0, r1, #5
 8008b8a:	6979      	ldr	r1, [r7, #20]
 8008b8c:	4401      	add	r1, r0
 8008b8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b92:	4313      	orrs	r3, r2
 8008b94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	0151      	lsls	r1, r2, #5
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	440a      	add	r2, r1
 8008bac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bb4:	6113      	str	r3, [r2, #16]
 8008bb6:	e039      	b.n	8008c2c <USB_EPStartXfer+0x3dc>
 8008bb8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	691a      	ldr	r2, [r3, #16]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	1e5a      	subs	r2, r3, #1
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd0:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	89fa      	ldrh	r2, [r7, #14]
 8008bd8:	fb03 f202 	mul.w	r2, r3, r2
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bec:	691a      	ldr	r2, [r3, #16]
 8008bee:	89fb      	ldrh	r3, [r7, #14]
 8008bf0:	04d9      	lsls	r1, r3, #19
 8008bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8008cb0 <USB_EPStartXfer+0x460>)
 8008bf4:	400b      	ands	r3, r1
 8008bf6:	6939      	ldr	r1, [r7, #16]
 8008bf8:	0148      	lsls	r0, r1, #5
 8008bfa:	6979      	ldr	r1, [r7, #20]
 8008bfc:	4401      	add	r1, r0
 8008bfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008c02:	4313      	orrs	r3, r2
 8008c04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c12:	691a      	ldr	r2, [r3, #16]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c1c:	6939      	ldr	r1, [r7, #16]
 8008c1e:	0148      	lsls	r0, r1, #5
 8008c20:	6979      	ldr	r1, [r7, #20]
 8008c22:	4401      	add	r1, r0
 8008c24:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	791b      	ldrb	r3, [r3, #4]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d128      	bne.n	8008c86 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d110      	bne.n	8008c66 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	0151      	lsls	r1, r2, #5
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	440a      	add	r2, r1
 8008c5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	e00f      	b.n	8008c86 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	0151      	lsls	r1, r2, #5
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	440a      	add	r2, r1
 8008c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c84:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	0151      	lsls	r1, r2, #5
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ca0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ca4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	1ff80000 	.word	0x1ff80000

08008cb4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	785b      	ldrb	r3, [r3, #1]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d14a      	bne.n	8008d68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cea:	f040 8086 	bne.w	8008dfa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	7812      	ldrb	r2, [r2, #0]
 8008d02:	0151      	lsls	r1, r2, #5
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	440a      	add	r2, r1
 8008d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	7812      	ldrb	r2, [r2, #0]
 8008d26:	0151      	lsls	r1, r2, #5
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	440a      	add	r2, r1
 8008d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d902      	bls.n	8008d4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	75fb      	strb	r3, [r7, #23]
          break;
 8008d4a:	e056      	b.n	8008dfa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d64:	d0e7      	beq.n	8008d36 <USB_EPStopXfer+0x82>
 8008d66:	e048      	b.n	8008dfa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d80:	d13b      	bne.n	8008dfa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	7812      	ldrb	r2, [r2, #0]
 8008d96:	0151      	lsls	r1, r2, #5
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	440a      	add	r2, r1
 8008d9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008da0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008da4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	7812      	ldrb	r2, [r2, #0]
 8008dba:	0151      	lsls	r1, r2, #5
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	440a      	add	r2, r1
 8008dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008dc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d902      	bls.n	8008de0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8008dde:	e00c      	b.n	8008dfa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008df4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008df8:	d0e7      	beq.n	8008dca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	371c      	adds	r7, #28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b089      	sub	sp, #36	@ 0x24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4611      	mov	r1, r2
 8008e14:	461a      	mov	r2, r3
 8008e16:	460b      	mov	r3, r1
 8008e18:	71fb      	strb	r3, [r7, #7]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008e26:	88bb      	ldrh	r3, [r7, #4]
 8008e28:	3303      	adds	r3, #3
 8008e2a:	089b      	lsrs	r3, r3, #2
 8008e2c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61bb      	str	r3, [r7, #24]
 8008e32:	e018      	b.n	8008e66 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	031a      	lsls	r2, r3, #12
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e40:	461a      	mov	r2, r3
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	3301      	adds	r3, #1
 8008e52:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	3301      	adds	r3, #1
 8008e58:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	3301      	adds	r3, #1
 8008e64:	61bb      	str	r3, [r7, #24]
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d3e2      	bcc.n	8008e34 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3724      	adds	r7, #36	@ 0x24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b08b      	sub	sp, #44	@ 0x2c
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	4613      	mov	r3, r2
 8008e88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e92:	88fb      	ldrh	r3, [r7, #6]
 8008e94:	089b      	lsrs	r3, r3, #2
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e9a:	88fb      	ldrh	r3, [r7, #6]
 8008e9c:	f003 0303 	and.w	r3, r3, #3
 8008ea0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	623b      	str	r3, [r7, #32]
 8008ea6:	e014      	b.n	8008ed2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	3301      	adds	r3, #1
 8008eca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	623b      	str	r3, [r7, #32]
 8008ed2:	6a3a      	ldr	r2, [r7, #32]
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d3e6      	bcc.n	8008ea8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008eda:	8bfb      	ldrh	r3, [r7, #30]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01e      	beq.n	8008f1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008eea:	461a      	mov	r2, r3
 8008eec:	f107 0310 	add.w	r3, r7, #16
 8008ef0:	6812      	ldr	r2, [r2, #0]
 8008ef2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	fa22 f303 	lsr.w	r3, r2, r3
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f04:	701a      	strb	r2, [r3, #0]
      i++;
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0e:	3301      	adds	r3, #1
 8008f10:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008f12:	8bfb      	ldrh	r3, [r7, #30]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f18:	8bfb      	ldrh	r3, [r7, #30]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1ea      	bne.n	8008ef4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	372c      	adds	r7, #44	@ 0x2c
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d12c      	bne.n	8008fa2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	db12      	blt.n	8008f80 <USB_EPSetStall+0x54>
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00f      	beq.n	8008f80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	0151      	lsls	r1, r2, #5
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	440a      	add	r2, r1
 8008f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	0151      	lsls	r1, r2, #5
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	440a      	add	r2, r1
 8008f96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	e02b      	b.n	8008ffa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	db12      	blt.n	8008fda <USB_EPSetStall+0xae>
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00f      	beq.n	8008fda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	0151      	lsls	r1, r2, #5
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	440a      	add	r2, r1
 8008fd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008fd8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	015a      	lsls	r2, r3, #5
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	0151      	lsls	r1, r2, #5
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	440a      	add	r2, r1
 8008ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ff4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008ff8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	785b      	ldrb	r3, [r3, #1]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d128      	bne.n	8009076 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	0151      	lsls	r1, r2, #5
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	440a      	add	r2, r1
 800903a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800903e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009042:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	791b      	ldrb	r3, [r3, #4]
 8009048:	2b03      	cmp	r3, #3
 800904a:	d003      	beq.n	8009054 <USB_EPClearStall+0x4c>
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	791b      	ldrb	r3, [r3, #4]
 8009050:	2b02      	cmp	r3, #2
 8009052:	d138      	bne.n	80090c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	0151      	lsls	r1, r2, #5
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	440a      	add	r2, r1
 800906a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800906e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	e027      	b.n	80090c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	0151      	lsls	r1, r2, #5
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	440a      	add	r2, r1
 800908c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009090:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009094:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	791b      	ldrb	r3, [r3, #4]
 800909a:	2b03      	cmp	r3, #3
 800909c:	d003      	beq.n	80090a6 <USB_EPClearStall+0x9e>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	791b      	ldrb	r3, [r3, #4]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d10f      	bne.n	80090c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	0151      	lsls	r1, r2, #5
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	440a      	add	r2, r1
 80090bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80090f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	78fb      	ldrb	r3, [r7, #3]
 8009102:	011b      	lsls	r3, r3, #4
 8009104:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009108:	68f9      	ldr	r1, [r7, #12]
 800910a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800910e:	4313      	orrs	r3, r2
 8009110:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800913a:	f023 0303 	bic.w	r3, r3, #3
 800913e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800914e:	f023 0302 	bic.w	r3, r3, #2
 8009152:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009162:	b480      	push	{r7}
 8009164:	b085      	sub	sp, #20
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800917c:	f023 0303 	bic.w	r3, r3, #3
 8009180:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009190:	f043 0302 	orr.w	r3, r3, #2
 8009194:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	4013      	ands	r3, r2
 80091ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091bc:	68fb      	ldr	r3, [r7, #12]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b085      	sub	sp, #20
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	4013      	ands	r3, r2
 80091ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	0c1b      	lsrs	r3, r3, #16
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091fe:	b480      	push	{r7}
 8009200:	b085      	sub	sp, #20
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	4013      	ands	r3, r2
 8009220:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	b29b      	uxth	r3, r3
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009232:	b480      	push	{r7}
 8009234:	b085      	sub	sp, #20
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009242:	78fb      	ldrb	r3, [r7, #3]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	4013      	ands	r3, r2
 800925e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009260:	68bb      	ldr	r3, [r7, #8]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800926e:	b480      	push	{r7}
 8009270:	b087      	sub	sp, #28
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	460b      	mov	r3, r1
 8009278:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800928e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009290:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009292:	78fb      	ldrb	r3, [r7, #3]
 8009294:	f003 030f 	and.w	r3, r3, #15
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	fa22 f303 	lsr.w	r3, r2, r3
 800929e:	01db      	lsls	r3, r3, #7
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80092a8:	78fb      	ldrb	r3, [r7, #3]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	4013      	ands	r3, r2
 80092ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092bc:	68bb      	ldr	r3, [r7, #8]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b083      	sub	sp, #12
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	f003 0301 	and.w	r3, r3, #1
}
 80092da:	4618      	mov	r0, r3
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b085      	sub	sp, #20
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009300:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009304:	f023 0307 	bic.w	r3, r3, #7
 8009308:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800931c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	333c      	adds	r3, #60	@ 0x3c
 800933e:	3304      	adds	r3, #4
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	4a1c      	ldr	r2, [pc, #112]	@ (80093b8 <USB_EP0_OutStart+0x8c>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d90a      	bls.n	8009362 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009358:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800935c:	d101      	bne.n	8009362 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	e024      	b.n	80093ac <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009368:	461a      	mov	r2, r3
 800936a:	2300      	movs	r3, #0
 800936c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800937c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009380:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009390:	f043 0318 	orr.w	r3, r3, #24
 8009394:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80093a8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	4f54300a 	.word	0x4f54300a

080093bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	3301      	adds	r3, #1
 80093cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4a13      	ldr	r2, [pc, #76]	@ (8009420 <USB_CoreReset+0x64>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d901      	bls.n	80093da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e01b      	b.n	8009412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	daf2      	bge.n	80093c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f043 0201 	orr.w	r2, r3, #1
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3301      	adds	r3, #1
 80093f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4a09      	ldr	r2, [pc, #36]	@ (8009420 <USB_CoreReset+0x64>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d901      	bls.n	8009404 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e006      	b.n	8009412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b01      	cmp	r3, #1
 800940e:	d0f0      	beq.n	80093f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	00030d40 	.word	0x00030d40

08009424 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009430:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009434:	f002 fe2c 	bl	800c090 <USBD_static_malloc>
 8009438:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d109      	bne.n	8009454 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	32b0      	adds	r2, #176	@ 0xb0
 800944a:	2100      	movs	r1, #0
 800944c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009450:	2302      	movs	r3, #2
 8009452:	e0d4      	b.n	80095fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009454:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009458:	2100      	movs	r1, #0
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f002 fe36 	bl	800c0cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	32b0      	adds	r2, #176	@ 0xb0
 800946a:	68f9      	ldr	r1, [r7, #12]
 800946c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	32b0      	adds	r2, #176	@ 0xb0
 800947a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	7c1b      	ldrb	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d138      	bne.n	80094fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800948c:	4b5e      	ldr	r3, [pc, #376]	@ (8009608 <USBD_CDC_Init+0x1e4>)
 800948e:	7819      	ldrb	r1, [r3, #0]
 8009490:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009494:	2202      	movs	r2, #2
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f002 fbe6 	bl	800bc68 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800949c:	4b5a      	ldr	r3, [pc, #360]	@ (8009608 <USBD_CDC_Init+0x1e4>)
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	f003 020f 	and.w	r2, r3, #15
 80094a4:	6879      	ldr	r1, [r7, #4]
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	440b      	add	r3, r1
 80094b0:	3324      	adds	r3, #36	@ 0x24
 80094b2:	2201      	movs	r2, #1
 80094b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094b6:	4b55      	ldr	r3, [pc, #340]	@ (800960c <USBD_CDC_Init+0x1e8>)
 80094b8:	7819      	ldrb	r1, [r3, #0]
 80094ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094be:	2202      	movs	r2, #2
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f002 fbd1 	bl	800bc68 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094c6:	4b51      	ldr	r3, [pc, #324]	@ (800960c <USBD_CDC_Init+0x1e8>)
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	f003 020f 	and.w	r2, r3, #15
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	4613      	mov	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094de:	2201      	movs	r2, #1
 80094e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80094e2:	4b4b      	ldr	r3, [pc, #300]	@ (8009610 <USBD_CDC_Init+0x1ec>)
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	f003 020f 	and.w	r2, r3, #15
 80094ea:	6879      	ldr	r1, [r7, #4]
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	440b      	add	r3, r1
 80094f6:	3326      	adds	r3, #38	@ 0x26
 80094f8:	2210      	movs	r2, #16
 80094fa:	801a      	strh	r2, [r3, #0]
 80094fc:	e035      	b.n	800956a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80094fe:	4b42      	ldr	r3, [pc, #264]	@ (8009608 <USBD_CDC_Init+0x1e4>)
 8009500:	7819      	ldrb	r1, [r3, #0]
 8009502:	2340      	movs	r3, #64	@ 0x40
 8009504:	2202      	movs	r2, #2
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f002 fbae 	bl	800bc68 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800950c:	4b3e      	ldr	r3, [pc, #248]	@ (8009608 <USBD_CDC_Init+0x1e4>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	f003 020f 	and.w	r2, r3, #15
 8009514:	6879      	ldr	r1, [r7, #4]
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	440b      	add	r3, r1
 8009520:	3324      	adds	r3, #36	@ 0x24
 8009522:	2201      	movs	r2, #1
 8009524:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009526:	4b39      	ldr	r3, [pc, #228]	@ (800960c <USBD_CDC_Init+0x1e8>)
 8009528:	7819      	ldrb	r1, [r3, #0]
 800952a:	2340      	movs	r3, #64	@ 0x40
 800952c:	2202      	movs	r2, #2
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f002 fb9a 	bl	800bc68 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009534:	4b35      	ldr	r3, [pc, #212]	@ (800960c <USBD_CDC_Init+0x1e8>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	f003 020f 	and.w	r2, r3, #15
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	440b      	add	r3, r1
 8009548:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800954c:	2201      	movs	r2, #1
 800954e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009550:	4b2f      	ldr	r3, [pc, #188]	@ (8009610 <USBD_CDC_Init+0x1ec>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	f003 020f 	and.w	r2, r3, #15
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	440b      	add	r3, r1
 8009564:	3326      	adds	r3, #38	@ 0x26
 8009566:	2210      	movs	r2, #16
 8009568:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800956a:	4b29      	ldr	r3, [pc, #164]	@ (8009610 <USBD_CDC_Init+0x1ec>)
 800956c:	7819      	ldrb	r1, [r3, #0]
 800956e:	2308      	movs	r3, #8
 8009570:	2203      	movs	r2, #3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f002 fb78 	bl	800bc68 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009578:	4b25      	ldr	r3, [pc, #148]	@ (8009610 <USBD_CDC_Init+0x1ec>)
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	f003 020f 	and.w	r2, r3, #15
 8009580:	6879      	ldr	r1, [r7, #4]
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	440b      	add	r3, r1
 800958c:	3324      	adds	r3, #36	@ 0x24
 800958e:	2201      	movs	r2, #1
 8009590:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	33b0      	adds	r3, #176	@ 0xb0
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80095c8:	2302      	movs	r3, #2
 80095ca:	e018      	b.n	80095fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	7c1b      	ldrb	r3, [r3, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10a      	bne.n	80095ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095d4:	4b0d      	ldr	r3, [pc, #52]	@ (800960c <USBD_CDC_Init+0x1e8>)
 80095d6:	7819      	ldrb	r1, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f002 fcba 	bl	800bf5c <USBD_LL_PrepareReceive>
 80095e8:	e008      	b.n	80095fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095ea:	4b08      	ldr	r3, [pc, #32]	@ (800960c <USBD_CDC_Init+0x1e8>)
 80095ec:	7819      	ldrb	r1, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095f4:	2340      	movs	r3, #64	@ 0x40
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f002 fcb0 	bl	800bf5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	20000093 	.word	0x20000093
 800960c:	20000094 	.word	0x20000094
 8009610:	20000095 	.word	0x20000095

08009614 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009620:	4b3a      	ldr	r3, [pc, #232]	@ (800970c <USBD_CDC_DeInit+0xf8>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f002 fb5c 	bl	800bce4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800962c:	4b37      	ldr	r3, [pc, #220]	@ (800970c <USBD_CDC_DeInit+0xf8>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	f003 020f 	and.w	r2, r3, #15
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	3324      	adds	r3, #36	@ 0x24
 8009642:	2200      	movs	r2, #0
 8009644:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009646:	4b32      	ldr	r3, [pc, #200]	@ (8009710 <USBD_CDC_DeInit+0xfc>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f002 fb49 	bl	800bce4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009652:	4b2f      	ldr	r3, [pc, #188]	@ (8009710 <USBD_CDC_DeInit+0xfc>)
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f003 020f 	and.w	r2, r3, #15
 800965a:	6879      	ldr	r1, [r7, #4]
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	440b      	add	r3, r1
 8009666:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800966a:	2200      	movs	r2, #0
 800966c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800966e:	4b29      	ldr	r3, [pc, #164]	@ (8009714 <USBD_CDC_DeInit+0x100>)
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f002 fb35 	bl	800bce4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800967a:	4b26      	ldr	r3, [pc, #152]	@ (8009714 <USBD_CDC_DeInit+0x100>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	f003 020f 	and.w	r2, r3, #15
 8009682:	6879      	ldr	r1, [r7, #4]
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	440b      	add	r3, r1
 800968e:	3324      	adds	r3, #36	@ 0x24
 8009690:	2200      	movs	r2, #0
 8009692:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009694:	4b1f      	ldr	r3, [pc, #124]	@ (8009714 <USBD_CDC_DeInit+0x100>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	f003 020f 	and.w	r2, r3, #15
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	440b      	add	r3, r1
 80096a8:	3326      	adds	r3, #38	@ 0x26
 80096aa:	2200      	movs	r2, #0
 80096ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	32b0      	adds	r2, #176	@ 0xb0
 80096b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01f      	beq.n	8009700 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	33b0      	adds	r3, #176	@ 0xb0
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	32b0      	adds	r2, #176	@ 0xb0
 80096de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f002 fce2 	bl	800c0ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	32b0      	adds	r2, #176	@ 0xb0
 80096f2:	2100      	movs	r1, #0
 80096f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000093 	.word	0x20000093
 8009710:	20000094 	.word	0x20000094
 8009714:	20000095 	.word	0x20000095

08009718 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	32b0      	adds	r2, #176	@ 0xb0
 800972c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009730:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009744:	2303      	movs	r3, #3
 8009746:	e0bf      	b.n	80098c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009750:	2b00      	cmp	r3, #0
 8009752:	d050      	beq.n	80097f6 <USBD_CDC_Setup+0xde>
 8009754:	2b20      	cmp	r3, #32
 8009756:	f040 80af 	bne.w	80098b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	88db      	ldrh	r3, [r3, #6]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d03a      	beq.n	80097d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	b25b      	sxtb	r3, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	da1b      	bge.n	80097a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	33b0      	adds	r3, #176	@ 0xb0
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009782:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	88d2      	ldrh	r2, [r2, #6]
 8009788:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	88db      	ldrh	r3, [r3, #6]
 800978e:	2b07      	cmp	r3, #7
 8009790:	bf28      	it	cs
 8009792:	2307      	movcs	r3, #7
 8009794:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	89fa      	ldrh	r2, [r7, #14]
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f001 fdb1 	bl	800b304 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80097a2:	e090      	b.n	80098c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	785a      	ldrb	r2, [r3, #1]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	88db      	ldrh	r3, [r3, #6]
 80097b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80097b4:	d803      	bhi.n	80097be <USBD_CDC_Setup+0xa6>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	88db      	ldrh	r3, [r3, #6]
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	e000      	b.n	80097c0 <USBD_CDC_Setup+0xa8>
 80097be:	2240      	movs	r2, #64	@ 0x40
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80097c6:	6939      	ldr	r1, [r7, #16]
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80097ce:	461a      	mov	r2, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 fdc3 	bl	800b35c <USBD_CtlPrepareRx>
      break;
 80097d6:	e076      	b.n	80098c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	33b0      	adds	r3, #176	@ 0xb0
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	7850      	ldrb	r0, [r2, #1]
 80097ee:	2200      	movs	r2, #0
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	4798      	blx	r3
      break;
 80097f4:	e067      	b.n	80098c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	785b      	ldrb	r3, [r3, #1]
 80097fa:	2b0b      	cmp	r3, #11
 80097fc:	d851      	bhi.n	80098a2 <USBD_CDC_Setup+0x18a>
 80097fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009804 <USBD_CDC_Setup+0xec>)
 8009800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009804:	08009835 	.word	0x08009835
 8009808:	080098b1 	.word	0x080098b1
 800980c:	080098a3 	.word	0x080098a3
 8009810:	080098a3 	.word	0x080098a3
 8009814:	080098a3 	.word	0x080098a3
 8009818:	080098a3 	.word	0x080098a3
 800981c:	080098a3 	.word	0x080098a3
 8009820:	080098a3 	.word	0x080098a3
 8009824:	080098a3 	.word	0x080098a3
 8009828:	080098a3 	.word	0x080098a3
 800982c:	0800985f 	.word	0x0800985f
 8009830:	08009889 	.word	0x08009889
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b03      	cmp	r3, #3
 800983e:	d107      	bne.n	8009850 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009840:	f107 030a 	add.w	r3, r7, #10
 8009844:	2202      	movs	r2, #2
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f001 fd5b 	bl	800b304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800984e:	e032      	b.n	80098b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f001 fce5 	bl	800b222 <USBD_CtlError>
            ret = USBD_FAIL;
 8009858:	2303      	movs	r3, #3
 800985a:	75fb      	strb	r3, [r7, #23]
          break;
 800985c:	e02b      	b.n	80098b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b03      	cmp	r3, #3
 8009868:	d107      	bne.n	800987a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800986a:	f107 030d 	add.w	r3, r7, #13
 800986e:	2201      	movs	r2, #1
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 fd46 	bl	800b304 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009878:	e01d      	b.n	80098b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f001 fcd0 	bl	800b222 <USBD_CtlError>
            ret = USBD_FAIL;
 8009882:	2303      	movs	r3, #3
 8009884:	75fb      	strb	r3, [r7, #23]
          break;
 8009886:	e016      	b.n	80098b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b03      	cmp	r3, #3
 8009892:	d00f      	beq.n	80098b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f001 fcc3 	bl	800b222 <USBD_CtlError>
            ret = USBD_FAIL;
 800989c:	2303      	movs	r3, #3
 800989e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80098a0:	e008      	b.n	80098b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80098a2:	6839      	ldr	r1, [r7, #0]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f001 fcbc 	bl	800b222 <USBD_CtlError>
          ret = USBD_FAIL;
 80098aa:	2303      	movs	r3, #3
 80098ac:	75fb      	strb	r3, [r7, #23]
          break;
 80098ae:	e002      	b.n	80098b6 <USBD_CDC_Setup+0x19e>
          break;
 80098b0:	bf00      	nop
 80098b2:	e008      	b.n	80098c6 <USBD_CDC_Setup+0x1ae>
          break;
 80098b4:	bf00      	nop
      }
      break;
 80098b6:	e006      	b.n	80098c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f001 fcb1 	bl	800b222 <USBD_CtlError>
      ret = USBD_FAIL;
 80098c0:	2303      	movs	r3, #3
 80098c2:	75fb      	strb	r3, [r7, #23]
      break;
 80098c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3718      	adds	r7, #24
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	32b0      	adds	r2, #176	@ 0xb0
 80098ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e065      	b.n	80099c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	32b0      	adds	r2, #176	@ 0xb0
 8009904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009908:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800990a:	78fb      	ldrb	r3, [r7, #3]
 800990c:	f003 020f 	and.w	r2, r3, #15
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	440b      	add	r3, r1
 800991c:	3318      	adds	r3, #24
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d02f      	beq.n	8009984 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	f003 020f 	and.w	r2, r3, #15
 800992a:	6879      	ldr	r1, [r7, #4]
 800992c:	4613      	mov	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	440b      	add	r3, r1
 8009936:	3318      	adds	r3, #24
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	78fb      	ldrb	r3, [r7, #3]
 800993c:	f003 010f 	and.w	r1, r3, #15
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	460b      	mov	r3, r1
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	440b      	add	r3, r1
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4403      	add	r3, r0
 800994c:	3344      	adds	r3, #68	@ 0x44
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	fbb2 f1f3 	udiv	r1, r2, r3
 8009954:	fb01 f303 	mul.w	r3, r1, r3
 8009958:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800995a:	2b00      	cmp	r3, #0
 800995c:	d112      	bne.n	8009984 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800995e:	78fb      	ldrb	r3, [r7, #3]
 8009960:	f003 020f 	and.w	r2, r3, #15
 8009964:	6879      	ldr	r1, [r7, #4]
 8009966:	4613      	mov	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	440b      	add	r3, r1
 8009970:	3318      	adds	r3, #24
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009976:	78f9      	ldrb	r1, [r7, #3]
 8009978:	2300      	movs	r3, #0
 800997a:	2200      	movs	r2, #0
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f002 fab5 	bl	800beec <USBD_LL_Transmit>
 8009982:	e01f      	b.n	80099c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2200      	movs	r2, #0
 8009988:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	33b0      	adds	r3, #176	@ 0xb0
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4413      	add	r3, r2
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d010      	beq.n	80099c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	33b0      	adds	r3, #176	@ 0xb0
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80099c0:	78fa      	ldrb	r2, [r7, #3]
 80099c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b084      	sub	sp, #16
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	460b      	mov	r3, r1
 80099d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	32b0      	adds	r2, #176	@ 0xb0
 80099e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	32b0      	adds	r2, #176	@ 0xb0
 80099f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e01a      	b.n	8009a36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f002 fae1 	bl	800bfcc <USBD_LL_GetRxDataSize>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	33b0      	adds	r3, #176	@ 0xb0
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009a30:	4611      	mov	r1, r2
 8009a32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	32b0      	adds	r2, #176	@ 0xb0
 8009a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e024      	b.n	8009aaa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	33b0      	adds	r3, #176	@ 0xb0
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d019      	beq.n	8009aa8 <USBD_CDC_EP0_RxReady+0x6a>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009a7a:	2bff      	cmp	r3, #255	@ 0xff
 8009a7c:	d014      	beq.n	8009aa8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	33b0      	adds	r3, #176	@ 0xb0
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009a96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a9e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	22ff      	movs	r2, #255	@ 0xff
 8009aa4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009abc:	2182      	movs	r1, #130	@ 0x82
 8009abe:	4818      	ldr	r0, [pc, #96]	@ (8009b20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ac0:	f000 fd4f 	bl	800a562 <USBD_GetEpDesc>
 8009ac4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	4815      	ldr	r0, [pc, #84]	@ (8009b20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009aca:	f000 fd4a 	bl	800a562 <USBD_GetEpDesc>
 8009ace:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ad0:	2181      	movs	r1, #129	@ 0x81
 8009ad2:	4813      	ldr	r0, [pc, #76]	@ (8009b20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ad4:	f000 fd45 	bl	800a562 <USBD_GetEpDesc>
 8009ad8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2210      	movs	r2, #16
 8009ae4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d006      	beq.n	8009afa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009af4:	711a      	strb	r2, [r3, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d006      	beq.n	8009b0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b08:	711a      	strb	r2, [r3, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2243      	movs	r2, #67	@ 0x43
 8009b12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b14:	4b02      	ldr	r3, [pc, #8]	@ (8009b20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20000050 	.word	0x20000050

08009b24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b2c:	2182      	movs	r1, #130	@ 0x82
 8009b2e:	4818      	ldr	r0, [pc, #96]	@ (8009b90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b30:	f000 fd17 	bl	800a562 <USBD_GetEpDesc>
 8009b34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b36:	2101      	movs	r1, #1
 8009b38:	4815      	ldr	r0, [pc, #84]	@ (8009b90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b3a:	f000 fd12 	bl	800a562 <USBD_GetEpDesc>
 8009b3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b40:	2181      	movs	r1, #129	@ 0x81
 8009b42:	4813      	ldr	r0, [pc, #76]	@ (8009b90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b44:	f000 fd0d 	bl	800a562 <USBD_GetEpDesc>
 8009b48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2210      	movs	r2, #16
 8009b54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d006      	beq.n	8009b6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	711a      	strb	r2, [r3, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f042 0202 	orr.w	r2, r2, #2
 8009b68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d006      	beq.n	8009b7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	711a      	strb	r2, [r3, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f042 0202 	orr.w	r2, r2, #2
 8009b7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2243      	movs	r2, #67	@ 0x43
 8009b82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b84:	4b02      	ldr	r3, [pc, #8]	@ (8009b90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	20000050 	.word	0x20000050

08009b94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b9c:	2182      	movs	r1, #130	@ 0x82
 8009b9e:	4818      	ldr	r0, [pc, #96]	@ (8009c00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ba0:	f000 fcdf 	bl	800a562 <USBD_GetEpDesc>
 8009ba4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	4815      	ldr	r0, [pc, #84]	@ (8009c00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009baa:	f000 fcda 	bl	800a562 <USBD_GetEpDesc>
 8009bae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009bb0:	2181      	movs	r1, #129	@ 0x81
 8009bb2:	4813      	ldr	r0, [pc, #76]	@ (8009c00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009bb4:	f000 fcd5 	bl	800a562 <USBD_GetEpDesc>
 8009bb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	2210      	movs	r2, #16
 8009bc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d006      	beq.n	8009bda <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bd4:	711a      	strb	r2, [r3, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d006      	beq.n	8009bee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009be8:	711a      	strb	r2, [r3, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2243      	movs	r2, #67	@ 0x43
 8009bf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009bf4:	4b02      	ldr	r3, [pc, #8]	@ (8009c00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	20000050 	.word	0x20000050

08009c04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	220a      	movs	r2, #10
 8009c10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009c12:	4b03      	ldr	r3, [pc, #12]	@ (8009c20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	2000000c 	.word	0x2000000c

08009c24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e009      	b.n	8009c4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	33b0      	adds	r3, #176	@ 0xb0
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	32b0      	adds	r2, #176	@ 0xb0
 8009c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c72:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e008      	b.n	8009c90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	371c      	adds	r7, #28
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	32b0      	adds	r2, #176	@ 0xb0
 8009cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e004      	b.n	8009cca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
	...

08009cd8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	32b0      	adds	r2, #176	@ 0xb0
 8009cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d101      	bne.n	8009cfe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e025      	b.n	8009d4a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d11f      	bne.n	8009d48 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009d10:	4b10      	ldr	r3, [pc, #64]	@ (8009d54 <USBD_CDC_TransmitPacket+0x7c>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	f003 020f 	and.w	r2, r3, #15
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	4613      	mov	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4403      	add	r3, r0
 8009d2a:	3318      	adds	r3, #24
 8009d2c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009d2e:	4b09      	ldr	r3, [pc, #36]	@ (8009d54 <USBD_CDC_TransmitPacket+0x7c>)
 8009d30:	7819      	ldrb	r1, [r3, #0]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f002 f8d4 	bl	800beec <USBD_LL_Transmit>

    ret = USBD_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20000093 	.word	0x20000093

08009d58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	32b0      	adds	r2, #176	@ 0xb0
 8009d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	32b0      	adds	r2, #176	@ 0xb0
 8009d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e018      	b.n	8009db8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	7c1b      	ldrb	r3, [r3, #16]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc0 <USBD_CDC_ReceivePacket+0x68>)
 8009d90:	7819      	ldrb	r1, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f002 f8dd 	bl	800bf5c <USBD_LL_PrepareReceive>
 8009da2:	e008      	b.n	8009db6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009da4:	4b06      	ldr	r3, [pc, #24]	@ (8009dc0 <USBD_CDC_ReceivePacket+0x68>)
 8009da6:	7819      	ldrb	r1, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009dae:	2340      	movs	r3, #64	@ 0x40
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f002 f8d3 	bl	800bf5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20000094 	.word	0x20000094

08009dc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e01f      	b.n	8009e1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	79fa      	ldrb	r2, [r7, #7]
 8009e0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f001 feab 	bl	800bb6c <USBD_LL_Init>
 8009e16:	4603      	mov	r3, r0
 8009e18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3718      	adds	r7, #24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e025      	b.n	8009e88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	32ae      	adds	r2, #174	@ 0xae
 8009e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00f      	beq.n	8009e78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	32ae      	adds	r2, #174	@ 0xae
 8009e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e68:	f107 020e 	add.w	r2, r7, #14
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4798      	blx	r3
 8009e70:	4602      	mov	r2, r0
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 feb3 	bl	800bc04 <USBD_LL_Start>
 8009e9e:	4603      	mov	r3, r0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009eb0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d009      	beq.n	8009eec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	78fa      	ldrb	r2, [r7, #3]
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	4798      	blx	r3
 8009ee8:	4603      	mov	r3, r0
 8009eea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	460b      	mov	r3, r1
 8009f00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	78fa      	ldrb	r2, [r7, #3]
 8009f10:	4611      	mov	r1, r2
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	4798      	blx	r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 f936 	bl	800b1ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009f50:	461a      	mov	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f5e:	f003 031f 	and.w	r3, r3, #31
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d01a      	beq.n	8009f9c <USBD_LL_SetupStage+0x72>
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d822      	bhi.n	8009fb0 <USBD_LL_SetupStage+0x86>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d002      	beq.n	8009f74 <USBD_LL_SetupStage+0x4a>
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d00a      	beq.n	8009f88 <USBD_LL_SetupStage+0x5e>
 8009f72:	e01d      	b.n	8009fb0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fb63 	bl	800a648 <USBD_StdDevReq>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73fb      	strb	r3, [r7, #15]
      break;
 8009f86:	e020      	b.n	8009fca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fbcb 	bl	800a72c <USBD_StdItfReq>
 8009f96:	4603      	mov	r3, r0
 8009f98:	73fb      	strb	r3, [r7, #15]
      break;
 8009f9a:	e016      	b.n	8009fca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fc2d 	bl	800a804 <USBD_StdEPReq>
 8009faa:	4603      	mov	r3, r0
 8009fac:	73fb      	strb	r3, [r7, #15]
      break;
 8009fae:	e00c      	b.n	8009fca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009fb6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f001 fec6 	bl	800bd50 <USBD_LL_StallEP>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc8:	bf00      	nop
  }

  return ret;
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d16e      	bne.n	800a0ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009ff2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009ffa:	2b03      	cmp	r3, #3
 8009ffc:	f040 8098 	bne.w	800a130 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	689a      	ldr	r2, [r3, #8]
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d913      	bls.n	800a034 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	689a      	ldr	r2, [r3, #8]
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	1ad2      	subs	r2, r2, r3
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	4293      	cmp	r3, r2
 800a024:	bf28      	it	cs
 800a026:	4613      	movcs	r3, r2
 800a028:	461a      	mov	r2, r3
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f001 f9b2 	bl	800b396 <USBD_CtlContinueRx>
 800a032:	e07d      	b.n	800a130 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a03a:	f003 031f 	and.w	r3, r3, #31
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d014      	beq.n	800a06c <USBD_LL_DataOutStage+0x98>
 800a042:	2b02      	cmp	r3, #2
 800a044:	d81d      	bhi.n	800a082 <USBD_LL_DataOutStage+0xae>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d002      	beq.n	800a050 <USBD_LL_DataOutStage+0x7c>
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d003      	beq.n	800a056 <USBD_LL_DataOutStage+0x82>
 800a04e:	e018      	b.n	800a082 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a050:	2300      	movs	r3, #0
 800a052:	75bb      	strb	r3, [r7, #22]
            break;
 800a054:	e018      	b.n	800a088 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	4619      	mov	r1, r3
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 fa64 	bl	800a52e <USBD_CoreFindIF>
 800a066:	4603      	mov	r3, r0
 800a068:	75bb      	strb	r3, [r7, #22]
            break;
 800a06a:	e00d      	b.n	800a088 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a072:	b2db      	uxtb	r3, r3
 800a074:	4619      	mov	r1, r3
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 fa66 	bl	800a548 <USBD_CoreFindEP>
 800a07c:	4603      	mov	r3, r0
 800a07e:	75bb      	strb	r3, [r7, #22]
            break;
 800a080:	e002      	b.n	800a088 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	75bb      	strb	r3, [r7, #22]
            break;
 800a086:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a088:	7dbb      	ldrb	r3, [r7, #22]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d119      	bne.n	800a0c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b03      	cmp	r3, #3
 800a098:	d113      	bne.n	800a0c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a09a:	7dba      	ldrb	r2, [r7, #22]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	32ae      	adds	r2, #174	@ 0xae
 800a0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00b      	beq.n	800a0c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a0aa:	7dba      	ldrb	r2, [r7, #22]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a0b2:	7dba      	ldrb	r2, [r7, #22]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	32ae      	adds	r2, #174	@ 0xae
 800a0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f001 f978 	bl	800b3b8 <USBD_CtlSendStatus>
 800a0c8:	e032      	b.n	800a130 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a0ca:	7afb      	ldrb	r3, [r7, #11]
 800a0cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fa37 	bl	800a548 <USBD_CoreFindEP>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0de:	7dbb      	ldrb	r3, [r7, #22]
 800a0e0:	2bff      	cmp	r3, #255	@ 0xff
 800a0e2:	d025      	beq.n	800a130 <USBD_LL_DataOutStage+0x15c>
 800a0e4:	7dbb      	ldrb	r3, [r7, #22]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d122      	bne.n	800a130 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b03      	cmp	r3, #3
 800a0f4:	d117      	bne.n	800a126 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a0f6:	7dba      	ldrb	r2, [r7, #22]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	32ae      	adds	r2, #174	@ 0xae
 800a0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00f      	beq.n	800a126 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a106:	7dba      	ldrb	r2, [r7, #22]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a10e:	7dba      	ldrb	r2, [r7, #22]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	32ae      	adds	r2, #174	@ 0xae
 800a114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	7afa      	ldrb	r2, [r7, #11]
 800a11c:	4611      	mov	r1, r2
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	4798      	blx	r3
 800a122:	4603      	mov	r3, r0
 800a124:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a12c:	7dfb      	ldrb	r3, [r7, #23]
 800a12e:	e000      	b.n	800a132 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b086      	sub	sp, #24
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	460b      	mov	r3, r1
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d16f      	bne.n	800a22e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3314      	adds	r3, #20
 800a152:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d15a      	bne.n	800a214 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	689a      	ldr	r2, [r3, #8]
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	429a      	cmp	r2, r3
 800a168:	d914      	bls.n	800a194 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	689a      	ldr	r2, [r3, #8]
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	1ad2      	subs	r2, r2, r3
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	461a      	mov	r2, r3
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f001 f8da 	bl	800b33a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a186:	2300      	movs	r3, #0
 800a188:	2200      	movs	r2, #0
 800a18a:	2100      	movs	r1, #0
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f001 fee5 	bl	800bf5c <USBD_LL_PrepareReceive>
 800a192:	e03f      	b.n	800a214 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d11c      	bne.n	800a1da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d316      	bcc.n	800a1da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d20f      	bcs.n	800a1da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2100      	movs	r1, #0
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f001 f8bb 	bl	800b33a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f001 fec2 	bl	800bf5c <USBD_LL_PrepareReceive>
 800a1d8:	e01c      	b.n	800a214 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d10f      	bne.n	800a206 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d009      	beq.n	800a206 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a206:	2180      	movs	r1, #128	@ 0x80
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f001 fda1 	bl	800bd50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f001 f8e5 	bl	800b3de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d03a      	beq.n	800a294 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7ff fe42 	bl	8009ea8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a22c:	e032      	b.n	800a294 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a22e:	7afb      	ldrb	r3, [r7, #11]
 800a230:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a234:	b2db      	uxtb	r3, r3
 800a236:	4619      	mov	r1, r3
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 f985 	bl	800a548 <USBD_CoreFindEP>
 800a23e:	4603      	mov	r3, r0
 800a240:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a242:	7dfb      	ldrb	r3, [r7, #23]
 800a244:	2bff      	cmp	r3, #255	@ 0xff
 800a246:	d025      	beq.n	800a294 <USBD_LL_DataInStage+0x15a>
 800a248:	7dfb      	ldrb	r3, [r7, #23]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d122      	bne.n	800a294 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b03      	cmp	r3, #3
 800a258:	d11c      	bne.n	800a294 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a25a:	7dfa      	ldrb	r2, [r7, #23]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	32ae      	adds	r2, #174	@ 0xae
 800a260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d014      	beq.n	800a294 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a26a:	7dfa      	ldrb	r2, [r7, #23]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a272:	7dfa      	ldrb	r2, [r7, #23]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	32ae      	adds	r2, #174	@ 0xae
 800a278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	7afa      	ldrb	r2, [r7, #11]
 800a280:	4611      	mov	r1, r2
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	4798      	blx	r3
 800a286:	4603      	mov	r3, r0
 800a288:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a28a:	7dbb      	ldrb	r3, [r7, #22]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d001      	beq.n	800a294 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a290:	7dbb      	ldrb	r3, [r7, #22]
 800a292:	e000      	b.n	800a296 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d014      	beq.n	800a304 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00e      	beq.n	800a304 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	6852      	ldr	r2, [r2, #4]
 800a2f2:	b2d2      	uxtb	r2, r2
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	4798      	blx	r3
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d001      	beq.n	800a304 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a300:	2303      	movs	r3, #3
 800a302:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a304:	2340      	movs	r3, #64	@ 0x40
 800a306:	2200      	movs	r2, #0
 800a308:	2100      	movs	r1, #0
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f001 fcac 	bl	800bc68 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2240      	movs	r2, #64	@ 0x40
 800a31c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a320:	2340      	movs	r3, #64	@ 0x40
 800a322:	2200      	movs	r2, #0
 800a324:	2180      	movs	r1, #128	@ 0x80
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 fc9e 	bl	800bc68 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2240      	movs	r2, #64	@ 0x40
 800a336:	621a      	str	r2, [r3, #32]

  return ret;
 800a338:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a342:	b480      	push	{r7}
 800a344:	b083      	sub	sp, #12
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	460b      	mov	r3, r1
 800a34c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	78fa      	ldrb	r2, [r7, #3]
 800a352:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b04      	cmp	r3, #4
 800a374:	d006      	beq.n	800a384 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2204      	movs	r2, #4
 800a388:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b083      	sub	sp, #12
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	d106      	bne.n	800a3bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a3b4:	b2da      	uxtb	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	370c      	adds	r7, #12
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b03      	cmp	r3, #3
 800a3dc:	d110      	bne.n	800a400 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00b      	beq.n	800a400 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d005      	beq.n	800a400 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	32ae      	adds	r2, #174	@ 0xae
 800a420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a428:	2303      	movs	r3, #3
 800a42a:	e01c      	b.n	800a466 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b03      	cmp	r3, #3
 800a436:	d115      	bne.n	800a464 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	32ae      	adds	r2, #174	@ 0xae
 800a442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a446:	6a1b      	ldr	r3, [r3, #32]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00b      	beq.n	800a464 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	32ae      	adds	r2, #174	@ 0xae
 800a456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45a:	6a1b      	ldr	r3, [r3, #32]
 800a45c:	78fa      	ldrb	r2, [r7, #3]
 800a45e:	4611      	mov	r1, r2
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b082      	sub	sp, #8
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	460b      	mov	r3, r1
 800a478:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	32ae      	adds	r2, #174	@ 0xae
 800a484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a48c:	2303      	movs	r3, #3
 800a48e:	e01c      	b.n	800a4ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2b03      	cmp	r3, #3
 800a49a:	d115      	bne.n	800a4c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	32ae      	adds	r2, #174	@ 0xae
 800a4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00b      	beq.n	800a4c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	32ae      	adds	r2, #174	@ 0xae
 800a4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c0:	78fa      	ldrb	r2, [r7, #3]
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b083      	sub	sp, #12
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00e      	beq.n	800a524 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	6852      	ldr	r2, [r2, #4]
 800a512:	b2d2      	uxtb	r2, r2
 800a514:	4611      	mov	r1, r2
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	4798      	blx	r3
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d001      	beq.n	800a524 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a520:	2303      	movs	r3, #3
 800a522:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a524:	7bfb      	ldrb	r3, [r7, #15]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a52e:	b480      	push	{r7}
 800a530:	b083      	sub	sp, #12
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a53a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	460b      	mov	r3, r1
 800a552:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a554:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a556:	4618      	mov	r0, r3
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b086      	sub	sp, #24
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	460b      	mov	r3, r1
 800a56c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a576:	2300      	movs	r3, #0
 800a578:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	885b      	ldrh	r3, [r3, #2]
 800a57e:	b29b      	uxth	r3, r3
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	7812      	ldrb	r2, [r2, #0]
 800a584:	4293      	cmp	r3, r2
 800a586:	d91f      	bls.n	800a5c8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a58e:	e013      	b.n	800a5b8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a590:	f107 030a 	add.w	r3, r7, #10
 800a594:	4619      	mov	r1, r3
 800a596:	6978      	ldr	r0, [r7, #20]
 800a598:	f000 f81b 	bl	800a5d2 <USBD_GetNextDesc>
 800a59c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	785b      	ldrb	r3, [r3, #1]
 800a5a2:	2b05      	cmp	r3, #5
 800a5a4:	d108      	bne.n	800a5b8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	789b      	ldrb	r3, [r3, #2]
 800a5ae:	78fa      	ldrb	r2, [r7, #3]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d008      	beq.n	800a5c6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	885b      	ldrh	r3, [r3, #2]
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	897b      	ldrh	r3, [r7, #10]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d8e5      	bhi.n	800a590 <USBD_GetEpDesc+0x2e>
 800a5c4:	e000      	b.n	800a5c8 <USBD_GetEpDesc+0x66>
          break;
 800a5c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a5c8:	693b      	ldr	r3, [r7, #16]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b085      	sub	sp, #20
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	881b      	ldrh	r3, [r3, #0]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	7812      	ldrb	r2, [r2, #0]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b087      	sub	sp, #28
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	3301      	adds	r3, #1
 800a620:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a628:	8a3b      	ldrh	r3, [r7, #16]
 800a62a:	021b      	lsls	r3, r3, #8
 800a62c:	b21a      	sxth	r2, r3
 800a62e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a632:	4313      	orrs	r3, r2
 800a634:	b21b      	sxth	r3, r3
 800a636:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a638:	89fb      	ldrh	r3, [r7, #14]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	371c      	adds	r7, #28
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
	...

0800a648 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a65e:	2b40      	cmp	r3, #64	@ 0x40
 800a660:	d005      	beq.n	800a66e <USBD_StdDevReq+0x26>
 800a662:	2b40      	cmp	r3, #64	@ 0x40
 800a664:	d857      	bhi.n	800a716 <USBD_StdDevReq+0xce>
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00f      	beq.n	800a68a <USBD_StdDevReq+0x42>
 800a66a:	2b20      	cmp	r3, #32
 800a66c:	d153      	bne.n	800a716 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	32ae      	adds	r2, #174	@ 0xae
 800a678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	4798      	blx	r3
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]
      break;
 800a688:	e04a      	b.n	800a720 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	785b      	ldrb	r3, [r3, #1]
 800a68e:	2b09      	cmp	r3, #9
 800a690:	d83b      	bhi.n	800a70a <USBD_StdDevReq+0xc2>
 800a692:	a201      	add	r2, pc, #4	@ (adr r2, 800a698 <USBD_StdDevReq+0x50>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a6ed 	.word	0x0800a6ed
 800a69c:	0800a701 	.word	0x0800a701
 800a6a0:	0800a70b 	.word	0x0800a70b
 800a6a4:	0800a6f7 	.word	0x0800a6f7
 800a6a8:	0800a70b 	.word	0x0800a70b
 800a6ac:	0800a6cb 	.word	0x0800a6cb
 800a6b0:	0800a6c1 	.word	0x0800a6c1
 800a6b4:	0800a70b 	.word	0x0800a70b
 800a6b8:	0800a6e3 	.word	0x0800a6e3
 800a6bc:	0800a6d5 	.word	0x0800a6d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fa3c 	bl	800ab40 <USBD_GetDescriptor>
          break;
 800a6c8:	e024      	b.n	800a714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fbcb 	bl	800ae68 <USBD_SetAddress>
          break;
 800a6d2:	e01f      	b.n	800a714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a6d4:	6839      	ldr	r1, [r7, #0]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fc0a 	bl	800aef0 <USBD_SetConfig>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	73fb      	strb	r3, [r7, #15]
          break;
 800a6e0:	e018      	b.n	800a714 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fcad 	bl	800b044 <USBD_GetConfig>
          break;
 800a6ea:	e013      	b.n	800a714 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fcde 	bl	800b0b0 <USBD_GetStatus>
          break;
 800a6f4:	e00e      	b.n	800a714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fd0d 	bl	800b118 <USBD_SetFeature>
          break;
 800a6fe:	e009      	b.n	800a714 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fd31 	bl	800b16a <USBD_ClrFeature>
          break;
 800a708:	e004      	b.n	800a714 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fd88 	bl	800b222 <USBD_CtlError>
          break;
 800a712:	bf00      	nop
      }
      break;
 800a714:	e004      	b.n	800a720 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fd82 	bl	800b222 <USBD_CtlError>
      break;
 800a71e:	bf00      	nop
  }

  return ret;
 800a720:	7bfb      	ldrb	r3, [r7, #15]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop

0800a72c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a742:	2b40      	cmp	r3, #64	@ 0x40
 800a744:	d005      	beq.n	800a752 <USBD_StdItfReq+0x26>
 800a746:	2b40      	cmp	r3, #64	@ 0x40
 800a748:	d852      	bhi.n	800a7f0 <USBD_StdItfReq+0xc4>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <USBD_StdItfReq+0x26>
 800a74e:	2b20      	cmp	r3, #32
 800a750:	d14e      	bne.n	800a7f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	3b01      	subs	r3, #1
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d840      	bhi.n	800a7e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	889b      	ldrh	r3, [r3, #4]
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b01      	cmp	r3, #1
 800a768:	d836      	bhi.n	800a7d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	889b      	ldrh	r3, [r3, #4]
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fedb 	bl	800a52e <USBD_CoreFindIF>
 800a778:	4603      	mov	r3, r0
 800a77a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2bff      	cmp	r3, #255	@ 0xff
 800a780:	d01d      	beq.n	800a7be <USBD_StdItfReq+0x92>
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d11a      	bne.n	800a7be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a788:	7bba      	ldrb	r2, [r7, #14]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	32ae      	adds	r2, #174	@ 0xae
 800a78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00f      	beq.n	800a7b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a798:	7bba      	ldrb	r2, [r7, #14]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a7a0:	7bba      	ldrb	r2, [r7, #14]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	32ae      	adds	r2, #174	@ 0xae
 800a7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	4798      	blx	r3
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a7b6:	e004      	b.n	800a7c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a7bc:	e001      	b.n	800a7c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	88db      	ldrh	r3, [r3, #6]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d110      	bne.n	800a7ec <USBD_StdItfReq+0xc0>
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10d      	bne.n	800a7ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fdf1 	bl	800b3b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a7d6:	e009      	b.n	800a7ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a7d8:	6839      	ldr	r1, [r7, #0]
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fd21 	bl	800b222 <USBD_CtlError>
          break;
 800a7e0:	e004      	b.n	800a7ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 fd1c 	bl	800b222 <USBD_CtlError>
          break;
 800a7ea:	e000      	b.n	800a7ee <USBD_StdItfReq+0xc2>
          break;
 800a7ec:	bf00      	nop
      }
      break;
 800a7ee:	e004      	b.n	800a7fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fd15 	bl	800b222 <USBD_CtlError>
      break;
 800a7f8:	bf00      	nop
  }

  return ret;
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	889b      	ldrh	r3, [r3, #4]
 800a816:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a820:	2b40      	cmp	r3, #64	@ 0x40
 800a822:	d007      	beq.n	800a834 <USBD_StdEPReq+0x30>
 800a824:	2b40      	cmp	r3, #64	@ 0x40
 800a826:	f200 817f 	bhi.w	800ab28 <USBD_StdEPReq+0x324>
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d02a      	beq.n	800a884 <USBD_StdEPReq+0x80>
 800a82e:	2b20      	cmp	r3, #32
 800a830:	f040 817a 	bne.w	800ab28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a834:	7bbb      	ldrb	r3, [r7, #14]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7ff fe85 	bl	800a548 <USBD_CoreFindEP>
 800a83e:	4603      	mov	r3, r0
 800a840:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a842:	7b7b      	ldrb	r3, [r7, #13]
 800a844:	2bff      	cmp	r3, #255	@ 0xff
 800a846:	f000 8174 	beq.w	800ab32 <USBD_StdEPReq+0x32e>
 800a84a:	7b7b      	ldrb	r3, [r7, #13]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f040 8170 	bne.w	800ab32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a852:	7b7a      	ldrb	r2, [r7, #13]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a85a:	7b7a      	ldrb	r2, [r7, #13]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	32ae      	adds	r2, #174	@ 0xae
 800a860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	2b00      	cmp	r3, #0
 800a868:	f000 8163 	beq.w	800ab32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a86c:	7b7a      	ldrb	r2, [r7, #13]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	32ae      	adds	r2, #174	@ 0xae
 800a872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	4798      	blx	r3
 800a87e:	4603      	mov	r3, r0
 800a880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a882:	e156      	b.n	800ab32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	785b      	ldrb	r3, [r3, #1]
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d008      	beq.n	800a89e <USBD_StdEPReq+0x9a>
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	f300 8145 	bgt.w	800ab1c <USBD_StdEPReq+0x318>
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 809b 	beq.w	800a9ce <USBD_StdEPReq+0x1ca>
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d03c      	beq.n	800a916 <USBD_StdEPReq+0x112>
 800a89c:	e13e      	b.n	800ab1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d002      	beq.n	800a8b0 <USBD_StdEPReq+0xac>
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d016      	beq.n	800a8dc <USBD_StdEPReq+0xd8>
 800a8ae:	e02c      	b.n	800a90a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00d      	beq.n	800a8d2 <USBD_StdEPReq+0xce>
 800a8b6:	7bbb      	ldrb	r3, [r7, #14]
 800a8b8:	2b80      	cmp	r3, #128	@ 0x80
 800a8ba:	d00a      	beq.n	800a8d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f001 fa45 	bl	800bd50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8c6:	2180      	movs	r1, #128	@ 0x80
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f001 fa41 	bl	800bd50 <USBD_LL_StallEP>
 800a8ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8d0:	e020      	b.n	800a914 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fca4 	bl	800b222 <USBD_CtlError>
              break;
 800a8da:	e01b      	b.n	800a914 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	885b      	ldrh	r3, [r3, #2]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10e      	bne.n	800a902 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00b      	beq.n	800a902 <USBD_StdEPReq+0xfe>
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
 800a8ec:	2b80      	cmp	r3, #128	@ 0x80
 800a8ee:	d008      	beq.n	800a902 <USBD_StdEPReq+0xfe>
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	88db      	ldrh	r3, [r3, #6]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d104      	bne.n	800a902 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f001 fa27 	bl	800bd50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fd58 	bl	800b3b8 <USBD_CtlSendStatus>

              break;
 800a908:	e004      	b.n	800a914 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fc88 	bl	800b222 <USBD_CtlError>
              break;
 800a912:	bf00      	nop
          }
          break;
 800a914:	e107      	b.n	800ab26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d002      	beq.n	800a928 <USBD_StdEPReq+0x124>
 800a922:	2b03      	cmp	r3, #3
 800a924:	d016      	beq.n	800a954 <USBD_StdEPReq+0x150>
 800a926:	e04b      	b.n	800a9c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00d      	beq.n	800a94a <USBD_StdEPReq+0x146>
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	2b80      	cmp	r3, #128	@ 0x80
 800a932:	d00a      	beq.n	800a94a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	4619      	mov	r1, r3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f001 fa09 	bl	800bd50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a93e:	2180      	movs	r1, #128	@ 0x80
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f001 fa05 	bl	800bd50 <USBD_LL_StallEP>
 800a946:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a948:	e040      	b.n	800a9cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fc68 	bl	800b222 <USBD_CtlError>
              break;
 800a952:	e03b      	b.n	800a9cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	885b      	ldrh	r3, [r3, #2]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d136      	bne.n	800a9ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a962:	2b00      	cmp	r3, #0
 800a964:	d004      	beq.n	800a970 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f001 fa26 	bl	800bdbc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fd21 	bl	800b3b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7ff fde4 	bl	800a548 <USBD_CoreFindEP>
 800a980:	4603      	mov	r3, r0
 800a982:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a984:	7b7b      	ldrb	r3, [r7, #13]
 800a986:	2bff      	cmp	r3, #255	@ 0xff
 800a988:	d01f      	beq.n	800a9ca <USBD_StdEPReq+0x1c6>
 800a98a:	7b7b      	ldrb	r3, [r7, #13]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d11c      	bne.n	800a9ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a990:	7b7a      	ldrb	r2, [r7, #13]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a998:	7b7a      	ldrb	r2, [r7, #13]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	32ae      	adds	r2, #174	@ 0xae
 800a99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d010      	beq.n	800a9ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a9a8:	7b7a      	ldrb	r2, [r7, #13]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	32ae      	adds	r2, #174	@ 0xae
 800a9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	4798      	blx	r3
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a9be:	e004      	b.n	800a9ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fc2d 	bl	800b222 <USBD_CtlError>
              break;
 800a9c8:	e000      	b.n	800a9cc <USBD_StdEPReq+0x1c8>
              break;
 800a9ca:	bf00      	nop
          }
          break;
 800a9cc:	e0ab      	b.n	800ab26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d002      	beq.n	800a9e0 <USBD_StdEPReq+0x1dc>
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	d032      	beq.n	800aa44 <USBD_StdEPReq+0x240>
 800a9de:	e097      	b.n	800ab10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d007      	beq.n	800a9f6 <USBD_StdEPReq+0x1f2>
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	2b80      	cmp	r3, #128	@ 0x80
 800a9ea:	d004      	beq.n	800a9f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fc17 	bl	800b222 <USBD_CtlError>
                break;
 800a9f4:	e091      	b.n	800ab1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	da0b      	bge.n	800aa16 <USBD_StdEPReq+0x212>
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa04:	4613      	mov	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4413      	add	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	3310      	adds	r3, #16
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	4413      	add	r3, r2
 800aa12:	3304      	adds	r3, #4
 800aa14:	e00b      	b.n	800aa2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa16:	7bbb      	ldrb	r3, [r7, #14]
 800aa18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2202      	movs	r2, #2
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fc61 	bl	800b304 <USBD_CtlSendData>
              break;
 800aa42:	e06a      	b.n	800ab1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	da11      	bge.n	800aa70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	f003 020f 	and.w	r2, r3, #15
 800aa52:	6879      	ldr	r1, [r7, #4]
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	440b      	add	r3, r1
 800aa5e:	3324      	adds	r3, #36	@ 0x24
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d117      	bne.n	800aa96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fbda 	bl	800b222 <USBD_CtlError>
                  break;
 800aa6e:	e054      	b.n	800ab1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa70:	7bbb      	ldrb	r3, [r7, #14]
 800aa72:	f003 020f 	and.w	r2, r3, #15
 800aa76:	6879      	ldr	r1, [r7, #4]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	440b      	add	r3, r1
 800aa82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d104      	bne.n	800aa96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fbc7 	bl	800b222 <USBD_CtlError>
                  break;
 800aa94:	e041      	b.n	800ab1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	da0b      	bge.n	800aab6 <USBD_StdEPReq+0x2b2>
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	3310      	adds	r3, #16
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	3304      	adds	r3, #4
 800aab4:	e00b      	b.n	800aace <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aabc:	4613      	mov	r3, r2
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	4413      	add	r3, r2
 800aacc:	3304      	adds	r3, #4
 800aace:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d002      	beq.n	800aadc <USBD_StdEPReq+0x2d8>
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	2b80      	cmp	r3, #128	@ 0x80
 800aada:	d103      	bne.n	800aae4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2200      	movs	r2, #0
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	e00e      	b.n	800ab02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f001 f99d 	bl	800be28 <USBD_LL_IsStallEP>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d003      	beq.n	800aafc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	e002      	b.n	800ab02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2200      	movs	r2, #0
 800ab00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2202      	movs	r2, #2
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fbfb 	bl	800b304 <USBD_CtlSendData>
              break;
 800ab0e:	e004      	b.n	800ab1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fb85 	bl	800b222 <USBD_CtlError>
              break;
 800ab18:	bf00      	nop
          }
          break;
 800ab1a:	e004      	b.n	800ab26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ab1c:	6839      	ldr	r1, [r7, #0]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fb7f 	bl	800b222 <USBD_CtlError>
          break;
 800ab24:	bf00      	nop
      }
      break;
 800ab26:	e005      	b.n	800ab34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fb79 	bl	800b222 <USBD_CtlError>
      break;
 800ab30:	e000      	b.n	800ab34 <USBD_StdEPReq+0x330>
      break;
 800ab32:	bf00      	nop
  }

  return ret;
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
	...

0800ab40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	885b      	ldrh	r3, [r3, #2]
 800ab5a:	0a1b      	lsrs	r3, r3, #8
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	2b0e      	cmp	r3, #14
 800ab62:	f200 8152 	bhi.w	800ae0a <USBD_GetDescriptor+0x2ca>
 800ab66:	a201      	add	r2, pc, #4	@ (adr r2, 800ab6c <USBD_GetDescriptor+0x2c>)
 800ab68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6c:	0800abdd 	.word	0x0800abdd
 800ab70:	0800abf5 	.word	0x0800abf5
 800ab74:	0800ac35 	.word	0x0800ac35
 800ab78:	0800ae0b 	.word	0x0800ae0b
 800ab7c:	0800ae0b 	.word	0x0800ae0b
 800ab80:	0800adab 	.word	0x0800adab
 800ab84:	0800add7 	.word	0x0800add7
 800ab88:	0800ae0b 	.word	0x0800ae0b
 800ab8c:	0800ae0b 	.word	0x0800ae0b
 800ab90:	0800ae0b 	.word	0x0800ae0b
 800ab94:	0800ae0b 	.word	0x0800ae0b
 800ab98:	0800ae0b 	.word	0x0800ae0b
 800ab9c:	0800ae0b 	.word	0x0800ae0b
 800aba0:	0800ae0b 	.word	0x0800ae0b
 800aba4:	0800aba9 	.word	0x0800aba9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00b      	beq.n	800abcc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abba:	69db      	ldr	r3, [r3, #28]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	7c12      	ldrb	r2, [r2, #16]
 800abc0:	f107 0108 	add.w	r1, r7, #8
 800abc4:	4610      	mov	r0, r2
 800abc6:	4798      	blx	r3
 800abc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abca:	e126      	b.n	800ae1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fb27 	bl	800b222 <USBD_CtlError>
        err++;
 800abd4:	7afb      	ldrb	r3, [r7, #11]
 800abd6:	3301      	adds	r3, #1
 800abd8:	72fb      	strb	r3, [r7, #11]
      break;
 800abda:	e11e      	b.n	800ae1a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	7c12      	ldrb	r2, [r2, #16]
 800abe8:	f107 0108 	add.w	r1, r7, #8
 800abec:	4610      	mov	r0, r2
 800abee:	4798      	blx	r3
 800abf0:	60f8      	str	r0, [r7, #12]
      break;
 800abf2:	e112      	b.n	800ae1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	7c1b      	ldrb	r3, [r3, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10d      	bne.n	800ac18 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac04:	f107 0208 	add.w	r2, r7, #8
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4798      	blx	r3
 800ac0c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	3301      	adds	r3, #1
 800ac12:	2202      	movs	r2, #2
 800ac14:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac16:	e100      	b.n	800ae1a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac20:	f107 0208 	add.w	r2, r7, #8
 800ac24:	4610      	mov	r0, r2
 800ac26:	4798      	blx	r3
 800ac28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	2202      	movs	r2, #2
 800ac30:	701a      	strb	r2, [r3, #0]
      break;
 800ac32:	e0f2      	b.n	800ae1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	885b      	ldrh	r3, [r3, #2]
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b05      	cmp	r3, #5
 800ac3c:	f200 80ac 	bhi.w	800ad98 <USBD_GetDescriptor+0x258>
 800ac40:	a201      	add	r2, pc, #4	@ (adr r2, 800ac48 <USBD_GetDescriptor+0x108>)
 800ac42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac46:	bf00      	nop
 800ac48:	0800ac61 	.word	0x0800ac61
 800ac4c:	0800ac95 	.word	0x0800ac95
 800ac50:	0800acc9 	.word	0x0800acc9
 800ac54:	0800acfd 	.word	0x0800acfd
 800ac58:	0800ad31 	.word	0x0800ad31
 800ac5c:	0800ad65 	.word	0x0800ad65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00b      	beq.n	800ac84 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	7c12      	ldrb	r2, [r2, #16]
 800ac78:	f107 0108 	add.w	r1, r7, #8
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	4798      	blx	r3
 800ac80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac82:	e091      	b.n	800ada8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 facb 	bl	800b222 <USBD_CtlError>
            err++;
 800ac8c:	7afb      	ldrb	r3, [r7, #11]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	72fb      	strb	r3, [r7, #11]
          break;
 800ac92:	e089      	b.n	800ada8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00b      	beq.n	800acb8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	7c12      	ldrb	r2, [r2, #16]
 800acac:	f107 0108 	add.w	r1, r7, #8
 800acb0:	4610      	mov	r0, r2
 800acb2:	4798      	blx	r3
 800acb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acb6:	e077      	b.n	800ada8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fab1 	bl	800b222 <USBD_CtlError>
            err++;
 800acc0:	7afb      	ldrb	r3, [r7, #11]
 800acc2:	3301      	adds	r3, #1
 800acc4:	72fb      	strb	r3, [r7, #11]
          break;
 800acc6:	e06f      	b.n	800ada8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00b      	beq.n	800acec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	7c12      	ldrb	r2, [r2, #16]
 800ace0:	f107 0108 	add.w	r1, r7, #8
 800ace4:	4610      	mov	r0, r2
 800ace6:	4798      	blx	r3
 800ace8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acea:	e05d      	b.n	800ada8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fa97 	bl	800b222 <USBD_CtlError>
            err++;
 800acf4:	7afb      	ldrb	r3, [r7, #11]
 800acf6:	3301      	adds	r3, #1
 800acf8:	72fb      	strb	r3, [r7, #11]
          break;
 800acfa:	e055      	b.n	800ada8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00b      	beq.n	800ad20 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	7c12      	ldrb	r2, [r2, #16]
 800ad14:	f107 0108 	add.w	r1, r7, #8
 800ad18:	4610      	mov	r0, r2
 800ad1a:	4798      	blx	r3
 800ad1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad1e:	e043      	b.n	800ada8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fa7d 	bl	800b222 <USBD_CtlError>
            err++;
 800ad28:	7afb      	ldrb	r3, [r7, #11]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad2e:	e03b      	b.n	800ada8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00b      	beq.n	800ad54 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	7c12      	ldrb	r2, [r2, #16]
 800ad48:	f107 0108 	add.w	r1, r7, #8
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	4798      	blx	r3
 800ad50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad52:	e029      	b.n	800ada8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fa63 	bl	800b222 <USBD_CtlError>
            err++;
 800ad5c:	7afb      	ldrb	r3, [r7, #11]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	72fb      	strb	r3, [r7, #11]
          break;
 800ad62:	e021      	b.n	800ada8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00b      	beq.n	800ad88 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad76:	699b      	ldr	r3, [r3, #24]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	7c12      	ldrb	r2, [r2, #16]
 800ad7c:	f107 0108 	add.w	r1, r7, #8
 800ad80:	4610      	mov	r0, r2
 800ad82:	4798      	blx	r3
 800ad84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad86:	e00f      	b.n	800ada8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fa49 	bl	800b222 <USBD_CtlError>
            err++;
 800ad90:	7afb      	ldrb	r3, [r7, #11]
 800ad92:	3301      	adds	r3, #1
 800ad94:	72fb      	strb	r3, [r7, #11]
          break;
 800ad96:	e007      	b.n	800ada8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad98:	6839      	ldr	r1, [r7, #0]
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fa41 	bl	800b222 <USBD_CtlError>
          err++;
 800ada0:	7afb      	ldrb	r3, [r7, #11]
 800ada2:	3301      	adds	r3, #1
 800ada4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ada6:	bf00      	nop
      }
      break;
 800ada8:	e037      	b.n	800ae1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	7c1b      	ldrb	r3, [r3, #16]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d109      	bne.n	800adc6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adba:	f107 0208 	add.w	r2, r7, #8
 800adbe:	4610      	mov	r0, r2
 800adc0:	4798      	blx	r3
 800adc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adc4:	e029      	b.n	800ae1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fa2a 	bl	800b222 <USBD_CtlError>
        err++;
 800adce:	7afb      	ldrb	r3, [r7, #11]
 800add0:	3301      	adds	r3, #1
 800add2:	72fb      	strb	r3, [r7, #11]
      break;
 800add4:	e021      	b.n	800ae1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	7c1b      	ldrb	r3, [r3, #16]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10d      	bne.n	800adfa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ade4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ade6:	f107 0208 	add.w	r2, r7, #8
 800adea:	4610      	mov	r0, r2
 800adec:	4798      	blx	r3
 800adee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	3301      	adds	r3, #1
 800adf4:	2207      	movs	r2, #7
 800adf6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adf8:	e00f      	b.n	800ae1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fa10 	bl	800b222 <USBD_CtlError>
        err++;
 800ae02:	7afb      	ldrb	r3, [r7, #11]
 800ae04:	3301      	adds	r3, #1
 800ae06:	72fb      	strb	r3, [r7, #11]
      break;
 800ae08:	e007      	b.n	800ae1a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fa08 	bl	800b222 <USBD_CtlError>
      err++;
 800ae12:	7afb      	ldrb	r3, [r7, #11]
 800ae14:	3301      	adds	r3, #1
 800ae16:	72fb      	strb	r3, [r7, #11]
      break;
 800ae18:	bf00      	nop
  }

  if (err != 0U)
 800ae1a:	7afb      	ldrb	r3, [r7, #11]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d11e      	bne.n	800ae5e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	88db      	ldrh	r3, [r3, #6]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d016      	beq.n	800ae56 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ae28:	893b      	ldrh	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00e      	beq.n	800ae4c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	88da      	ldrh	r2, [r3, #6]
 800ae32:	893b      	ldrh	r3, [r7, #8]
 800ae34:	4293      	cmp	r3, r2
 800ae36:	bf28      	it	cs
 800ae38:	4613      	movcs	r3, r2
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae3e:	893b      	ldrh	r3, [r7, #8]
 800ae40:	461a      	mov	r2, r3
 800ae42:	68f9      	ldr	r1, [r7, #12]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fa5d 	bl	800b304 <USBD_CtlSendData>
 800ae4a:	e009      	b.n	800ae60 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f9e7 	bl	800b222 <USBD_CtlError>
 800ae54:	e004      	b.n	800ae60 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 faae 	bl	800b3b8 <USBD_CtlSendStatus>
 800ae5c:	e000      	b.n	800ae60 <USBD_GetDescriptor+0x320>
    return;
 800ae5e:	bf00      	nop
  }
}
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop

0800ae68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	889b      	ldrh	r3, [r3, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d131      	bne.n	800aede <USBD_SetAddress+0x76>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	88db      	ldrh	r3, [r3, #6]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d12d      	bne.n	800aede <USBD_SetAddress+0x76>
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	885b      	ldrh	r3, [r3, #2]
 800ae86:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae88:	d829      	bhi.n	800aede <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	885b      	ldrh	r3, [r3, #2]
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b03      	cmp	r3, #3
 800aea0:	d104      	bne.n	800aeac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f9bc 	bl	800b222 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeaa:	e01d      	b.n	800aee8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	7bfa      	ldrb	r2, [r7, #15]
 800aeb0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 ffe1 	bl	800be80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fa7a 	bl	800b3b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d004      	beq.n	800aed4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2202      	movs	r2, #2
 800aece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed2:	e009      	b.n	800aee8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aedc:	e004      	b.n	800aee8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f99e 	bl	800b222 <USBD_CtlError>
  }
}
 800aee6:	bf00      	nop
 800aee8:	bf00      	nop
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	885b      	ldrh	r3, [r3, #2]
 800af02:	b2da      	uxtb	r2, r3
 800af04:	4b4e      	ldr	r3, [pc, #312]	@ (800b040 <USBD_SetConfig+0x150>)
 800af06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af08:	4b4d      	ldr	r3, [pc, #308]	@ (800b040 <USBD_SetConfig+0x150>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d905      	bls.n	800af1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f985 	bl	800b222 <USBD_CtlError>
    return USBD_FAIL;
 800af18:	2303      	movs	r3, #3
 800af1a:	e08c      	b.n	800b036 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af22:	b2db      	uxtb	r3, r3
 800af24:	2b02      	cmp	r3, #2
 800af26:	d002      	beq.n	800af2e <USBD_SetConfig+0x3e>
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d029      	beq.n	800af80 <USBD_SetConfig+0x90>
 800af2c:	e075      	b.n	800b01a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af2e:	4b44      	ldr	r3, [pc, #272]	@ (800b040 <USBD_SetConfig+0x150>)
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d020      	beq.n	800af78 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af36:	4b42      	ldr	r3, [pc, #264]	@ (800b040 <USBD_SetConfig+0x150>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af40:	4b3f      	ldr	r3, [pc, #252]	@ (800b040 <USBD_SetConfig+0x150>)
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7fe ffb9 	bl	8009ebe <USBD_SetClassConfig>
 800af4c:	4603      	mov	r3, r0
 800af4e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af50:	7bfb      	ldrb	r3, [r7, #15]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d008      	beq.n	800af68 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f962 	bl	800b222 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2202      	movs	r2, #2
 800af62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af66:	e065      	b.n	800b034 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fa25 	bl	800b3b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2203      	movs	r2, #3
 800af72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af76:	e05d      	b.n	800b034 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fa1d 	bl	800b3b8 <USBD_CtlSendStatus>
      break;
 800af7e:	e059      	b.n	800b034 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af80:	4b2f      	ldr	r3, [pc, #188]	@ (800b040 <USBD_SetConfig+0x150>)
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d112      	bne.n	800afae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2202      	movs	r2, #2
 800af8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800af90:	4b2b      	ldr	r3, [pc, #172]	@ (800b040 <USBD_SetConfig+0x150>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	461a      	mov	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af9a:	4b29      	ldr	r3, [pc, #164]	@ (800b040 <USBD_SetConfig+0x150>)
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7fe ffa8 	bl	8009ef6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fa06 	bl	800b3b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afac:	e042      	b.n	800b034 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800afae:	4b24      	ldr	r3, [pc, #144]	@ (800b040 <USBD_SetConfig+0x150>)
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d02a      	beq.n	800b012 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7fe ff96 	bl	8009ef6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800afca:	4b1d      	ldr	r3, [pc, #116]	@ (800b040 <USBD_SetConfig+0x150>)
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afd4:	4b1a      	ldr	r3, [pc, #104]	@ (800b040 <USBD_SetConfig+0x150>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	4619      	mov	r1, r3
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7fe ff6f 	bl	8009ebe <USBD_SetClassConfig>
 800afe0:	4603      	mov	r3, r0
 800afe2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00f      	beq.n	800b00a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f918 	bl	800b222 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7fe ff7b 	bl	8009ef6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2202      	movs	r2, #2
 800b004:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b008:	e014      	b.n	800b034 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f9d4 	bl	800b3b8 <USBD_CtlSendStatus>
      break;
 800b010:	e010      	b.n	800b034 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f9d0 	bl	800b3b8 <USBD_CtlSendStatus>
      break;
 800b018:	e00c      	b.n	800b034 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b01a:	6839      	ldr	r1, [r7, #0]
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f900 	bl	800b222 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b022:	4b07      	ldr	r3, [pc, #28]	@ (800b040 <USBD_SetConfig+0x150>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7fe ff64 	bl	8009ef6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b02e:	2303      	movs	r3, #3
 800b030:	73fb      	strb	r3, [r7, #15]
      break;
 800b032:	bf00      	nop
  }

  return ret;
 800b034:	7bfb      	ldrb	r3, [r7, #15]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	2000e974 	.word	0x2000e974

0800b044 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	88db      	ldrh	r3, [r3, #6]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d004      	beq.n	800b060 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f8e2 	bl	800b222 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b05e:	e023      	b.n	800b0a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b066:	b2db      	uxtb	r3, r3
 800b068:	2b02      	cmp	r3, #2
 800b06a:	dc02      	bgt.n	800b072 <USBD_GetConfig+0x2e>
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dc03      	bgt.n	800b078 <USBD_GetConfig+0x34>
 800b070:	e015      	b.n	800b09e <USBD_GetConfig+0x5a>
 800b072:	2b03      	cmp	r3, #3
 800b074:	d00b      	beq.n	800b08e <USBD_GetConfig+0x4a>
 800b076:	e012      	b.n	800b09e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	3308      	adds	r3, #8
 800b082:	2201      	movs	r2, #1
 800b084:	4619      	mov	r1, r3
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f93c 	bl	800b304 <USBD_CtlSendData>
        break;
 800b08c:	e00c      	b.n	800b0a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3304      	adds	r3, #4
 800b092:	2201      	movs	r2, #1
 800b094:	4619      	mov	r1, r3
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f934 	bl	800b304 <USBD_CtlSendData>
        break;
 800b09c:	e004      	b.n	800b0a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f8be 	bl	800b222 <USBD_CtlError>
        break;
 800b0a6:	bf00      	nop
}
 800b0a8:	bf00      	nop
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	d81e      	bhi.n	800b106 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	88db      	ldrh	r3, [r3, #6]
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d004      	beq.n	800b0da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f8a5 	bl	800b222 <USBD_CtlError>
        break;
 800b0d8:	e01a      	b.n	800b110 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d005      	beq.n	800b0f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	f043 0202 	orr.w	r2, r3, #2
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	330c      	adds	r3, #12
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f900 	bl	800b304 <USBD_CtlSendData>
      break;
 800b104:	e004      	b.n	800b110 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f88a 	bl	800b222 <USBD_CtlError>
      break;
 800b10e:	bf00      	nop
  }
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	885b      	ldrh	r3, [r3, #2]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d107      	bne.n	800b13a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f940 	bl	800b3b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b138:	e013      	b.n	800b162 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	885b      	ldrh	r3, [r3, #2]
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d10b      	bne.n	800b15a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	889b      	ldrh	r3, [r3, #4]
 800b146:	0a1b      	lsrs	r3, r3, #8
 800b148:	b29b      	uxth	r3, r3
 800b14a:	b2da      	uxtb	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f930 	bl	800b3b8 <USBD_CtlSendStatus>
}
 800b158:	e003      	b.n	800b162 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f860 	bl	800b222 <USBD_CtlError>
}
 800b162:	bf00      	nop
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b082      	sub	sp, #8
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	3b01      	subs	r3, #1
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d80b      	bhi.n	800b19a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	885b      	ldrh	r3, [r3, #2]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d10c      	bne.n	800b1a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f910 	bl	800b3b8 <USBD_CtlSendStatus>
      }
      break;
 800b198:	e004      	b.n	800b1a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 f840 	bl	800b222 <USBD_CtlError>
      break;
 800b1a2:	e000      	b.n	800b1a6 <USBD_ClrFeature+0x3c>
      break;
 800b1a4:	bf00      	nop
  }
}
 800b1a6:	bf00      	nop
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b084      	sub	sp, #16
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	781a      	ldrb	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	781a      	ldrb	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7ff fa16 	bl	800a60a <SWAPBYTE>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f7ff fa09 	bl	800a60a <SWAPBYTE>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	3301      	adds	r3, #1
 800b204:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	3301      	adds	r3, #1
 800b20a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f7ff f9fc 	bl	800a60a <SWAPBYTE>
 800b212:	4603      	mov	r3, r0
 800b214:	461a      	mov	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	80da      	strh	r2, [r3, #6]
}
 800b21a:	bf00      	nop
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b22c:	2180      	movs	r1, #128	@ 0x80
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fd8e 	bl	800bd50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b234:	2100      	movs	r1, #0
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fd8a 	bl	800bd50 <USBD_LL_StallEP>
}
 800b23c:	bf00      	nop
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b250:	2300      	movs	r3, #0
 800b252:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d036      	beq.n	800b2c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b25e:	6938      	ldr	r0, [r7, #16]
 800b260:	f000 f836 	bl	800b2d0 <USBD_GetLen>
 800b264:	4603      	mov	r3, r0
 800b266:	3301      	adds	r3, #1
 800b268:	b29b      	uxth	r3, r3
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b272:	7dfb      	ldrb	r3, [r7, #23]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	4413      	add	r3, r2
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	7812      	ldrb	r2, [r2, #0]
 800b27c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
 800b280:	3301      	adds	r3, #1
 800b282:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b284:	7dfb      	ldrb	r3, [r7, #23]
 800b286:	68ba      	ldr	r2, [r7, #8]
 800b288:	4413      	add	r3, r2
 800b28a:	2203      	movs	r2, #3
 800b28c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b28e:	7dfb      	ldrb	r3, [r7, #23]
 800b290:	3301      	adds	r3, #1
 800b292:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b294:	e013      	b.n	800b2be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b296:	7dfb      	ldrb	r3, [r7, #23]
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	4413      	add	r3, r2
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	7812      	ldrb	r2, [r2, #0]
 800b2a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	613b      	str	r3, [r7, #16]
    idx++;
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e7      	bne.n	800b296 <USBD_GetString+0x52>
 800b2c6:	e000      	b.n	800b2ca <USBD_GetString+0x86>
    return;
 800b2c8:	bf00      	nop
  }
}
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2e0:	e005      	b.n	800b2ee <USBD_GetLen+0x1e>
  {
    len++;
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1f5      	bne.n	800b2e2 <USBD_GetLen+0x12>
  }

  return len;
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2202      	movs	r2, #2
 800b314:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	2100      	movs	r1, #0
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f000 fdde 	bl	800beec <USBD_LL_Transmit>

  return USBD_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b084      	sub	sp, #16
 800b33e:	af00      	add	r7, sp, #0
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	60b9      	str	r1, [r7, #8]
 800b344:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	2100      	movs	r1, #0
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f000 fdcd 	bl	800beec <USBD_LL_Transmit>

  return USBD_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2203      	movs	r2, #3
 800b36c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	2100      	movs	r1, #0
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 fde8 	bl	800bf5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b084      	sub	sp, #16
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 fdd7 	bl	800bf5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2204      	movs	r2, #4
 800b3c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fd8c 	bl	800beec <USBD_LL_Transmit>

  return USBD_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b082      	sub	sp, #8
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2205      	movs	r2, #5
 800b3ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fdb1 	bl	800bf5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b408:	2200      	movs	r2, #0
 800b40a:	4912      	ldr	r1, [pc, #72]	@ (800b454 <MX_USB_DEVICE_Init+0x50>)
 800b40c:	4812      	ldr	r0, [pc, #72]	@ (800b458 <MX_USB_DEVICE_Init+0x54>)
 800b40e:	f7fe fcd9 	bl	8009dc4 <USBD_Init>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b418:	f7f5 fe61 	bl	80010de <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b41c:	490f      	ldr	r1, [pc, #60]	@ (800b45c <MX_USB_DEVICE_Init+0x58>)
 800b41e:	480e      	ldr	r0, [pc, #56]	@ (800b458 <MX_USB_DEVICE_Init+0x54>)
 800b420:	f7fe fd00 	bl	8009e24 <USBD_RegisterClass>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b42a:	f7f5 fe58 	bl	80010de <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b42e:	490c      	ldr	r1, [pc, #48]	@ (800b460 <MX_USB_DEVICE_Init+0x5c>)
 800b430:	4809      	ldr	r0, [pc, #36]	@ (800b458 <MX_USB_DEVICE_Init+0x54>)
 800b432:	f7fe fbf7 	bl	8009c24 <USBD_CDC_RegisterInterface>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b43c:	f7f5 fe4f 	bl	80010de <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b440:	4805      	ldr	r0, [pc, #20]	@ (800b458 <MX_USB_DEVICE_Init+0x54>)
 800b442:	f7fe fd25 	bl	8009e90 <USBD_Start>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b44c:	f7f5 fe47 	bl	80010de <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b450:	bf00      	nop
 800b452:	bd80      	pop	{r7, pc}
 800b454:	200000ac 	.word	0x200000ac
 800b458:	2000e978 	.word	0x2000e978
 800b45c:	20000018 	.word	0x20000018
 800b460:	20000098 	.word	0x20000098

0800b464 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b468:	2200      	movs	r2, #0
 800b46a:	4905      	ldr	r1, [pc, #20]	@ (800b480 <CDC_Init_FS+0x1c>)
 800b46c:	4805      	ldr	r0, [pc, #20]	@ (800b484 <CDC_Init_FS+0x20>)
 800b46e:	f7fe fbf3 	bl	8009c58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b472:	4905      	ldr	r1, [pc, #20]	@ (800b488 <CDC_Init_FS+0x24>)
 800b474:	4803      	ldr	r0, [pc, #12]	@ (800b484 <CDC_Init_FS+0x20>)
 800b476:	f7fe fc11 	bl	8009c9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b47a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	2000f454 	.word	0x2000f454
 800b484:	2000e978 	.word	0x2000e978
 800b488:	2000ec54 	.word	0x2000ec54

0800b48c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b48c:	b480      	push	{r7}
 800b48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b490:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b492:	4618      	mov	r0, r3
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	6039      	str	r1, [r7, #0]
 800b4a6:	71fb      	strb	r3, [r7, #7]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4ac:	79fb      	ldrb	r3, [r7, #7]
 800b4ae:	2b23      	cmp	r3, #35	@ 0x23
 800b4b0:	d84a      	bhi.n	800b548 <CDC_Control_FS+0xac>
 800b4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b8 <CDC_Control_FS+0x1c>)
 800b4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b8:	0800b549 	.word	0x0800b549
 800b4bc:	0800b549 	.word	0x0800b549
 800b4c0:	0800b549 	.word	0x0800b549
 800b4c4:	0800b549 	.word	0x0800b549
 800b4c8:	0800b549 	.word	0x0800b549
 800b4cc:	0800b549 	.word	0x0800b549
 800b4d0:	0800b549 	.word	0x0800b549
 800b4d4:	0800b549 	.word	0x0800b549
 800b4d8:	0800b549 	.word	0x0800b549
 800b4dc:	0800b549 	.word	0x0800b549
 800b4e0:	0800b549 	.word	0x0800b549
 800b4e4:	0800b549 	.word	0x0800b549
 800b4e8:	0800b549 	.word	0x0800b549
 800b4ec:	0800b549 	.word	0x0800b549
 800b4f0:	0800b549 	.word	0x0800b549
 800b4f4:	0800b549 	.word	0x0800b549
 800b4f8:	0800b549 	.word	0x0800b549
 800b4fc:	0800b549 	.word	0x0800b549
 800b500:	0800b549 	.word	0x0800b549
 800b504:	0800b549 	.word	0x0800b549
 800b508:	0800b549 	.word	0x0800b549
 800b50c:	0800b549 	.word	0x0800b549
 800b510:	0800b549 	.word	0x0800b549
 800b514:	0800b549 	.word	0x0800b549
 800b518:	0800b549 	.word	0x0800b549
 800b51c:	0800b549 	.word	0x0800b549
 800b520:	0800b549 	.word	0x0800b549
 800b524:	0800b549 	.word	0x0800b549
 800b528:	0800b549 	.word	0x0800b549
 800b52c:	0800b549 	.word	0x0800b549
 800b530:	0800b549 	.word	0x0800b549
 800b534:	0800b549 	.word	0x0800b549
 800b538:	0800b549 	.word	0x0800b549
 800b53c:	0800b549 	.word	0x0800b549
 800b540:	0800b549 	.word	0x0800b549
 800b544:	0800b549 	.word	0x0800b549
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b548:	bf00      	nop
  }

  return (USBD_OK);
 800b54a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b562:	6879      	ldr	r1, [r7, #4]
 800b564:	4808      	ldr	r0, [pc, #32]	@ (800b588 <CDC_Receive_FS+0x30>)
 800b566:	f7fe fb99 	bl	8009c9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b56a:	4807      	ldr	r0, [pc, #28]	@ (800b588 <CDC_Receive_FS+0x30>)
 800b56c:	f7fe fbf4 	bl	8009d58 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  USB_My_Receive(Buf, *Len);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7f5 fb60 	bl	8000c3c <USB_My_Receive>

  return (USBD_OK);
 800b57c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	2000e978 	.word	0x2000e978

0800b58c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	460b      	mov	r3, r1
 800b596:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b59c:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d4 <CDC_Transmit_FS+0x48>)
 800b59e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e00b      	b.n	800b5ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b5b2:	887b      	ldrh	r3, [r7, #2]
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	6879      	ldr	r1, [r7, #4]
 800b5b8:	4806      	ldr	r0, [pc, #24]	@ (800b5d4 <CDC_Transmit_FS+0x48>)
 800b5ba:	f7fe fb4d 	bl	8009c58 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b5be:	4805      	ldr	r0, [pc, #20]	@ (800b5d4 <CDC_Transmit_FS+0x48>)
 800b5c0:	f7fe fb8a 	bl	8009cd8 <USBD_CDC_TransmitPacket>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	2000e978 	.word	0x2000e978

0800b5d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b087      	sub	sp, #28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b5ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	371c      	adds	r7, #28
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
	...

0800b5fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	4603      	mov	r3, r0
 800b604:	6039      	str	r1, [r7, #0]
 800b606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2212      	movs	r2, #18
 800b60c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b60e:	4b03      	ldr	r3, [pc, #12]	@ (800b61c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b610:	4618      	mov	r0, r3
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	200000cc 	.word	0x200000cc

0800b620 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	4603      	mov	r3, r0
 800b628:	6039      	str	r1, [r7, #0]
 800b62a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	2204      	movs	r2, #4
 800b630:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b632:	4b03      	ldr	r3, [pc, #12]	@ (800b640 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b634:	4618      	mov	r0, r3
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	200000ec 	.word	0x200000ec

0800b644 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	4603      	mov	r3, r0
 800b64c:	6039      	str	r1, [r7, #0]
 800b64e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b650:	79fb      	ldrb	r3, [r7, #7]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d105      	bne.n	800b662 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	4907      	ldr	r1, [pc, #28]	@ (800b678 <USBD_FS_ProductStrDescriptor+0x34>)
 800b65a:	4808      	ldr	r0, [pc, #32]	@ (800b67c <USBD_FS_ProductStrDescriptor+0x38>)
 800b65c:	f7ff fdf2 	bl	800b244 <USBD_GetString>
 800b660:	e004      	b.n	800b66c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	4904      	ldr	r1, [pc, #16]	@ (800b678 <USBD_FS_ProductStrDescriptor+0x34>)
 800b666:	4805      	ldr	r0, [pc, #20]	@ (800b67c <USBD_FS_ProductStrDescriptor+0x38>)
 800b668:	f7ff fdec 	bl	800b244 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b66c:	4b02      	ldr	r3, [pc, #8]	@ (800b678 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	2000fc54 	.word	0x2000fc54
 800b67c:	0800c158 	.word	0x0800c158

0800b680 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	4603      	mov	r3, r0
 800b688:	6039      	str	r1, [r7, #0]
 800b68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	4904      	ldr	r1, [pc, #16]	@ (800b6a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b690:	4804      	ldr	r0, [pc, #16]	@ (800b6a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b692:	f7ff fdd7 	bl	800b244 <USBD_GetString>
  return USBD_StrDesc;
 800b696:	4b02      	ldr	r3, [pc, #8]	@ (800b6a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	2000fc54 	.word	0x2000fc54
 800b6a4:	0800c170 	.word	0x0800c170

0800b6a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	6039      	str	r1, [r7, #0]
 800b6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	221a      	movs	r2, #26
 800b6b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b6ba:	f000 f855 	bl	800b768 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b6be:	4b02      	ldr	r3, [pc, #8]	@ (800b6c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	200000f0 	.word	0x200000f0

0800b6cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	6039      	str	r1, [r7, #0]
 800b6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b6d8:	79fb      	ldrb	r3, [r7, #7]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d105      	bne.n	800b6ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	4907      	ldr	r1, [pc, #28]	@ (800b700 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6e2:	4808      	ldr	r0, [pc, #32]	@ (800b704 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6e4:	f7ff fdae 	bl	800b244 <USBD_GetString>
 800b6e8:	e004      	b.n	800b6f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	4904      	ldr	r1, [pc, #16]	@ (800b700 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6ee:	4805      	ldr	r0, [pc, #20]	@ (800b704 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6f0:	f7ff fda8 	bl	800b244 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6f4:	4b02      	ldr	r3, [pc, #8]	@ (800b700 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	2000fc54 	.word	0x2000fc54
 800b704:	0800c184 	.word	0x0800c184

0800b708 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4603      	mov	r3, r0
 800b710:	6039      	str	r1, [r7, #0]
 800b712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b714:	79fb      	ldrb	r3, [r7, #7]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d105      	bne.n	800b726 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	4907      	ldr	r1, [pc, #28]	@ (800b73c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b71e:	4808      	ldr	r0, [pc, #32]	@ (800b740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b720:	f7ff fd90 	bl	800b244 <USBD_GetString>
 800b724:	e004      	b.n	800b730 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	4904      	ldr	r1, [pc, #16]	@ (800b73c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b72a:	4805      	ldr	r0, [pc, #20]	@ (800b740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b72c:	f7ff fd8a 	bl	800b244 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b730:	4b02      	ldr	r3, [pc, #8]	@ (800b73c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b732:	4618      	mov	r0, r3
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	2000fc54 	.word	0x2000fc54
 800b740:	0800c190 	.word	0x0800c190

0800b744 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	4603      	mov	r3, r0
 800b74c:	6039      	str	r1, [r7, #0]
 800b74e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	220c      	movs	r2, #12
 800b754:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b756:	4b03      	ldr	r3, [pc, #12]	@ (800b764 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b758:	4618      	mov	r0, r3
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	200000e0 	.word	0x200000e0

0800b768 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b76e:	4b0f      	ldr	r3, [pc, #60]	@ (800b7ac <Get_SerialNum+0x44>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b774:	4b0e      	ldr	r3, [pc, #56]	@ (800b7b0 <Get_SerialNum+0x48>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b77a:	4b0e      	ldr	r3, [pc, #56]	@ (800b7b4 <Get_SerialNum+0x4c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4413      	add	r3, r2
 800b786:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d009      	beq.n	800b7a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b78e:	2208      	movs	r2, #8
 800b790:	4909      	ldr	r1, [pc, #36]	@ (800b7b8 <Get_SerialNum+0x50>)
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f000 f814 	bl	800b7c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b798:	2204      	movs	r2, #4
 800b79a:	4908      	ldr	r1, [pc, #32]	@ (800b7bc <Get_SerialNum+0x54>)
 800b79c:	68b8      	ldr	r0, [r7, #8]
 800b79e:	f000 f80f 	bl	800b7c0 <IntToUnicode>
  }
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	1fff7590 	.word	0x1fff7590
 800b7b0:	1fff7594 	.word	0x1fff7594
 800b7b4:	1fff7598 	.word	0x1fff7598
 800b7b8:	200000f2 	.word	0x200000f2
 800b7bc:	20000102 	.word	0x20000102

0800b7c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	75fb      	strb	r3, [r7, #23]
 800b7d6:	e027      	b.n	800b828 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	0f1b      	lsrs	r3, r3, #28
 800b7dc:	2b09      	cmp	r3, #9
 800b7de:	d80b      	bhi.n	800b7f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	0f1b      	lsrs	r3, r3, #28
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	7dfb      	ldrb	r3, [r7, #23]
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	440b      	add	r3, r1
 800b7f0:	3230      	adds	r2, #48	@ 0x30
 800b7f2:	b2d2      	uxtb	r2, r2
 800b7f4:	701a      	strb	r2, [r3, #0]
 800b7f6:	e00a      	b.n	800b80e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	0f1b      	lsrs	r3, r3, #28
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	7dfb      	ldrb	r3, [r7, #23]
 800b800:	005b      	lsls	r3, r3, #1
 800b802:	4619      	mov	r1, r3
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	440b      	add	r3, r1
 800b808:	3237      	adds	r2, #55	@ 0x37
 800b80a:	b2d2      	uxtb	r2, r2
 800b80c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	011b      	lsls	r3, r3, #4
 800b812:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	005b      	lsls	r3, r3, #1
 800b818:	3301      	adds	r3, #1
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	4413      	add	r3, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b822:	7dfb      	ldrb	r3, [r7, #23]
 800b824:	3301      	adds	r3, #1
 800b826:	75fb      	strb	r3, [r7, #23]
 800b828:	7dfa      	ldrb	r2, [r7, #23]
 800b82a:	79fb      	ldrb	r3, [r7, #7]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d3d3      	bcc.n	800b7d8 <IntToUnicode+0x18>
  }
}
 800b830:	bf00      	nop
 800b832:	bf00      	nop
 800b834:	371c      	adds	r7, #28
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
	...

0800b840 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b0b0      	sub	sp, #192	@ 0xc0
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b848:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b84c:	2200      	movs	r2, #0
 800b84e:	601a      	str	r2, [r3, #0]
 800b850:	605a      	str	r2, [r3, #4]
 800b852:	609a      	str	r2, [r3, #8]
 800b854:	60da      	str	r2, [r3, #12]
 800b856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b858:	f107 0318 	add.w	r3, r7, #24
 800b85c:	2294      	movs	r2, #148	@ 0x94
 800b85e:	2100      	movs	r1, #0
 800b860:	4618      	mov	r0, r3
 800b862:	f000 fc33 	bl	800c0cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b86e:	d174      	bne.n	800b95a <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b870:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b874:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b876:	2300      	movs	r3, #0
 800b878:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b87c:	f107 0318 	add.w	r3, r7, #24
 800b880:	4618      	mov	r0, r3
 800b882:	f7fa faef 	bl	8005e64 <HAL_RCCEx_PeriphCLKConfig>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b88c:	f7f5 fc27 	bl	80010de <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b890:	4b34      	ldr	r3, [pc, #208]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b894:	4a33      	ldr	r2, [pc, #204]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b89c:	4b31      	ldr	r3, [pc, #196]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b89e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8a0:	f003 0301 	and.w	r3, r3, #1
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b8a8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800b8ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b8c2:	230a      	movs	r3, #10
 800b8c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8c8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b8d2:	f7f7 ff87 	bl	80037e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b8d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b8ea:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b8f4:	f7f7 ff76 	bl	80037e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b8f8:	4b1a      	ldr	r3, [pc, #104]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b8fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8fc:	4a19      	ldr	r2, [pc, #100]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b8fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b902:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b904:	4b17      	ldr	r3, [pc, #92]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b90c:	613b      	str	r3, [r7, #16]
 800b90e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b910:	4b14      	ldr	r3, [pc, #80]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d114      	bne.n	800b946 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b91c:	4b11      	ldr	r3, [pc, #68]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b91e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b920:	4a10      	ldr	r2, [pc, #64]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b926:	6593      	str	r3, [r2, #88]	@ 0x58
 800b928:	4b0e      	ldr	r3, [pc, #56]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b92a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b92c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800b934:	f7f9 fb9e 	bl	8005074 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b938:	4b0a      	ldr	r3, [pc, #40]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b93a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b93c:	4a09      	ldr	r2, [pc, #36]	@ (800b964 <HAL_PCD_MspInit+0x124>)
 800b93e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b942:	6593      	str	r3, [r2, #88]	@ 0x58
 800b944:	e001      	b.n	800b94a <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b946:	f7f9 fb95 	bl	8005074 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b94a:	2200      	movs	r2, #0
 800b94c:	2100      	movs	r1, #0
 800b94e:	2043      	movs	r0, #67	@ 0x43
 800b950:	f7f7 fc57 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b954:	2043      	movs	r0, #67	@ 0x43
 800b956:	f7f7 fc70 	bl	800323a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b95a:	bf00      	nop
 800b95c:	37c0      	adds	r7, #192	@ 0xc0
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	40021000 	.word	0x40021000

0800b968 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800b97c:	4619      	mov	r1, r3
 800b97e:	4610      	mov	r0, r2
 800b980:	f7fe fad3 	bl	8009f2a <USBD_LL_SetupStage>
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b99e:	78fa      	ldrb	r2, [r7, #3]
 800b9a0:	6879      	ldr	r1, [r7, #4]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	00db      	lsls	r3, r3, #3
 800b9a6:	4413      	add	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	440b      	add	r3, r1
 800b9ac:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	78fb      	ldrb	r3, [r7, #3]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	f7fe fb0d 	bl	8009fd4 <USBD_LL_DataOutStage>
}
 800b9ba:	bf00      	nop
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b082      	sub	sp, #8
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b9d4:	78fa      	ldrb	r2, [r7, #3]
 800b9d6:	6879      	ldr	r1, [r7, #4]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	00db      	lsls	r3, r3, #3
 800b9dc:	4413      	add	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	440b      	add	r3, r1
 800b9e2:	3348      	adds	r3, #72	@ 0x48
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	78fb      	ldrb	r3, [r7, #3]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	f7fe fba6 	bl	800a13a <USBD_LL_DataInStage>
}
 800b9ee:	bf00      	nop
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fe fce0 	bl	800a3ca <USBD_LL_SOF>
}
 800ba0a:	bf00      	nop
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d001      	beq.n	800ba2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba26:	f7f5 fb5a 	bl	80010de <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ba30:	7bfa      	ldrb	r2, [r7, #15]
 800ba32:	4611      	mov	r1, r2
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fe fc84 	bl	800a342 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fe fc2c 	bl	800a29e <USBD_LL_Reset>
}
 800ba46:	bf00      	nop
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
	...

0800ba50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	6812      	ldr	r2, [r2, #0]
 800ba66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ba6a:	f043 0301 	orr.w	r3, r3, #1
 800ba6e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fe fc73 	bl	800a362 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a1b      	ldr	r3, [r3, #32]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d005      	beq.n	800ba90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba84:	4b04      	ldr	r3, [pc, #16]	@ (800ba98 <HAL_PCD_SuspendCallback+0x48>)
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	4a03      	ldr	r2, [pc, #12]	@ (800ba98 <HAL_PCD_SuspendCallback+0x48>)
 800ba8a:	f043 0306 	orr.w	r3, r3, #6
 800ba8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba90:	bf00      	nop
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	e000ed00 	.word	0xe000ed00

0800ba9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	6812      	ldr	r2, [r2, #0]
 800bab2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bab6:	f023 0301 	bic.w	r3, r3, #1
 800baba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d007      	beq.n	800bad4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bac4:	4b08      	ldr	r3, [pc, #32]	@ (800bae8 <HAL_PCD_ResumeCallback+0x4c>)
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	4a07      	ldr	r2, [pc, #28]	@ (800bae8 <HAL_PCD_ResumeCallback+0x4c>)
 800baca:	f023 0306 	bic.w	r3, r3, #6
 800bace:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bad0:	f000 faf6 	bl	800c0c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bada:	4618      	mov	r0, r3
 800badc:	f7fe fc5d 	bl	800a39a <USBD_LL_Resume>
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	e000ed00 	.word	0xe000ed00

0800baec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bafe:	78fa      	ldrb	r2, [r7, #3]
 800bb00:	4611      	mov	r1, r2
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe fcb3 	bl	800a46e <USBD_LL_IsoOUTIncomplete>
}
 800bb08:	bf00      	nop
 800bb0a:	3708      	adds	r7, #8
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bb22:	78fa      	ldrb	r2, [r7, #3]
 800bb24:	4611      	mov	r1, r2
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe fc6f 	bl	800a40a <USBD_LL_IsoINIncomplete>
}
 800bb2c:	bf00      	nop
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fe fcc5 	bl	800a4d2 <USBD_LL_DevConnected>
}
 800bb48:	bf00      	nop
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fe fcc2 	bl	800a4e8 <USBD_LL_DevDisconnected>
}
 800bb64:	bf00      	nop
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d13c      	bne.n	800bbf6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bb7c:	4a20      	ldr	r2, [pc, #128]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a1e      	ldr	r2, [pc, #120]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bb88:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb8c:	4b1c      	ldr	r3, [pc, #112]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bb8e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bb92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bb94:	4b1a      	ldr	r3, [pc, #104]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bb96:	2206      	movs	r2, #6
 800bb98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bb9a:	4b19      	ldr	r3, [pc, #100]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bb9c:	2202      	movs	r2, #2
 800bb9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bba0:	4b17      	ldr	r3, [pc, #92]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bba2:	2202      	movs	r2, #2
 800bba4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bba6:	4b16      	ldr	r3, [pc, #88]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bbac:	4b14      	ldr	r3, [pc, #80]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bbb2:	4b13      	ldr	r3, [pc, #76]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bbb8:	4b11      	ldr	r3, [pc, #68]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bbbe:	4b10      	ldr	r3, [pc, #64]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bbc4:	4b0e      	ldr	r3, [pc, #56]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bbca:	480d      	ldr	r0, [pc, #52]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bbcc:	f7f7 ffe6 	bl	8003b9c <HAL_PCD_Init>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bbd6:	f7f5 fa82 	bl	80010de <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bbda:	2180      	movs	r1, #128	@ 0x80
 800bbdc:	4808      	ldr	r0, [pc, #32]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bbde:	f7f9 f950 	bl	8004e82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bbe2:	2240      	movs	r2, #64	@ 0x40
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	4806      	ldr	r0, [pc, #24]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bbe8:	f7f9 f904 	bl	8004df4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bbec:	2280      	movs	r2, #128	@ 0x80
 800bbee:	2101      	movs	r1, #1
 800bbf0:	4803      	ldr	r0, [pc, #12]	@ (800bc00 <USBD_LL_Init+0x94>)
 800bbf2:	f7f9 f8ff 	bl	8004df4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	2000fe54 	.word	0x2000fe54

0800bc04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc10:	2300      	movs	r3, #0
 800bc12:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7f8 f8e2 	bl	8003de4 <HAL_PCD_Start>
 800bc20:	4603      	mov	r3, r0
 800bc22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc24:	7bbb      	ldrb	r3, [r7, #14]
 800bc26:	2b03      	cmp	r3, #3
 800bc28:	d816      	bhi.n	800bc58 <USBD_LL_Start+0x54>
 800bc2a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc30 <USBD_LL_Start+0x2c>)
 800bc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc30:	0800bc41 	.word	0x0800bc41
 800bc34:	0800bc47 	.word	0x0800bc47
 800bc38:	0800bc4d 	.word	0x0800bc4d
 800bc3c:	0800bc53 	.word	0x0800bc53
    case HAL_OK :
      usb_status = USBD_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	73fb      	strb	r3, [r7, #15]
    break;
 800bc44:	e00b      	b.n	800bc5e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc46:	2303      	movs	r3, #3
 800bc48:	73fb      	strb	r3, [r7, #15]
    break;
 800bc4a:	e008      	b.n	800bc5e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc50:	e005      	b.n	800bc5e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc52:	2303      	movs	r3, #3
 800bc54:	73fb      	strb	r3, [r7, #15]
    break;
 800bc56:	e002      	b.n	800bc5e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc5c:	bf00      	nop
  }
  return usb_status;
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	4608      	mov	r0, r1
 800bc72:	4611      	mov	r1, r2
 800bc74:	461a      	mov	r2, r3
 800bc76:	4603      	mov	r3, r0
 800bc78:	70fb      	strb	r3, [r7, #3]
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	70bb      	strb	r3, [r7, #2]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bc90:	78bb      	ldrb	r3, [r7, #2]
 800bc92:	883a      	ldrh	r2, [r7, #0]
 800bc94:	78f9      	ldrb	r1, [r7, #3]
 800bc96:	f7f8 fd8c 	bl	80047b2 <HAL_PCD_EP_Open>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
 800bca0:	2b03      	cmp	r3, #3
 800bca2:	d817      	bhi.n	800bcd4 <USBD_LL_OpenEP+0x6c>
 800bca4:	a201      	add	r2, pc, #4	@ (adr r2, 800bcac <USBD_LL_OpenEP+0x44>)
 800bca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcaa:	bf00      	nop
 800bcac:	0800bcbd 	.word	0x0800bcbd
 800bcb0:	0800bcc3 	.word	0x0800bcc3
 800bcb4:	0800bcc9 	.word	0x0800bcc9
 800bcb8:	0800bccf 	.word	0x0800bccf
    case HAL_OK :
      usb_status = USBD_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc0:	e00b      	b.n	800bcda <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc6:	e008      	b.n	800bcda <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	73fb      	strb	r3, [r7, #15]
    break;
 800bccc:	e005      	b.n	800bcda <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd2:	e002      	b.n	800bcda <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd8:	bf00      	nop
  }
  return usb_status;
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bcfe:	78fa      	ldrb	r2, [r7, #3]
 800bd00:	4611      	mov	r1, r2
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7f8 fdbd 	bl	8004882 <HAL_PCD_EP_Close>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d816      	bhi.n	800bd40 <USBD_LL_CloseEP+0x5c>
 800bd12:	a201      	add	r2, pc, #4	@ (adr r2, 800bd18 <USBD_LL_CloseEP+0x34>)
 800bd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd18:	0800bd29 	.word	0x0800bd29
 800bd1c:	0800bd2f 	.word	0x0800bd2f
 800bd20:	0800bd35 	.word	0x0800bd35
 800bd24:	0800bd3b 	.word	0x0800bd3b
    case HAL_OK :
      usb_status = USBD_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd2c:	e00b      	b.n	800bd46 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	73fb      	strb	r3, [r7, #15]
    break;
 800bd32:	e008      	b.n	800bd46 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd34:	2301      	movs	r3, #1
 800bd36:	73fb      	strb	r3, [r7, #15]
    break;
 800bd38:	e005      	b.n	800bd46 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3e:	e002      	b.n	800bd46 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd40:	2303      	movs	r3, #3
 800bd42:	73fb      	strb	r3, [r7, #15]
    break;
 800bd44:	bf00      	nop
  }
  return usb_status;
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd60:	2300      	movs	r3, #0
 800bd62:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd6a:	78fa      	ldrb	r2, [r7, #3]
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7f8 fe4c 	bl	8004a0c <HAL_PCD_EP_SetStall>
 800bd74:	4603      	mov	r3, r0
 800bd76:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	2b03      	cmp	r3, #3
 800bd7c:	d816      	bhi.n	800bdac <USBD_LL_StallEP+0x5c>
 800bd7e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd84 <USBD_LL_StallEP+0x34>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800bd95 	.word	0x0800bd95
 800bd88:	0800bd9b 	.word	0x0800bd9b
 800bd8c:	0800bda1 	.word	0x0800bda1
 800bd90:	0800bda7 	.word	0x0800bda7
    case HAL_OK :
      usb_status = USBD_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	73fb      	strb	r3, [r7, #15]
    break;
 800bd98:	e00b      	b.n	800bdb2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd9e:	e008      	b.n	800bdb2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bda0:	2301      	movs	r3, #1
 800bda2:	73fb      	strb	r3, [r7, #15]
    break;
 800bda4:	e005      	b.n	800bdb2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bda6:	2303      	movs	r3, #3
 800bda8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdaa:	e002      	b.n	800bdb2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bdac:	2303      	movs	r3, #3
 800bdae:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb0:	bf00      	nop
  }
  return usb_status;
 800bdb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdd6:	78fa      	ldrb	r2, [r7, #3]
 800bdd8:	4611      	mov	r1, r2
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7f8 fe78 	bl	8004ad0 <HAL_PCD_EP_ClrStall>
 800bde0:	4603      	mov	r3, r0
 800bde2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bde4:	7bbb      	ldrb	r3, [r7, #14]
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d816      	bhi.n	800be18 <USBD_LL_ClearStallEP+0x5c>
 800bdea:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf0 <USBD_LL_ClearStallEP+0x34>)
 800bdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf0:	0800be01 	.word	0x0800be01
 800bdf4:	0800be07 	.word	0x0800be07
 800bdf8:	0800be0d 	.word	0x0800be0d
 800bdfc:	0800be13 	.word	0x0800be13
    case HAL_OK :
      usb_status = USBD_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	73fb      	strb	r3, [r7, #15]
    break;
 800be04:	e00b      	b.n	800be1e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be06:	2303      	movs	r3, #3
 800be08:	73fb      	strb	r3, [r7, #15]
    break;
 800be0a:	e008      	b.n	800be1e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be0c:	2301      	movs	r3, #1
 800be0e:	73fb      	strb	r3, [r7, #15]
    break;
 800be10:	e005      	b.n	800be1e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be12:	2303      	movs	r3, #3
 800be14:	73fb      	strb	r3, [r7, #15]
    break;
 800be16:	e002      	b.n	800be1e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800be18:	2303      	movs	r3, #3
 800be1a:	73fb      	strb	r3, [r7, #15]
    break;
 800be1c:	bf00      	nop
  }
  return usb_status;
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be40:	2b00      	cmp	r3, #0
 800be42:	da0b      	bge.n	800be5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be4a:	68f9      	ldr	r1, [r7, #12]
 800be4c:	4613      	mov	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	4413      	add	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	440b      	add	r3, r1
 800be56:	333e      	adds	r3, #62	@ 0x3e
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	e00b      	b.n	800be74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be5c:	78fb      	ldrb	r3, [r7, #3]
 800be5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be62:	68f9      	ldr	r1, [r7, #12]
 800be64:	4613      	mov	r3, r2
 800be66:	00db      	lsls	r3, r3, #3
 800be68:	4413      	add	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	440b      	add	r3, r1
 800be6e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800be72:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be74:	4618      	mov	r0, r3
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	460b      	mov	r3, r1
 800be8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be9a:	78fa      	ldrb	r2, [r7, #3]
 800be9c:	4611      	mov	r1, r2
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7f8 fc62 	bl	8004768 <HAL_PCD_SetAddress>
 800bea4:	4603      	mov	r3, r0
 800bea6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bea8:	7bbb      	ldrb	r3, [r7, #14]
 800beaa:	2b03      	cmp	r3, #3
 800beac:	d816      	bhi.n	800bedc <USBD_LL_SetUSBAddress+0x5c>
 800beae:	a201      	add	r2, pc, #4	@ (adr r2, 800beb4 <USBD_LL_SetUSBAddress+0x34>)
 800beb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb4:	0800bec5 	.word	0x0800bec5
 800beb8:	0800becb 	.word	0x0800becb
 800bebc:	0800bed1 	.word	0x0800bed1
 800bec0:	0800bed7 	.word	0x0800bed7
    case HAL_OK :
      usb_status = USBD_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	73fb      	strb	r3, [r7, #15]
    break;
 800bec8:	e00b      	b.n	800bee2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800beca:	2303      	movs	r3, #3
 800becc:	73fb      	strb	r3, [r7, #15]
    break;
 800bece:	e008      	b.n	800bee2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bed0:	2301      	movs	r3, #1
 800bed2:	73fb      	strb	r3, [r7, #15]
    break;
 800bed4:	e005      	b.n	800bee2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bed6:	2303      	movs	r3, #3
 800bed8:	73fb      	strb	r3, [r7, #15]
    break;
 800beda:	e002      	b.n	800bee2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bedc:	2303      	movs	r3, #3
 800bede:	73fb      	strb	r3, [r7, #15]
    break;
 800bee0:	bf00      	nop
  }
  return usb_status;
 800bee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	607a      	str	r2, [r7, #4]
 800bef6:	603b      	str	r3, [r7, #0]
 800bef8:	460b      	mov	r3, r1
 800befa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf0a:	7af9      	ldrb	r1, [r7, #11]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	f7f8 fd4b 	bl	80049aa <HAL_PCD_EP_Transmit>
 800bf14:	4603      	mov	r3, r0
 800bf16:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bf18:	7dbb      	ldrb	r3, [r7, #22]
 800bf1a:	2b03      	cmp	r3, #3
 800bf1c:	d816      	bhi.n	800bf4c <USBD_LL_Transmit+0x60>
 800bf1e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf24 <USBD_LL_Transmit+0x38>)
 800bf20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf24:	0800bf35 	.word	0x0800bf35
 800bf28:	0800bf3b 	.word	0x0800bf3b
 800bf2c:	0800bf41 	.word	0x0800bf41
 800bf30:	0800bf47 	.word	0x0800bf47
    case HAL_OK :
      usb_status = USBD_OK;
 800bf34:	2300      	movs	r3, #0
 800bf36:	75fb      	strb	r3, [r7, #23]
    break;
 800bf38:	e00b      	b.n	800bf52 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	75fb      	strb	r3, [r7, #23]
    break;
 800bf3e:	e008      	b.n	800bf52 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf40:	2301      	movs	r3, #1
 800bf42:	75fb      	strb	r3, [r7, #23]
    break;
 800bf44:	e005      	b.n	800bf52 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf46:	2303      	movs	r3, #3
 800bf48:	75fb      	strb	r3, [r7, #23]
    break;
 800bf4a:	e002      	b.n	800bf52 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	75fb      	strb	r3, [r7, #23]
    break;
 800bf50:	bf00      	nop
  }
  return usb_status;
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3718      	adds	r7, #24
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	607a      	str	r2, [r7, #4]
 800bf66:	603b      	str	r3, [r7, #0]
 800bf68:	460b      	mov	r3, r1
 800bf6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf7a:	7af9      	ldrb	r1, [r7, #11]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	f7f8 fcc9 	bl	8004916 <HAL_PCD_EP_Receive>
 800bf84:	4603      	mov	r3, r0
 800bf86:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bf88:	7dbb      	ldrb	r3, [r7, #22]
 800bf8a:	2b03      	cmp	r3, #3
 800bf8c:	d816      	bhi.n	800bfbc <USBD_LL_PrepareReceive+0x60>
 800bf8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf94 <USBD_LL_PrepareReceive+0x38>)
 800bf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf94:	0800bfa5 	.word	0x0800bfa5
 800bf98:	0800bfab 	.word	0x0800bfab
 800bf9c:	0800bfb1 	.word	0x0800bfb1
 800bfa0:	0800bfb7 	.word	0x0800bfb7
    case HAL_OK :
      usb_status = USBD_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	75fb      	strb	r3, [r7, #23]
    break;
 800bfa8:	e00b      	b.n	800bfc2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	75fb      	strb	r3, [r7, #23]
    break;
 800bfae:	e008      	b.n	800bfc2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	75fb      	strb	r3, [r7, #23]
    break;
 800bfb4:	e005      	b.n	800bfc2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	75fb      	strb	r3, [r7, #23]
    break;
 800bfba:	e002      	b.n	800bfc2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	75fb      	strb	r3, [r7, #23]
    break;
 800bfc0:	bf00      	nop
  }
  return usb_status;
 800bfc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfde:	78fa      	ldrb	r2, [r7, #3]
 800bfe0:	4611      	mov	r1, r2
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7f8 fcc9 	bl	800497a <HAL_PCD_EP_GetRxCount>
 800bfe8:	4603      	mov	r3, r0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
	...

0800bff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c000:	78fb      	ldrb	r3, [r7, #3]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d002      	beq.n	800c00c <HAL_PCDEx_LPM_Callback+0x18>
 800c006:	2b01      	cmp	r3, #1
 800c008:	d01f      	beq.n	800c04a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c00a:	e03b      	b.n	800c084 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a1b      	ldr	r3, [r3, #32]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d007      	beq.n	800c024 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c014:	f000 f854 	bl	800c0c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c018:	4b1c      	ldr	r3, [pc, #112]	@ (800c08c <HAL_PCDEx_LPM_Callback+0x98>)
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	4a1b      	ldr	r2, [pc, #108]	@ (800c08c <HAL_PCDEx_LPM_Callback+0x98>)
 800c01e:	f023 0306 	bic.w	r3, r3, #6
 800c022:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	6812      	ldr	r2, [r2, #0]
 800c032:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c036:	f023 0301 	bic.w	r3, r3, #1
 800c03a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c042:	4618      	mov	r0, r3
 800c044:	f7fe f9a9 	bl	800a39a <USBD_LL_Resume>
    break;
 800c048:	e01c      	b.n	800c084 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	6812      	ldr	r2, [r2, #0]
 800c058:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c05c:	f043 0301 	orr.w	r3, r3, #1
 800c060:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c068:	4618      	mov	r0, r3
 800c06a:	f7fe f97a 	bl	800a362 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a1b      	ldr	r3, [r3, #32]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d005      	beq.n	800c082 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c076:	4b05      	ldr	r3, [pc, #20]	@ (800c08c <HAL_PCDEx_LPM_Callback+0x98>)
 800c078:	691b      	ldr	r3, [r3, #16]
 800c07a:	4a04      	ldr	r2, [pc, #16]	@ (800c08c <HAL_PCDEx_LPM_Callback+0x98>)
 800c07c:	f043 0306 	orr.w	r3, r3, #6
 800c080:	6113      	str	r3, [r2, #16]
    break;
 800c082:	bf00      	nop
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	e000ed00 	.word	0xe000ed00

0800c090 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c098:	4b03      	ldr	r3, [pc, #12]	@ (800c0a8 <USBD_static_malloc+0x18>)
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	20010360 	.word	0x20010360

0800c0ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]

}
 800c0b4:	bf00      	nop
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c0c4:	f7f4 ffb8 	bl	8001038 <SystemClock_Config>
}
 800c0c8:	bf00      	nop
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <memset>:
 800c0cc:	4402      	add	r2, r0
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d100      	bne.n	800c0d6 <memset+0xa>
 800c0d4:	4770      	bx	lr
 800c0d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c0da:	e7f9      	b.n	800c0d0 <memset+0x4>

0800c0dc <__libc_init_array>:
 800c0dc:	b570      	push	{r4, r5, r6, lr}
 800c0de:	4d0d      	ldr	r5, [pc, #52]	@ (800c114 <__libc_init_array+0x38>)
 800c0e0:	4c0d      	ldr	r4, [pc, #52]	@ (800c118 <__libc_init_array+0x3c>)
 800c0e2:	1b64      	subs	r4, r4, r5
 800c0e4:	10a4      	asrs	r4, r4, #2
 800c0e6:	2600      	movs	r6, #0
 800c0e8:	42a6      	cmp	r6, r4
 800c0ea:	d109      	bne.n	800c100 <__libc_init_array+0x24>
 800c0ec:	4d0b      	ldr	r5, [pc, #44]	@ (800c11c <__libc_init_array+0x40>)
 800c0ee:	4c0c      	ldr	r4, [pc, #48]	@ (800c120 <__libc_init_array+0x44>)
 800c0f0:	f000 f826 	bl	800c140 <_init>
 800c0f4:	1b64      	subs	r4, r4, r5
 800c0f6:	10a4      	asrs	r4, r4, #2
 800c0f8:	2600      	movs	r6, #0
 800c0fa:	42a6      	cmp	r6, r4
 800c0fc:	d105      	bne.n	800c10a <__libc_init_array+0x2e>
 800c0fe:	bd70      	pop	{r4, r5, r6, pc}
 800c100:	f855 3b04 	ldr.w	r3, [r5], #4
 800c104:	4798      	blx	r3
 800c106:	3601      	adds	r6, #1
 800c108:	e7ee      	b.n	800c0e8 <__libc_init_array+0xc>
 800c10a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c10e:	4798      	blx	r3
 800c110:	3601      	adds	r6, #1
 800c112:	e7f2      	b.n	800c0fa <__libc_init_array+0x1e>
 800c114:	0800c218 	.word	0x0800c218
 800c118:	0800c218 	.word	0x0800c218
 800c11c:	0800c218 	.word	0x0800c218
 800c120:	0800c21c 	.word	0x0800c21c

0800c124 <memcpy>:
 800c124:	440a      	add	r2, r1
 800c126:	4291      	cmp	r1, r2
 800c128:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c12c:	d100      	bne.n	800c130 <memcpy+0xc>
 800c12e:	4770      	bx	lr
 800c130:	b510      	push	{r4, lr}
 800c132:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c13a:	4291      	cmp	r1, r2
 800c13c:	d1f9      	bne.n	800c132 <memcpy+0xe>
 800c13e:	bd10      	pop	{r4, pc}

0800c140 <_init>:
 800c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c142:	bf00      	nop
 800c144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c146:	bc08      	pop	{r3}
 800c148:	469e      	mov	lr, r3
 800c14a:	4770      	bx	lr

0800c14c <_fini>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	bf00      	nop
 800c150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c152:	bc08      	pop	{r3}
 800c154:	469e      	mov	lr, r3
 800c156:	4770      	bx	lr
