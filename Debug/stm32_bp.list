
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d73c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800d8f8  0800d8f8  0000e8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9b0  0800d9b0  0000f10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9b0  0800d9b0  0000e9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9b8  0800d9b8  0000f10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9b8  0800d9b8  0000e9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9bc  0800d9bc  0000e9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800d9c0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005084  2000010c  0800dacc  0000f10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005190  0800dacc  0000f190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024642  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e41  00000000  00000000  0003377e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  000385c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015f9  00000000  00000000  0003a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff2b  00000000  00000000  0003b811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023047  00000000  00000000  0006b73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d8ba  00000000  00000000  0008e783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac03d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000777c  00000000  00000000  001ac080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b37fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800d8e0 	.word	0x0800d8e0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800d8e0 	.word	0x0800d8e0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2201      	movs	r2, #1
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fc85 	bl	8001e78 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fe7f 	bl	8001276 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f002 f801 	bl	800259c <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fe69 	bl	8001276 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f001 fff3 	bl	800259c <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 fe5b 	bl	8001276 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00d f937 	bl	800d86c <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fdab 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 fe17 	bl	8001276 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 fa3f 	bl	8003b14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 fea9 	bl	8003428 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 fdcb 	bl	8001276 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 fe62 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 fe7b 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 fe4c 	bl	8003428 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fd6e 	bl	8001276 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 fe0b 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 fe24 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 fe03 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 fe1c 	bl	80033f2 <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 fdb1 	bl	80053c4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 fad9 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 fad4 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 facf 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f003 f92f 	bl	8003b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f003 f920 	bl	8003b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f003 f914 	bl	8003b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f003 f906 	bl	8003b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f003 f8f8 	bl	8003b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fd46 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fd5f 	bl	80033f2 <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d125      	bne.n	80009aa <HAL_GPIO_EXTI_Callback+0x5e>
		static bool previous;
		if(previous == false){
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000974:	f003 fa60 	bl	8003e38 <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		} else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000988:	f003 fa56 	bl	8003e38 <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
		}

		int test = 1984;
 8000992:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000996:	60fb      	str	r3, [r7, #12]
		comms_append_int32(10, 1, &test);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	461a      	mov	r2, r3
 800099e:	2101      	movs	r1, #1
 80009a0:	200a      	movs	r0, #10
 80009a2:	f000 f881 	bl	8000aa8 <comms_append_int32>
		comms_send();
 80009a6:	f000 f8f3 	bl	8000b90 <comms_send>
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000250 	.word	0x20000250
 80009b8:	48000400 	.word	0x48000400

080009bc <comms_reset_active_buffer>:
	DataValue data[255];
} CommsData;

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);

void comms_reset_active_buffer() {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_active_buffer)) = START_HEADER; // start bits
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 80009c8:	801a      	strh	r2, [r3, #0]
	comms_active_buffer[2] = 0; // buffer id
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3302      	adds	r3, #2
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	*((uint16_t*) (comms_active_buffer + 3)) = 0; // num of elements
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3303      	adds	r3, #3
 80009da:	2200      	movs	r2, #0
 80009dc:	801a      	strh	r2, [r3, #0]
	comms_active_wr_pointer = comms_active_buffer + 5; // first empty position for data
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3305      	adds	r3, #5
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <comms_reset_active_buffer+0x3c>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000a54 	.word	0x20000a54
 80009f8:	20000a58 	.word	0x20000a58

080009fc <comms_init>:

void comms_init() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	comms_active_buffer = comms_tx_buffer1;
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <comms_init+0x24>)
 8000a02:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <comms_init+0x28>)
 8000a04:	601a      	str	r2, [r3, #0]
	comms_prepared_buffer = comms_tx_buffer2;
 8000a06:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <comms_init+0x2c>)
 8000a08:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <comms_init+0x30>)
 8000a0a:	601a      	str	r2, [r3, #0]

	comms_reset_active_buffer();
 8000a0c:	f7ff ffd6 	bl	80009bc <comms_reset_active_buffer>
	comms_prepared_wr_pointer = comms_prepared_buffer + 5;
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <comms_init+0x2c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3305      	adds	r3, #5
 8000a16:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <comms_init+0x34>)
 8000a18:	6013      	str	r3, [r2, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000a54 	.word	0x20000a54
 8000a24:	20000254 	.word	0x20000254
 8000a28:	20000a5c 	.word	0x20000a5c
 8000a2c:	20000654 	.word	0x20000654
 8000a30:	20000a60 	.word	0x20000a60

08000a34 <comms_purge_id_register>:

void comms_purge_id_register() {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	memset(comms_id_register, NULL, sizeof(comms_id_register));
 8000a38:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <comms_purge_id_register+0x14>)
 8000a40:	f00c ff14 	bl	800d86c <memset>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000a64 	.word	0x20000a64

08000a4c <comms_find_existing_data>:

void* comms_find_existing_data(uint8_t data_id) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	if (comms_id_register[data_id] != NULL) {
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <comms_find_existing_data+0x30>)
 8000a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d004      	beq.n	8000a6c <comms_find_existing_data+0x20>
		return comms_id_register[data_id];
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <comms_find_existing_data+0x30>)
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	e000      	b.n	8000a6e <comms_find_existing_data+0x22>
	}
	return NULL;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000a64 	.word	0x20000a64

08000a80 <comms_increment_active_buffer_data>:

void comms_increment_active_buffer_data() {
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_active_buffer + 3)) += 1;
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <comms_increment_active_buffer_data+0x24>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3303      	adds	r3, #3
 8000a8a:	881a      	ldrh	r2, [r3, #0]
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <comms_increment_active_buffer_data+0x24>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3303      	adds	r3, #3
 8000a92:	3201      	adds	r2, #1
 8000a94:	b292      	uxth	r2, r2
 8000a96:	801a      	strh	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000a54 	.word	0x20000a54

08000aa8 <comms_append_int32>:

int comms_append_int32(uint8_t data_id, uint8_t data_count, int *data) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	603a      	str	r2, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	71bb      	strb	r3, [r7, #6]
	// dissable interrupts
//	uint32_t primask = __get_PRIMASK();
//	__disable_irq();

	//check tx_register for same data id, return if existing
	if (comms_find_existing_data(data_id) != NULL) {
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ffc6 	bl	8000a4c <comms_find_existing_data>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <comms_append_int32+0x22>
		return 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e02a      	b.n	8000b20 <comms_append_int32+0x78>
	}

	if (wr_status) {
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <comms_append_int32+0x80>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <comms_append_int32+0x2e>
		return COMMS_WR_LOCKED;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	e024      	b.n	8000b20 <comms_append_int32+0x78>
//	else {
//		wr_status = COMMS_INPROGRESS;
//	}

	// save the pointer to new data to register
	comms_id_register[data_id] = (void*) comms_active_wr_pointer;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4a14      	ldr	r2, [pc, #80]	@ (8000b2c <comms_append_int32+0x84>)
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	4914      	ldr	r1, [pc, #80]	@ (8000b30 <comms_append_int32+0x88>)
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_increment_active_buffer_data();
 8000ae2:	f7ff ffcd 	bl	8000a80 <comms_increment_active_buffer_data>

	// write id, bytes and count
	*comms_active_wr_pointer = data_id;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <comms_append_int32+0x84>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	79fa      	ldrb	r2, [r7, #7]
 8000aec:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer + 1) = (uint8_t) sizeof(*data);
 8000aee:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <comms_append_int32+0x84>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	2204      	movs	r2, #4
 8000af6:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer + 2) = data_count;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <comms_append_int32+0x84>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3302      	adds	r3, #2
 8000afe:	79ba      	ldrb	r2, [r7, #6]
 8000b00:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int*) (comms_active_wr_pointer + 3)) = *data;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <comms_append_int32+0x84>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3303      	adds	r3, #3
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	6812      	ldr	r2, [r2, #0]
 8000b0c:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_active_wr_pointer = (comms_active_wr_pointer + 3 + sizeof(*data));
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <comms_append_int32+0x84>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3307      	adds	r3, #7
 8000b14:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <comms_append_int32+0x84>)
 8000b16:	6013      	str	r3, [r2, #0]

	wr_status = COMMS_READY;
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <comms_append_int32+0x80>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]

	// restore interrupts
//	__set_PRIMASK(primask);

	return 0;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000126c 	.word	0x2000126c
 8000b2c:	20000a58 	.word	0x20000a58
 8000b30:	20000a64 	.word	0x20000a64

08000b34 <comms_switch_buffers>:

void comms_switch_buffers() {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8000b3e:	603b      	str	r3, [r7, #0]
  return(result);
 8000b40:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000b42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t *_temp = comms_prepared_buffer;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <comms_switch_buffers+0x4c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60bb      	str	r3, [r7, #8]
	comms_prepared_buffer = comms_active_buffer;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <comms_switch_buffers+0x50>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a0b      	ldr	r2, [pc, #44]	@ (8000b80 <comms_switch_buffers+0x4c>)
 8000b54:	6013      	str	r3, [r2, #0]
	comms_active_buffer = _temp;
 8000b56:	4a0b      	ldr	r2, [pc, #44]	@ (8000b84 <comms_switch_buffers+0x50>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_prepared_wr_pointer = comms_active_wr_pointer;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <comms_switch_buffers+0x54>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <comms_switch_buffers+0x58>)
 8000b62:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_buffer();
 8000b64:	f7ff ff2a 	bl	80009bc <comms_reset_active_buffer>
	comms_purge_id_register();
 8000b68:	f7ff ff64 	bl	8000a34 <comms_purge_id_register>
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f383 8810 	msr	PRIMASK, r3
}
 8000b76:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000a5c 	.word	0x20000a5c
 8000b84:	20000a54 	.word	0x20000a54
 8000b88:	20000a58 	.word	0x20000a58
 8000b8c:	20000a60 	.word	0x20000a60

08000b90 <comms_send>:

int comms_send() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

	if (tx_status > 0) {
 8000b96:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <comms_send+0xa8>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <comms_send+0x12>
		return COMMS_TX_LOCKED;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	e046      	b.n	8000c30 <comms_send+0xa0>
	}

	tx_status = COMMS_INPROGRESS;
 8000ba2:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <comms_send+0xa8>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]

	// need to switch buffers
	comms_switch_buffers();
 8000ba8:	f7ff ffc4 	bl	8000b34 <comms_switch_buffers>

	// terminator at the end
	*comms_prepared_wr_pointer = END_CR;
 8000bac:	4b23      	ldr	r3, [pc, #140]	@ (8000c3c <comms_send+0xac>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	220d      	movs	r2, #13
 8000bb2:	701a      	strb	r2, [r3, #0]
	*(comms_prepared_wr_pointer + 1) = END_LF;
 8000bb4:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <comms_send+0xac>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	220a      	movs	r2, #10
 8000bbc:	701a      	strb	r2, [r3, #0]
	comms_prepared_wr_pointer += 2;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <comms_send+0xac>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c3c <comms_send+0xac>)
 8000bc6:	6013      	str	r3, [r2, #0]

	// buffer is empty
	if (comms_prepared_buffer[3] == 0) {
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <comms_send+0xb0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3303      	adds	r3, #3
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <comms_send+0x58>
		++empty; //DEBUG
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <comms_send+0xb4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <comms_send+0xb4>)
 8000bdc:	6013      	str	r3, [r2, #0]
		tx_status = COMMS_READY;
 8000bde:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <comms_send+0xa8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
		return COMMS_TX_BUFFER_EMPTY;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e023      	b.n	8000c30 <comms_send+0xa0>
	} else {
		full++;
 8000be8:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <comms_send+0xb8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	4a16      	ldr	r2, [pc, #88]	@ (8000c48 <comms_send+0xb8>)
 8000bf0:	6013      	str	r3, [r2, #0]
	}

	// send data
	USBD_StatusTypeDef cdc_return = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_return = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71bb      	strb	r3, [r7, #6]

	if(1){
		cdc_return = CDC_Transmit_FS(comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer);
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <comms_send+0xb0>)
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <comms_send+0xac>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <comms_send+0xb0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f00c f88e 	bl	800cd2c <CDC_Transmit_FS>
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
	} else {
		uart_return = HAL_UART_Transmit(&hlpuart1, comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer, 100);
	}

	tx_status = COMMS_READY;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <comms_send+0xa8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]

	if (cdc_return) {
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <comms_send+0x94>
		return COMMS_TX_CDC_FAIL;
 8000c20:	2302      	movs	r3, #2
 8000c22:	e005      	b.n	8000c30 <comms_send+0xa0>
	}

	if (uart_return) {
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <comms_send+0x9e>
		return COMMS_TX_UART_FAIL;
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	e000      	b.n	8000c30 <comms_send+0xa0>
	}

	return COMMS_SUCCESS;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000126d 	.word	0x2000126d
 8000c3c:	20000a60 	.word	0x20000a60
 8000c40:	20000a5c 	.word	0x20000a5c
 8000c44:	20001264 	.word	0x20001264
 8000c48:	20001268 	.word	0x20001268

08000c4c <comms_cdc_rx_callback>:

void comms_cdc_rx_callback(uint8_t *buffer, uint32_t length) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	// call this func inside of usbd_cdc_if.c in CDC_Receive_FS()

	if (rx_status) {
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <comms_cdc_rx_callback+0x44>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d111      	bne.n	8000c82 <comms_cdc_rx_callback+0x36>
		// not ready yet
		return;
	}

	if (length < 3) {
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d910      	bls.n	8000c86 <comms_cdc_rx_callback+0x3a>
		// invalid
		return;
	}

	rx_status = COMMS_INPROGRESS;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <comms_cdc_rx_callback+0x44>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]

	//comms_rx_buffer = buffer;
	memcpy(comms_rx_buffer1, buffer, length);
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <comms_cdc_rx_callback+0x48>)
 8000c70:	f00c fe28 	bl	800d8c4 <memcpy>
	comms_rx_read_pointer = comms_rx_buffer1 + 3;
 8000c74:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <comms_cdc_rx_callback+0x4c>)
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <comms_cdc_rx_callback+0x50>)
 8000c78:	601a      	str	r2, [r3, #0]

	rx_status = COMMS_RECEIVED;
 8000c7a:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <comms_cdc_rx_callback+0x44>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	e002      	b.n	8000c88 <comms_cdc_rx_callback+0x3c>
		return;
 8000c82:	bf00      	nop
 8000c84:	e000      	b.n	8000c88 <comms_cdc_rx_callback+0x3c>
		return;
 8000c86:	bf00      	nop
}
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000126e 	.word	0x2000126e
 8000c94:	20000e60 	.word	0x20000e60
 8000c98:	20000e63 	.word	0x20000e63
 8000c9c:	20001260 	.word	0x20001260

08000ca0 <comms_data_handler>:

__weak void comms_data_handler(CommsData *data) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

	if (data == NULL) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00c      	beq.n	8000cc8 <comms_data_handler+0x28>
		return;
	}

	switch (data->data_id) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b05      	cmp	r3, #5
 8000cb4:	d10a      	bne.n	8000ccc <comms_data_handler+0x2c>
	case 5:
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
				(GPIO_PinState) (data->data[0].u8));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	791b      	ldrb	r3, [r3, #4]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
 8000cba:	461a      	mov	r2, r3
 8000cbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cc0:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <comms_data_handler+0x34>)
 8000cc2:	f003 f8b9 	bl	8003e38 <HAL_GPIO_WritePin>
		break;
 8000cc6:	e002      	b.n	8000cce <comms_data_handler+0x2e>
		return;
 8000cc8:	bf00      	nop
 8000cca:	e000      	b.n	8000cce <comms_data_handler+0x2e>
	default:
		break;
 8000ccc:	bf00      	nop
	}

}
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	48000400 	.word	0x48000400

08000cd8 <comms_rx_process>:

void comms_rx_process() {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000cde:	af00      	add	r7, sp, #0
	if (!rx_status) {
 8000ce0:	4b4f      	ldr	r3, [pc, #316]	@ (8000e20 <comms_rx_process+0x148>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 8093 	beq.w	8000e10 <comms_rx_process+0x138>
		// no data yet
		return;
	}

	if (comms_rx_buffer1[0] == 0) {
 8000cea:	4b4e      	ldr	r3, [pc, #312]	@ (8000e24 <comms_rx_process+0x14c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f040 808a 	bne.w	8000e08 <comms_rx_process+0x130>
		uint16_t elements = *((uint16_t*) (comms_rx_buffer1 + 1));
 8000cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8000e24 <comms_rx_process+0x14c>)
 8000cf6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000cfa:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406

		for (; elements > 0; --elements) {
 8000cfe:	e07e      	b.n	8000dfe <comms_rx_process+0x126>
			CommsData data;
			data.data_id = *comms_rx_read_pointer;
 8000d00:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <comms_rx_process+0x150>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d0a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d0e:	701a      	strb	r2, [r3, #0]
			data.data_size = *(comms_rx_read_pointer + 1);
 8000d10:	4b45      	ldr	r3, [pc, #276]	@ (8000e28 <comms_rx_process+0x150>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	785a      	ldrb	r2, [r3, #1]
 8000d16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d1a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d1e:	705a      	strb	r2, [r3, #1]
			data.data_count = *(comms_rx_read_pointer + 2);
 8000d20:	4b41      	ldr	r3, [pc, #260]	@ (8000e28 <comms_rx_process+0x150>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	789a      	ldrb	r2, [r3, #2]
 8000d26:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d2a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d2e:	709a      	strb	r2, [r3, #2]

			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000d36:	e03d      	b.n	8000db4 <comms_rx_process+0xdc>
				switch (data.data_size) {
 8000d38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d3c:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d40:	785b      	ldrb	r3, [r3, #1]
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	d023      	beq.n	8000d8e <comms_rx_process+0xb6>
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	dc64      	bgt.n	8000e14 <comms_rx_process+0x13c>
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d002      	beq.n	8000d54 <comms_rx_process+0x7c>
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d00e      	beq.n	8000d70 <comms_rx_process+0x98>
				case 4:
					data.data[x].u32 =
							*((uint32_t*) (comms_rx_read_pointer + 3));
					break;
				default:
					return;
 8000d52:	e05f      	b.n	8000e14 <comms_rx_process+0x13c>
					data.data[x].u8 = *(comms_rx_read_pointer + 3);
 8000d54:	4b34      	ldr	r3, [pc, #208]	@ (8000e28 <comms_rx_process+0x150>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d5c:	78d1      	ldrb	r1, [r2, #3]
 8000d5e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000d62:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	460a      	mov	r2, r1
 8000d6c:	711a      	strb	r2, [r3, #4]
					break;
 8000d6e:	e01c      	b.n	8000daa <comms_rx_process+0xd2>
					data.data[x].u16 =
 8000d70:	4b2d      	ldr	r3, [pc, #180]	@ (8000e28 <comms_rx_process+0x150>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d78:	f8b2 1003 	ldrh.w	r1, [r2, #3]
 8000d7c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000d80:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	460a      	mov	r2, r1
 8000d8a:	809a      	strh	r2, [r3, #4]
					break;
 8000d8c:	e00d      	b.n	8000daa <comms_rx_process+0xd2>
					data.data[x].u32 =
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <comms_rx_process+0x150>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d96:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8000d9a:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000d9e:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	605a      	str	r2, [r3, #4]
					break;
 8000da8:	bf00      	nop
			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000daa:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000dae:	3301      	adds	r3, #1
 8000db0:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000db4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000db8:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000dbc:	789b      	ldrb	r3, [r3, #2]
 8000dbe:	f897 2405 	ldrb.w	r2, [r7, #1029]	@ 0x405
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d3b8      	bcc.n	8000d38 <comms_rx_process+0x60>
				}
			}

			comms_data_handler(&data);
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff69 	bl	8000ca0 <comms_data_handler>

			comms_rx_read_pointer = (comms_rx_read_pointer + 3
					+ (data.data_size * data.data_count));
 8000dce:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <comms_rx_process+0x150>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000dd6:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000dda:	785b      	ldrb	r3, [r3, #1]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000de2:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000de6:	789b      	ldrb	r3, [r3, #2]
 8000de8:	fb01 f303 	mul.w	r3, r1, r3
 8000dec:	3303      	adds	r3, #3
 8000dee:	4413      	add	r3, r2
			comms_rx_read_pointer = (comms_rx_read_pointer + 3
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <comms_rx_process+0x150>)
 8000df2:	6013      	str	r3, [r2, #0]
		for (; elements > 0; --elements) {
 8000df4:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
 8000dfe:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f47f af7c 	bne.w	8000d00 <comms_rx_process+0x28>
		}
	}

	rx_status = COMMS_READY;
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <comms_rx_process+0x148>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e002      	b.n	8000e16 <comms_rx_process+0x13e>
		return;
 8000e10:	bf00      	nop
 8000e12:	e000      	b.n	8000e16 <comms_rx_process+0x13e>
					return;
 8000e14:	bf00      	nop
}
 8000e16:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000126e 	.word	0x2000126e
 8000e24:	20000e60 	.word	0x20000e60
 8000e28:	20001260 	.word	0x20001260

08000e2c <comms_uart_init>:

void comms_uart_init() {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_buffer1,
 8000e32:	2203      	movs	r2, #3
 8000e34:	4904      	ldr	r1, [pc, #16]	@ (8000e48 <comms_uart_init+0x1c>)
 8000e36:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <comms_uart_init+0x20>)
 8000e38:	f006 fc12 	bl	8007660 <HAL_UART_Receive_IT>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
			3);
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000e60 	.word	0x20000e60
 8000e4c:	20003458 	.word	0x20003458

08000e50 <comms_lpuart_rx_callback>:

void comms_lpuart_rx_callback(UART_HandleTypeDef *huart) {
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	// FOR ELEMENT LOOP:
	//		load packet head
	//		load data
	static uint16_t elements = 0;

}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	// user defined __weak callback from stm32l4xx_hal_uart.c
	// uart loaded data
	if (huart == &hlpuart1) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <HAL_UART_RxCpltCallback+0x20>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d102      	bne.n	8000e7a <HAL_UART_RxCpltCallback+0x16>
		comms_lpuart_rx_callback(huart);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ffeb 	bl	8000e50 <comms_lpuart_rx_callback>
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20003458 	.word	0x20003458

08000e88 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d10d      	bne.n	8000eb4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e98:	2180      	movs	r1, #128	@ 0x80
 8000e9a:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e9c:	f002 ffe4 	bl	8003e68 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ea8:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		comms_append_int32(1, 1, &periodical);
 8000eaa:	4a06      	ldr	r2, [pc, #24]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff fdfa 	bl	8000aa8 <comms_append_int32>
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000340c 	.word	0x2000340c
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	20001270 	.word	0x20001270

08000ec8 <myDmaFunction>:

char testdata[10];

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <myDmaFunction+0x28>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed6:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <myDmaFunction+0x2c>)
 8000ed8:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000eda:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <myDmaFunction+0x28>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee0:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <myDmaFunction+0x30>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	200033c0 	.word	0x200033c0
 8000ef4:	2000127c 	.word	0x2000127c
 8000ef8:	20001280 	.word	0x20001280

08000efc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);

    ++call_count;
 8000f04:	4b58      	ldr	r3, [pc, #352]	@ (8001068 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4a57      	ldr	r2, [pc, #348]	@ (8001068 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000f0c:	6013      	str	r3, [r2, #0]

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8000f0e:	4b57      	ldr	r3, [pc, #348]	@ (800106c <HAL_ADC_ConvCpltCallback+0x170>)
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 8000f16:	4b56      	ldr	r3, [pc, #344]	@ (8001070 <HAL_ADC_ConvCpltCallback+0x174>)
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 100; i++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	e027      	b.n	8000f74 <HAL_ADC_ConvCpltCallback+0x78>
        adcValue += dma_data_buffer[i + 100]; // Použití druhé poloviny DMA bufferu
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	3364      	adds	r3, #100	@ 0x64
 8000f28:	4a52      	ldr	r2, [pc, #328]	@ (8001074 <HAL_ADC_ConvCpltCallback+0x178>)
 8000f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f36:	4b4d      	ldr	r3, [pc, #308]	@ (800106c <HAL_ADC_ConvCpltCallback+0x170>)
 8000f38:	edd3 7a00 	vldr	s15, [r3]
 8000f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f40:	4b4a      	ldr	r3, [pc, #296]	@ (800106c <HAL_ADC_ConvCpltCallback+0x170>)
 8000f42:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 100];
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3365      	adds	r3, #101	@ 0x65
 8000f4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001074 <HAL_ADC_ConvCpltCallback+0x178>)
 8000f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f58:	4b45      	ldr	r3, [pc, #276]	@ (8001070 <HAL_ADC_ConvCpltCallback+0x174>)
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	4b43      	ldr	r3, [pc, #268]	@ (8001070 <HAL_ADC_ConvCpltCallback+0x174>)
 8000f64:	edc3 7a00 	vstr	s15, [r3]
        i++;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 100; i++) {
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b63      	cmp	r3, #99	@ 0x63
 8000f78:	ddd4      	ble.n	8000f24 <HAL_ADC_ConvCpltCallback+0x28>
    }
    adcValue /= 50.0f;
 8000f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800106c <HAL_ADC_ConvCpltCallback+0x170>)
 8000f7c:	ed93 7a00 	vldr	s14, [r3]
 8000f80:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001078 <HAL_ADC_ConvCpltCallback+0x17c>
 8000f84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f88:	4b38      	ldr	r3, [pc, #224]	@ (800106c <HAL_ADC_ConvCpltCallback+0x170>)
 8000f8a:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 8000f8e:	4b38      	ldr	r3, [pc, #224]	@ (8001070 <HAL_ADC_ConvCpltCallback+0x174>)
 8000f90:	ed93 7a00 	vldr	s14, [r3]
 8000f94:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001078 <HAL_ADC_ConvCpltCallback+0x17c>
 8000f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9c:	4b34      	ldr	r3, [pc, #208]	@ (8001070 <HAL_ADC_ConvCpltCallback+0x174>)
 8000f9e:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8000fa2:	4b32      	ldr	r3, [pc, #200]	@ (800106c <HAL_ADC_ConvCpltCallback+0x170>)
 8000fa4:	ed93 7a00 	vldr	s14, [r3]
 8000fa8:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800107c <HAL_ADC_ConvCpltCallback+0x180>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001080 <HAL_ADC_ConvCpltCallback+0x184>
 8000fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb8:	edc7 7a04 	vstr	s15, [r7, #16]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8000fbc:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <HAL_ADC_ConvCpltCallback+0x188>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fc8:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800107c <HAL_ADC_ConvCpltCallback+0x180>
 8000fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd0:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001080 <HAL_ADC_ConvCpltCallback+0x184>
 8000fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd8:	edc7 7a03 	vstr	s15, [r7, #12]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <HAL_ADC_ConvCpltCallback+0x18c>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fe8:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800107c <HAL_ADC_ConvCpltCallback+0x180>
 8000fec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001080 <HAL_ADC_ConvCpltCallback+0x184>
 8000ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff8:	edc7 7a02 	vstr	s15, [r7, #8]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8000ffc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001000:	edd7 7a03 	vldr	s15, [r7, #12]
 8001004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001008:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800108c <HAL_ADC_ConvCpltCallback+0x190>
 800100c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001010:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001014:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001018:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <HAL_ADC_ConvCpltCallback+0x194>)
 800101a:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 800101e:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <HAL_ADC_ConvCpltCallback+0x198>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <HAL_ADC_ConvCpltCallback+0x198>)
 8001026:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    temperatureInt = (int)temperature;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <HAL_ADC_ConvCpltCallback+0x194>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001032:	ee17 2a90 	vmov	r2, s15
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001038:	601a      	str	r2, [r3, #0]

    adcIn1Int = (int)adcIn1;
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <HAL_ADC_ConvCpltCallback+0x174>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001044:	ee17 2a90 	vmov	r2, s15
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_ADC_ConvCpltCallback+0x1a0>)
 800104a:	601a      	str	r2, [r3, #0]

    full_adc++;
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1a4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	4a13      	ldr	r2, [pc, #76]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001054:	6013      	str	r3, [r2, #0]

    //comms_append_int32(2, 1, &temperatureInt);
    comms_append_int32(23, 1, &adcIn1Int);
 8001056:	4a11      	ldr	r2, [pc, #68]	@ (800109c <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001058:	2101      	movs	r1, #1
 800105a:	2017      	movs	r0, #23
 800105c:	f7ff fd24 	bl	8000aa8 <comms_append_int32>
}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000336c 	.word	0x2000336c
 800106c:	20003354 	.word	0x20003354
 8001070:	2000335c 	.word	0x2000335c
 8001074:	200031c4 	.word	0x200031c4
 8001078:	42480000 	.word	0x42480000
 800107c:	45800000 	.word	0x45800000
 8001080:	40533333 	.word	0x40533333
 8001084:	1fff75a8 	.word	0x1fff75a8
 8001088:	1fff75ca 	.word	0x1fff75ca
 800108c:	42a00000 	.word	0x42a00000
 8001090:	20003358 	.word	0x20003358
 8001094:	20003360 	.word	0x20003360
 8001098:	20003364 	.word	0x20003364
 800109c:	20003368 	.word	0x20003368
 80010a0:	20003370 	.word	0x20003370

080010a4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
//		adcValue = adcValue + dma_data_buffer[i];
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010be:	f000 fc2e 	bl	800191e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f885 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f7ff fb83 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ca:	f7ff fb25 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 80010ce:	f000 fa29 	bl	8001524 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80010d2:	f00b fd67 	bl	800cba4 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 80010d6:	f000 f9d7 	bl	8001488 <MX_TIM5_Init>
  MX_ADC1_Init();
 80010da:	f7ff fa07 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 80010de:	f000 f985 	bl	80013ec <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80010e2:	f000 faf9 	bl	80016d8 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 80010e6:	f000 faab 	bl	8001640 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2180      	movs	r1, #128	@ 0x80
 80010ee:	482b      	ldr	r0, [pc, #172]	@ (800119c <main+0xe4>)
 80010f0:	f002 fea2 	bl	8003e38 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 80010f4:	482a      	ldr	r0, [pc, #168]	@ (80011a0 <main+0xe8>)
 80010f6:	f005 fe25 	bl	8006d44 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 80010fa:	482a      	ldr	r0, [pc, #168]	@ (80011a4 <main+0xec>)
 80010fc:	f005 fdba 	bl	8006c74 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	e00d      	b.n	8001122 <main+0x6a>
		dma[i] = i;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001110:	4a25      	ldr	r2, [pc, #148]	@ (80011a8 <main+0xf0>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3301      	adds	r3, #1
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001128:	dbed      	blt.n	8001106 <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 800112a:	4a20      	ldr	r2, [pc, #128]	@ (80011ac <main+0xf4>)
 800112c:	2100      	movs	r1, #0
 800112e:	4820      	ldr	r0, [pc, #128]	@ (80011b0 <main+0xf8>)
 8001130:	f002 fc08 	bl	8003944 <HAL_DMA_RegisterCallback>
 8001134:	4603      	mov	r3, r0
 8001136:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <main+0xec>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113e:	4a1d      	ldr	r2, [pc, #116]	@ (80011b4 <main+0xfc>)
 8001140:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8001142:	4919      	ldr	r1, [pc, #100]	@ (80011a8 <main+0xf0>)
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <main+0x100>)
 8001146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114a:	4819      	ldr	r0, [pc, #100]	@ (80011b0 <main+0xf8>)
 800114c:	f002 fa14 	bl	8003578 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <main+0xec>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001156:	4a19      	ldr	r2, [pc, #100]	@ (80011bc <main+0x104>)
 8001158:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 800115a:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <main+0xec>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001160:	4a17      	ldr	r2, [pc, #92]	@ (80011c0 <main+0x108>)
 8001162:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 8001164:	4817      	ldr	r0, [pc, #92]	@ (80011c4 <main+0x10c>)
 8001166:	f005 fded 	bl	8006d44 <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800116a:	217f      	movs	r1, #127	@ 0x7f
 800116c:	4816      	ldr	r0, [pc, #88]	@ (80011c8 <main+0x110>)
 800116e:	f001 ffb7 	bl	80030e0 <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 8001172:	2032      	movs	r0, #50	@ 0x32
 8001174:	f000 fc48 	bl	8001a08 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 8001178:	22c8      	movs	r2, #200	@ 0xc8
 800117a:	4914      	ldr	r1, [pc, #80]	@ (80011cc <main+0x114>)
 800117c:	4812      	ldr	r0, [pc, #72]	@ (80011c8 <main+0x110>)
 800117e:	f000 ffc1 	bl	8002104 <HAL_ADC_Start_DMA>
 8001182:	4603      	mov	r3, r0
 8001184:	70bb      	strb	r3, [r7, #2]

	comms_init();
 8001186:	f7ff fc39 	bl	80009fc <comms_init>
	comms_uart_init();
 800118a:	f7ff fe4f 	bl	8000e2c <comms_uart_init>
//	    comms_append_int32(2, 1, &temperatureInt);

//	    comms_send();

		//load_CPU();
		comms_send();
 800118e:	f7ff fcff 	bl	8000b90 <comms_send>
		comms_rx_process();
 8001192:	f7ff fda1 	bl	8000cd8 <comms_rx_process>
		comms_send();
 8001196:	bf00      	nop
 8001198:	e7f9      	b.n	800118e <main+0xd6>
 800119a:	bf00      	nop
 800119c:	48000800 	.word	0x48000800
 80011a0:	2000340c 	.word	0x2000340c
 80011a4:	200033c0 	.word	0x200033c0
 80011a8:	20001284 	.word	0x20001284
 80011ac:	08000ec9 	.word	0x08000ec9
 80011b0:	200001f0 	.word	0x200001f0
 80011b4:	20001274 	.word	0x20001274
 80011b8:	20002224 	.word	0x20002224
 80011bc:	20001280 	.word	0x20001280
 80011c0:	20001278 	.word	0x20001278
 80011c4:	20003374 	.word	0x20003374
 80011c8:	20000128 	.word	0x20000128
 80011cc:	200031c4 	.word	0x200031c4

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b096      	sub	sp, #88	@ 0x58
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2244      	movs	r2, #68	@ 0x44
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f00c fb44 	bl	800d86c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80011f2:	2000      	movs	r0, #0
 80011f4:	f004 f832 	bl	800525c <HAL_PWREx_ControlVoltageScaling>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80011fe:	f000 f83a 	bl	8001276 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001202:	2322      	movs	r3, #34	@ 0x22
 8001204:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001206:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800120a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001210:	2340      	movs	r3, #64	@ 0x40
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	2302      	movs	r3, #2
 8001216:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001218:	2302      	movs	r3, #2
 800121a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001220:	231e      	movs	r3, #30
 8001222:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001224:	2302      	movs	r3, #2
 8001226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001228:	2302      	movs	r3, #2
 800122a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800122c:	2302      	movs	r3, #2
 800122e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4618      	mov	r0, r3
 8001236:	f004 f8d5 	bl	80053e4 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001240:	f000 f819 	bl	8001276 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2303      	movs	r3, #3
 800124a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001254:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2105      	movs	r1, #5
 800125e:	4618      	mov	r0, r3
 8001260:	f004 fcda 	bl	8005c18 <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800126a:	f000 f804 	bl	8001276 <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3758      	adds	r7, #88	@ 0x58
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800127a:	b672      	cpsid	i
}
 800127c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800127e:	bf00      	nop
 8001280:	e7fd      	b.n	800127e <Error_Handler+0x8>
	...

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_MspInit+0x44>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128e:	4a0e      	ldr	r2, [pc, #56]	@ (80012c8 <HAL_MspInit+0x44>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6613      	str	r3, [r2, #96]	@ 0x60
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <HAL_MspInit+0x44>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <HAL_MspInit+0x44>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <HAL_MspInit+0x44>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_MspInit+0x44>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <NMI_Handler+0x4>

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <MemManage_Handler+0x4>

080012e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001322:	f000 fb51 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <DMA1_Channel1_IRQHandler+0x10>)
 8001332:	f002 fa57 	bl	80037e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000190 	.word	0x20000190

08001340 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <DMA1_Channel2_IRQHandler+0x10>)
 8001346:	f002 fa4d 	bl	80037e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001f0 	.word	0x200001f0

08001354 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <ADC1_IRQHandler+0x10>)
 800135a:	f000 ff57 	bl	800220c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000128 	.word	0x20000128

08001368 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <TIM3_IRQHandler+0x10>)
 800136e:	f005 fd59 	bl	8006e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20003374 	.word	0x20003374

0800137c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001380:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001384:	f002 fd8a 	bl	8003e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <TIM6_DAC_IRQHandler+0x10>)
 8001392:	f005 fd47 	bl	8006e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000340c 	.word	0x2000340c

080013a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <OTG_FS_IRQHandler+0x10>)
 80013a6:	f002 fee4 	bl	8004172 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20004a64 	.word	0x20004a64

080013b4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <LPUART1_IRQHandler+0x10>)
 80013ba:	f006 f99d 	bl	80076f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20003458 	.word	0x20003458

080013c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800140a:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <MX_TIM3_Init+0x94>)
 800140c:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <MX_TIM3_Init+0x98>)
 800140e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <MX_TIM3_Init+0x94>)
 8001412:	22c7      	movs	r2, #199	@ 0xc7
 8001414:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <MX_TIM3_Init+0x94>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <MX_TIM3_Init+0x94>)
 800141e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001422:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_TIM3_Init+0x94>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <MX_TIM3_Init+0x94>)
 800142c:	2280      	movs	r2, #128	@ 0x80
 800142e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001430:	4813      	ldr	r0, [pc, #76]	@ (8001480 <MX_TIM3_Init+0x94>)
 8001432:	f005 fbc7 	bl	8006bc4 <HAL_TIM_Base_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800143c:	f7ff ff1b 	bl	8001276 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001444:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4619      	mov	r1, r3
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <MX_TIM3_Init+0x94>)
 800144e:	f005 fdeb 	bl	8007028 <HAL_TIM_ConfigClockSource>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001458:	f7ff ff0d 	bl	8001276 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800145c:	2320      	movs	r3, #32
 800145e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_TIM3_Init+0x94>)
 800146a:	f006 f803 	bl	8007474 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001474:	f7ff feff 	bl	8001276 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20003374 	.word	0x20003374
 8001484:	40000400 	.word	0x40000400

08001488 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014a6:	4b1d      	ldr	r3, [pc, #116]	@ (800151c <MX_TIM5_Init+0x94>)
 80014a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001520 <MX_TIM5_Init+0x98>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <MX_TIM5_Init+0x94>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <MX_TIM5_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014b8:	4b18      	ldr	r3, [pc, #96]	@ (800151c <MX_TIM5_Init+0x94>)
 80014ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014be:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <MX_TIM5_Init+0x94>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <MX_TIM5_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014cc:	4813      	ldr	r0, [pc, #76]	@ (800151c <MX_TIM5_Init+0x94>)
 80014ce:	f005 fb79 	bl	8006bc4 <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80014d8:	f7ff fecd 	bl	8001276 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <MX_TIM5_Init+0x94>)
 80014ea:	f005 fd9d 	bl	8007028 <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014f4:	f7ff febf 	bl	8001276 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_TIM5_Init+0x94>)
 8001506:	f005 ffb5 	bl	8007474 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001510:	f7ff feb1 	bl	8001276 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200033c0 	.word	0x200033c0
 8001520:	40000c00 	.word	0x40000c00

08001524 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001534:	4b15      	ldr	r3, [pc, #84]	@ (800158c <MX_TIM6_Init+0x68>)
 8001536:	4a16      	ldr	r2, [pc, #88]	@ (8001590 <MX_TIM6_Init+0x6c>)
 8001538:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_TIM6_Init+0x68>)
 800153c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001540:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b12      	ldr	r3, [pc, #72]	@ (800158c <MX_TIM6_Init+0x68>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 8001548:	4b10      	ldr	r3, [pc, #64]	@ (800158c <MX_TIM6_Init+0x68>)
 800154a:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800154e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_TIM6_Init+0x68>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001556:	480d      	ldr	r0, [pc, #52]	@ (800158c <MX_TIM6_Init+0x68>)
 8001558:	f005 fb34 	bl	8006bc4 <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001562:	f7ff fe88 	bl	8001276 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	@ (800158c <MX_TIM6_Init+0x68>)
 8001574:	f005 ff7e 	bl	8007474 <HAL_TIMEx_MasterConfigSynchronization>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800157e:	f7ff fe7a 	bl	8001276 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000340c 	.word	0x2000340c
 8001590:	40001000 	.word	0x40001000

08001594 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a23      	ldr	r2, [pc, #140]	@ (8001630 <HAL_TIM_Base_MspInit+0x9c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d114      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015a6:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <HAL_TIM_Base_MspInit+0xa0>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	4a22      	ldr	r2, [pc, #136]	@ (8001634 <HAL_TIM_Base_MspInit+0xa0>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_TIM_Base_MspInit+0xa0>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	201d      	movs	r0, #29
 80015c4:	f001 fef9 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015c8:	201d      	movs	r0, #29
 80015ca:	f001 ff12 	bl	80033f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80015ce:	e02a      	b.n	8001626 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a18      	ldr	r2, [pc, #96]	@ (8001638 <HAL_TIM_Base_MspInit+0xa4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10c      	bne.n	80015f4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015da:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_TIM_Base_MspInit+0xa0>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015de:	4a15      	ldr	r2, [pc, #84]	@ (8001634 <HAL_TIM_Base_MspInit+0xa0>)
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <HAL_TIM_Base_MspInit+0xa0>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
}
 80015f2:	e018      	b.n	8001626 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a10      	ldr	r2, [pc, #64]	@ (800163c <HAL_TIM_Base_MspInit+0xa8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d113      	bne.n	8001626 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_TIM_Base_MspInit+0xa0>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001602:	4a0c      	ldr	r2, [pc, #48]	@ (8001634 <HAL_TIM_Base_MspInit+0xa0>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	6593      	str	r3, [r2, #88]	@ 0x58
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_TIM_Base_MspInit+0xa0>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2036      	movs	r0, #54	@ 0x36
 800161c:	f001 fecd 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001620:	2036      	movs	r0, #54	@ 0x36
 8001622:	f001 fee6 	bl	80033f2 <HAL_NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40000400 	.word	0x40000400
 8001634:	40021000 	.word	0x40021000
 8001638:	40000c00 	.word	0x40000c00
 800163c:	40001000 	.word	0x40001000

08001640 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001644:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 8001646:	4a23      	ldr	r2, [pc, #140]	@ (80016d4 <MX_LPUART1_UART_Init+0x94>)
 8001648:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800164a:	4b21      	ldr	r3, [pc, #132]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001670:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001676:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 800167e:	2200      	movs	r2, #0
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001688:	4811      	ldr	r0, [pc, #68]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 800168a:	f005 ff99 	bl	80075c0 <HAL_UART_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001694:	f7ff fdef 	bl	8001276 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001698:	2100      	movs	r1, #0
 800169a:	480d      	ldr	r0, [pc, #52]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 800169c:	f007 ff65 	bl	800956a <HAL_UARTEx_SetTxFifoThreshold>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016a6:	f7ff fde6 	bl	8001276 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4808      	ldr	r0, [pc, #32]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 80016ae:	f007 ff9a 	bl	80095e6 <HAL_UARTEx_SetRxFifoThreshold>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016b8:	f7ff fddd 	bl	8001276 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <MX_LPUART1_UART_Init+0x90>)
 80016be:	f007 ff1b 	bl	80094f8 <HAL_UARTEx_DisableFifoMode>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016c8:	f7ff fdd5 	bl	8001276 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20003458 	.word	0x20003458
 80016d4:	40008000 	.word	0x40008000

080016d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016dc:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 80016de:	4a23      	ldr	r2, [pc, #140]	@ (800176c <MX_USART3_UART_Init+0x94>)
 80016e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016e2:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 80016e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 80016fe:	220c      	movs	r2, #12
 8001700:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001708:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170e:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001720:	4811      	ldr	r0, [pc, #68]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 8001722:	f005 ff4d 	bl	80075c0 <HAL_UART_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800172c:	f7ff fda3 	bl	8001276 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001730:	2100      	movs	r1, #0
 8001732:	480d      	ldr	r0, [pc, #52]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 8001734:	f007 ff19 	bl	800956a <HAL_UARTEx_SetTxFifoThreshold>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800173e:	f7ff fd9a 	bl	8001276 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001742:	2100      	movs	r1, #0
 8001744:	4808      	ldr	r0, [pc, #32]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 8001746:	f007 ff4e 	bl	80095e6 <HAL_UARTEx_SetRxFifoThreshold>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001750:	f7ff fd91 	bl	8001276 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001754:	4804      	ldr	r0, [pc, #16]	@ (8001768 <MX_USART3_UART_Init+0x90>)
 8001756:	f007 fecf 	bl	80094f8 <HAL_UARTEx_DisableFifoMode>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001760:	f7ff fd89 	bl	8001276 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200034ec 	.word	0x200034ec
 800176c:	40004800 	.word	0x40004800

08001770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0b0      	sub	sp, #192	@ 0xc0
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	2294      	movs	r2, #148	@ 0x94
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f00c f86b 	bl	800d86c <memset>
  if(uartHandle->Instance==LPUART1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a47      	ldr	r2, [pc, #284]	@ (80018b8 <HAL_UART_MspInit+0x148>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d146      	bne.n	800182e <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017a0:	2320      	movs	r3, #32
 80017a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	f107 0318 	add.w	r3, r7, #24
 80017ac:	4618      	mov	r0, r3
 80017ae:	f004 fcf1 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017b8:	f7ff fd5d 	bl	8001276 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017bc:	4b3f      	ldr	r3, [pc, #252]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 80017be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c0:	4a3e      	ldr	r2, [pc, #248]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80017c8:	4b3c      	ldr	r3, [pc, #240]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 80017ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d4:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d8:	4a38      	ldr	r2, [pc, #224]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 80017da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e0:	4b36      	ldr	r3, [pc, #216]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80017ec:	f003 fdea 	bl	80053c4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80017f0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800180a:	2308      	movs	r3, #8
 800180c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001810:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001814:	4619      	mov	r1, r3
 8001816:	482a      	ldr	r0, [pc, #168]	@ (80018c0 <HAL_UART_MspInit+0x150>)
 8001818:	f002 f97c 	bl	8003b14 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2046      	movs	r0, #70	@ 0x46
 8001822:	f001 fdca 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001826:	2046      	movs	r0, #70	@ 0x46
 8001828:	f001 fde3 	bl	80033f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800182c:	e040      	b.n	80018b0 <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a24      	ldr	r2, [pc, #144]	@ (80018c4 <HAL_UART_MspInit+0x154>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d13b      	bne.n	80018b0 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001838:	2304      	movs	r3, #4
 800183a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800183c:	2300      	movs	r3, #0
 800183e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001840:	f107 0318 	add.w	r3, r7, #24
 8001844:	4618      	mov	r0, r3
 8001846:	f004 fca5 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001850:	f7ff fd11 	bl	8001276 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001858:	4a18      	ldr	r2, [pc, #96]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 800185a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800185e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001870:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001878:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <HAL_UART_MspInit+0x14c>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001884:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800189e:	2307      	movs	r3, #7
 80018a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018a8:	4619      	mov	r1, r3
 80018aa:	4807      	ldr	r0, [pc, #28]	@ (80018c8 <HAL_UART_MspInit+0x158>)
 80018ac:	f002 f932 	bl	8003b14 <HAL_GPIO_Init>
}
 80018b0:	bf00      	nop
 80018b2:	37c0      	adds	r7, #192	@ 0xc0
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40008000 	.word	0x40008000
 80018bc:	40021000 	.word	0x40021000
 80018c0:	48001800 	.word	0x48001800
 80018c4:	40004800 	.word	0x40004800
 80018c8:	48000c00 	.word	0x48000c00

080018cc <Reset_Handler>:
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001904 <LoopForever+0x2>
 80018d0:	f7ff fd7a 	bl	80013c8 <SystemInit>
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <LoopForever+0x6>)
 80018d6:	490d      	ldr	r1, [pc, #52]	@ (800190c <LoopForever+0xa>)
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <LoopForever+0xe>)
 80018da:	2300      	movs	r3, #0
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:
 80018de:	58d4      	ldr	r4, [r2, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:
 80018e4:	18c4      	adds	r4, r0, r3
 80018e6:	428c      	cmp	r4, r1
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <LoopForever+0x12>)
 80018ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001918 <LoopForever+0x16>)
 80018ee:	2300      	movs	r3, #0
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:
 80018f6:	42a2      	cmp	r2, r4
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>
 80018fa:	f00b ffbf 	bl	800d87c <__libc_init_array>
 80018fe:	f7ff fbdb 	bl	80010b8 <main>

08001902 <LoopForever>:
 8001902:	e7fe      	b.n	8001902 <LoopForever>
 8001904:	200a0000 	.word	0x200a0000
 8001908:	20000000 	.word	0x20000000
 800190c:	2000010c 	.word	0x2000010c
 8001910:	0800d9c0 	.word	0x0800d9c0
 8001914:	2000010c 	.word	0x2000010c
 8001918:	20005190 	.word	0x20005190

0800191c <CAN1_RX0_IRQHandler>:
 800191c:	e7fe      	b.n	800191c <CAN1_RX0_IRQHandler>

0800191e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f001 fd3b 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192e:	2000      	movs	r0, #0
 8001930:	f000 f80e 	bl	8001950 <HAL_InitTick>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	e001      	b.n	8001944 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001940:	f7ff fca0 	bl	8001284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001944:	79fb      	ldrb	r3, [r7, #7]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800195c:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <HAL_InitTick+0x6c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d023      	beq.n	80019ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <HAL_InitTick+0x70>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <HAL_InitTick+0x6c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001972:	fbb3 f3f1 	udiv	r3, r3, r1
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f001 fd47 	bl	800340e <HAL_SYSTICK_Config>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10f      	bne.n	80019a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d809      	bhi.n	80019a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198c:	2200      	movs	r2, #0
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001994:	f001 fd11 	bl	80033ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_InitTick+0x74>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e007      	b.n	80019b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e004      	b.n	80019b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	e001      	b.n	80019b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000008 	.word	0x20000008
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000004 	.word	0x20000004

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20003580 	.word	0x20003580

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20003580 	.word	0x20003580

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008

08001a50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	609a      	str	r2, [r3, #8]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3360      	adds	r3, #96	@ 0x60
 8001aca:	461a      	mov	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <LL_ADC_SetOffset+0x44>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	03fff000 	.word	0x03fff000

08001b00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3360      	adds	r3, #96	@ 0x60
 8001b0e:	461a      	mov	r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3360      	adds	r3, #96	@ 0x60
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b56:	bf00      	nop
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	615a      	str	r2, [r3, #20]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b087      	sub	sp, #28
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3330      	adds	r3, #48	@ 0x30
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	4413      	add	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	211f      	movs	r1, #31
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	401a      	ands	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	0e9b      	lsrs	r3, r3, #26
 8001be6:	f003 011f 	and.w	r1, r3, #31
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bfa:	bf00      	nop
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3314      	adds	r3, #20
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	0e5b      	lsrs	r3, r3, #25
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	4413      	add	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	0d1b      	lsrs	r3, r3, #20
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	2107      	movs	r1, #7
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	401a      	ands	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	0d1b      	lsrs	r3, r3, #20
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	431a      	orrs	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c76:	bf00      	nop
 8001c78:	371c      	adds	r7, #28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0318 	and.w	r3, r3, #24
 8001ca6:	4908      	ldr	r1, [pc, #32]	@ (8001cc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ca8:	40d9      	lsrs	r1, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	400b      	ands	r3, r1
 8001cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	0007ffff 	.word	0x0007ffff

08001ccc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6093      	str	r3, [r2, #8]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d04:	d101      	bne.n	8001d0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d54:	d101      	bne.n	8001d5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001da0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001da4:	f043 0202 	orr.w	r2, r3, #2
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <LL_ADC_IsEnabled+0x18>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <LL_ADC_IsEnabled+0x1a>
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d101      	bne.n	8001df6 <LL_ADC_IsDisableOngoing+0x18>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <LL_ADC_IsDisableOngoing+0x1a>
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e18:	f043 0204 	orr.w	r2, r3, #4
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d101      	bne.n	8001e44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d101      	bne.n	8001e6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e129      	b.n	80020e6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7fe fb99 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff19 	bl	8001cf0 <LL_ADC_IsDeepPowerDownEnabled>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff feff 	bl	8001ccc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff34 	bl	8001d40 <LL_ADC_IsInternalRegulatorEnabled>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d115      	bne.n	8001f0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff18 	bl	8001d18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ee8:	4b81      	ldr	r3, [pc, #516]	@ (80020f0 <HAL_ADC_Init+0x278>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	4a81      	ldr	r2, [pc, #516]	@ (80020f4 <HAL_ADC_Init+0x27c>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001efc:	e002      	b.n	8001f04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f9      	bne.n	8001efe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff16 	bl	8001d40 <LL_ADC_IsInternalRegulatorEnabled>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10d      	bne.n	8001f36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	f043 0210 	orr.w	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ff76 	bl	8001e2c <LL_ADC_REG_IsConversionOngoing>
 8001f40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 80c2 	bne.w	80020d4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 80be 	bne.w	80020d4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f60:	f043 0202 	orr.w	r2, r3, #2
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff23 	bl	8001db8 <LL_ADC_IsEnabled>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f78:	485f      	ldr	r0, [pc, #380]	@ (80020f8 <HAL_ADC_Init+0x280>)
 8001f7a:	f7ff ff1d 	bl	8001db8 <LL_ADC_IsEnabled>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	485c      	ldr	r0, [pc, #368]	@ (80020fc <HAL_ADC_Init+0x284>)
 8001f8c:	f7ff fd60 	bl	8001a50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e5b      	ldrb	r3, [r3, #25]
 8001f94:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f9a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001fa0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001fa6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d106      	bne.n	8001fcc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	045b      	lsls	r3, r3, #17
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b44      	ldr	r3, [pc, #272]	@ (8002100 <HAL_ADC_Init+0x288>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff26 	bl	8001e52 <LL_ADC_INJ_IsConversionOngoing>
 8002006:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d140      	bne.n	8002090 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d13d      	bne.n	8002090 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7e1b      	ldrb	r3, [r3, #24]
 800201c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800201e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002026:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002036:	f023 0306 	bic.w	r3, r3, #6
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	69b9      	ldr	r1, [r7, #24]
 8002040:	430b      	orrs	r3, r1
 8002042:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800204a:	2b01      	cmp	r3, #1
 800204c:	d118      	bne.n	8002080 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002064:	4311      	orrs	r1, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002070:	430a      	orrs	r2, r1
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	e007      	b.n	8002090 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10c      	bne.n	80020b2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	f023 010f 	bic.w	r1, r3, #15
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	1e5a      	subs	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80020b0:	e007      	b.n	80020c2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 020f 	bic.w	r2, r2, #15
 80020c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	f023 0303 	bic.w	r3, r3, #3
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80020d2:	e007      	b.n	80020e4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	f043 0210 	orr.w	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000000 	.word	0x20000000
 80020f4:	053e2d63 	.word	0x053e2d63
 80020f8:	50040000 	.word	0x50040000
 80020fc:	50040300 	.word	0x50040300
 8002100:	fff0c007 	.word	0xfff0c007

08002104 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fe89 	bl	8001e2c <LL_ADC_REG_IsConversionOngoing>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d167      	bne.n	80021f0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_ADC_Start_DMA+0x2a>
 800212a:	2302      	movs	r3, #2
 800212c:	e063      	b.n	80021f6 <HAL_ADC_Start_DMA+0xf2>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fe2c 	bl	8002d94 <ADC_Enable>
 800213c:	4603      	mov	r3, r0
 800213e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d14f      	bne.n	80021e6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d006      	beq.n	8002174 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216a:	f023 0206 	bic.w	r2, r3, #6
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002172:	e002      	b.n	800217a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217e:	4a20      	ldr	r2, [pc, #128]	@ (8002200 <HAL_ADC_Start_DMA+0xfc>)
 8002180:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002186:	4a1f      	ldr	r2, [pc, #124]	@ (8002204 <HAL_ADC_Start_DMA+0x100>)
 8002188:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218e:	4a1e      	ldr	r2, [pc, #120]	@ (8002208 <HAL_ADC_Start_DMA+0x104>)
 8002190:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	221c      	movs	r2, #28
 8002198:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0210 	orr.w	r2, r2, #16
 80021b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3340      	adds	r3, #64	@ 0x40
 80021cc:	4619      	mov	r1, r3
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f001 f9d1 	bl	8003578 <HAL_DMA_Start_IT>
 80021d6:	4603      	mov	r3, r0
 80021d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fe10 	bl	8001e04 <LL_ADC_REG_StartConversion>
 80021e4:	e006      	b.n	80021f4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80021ee:	e001      	b.n	80021f4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
 80021f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	08002f5f 	.word	0x08002f5f
 8002204:	08003037 	.word	0x08003037
 8002208:	08003053 	.word	0x08003053

0800220c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d017      	beq.n	8002262 <HAL_ADC_IRQHandler+0x56>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d012      	beq.n	8002262 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 ffcb 	bl	80031f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2202      	movs	r2, #2
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_ADC_IRQHandler+0x6a>
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800227c:	2b00      	cmp	r3, #0
 800227e:	d05e      	beq.n	800233e <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d059      	beq.n	800233e <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fc6e 	bl	8001b88 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d03e      	beq.n	8002330 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d135      	bne.n	8002330 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d12e      	bne.n	8002330 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fda8 	bl	8001e2c <LL_ADC_REG_IsConversionOngoing>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d11a      	bne.n	8002318 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 020c 	bic.w	r2, r2, #12
 80022f0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d112      	bne.n	8002330 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	659a      	str	r2, [r3, #88]	@ 0x58
 8002316:	e00b      	b.n	8002330 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	f043 0210 	orr.w	r2, r3, #16
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7fe fde3 	bl	8000efc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	220c      	movs	r2, #12
 800233c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <HAL_ADC_IRQHandler+0x146>
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002358:	2b00      	cmp	r3, #0
 800235a:	d072      	beq.n	8002442 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d06d      	beq.n	8002442 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fc3f 	bl	8001c06 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002388:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fbfa 	bl	8001b88 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002394:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d047      	beq.n	8002434 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_ADC_IRQHandler+0x1b2>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d03f      	beq.n	8002434 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d13a      	bne.n	8002434 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c8:	2b40      	cmp	r3, #64	@ 0x40
 80023ca:	d133      	bne.n	8002434 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d12e      	bne.n	8002434 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fd39 	bl	8001e52 <LL_ADC_INJ_IsConversionOngoing>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11a      	bne.n	800241c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023f4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d112      	bne.n	8002434 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	659a      	str	r2, [r3, #88]	@ 0x58
 800241a:	e00b      	b.n	8002434 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	f043 0210 	orr.w	r2, r3, #16
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242c:	f043 0201 	orr.w	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 feb3 	bl	80031a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2260      	movs	r2, #96	@ 0x60
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002448:	2b00      	cmp	r3, #0
 800244a:	d011      	beq.n	8002470 <HAL_ADC_IRQHandler+0x264>
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00c      	beq.n	8002470 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f886 	bl	8002574 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2280      	movs	r2, #128	@ 0x80
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d012      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x294>
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00d      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fe99 	bl	80031c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x2c4>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00d      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fe8b 	bl	80031dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d02a      	beq.n	8002530 <HAL_ADC_IRQHandler+0x324>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d025      	beq.n	8002530 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80024ec:	2301      	movs	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	e008      	b.n	8002504 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002500:	2301      	movs	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d10e      	bne.n	8002528 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251a:	f043 0202 	orr.w	r2, r3, #2
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f830 	bl	8002588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2210      	movs	r2, #16
 800252e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002536:	2b00      	cmp	r3, #0
 8002538:	d018      	beq.n	800256c <HAL_ADC_IRQHandler+0x360>
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002554:	f043 0208 	orr.w	r2, r3, #8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002564:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fe24 	bl	80031b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800256c:	bf00      	nop
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0b6      	sub	sp, #216	@ 0xd8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x22>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e3d5      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x7ce>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fc2e 	bl	8001e2c <LL_ADC_REG_IsConversionOngoing>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 83ba 	bne.w	8002d4c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	d824      	bhi.n	8002632 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	3b02      	subs	r3, #2
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d81b      	bhi.n	800262a <HAL_ADC_ConfigChannel+0x8e>
 80025f2:	a201      	add	r2, pc, #4	@ (adr r2, 80025f8 <HAL_ADC_ConfigChannel+0x5c>)
 80025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f8:	08002609 	.word	0x08002609
 80025fc:	08002611 	.word	0x08002611
 8002600:	08002619 	.word	0x08002619
 8002604:	08002621 	.word	0x08002621
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002608:	230c      	movs	r3, #12
 800260a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800260e:	e010      	b.n	8002632 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002610:	2312      	movs	r3, #18
 8002612:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002616:	e00c      	b.n	8002632 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002618:	2318      	movs	r3, #24
 800261a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800261e:	e008      	b.n	8002632 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002628:	e003      	b.n	8002632 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800262a:	2306      	movs	r3, #6
 800262c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002630:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002640:	f7ff fab5 	bl	8001bae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fbef 	bl	8001e2c <LL_ADC_REG_IsConversionOngoing>
 800264e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fbfb 	bl	8001e52 <LL_ADC_INJ_IsConversionOngoing>
 800265c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002664:	2b00      	cmp	r3, #0
 8002666:	f040 81bf 	bne.w	80029e8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800266a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 81ba 	bne.w	80029e8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800267c:	d10f      	bne.n	800269e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	4619      	mov	r1, r3
 800268a:	f7ff facf 	bl	8001c2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fa63 	bl	8001b62 <LL_ADC_SetSamplingTimeCommonConfig>
 800269c:	e00e      	b.n	80026bc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f7ff fabe 	bl	8001c2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fa53 	bl	8001b62 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	08db      	lsrs	r3, r3, #3
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d00a      	beq.n	80026f4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ee:	f7ff f9e3 	bl	8001ab8 <LL_ADC_SetOffset>
 80026f2:	e179      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fa00 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x184>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff f9f5 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	f003 021f 	and.w	r2, r3, #31
 800271e:	e01e      	b.n	800275e <HAL_ADC_ConfigChannel+0x1c2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f9ea 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800273e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002742:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002746:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800274e:	2320      	movs	r3, #32
 8002750:	e004      	b.n	800275c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002752:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x1da>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	0e9b      	lsrs	r3, r3, #26
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	e018      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x20c>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800278a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800278e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002792:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800279a:	2320      	movs	r3, #32
 800279c:	e004      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800279e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d106      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff f9b9 	bl	8001b2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2101      	movs	r1, #1
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff f99d 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x24a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff f992 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 80027dc:	4603      	mov	r3, r0
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	e01e      	b.n	8002824 <HAL_ADC_ConfigChannel+0x288>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff f987 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002804:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002808:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800280c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e004      	b.n	8002822 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002818:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_ADC_ConfigChannel+0x2a0>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	e018      	b.n	800286e <HAL_ADC_ConfigChannel+0x2d2>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002850:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002858:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002860:	2320      	movs	r3, #32
 8002862:	e004      	b.n	800286e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800286e:	429a      	cmp	r2, r3
 8002870:	d106      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	2101      	movs	r1, #1
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f956 	bl	8001b2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2102      	movs	r1, #2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f93a 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10a      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x310>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2102      	movs	r1, #2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f92f 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	f003 021f 	and.w	r2, r3, #31
 80028aa:	e01e      	b.n	80028ea <HAL_ADC_ConfigChannel+0x34e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2102      	movs	r1, #2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f924 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80028ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80028d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80028da:	2320      	movs	r3, #32
 80028dc:	e004      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80028de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x366>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	e014      	b.n	800292c <HAL_ADC_ConfigChannel+0x390>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002912:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002916:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e004      	b.n	800292c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002922:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800292c:	429a      	cmp	r2, r3
 800292e:	d106      	bne.n	800293e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2200      	movs	r2, #0
 8002936:	2102      	movs	r1, #2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff f8f7 	bl	8001b2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2103      	movs	r1, #3
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff f8db 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <HAL_ADC_ConfigChannel+0x3ce>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2103      	movs	r1, #3
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f8d0 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002960:	4603      	mov	r3, r0
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	e017      	b.n	800299a <HAL_ADC_ConfigChannel+0x3fe>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2103      	movs	r1, #3
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff f8c5 	bl	8001b00 <LL_ADC_GetOffsetChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002984:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e003      	b.n	8002998 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002990:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x416>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0e9b      	lsrs	r3, r3, #26
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	e011      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x43a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80029c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80029c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80029ca:	2320      	movs	r3, #32
 80029cc:	e003      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80029ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d106      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	2103      	movs	r1, #3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff f8a2 	bl	8001b2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f9e3 	bl	8001db8 <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 813f 	bne.w	8002c78 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	461a      	mov	r2, r3
 8002a08:	f7ff f93c 	bl	8001c84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a8e      	ldr	r2, [pc, #568]	@ (8002c4c <HAL_ADC_ConfigChannel+0x6b0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	f040 8130 	bne.w	8002c78 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10b      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x4a4>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0e9b      	lsrs	r3, r3, #26
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	bf94      	ite	ls
 8002a38:	2301      	movls	r3, #1
 8002a3a:	2300      	movhi	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e019      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x4d8>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002a58:	2320      	movs	r3, #32
 8002a5a:	e003      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	3301      	adds	r3, #1
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2b09      	cmp	r3, #9
 8002a6c:	bf94      	ite	ls
 8002a6e:	2301      	movls	r3, #1
 8002a70:	2300      	movhi	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d079      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x4f8>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	069b      	lsls	r3, r3, #26
 8002a8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a92:	e015      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x524>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aa4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002aac:	2320      	movs	r3, #32
 8002aae:	e003      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002ab0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	069b      	lsls	r3, r3, #26
 8002abc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x544>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	e017      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x574>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002af8:	2320      	movs	r3, #32
 8002afa:	e003      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	ea42 0103 	orr.w	r1, r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x59a>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	3301      	adds	r3, #1
 8002b28:	f003 021f 	and.w	r2, r3, #31
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	051b      	lsls	r3, r3, #20
 8002b34:	e018      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x5cc>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b46:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002b4e:	2320      	movs	r3, #32
 8002b50:	e003      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	e080      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x5ec>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	069b      	lsls	r3, r3, #26
 8002b82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b86:	e015      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x618>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e003      	b.n	8002bac <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	069b      	lsls	r3, r3, #26
 8002bb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x638>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	e017      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x668>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	61bb      	str	r3, [r7, #24]
  return result;
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	ea42 0103 	orr.w	r1, r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10d      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x694>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0e9b      	lsrs	r3, r3, #26
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	3b1e      	subs	r3, #30
 8002c28:	051b      	lsls	r3, r3, #20
 8002c2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c2e:	e01d      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x6d0>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	60fb      	str	r3, [r7, #12]
  return result;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	e005      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x6bc>
 8002c4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f003 021f 	and.w	r2, r3, #31
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	3b1e      	subs	r3, #30
 8002c66:	051b      	lsls	r3, r3, #20
 8002c68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c6c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7fe ffda 	bl	8001c2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d74 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d06c      	beq.n	8002d5e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c84:	483c      	ldr	r0, [pc, #240]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c86:	f7fe ff09 	bl	8001a9c <LL_ADC_GetCommonPathInternalCh>
 8002c8a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a3a      	ldr	r2, [pc, #232]	@ (8002d7c <HAL_ADC_ConfigChannel+0x7e0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d127      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d121      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a35      	ldr	r2, [pc, #212]	@ (8002d80 <HAL_ADC_ConfigChannel+0x7e4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d157      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	482f      	ldr	r0, [pc, #188]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cba:	f7fe fedc 	bl	8001a76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cbe:	4b31      	ldr	r3, [pc, #196]	@ (8002d84 <HAL_ADC_ConfigChannel+0x7e8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	4a30      	ldr	r2, [pc, #192]	@ (8002d88 <HAL_ADC_ConfigChannel+0x7ec>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	099b      	lsrs	r3, r3, #6
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cd8:	e002      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f9      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ce6:	e03a      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a27      	ldr	r2, [pc, #156]	@ (8002d8c <HAL_ADC_ConfigChannel+0x7f0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d113      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10d      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1f      	ldr	r2, [pc, #124]	@ (8002d80 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d12a      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d10:	4619      	mov	r1, r3
 8002d12:	4819      	ldr	r0, [pc, #100]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d14:	f7fe feaf 	bl	8001a76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d18:	e021      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d90 <HAL_ADC_ConfigChannel+0x7f4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d11c      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d116      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a12      	ldr	r2, [pc, #72]	@ (8002d80 <HAL_ADC_ConfigChannel+0x7e4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d111      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d42:	4619      	mov	r1, r3
 8002d44:	480c      	ldr	r0, [pc, #48]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d46:	f7fe fe96 	bl	8001a76 <LL_ADC_SetCommonPathInternalCh>
 8002d4a:	e008      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d66:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	37d8      	adds	r7, #216	@ 0xd8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	80080000 	.word	0x80080000
 8002d78:	50040300 	.word	0x50040300
 8002d7c:	c7520000 	.word	0xc7520000
 8002d80:	50040000 	.word	0x50040000
 8002d84:	20000000 	.word	0x20000000
 8002d88:	053e2d63 	.word	0x053e2d63
 8002d8c:	cb840000 	.word	0xcb840000
 8002d90:	80000001 	.word	0x80000001

08002d94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff f807 	bl	8001db8 <LL_ADC_IsEnabled>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d169      	bne.n	8002e84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	4b36      	ldr	r3, [pc, #216]	@ (8002e90 <ADC_Enable+0xfc>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e055      	b.n	8002e86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe ffc2 	bl	8001d68 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002de4:	482b      	ldr	r0, [pc, #172]	@ (8002e94 <ADC_Enable+0x100>)
 8002de6:	f7fe fe59 	bl	8001a9c <LL_ADC_GetCommonPathInternalCh>
 8002dea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002dec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df4:	4b28      	ldr	r3, [pc, #160]	@ (8002e98 <ADC_Enable+0x104>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	4a28      	ldr	r2, [pc, #160]	@ (8002e9c <ADC_Enable+0x108>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e0e:	e002      	b.n	8002e16 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f9      	bne.n	8002e10 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe fde8 	bl	80019f0 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e22:	e028      	b.n	8002e76 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe ffc5 	bl	8001db8 <LL_ADC_IsEnabled>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d104      	bne.n	8002e3e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe ff95 	bl	8001d68 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e3e:	f7fe fdd7 	bl	80019f0 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d914      	bls.n	8002e76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d00d      	beq.n	8002e76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	f043 0210 	orr.w	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6a:	f043 0201 	orr.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e007      	b.n	8002e86 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d1cf      	bne.n	8002e24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	8000003f 	.word	0x8000003f
 8002e94:	50040300 	.word	0x50040300
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	053e2d63 	.word	0x053e2d63

08002ea0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe ff96 	bl	8001dde <LL_ADC_IsDisableOngoing>
 8002eb2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe ff7d 	bl	8001db8 <LL_ADC_IsEnabled>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d047      	beq.n	8002f54 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d144      	bne.n	8002f54 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030d 	and.w	r3, r3, #13
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10c      	bne.n	8002ef2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe ff57 	bl	8001d90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002eea:	f7fe fd81 	bl	80019f0 <HAL_GetTick>
 8002eee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ef0:	e029      	b.n	8002f46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e023      	b.n	8002f56 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f0e:	f7fe fd6f 	bl	80019f0 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d914      	bls.n	8002f46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e007      	b.n	8002f56 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1dc      	bne.n	8002f0e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d14b      	bne.n	8003010 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d021      	beq.n	8002fd6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fdf6 	bl	8001b88 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d032      	beq.n	8003008 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d12b      	bne.n	8003008 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11f      	bne.n	8003008 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fd4:	e018      	b.n	8003008 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d111      	bne.n	8003008 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f7fd ff77 	bl	8000efc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800300e:	e00e      	b.n	800302e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff fab3 	bl	8002588 <HAL_ADC_ErrorCallback>
}
 8003022:	e004      	b.n	800302e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7fe f82d 	bl	80010a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003070:	f043 0204 	orr.w	r2, r3, #4
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7ff fa85 	bl	8002588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <LL_ADC_StartCalibration>:
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003098:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	609a      	str	r2, [r3, #8]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_ADC_IsCalibrationOnGoing>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030cc:	d101      	bne.n	80030d2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_ADCEx_Calibration_Start+0x1c>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e04d      	b.n	8003198 <HAL_ADCEx_Calibration_Start+0xb8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fecb 	bl	8002ea0 <ADC_Disable>
 800310a:	4603      	mov	r3, r0
 800310c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d136      	bne.n	8003182 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003118:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800311c:	f023 0302 	bic.w	r3, r3, #2
 8003120:	f043 0202 	orr.w	r2, r3, #2
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6839      	ldr	r1, [r7, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ffa9 	bl	8003086 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003134:	e014      	b.n	8003160 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003142:	d30d      	bcc.n	8003160 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003148:	f023 0312 	bic.w	r3, r3, #18
 800314c:	f043 0210 	orr.w	r2, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e01b      	b.n	8003198 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ffa7 	bl	80030b8 <LL_ADC_IsCalibrationOnGoing>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e2      	bne.n	8003136 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	f023 0303 	bic.w	r3, r3, #3
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003180:	e005      	b.n	800318e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003186:	f043 0210 	orr.w	r2, r3, #16
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	@ (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	@ (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	@ (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	@ (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	@ 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	@ 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003370:	d301      	bcc.n	8003376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003372:	2301      	movs	r3, #1
 8003374:	e00f      	b.n	8003396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003376:	4a0a      	ldr	r2, [pc, #40]	@ (80033a0 <SysTick_Config+0x40>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337e:	210f      	movs	r1, #15
 8003380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003384:	f7ff ff8e 	bl	80032a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <SysTick_Config+0x40>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <SysTick_Config+0x40>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000e010 	.word	0xe000e010

080033a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff29 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033cc:	f7ff ff3e 	bl	800324c <__NVIC_GetPriorityGrouping>
 80033d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff ff8e 	bl	80032f8 <NVIC_EncodePriority>
 80033dc:	4602      	mov	r2, r0
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff5d 	bl	80032a4 <__NVIC_SetPriority>
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff31 	bl	8003268 <__NVIC_EnableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ffa2 	bl	8003360 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e08d      	b.n	8003556 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	4b47      	ldr	r3, [pc, #284]	@ (8003560 <HAL_DMA_Init+0x138>)
 8003442:	429a      	cmp	r2, r3
 8003444:	d80f      	bhi.n	8003466 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	4b45      	ldr	r3, [pc, #276]	@ (8003564 <HAL_DMA_Init+0x13c>)
 800344e:	4413      	add	r3, r2
 8003450:	4a45      	ldr	r2, [pc, #276]	@ (8003568 <HAL_DMA_Init+0x140>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	091b      	lsrs	r3, r3, #4
 8003458:	009a      	lsls	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a42      	ldr	r2, [pc, #264]	@ (800356c <HAL_DMA_Init+0x144>)
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40
 8003464:	e00e      	b.n	8003484 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	4b40      	ldr	r3, [pc, #256]	@ (8003570 <HAL_DMA_Init+0x148>)
 800346e:	4413      	add	r3, r2
 8003470:	4a3d      	ldr	r2, [pc, #244]	@ (8003568 <HAL_DMA_Init+0x140>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	009a      	lsls	r2, r3, #2
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a3c      	ldr	r2, [pc, #240]	@ (8003574 <HAL_DMA_Init+0x14c>)
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800349a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800349e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 faba 	bl	8003a50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034e4:	d102      	bne.n	80034ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003500:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d010      	beq.n	800352c <HAL_DMA_Init+0x104>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b04      	cmp	r3, #4
 8003510:	d80c      	bhi.n	800352c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fada 	bl	8003acc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	e008      	b.n	800353e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40020407 	.word	0x40020407
 8003564:	bffdfff8 	.word	0xbffdfff8
 8003568:	cccccccd 	.word	0xcccccccd
 800356c:	40020000 	.word	0x40020000
 8003570:	bffdfbf8 	.word	0xbffdfbf8
 8003574:	40020400 	.word	0x40020400

08003578 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_DMA_Start_IT+0x20>
 8003594:	2302      	movs	r3, #2
 8003596:	e066      	b.n	8003666 <HAL_DMA_Start_IT+0xee>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d155      	bne.n	8003658 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f9ff 	bl	80039d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 020e 	orr.w	r2, r2, #14
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e00f      	b.n	8003610 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0204 	bic.w	r2, r2, #4
 80035fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 020a 	orr.w	r2, r2, #10
 800360e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800362c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003644:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	e005      	b.n	8003664 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003660:	2302      	movs	r3, #2
 8003662:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003664:	7dfb      	ldrb	r3, [r7, #23]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d008      	beq.n	8003698 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2204      	movs	r2, #4
 800368a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e040      	b.n	800371a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 020e 	bic.w	r2, r2, #14
 80036a6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036b6:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036cc:	f003 021c 	and.w	r2, r3, #28
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	2101      	movs	r1, #1
 80036d6:	fa01 f202 	lsl.w	r2, r1, r2
 80036da:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003706:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d005      	beq.n	800374a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2204      	movs	r2, #4
 8003742:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e047      	b.n	80037da <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 020e 	bic.w	r2, r2, #14
 8003758:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003774:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003778:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377e:	f003 021c 	and.w	r2, r3, #28
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003796:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00c      	beq.n	80037ba <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037b8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
    }
  }
  return status;
 80037da:	7bfb      	ldrb	r3, [r7, #15]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003800:	f003 031c 	and.w	r3, r3, #28
 8003804:	2204      	movs	r2, #4
 8003806:	409a      	lsls	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d026      	beq.n	800385e <HAL_DMA_IRQHandler+0x7a>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d021      	beq.n	800385e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d107      	bne.n	8003838 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0204 	bic.w	r2, r2, #4
 8003836:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	f003 021c 	and.w	r2, r3, #28
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	2104      	movs	r1, #4
 8003846:	fa01 f202 	lsl.w	r2, r1, r2
 800384a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003850:	2b00      	cmp	r3, #0
 8003852:	d071      	beq.n	8003938 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800385c:	e06c      	b.n	8003938 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	f003 031c 	and.w	r3, r3, #28
 8003866:	2202      	movs	r2, #2
 8003868:	409a      	lsls	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d02e      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xec>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d029      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 020a 	bic.w	r2, r2, #10
 8003898:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f003 021c 	and.w	r2, r3, #28
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	2102      	movs	r1, #2
 80038b0:	fa01 f202 	lsl.w	r2, r1, r2
 80038b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d038      	beq.n	8003938 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038ce:	e033      	b.n	8003938 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d4:	f003 031c 	and.w	r3, r3, #28
 80038d8:	2208      	movs	r2, #8
 80038da:	409a      	lsls	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d02a      	beq.n	800393a <HAL_DMA_IRQHandler+0x156>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d025      	beq.n	800393a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 020e 	bic.w	r2, r2, #14
 80038fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	f003 021c 	and.w	r2, r3, #28
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	2101      	movs	r1, #1
 800390c:	fa01 f202 	lsl.w	r2, r1, r2
 8003910:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003938:	bf00      	nop
 800393a:	bf00      	nop
}
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	460b      	mov	r3, r1
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_DMA_RegisterCallback+0x20>
 8003960:	2302      	movs	r3, #2
 8003962:	e031      	b.n	80039c8 <HAL_DMA_RegisterCallback+0x84>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d120      	bne.n	80039ba <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003978:	7afb      	ldrb	r3, [r7, #11]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d81a      	bhi.n	80039b4 <HAL_DMA_RegisterCallback+0x70>
 800397e:	a201      	add	r2, pc, #4	@ (adr r2, 8003984 <HAL_DMA_RegisterCallback+0x40>)
 8003980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003984:	08003995 	.word	0x08003995
 8003988:	0800399d 	.word	0x0800399d
 800398c:	080039a5 	.word	0x080039a5
 8003990:	080039ad 	.word	0x080039ad
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800399a:	e010      	b.n	80039be <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 80039a2:	e00c      	b.n	80039be <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80039aa:	e008      	b.n	80039be <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80039b2:	e004      	b.n	80039be <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	75fb      	strb	r3, [r7, #23]
        break;
 80039b8:	e001      	b.n	80039be <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039fc:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f003 021c 	and.w	r2, r3, #28
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d108      	bne.n	8003a34 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a32:	e007      	b.n	8003a44 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	60da      	str	r2, [r3, #12]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d80a      	bhi.n	8003a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a70:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a78:	e007      	b.n	8003a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	009a      	lsls	r2, r3, #2
 8003a82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a84:	4413      	add	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	3b08      	subs	r3, #8
 8003a92:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003aa0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40020407 	.word	0x40020407
 8003ac0:	4002081c 	.word	0x4002081c
 8003ac4:	cccccccd 	.word	0xcccccccd
 8003ac8:	40020880 	.word	0x40020880

08003acc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a08      	ldr	r2, [pc, #32]	@ (8003b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003aee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2201      	movs	r2, #1
 8003afa:	409a      	lsls	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	1000823f 	.word	0x1000823f
 8003b10:	40020940 	.word	0x40020940

08003b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b22:	e166      	b.n	8003df2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	2101      	movs	r1, #1
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	4013      	ands	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8158 	beq.w	8003dec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d005      	beq.n	8003b54 <HAL_GPIO_Init+0x40>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d130      	bne.n	8003bb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4013      	ands	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	f003 0201 	and.w	r2, r3, #1
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d017      	beq.n	8003bf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	2203      	movs	r2, #3
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d123      	bne.n	8003c46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	08da      	lsrs	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3208      	adds	r2, #8
 8003c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	220f      	movs	r2, #15
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	08da      	lsrs	r2, r3, #3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3208      	adds	r2, #8
 8003c40:	6939      	ldr	r1, [r7, #16]
 8003c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	2203      	movs	r2, #3
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 0203 	and.w	r2, r3, #3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80b2 	beq.w	8003dec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c88:	4b61      	ldr	r3, [pc, #388]	@ (8003e10 <HAL_GPIO_Init+0x2fc>)
 8003c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8c:	4a60      	ldr	r2, [pc, #384]	@ (8003e10 <HAL_GPIO_Init+0x2fc>)
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c94:	4b5e      	ldr	r3, [pc, #376]	@ (8003e10 <HAL_GPIO_Init+0x2fc>)
 8003c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ca0:	4a5c      	ldr	r2, [pc, #368]	@ (8003e14 <HAL_GPIO_Init+0x300>)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003cca:	d02b      	beq.n	8003d24 <HAL_GPIO_Init+0x210>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a52      	ldr	r2, [pc, #328]	@ (8003e18 <HAL_GPIO_Init+0x304>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d025      	beq.n	8003d20 <HAL_GPIO_Init+0x20c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a51      	ldr	r2, [pc, #324]	@ (8003e1c <HAL_GPIO_Init+0x308>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d01f      	beq.n	8003d1c <HAL_GPIO_Init+0x208>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a50      	ldr	r2, [pc, #320]	@ (8003e20 <HAL_GPIO_Init+0x30c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d019      	beq.n	8003d18 <HAL_GPIO_Init+0x204>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a4f      	ldr	r2, [pc, #316]	@ (8003e24 <HAL_GPIO_Init+0x310>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d013      	beq.n	8003d14 <HAL_GPIO_Init+0x200>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a4e      	ldr	r2, [pc, #312]	@ (8003e28 <HAL_GPIO_Init+0x314>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00d      	beq.n	8003d10 <HAL_GPIO_Init+0x1fc>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e2c <HAL_GPIO_Init+0x318>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d007      	beq.n	8003d0c <HAL_GPIO_Init+0x1f8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a4c      	ldr	r2, [pc, #304]	@ (8003e30 <HAL_GPIO_Init+0x31c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d101      	bne.n	8003d08 <HAL_GPIO_Init+0x1f4>
 8003d04:	2307      	movs	r3, #7
 8003d06:	e00e      	b.n	8003d26 <HAL_GPIO_Init+0x212>
 8003d08:	2308      	movs	r3, #8
 8003d0a:	e00c      	b.n	8003d26 <HAL_GPIO_Init+0x212>
 8003d0c:	2306      	movs	r3, #6
 8003d0e:	e00a      	b.n	8003d26 <HAL_GPIO_Init+0x212>
 8003d10:	2305      	movs	r3, #5
 8003d12:	e008      	b.n	8003d26 <HAL_GPIO_Init+0x212>
 8003d14:	2304      	movs	r3, #4
 8003d16:	e006      	b.n	8003d26 <HAL_GPIO_Init+0x212>
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e004      	b.n	8003d26 <HAL_GPIO_Init+0x212>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e002      	b.n	8003d26 <HAL_GPIO_Init+0x212>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_GPIO_Init+0x212>
 8003d24:	2300      	movs	r3, #0
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	f002 0203 	and.w	r2, r2, #3
 8003d2c:	0092      	lsls	r2, r2, #2
 8003d2e:	4093      	lsls	r3, r2
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d36:	4937      	ldr	r1, [pc, #220]	@ (8003e14 <HAL_GPIO_Init+0x300>)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d44:	4b3b      	ldr	r3, [pc, #236]	@ (8003e34 <HAL_GPIO_Init+0x320>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d68:	4a32      	ldr	r2, [pc, #200]	@ (8003e34 <HAL_GPIO_Init+0x320>)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d6e:	4b31      	ldr	r3, [pc, #196]	@ (8003e34 <HAL_GPIO_Init+0x320>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d92:	4a28      	ldr	r2, [pc, #160]	@ (8003e34 <HAL_GPIO_Init+0x320>)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d98:	4b26      	ldr	r3, [pc, #152]	@ (8003e34 <HAL_GPIO_Init+0x320>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e34 <HAL_GPIO_Init+0x320>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e34 <HAL_GPIO_Init+0x320>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003de6:	4a13      	ldr	r2, [pc, #76]	@ (8003e34 <HAL_GPIO_Init+0x320>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	3301      	adds	r3, #1
 8003df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f47f ae91 	bne.w	8003b24 <HAL_GPIO_Init+0x10>
  }
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40010000 	.word	0x40010000
 8003e18:	48000400 	.word	0x48000400
 8003e1c:	48000800 	.word	0x48000800
 8003e20:	48000c00 	.word	0x48000c00
 8003e24:	48001000 	.word	0x48001000
 8003e28:	48001400 	.word	0x48001400
 8003e2c:	48001800 	.word	0x48001800
 8003e30:	48001c00 	.word	0x48001c00
 8003e34:	40010400 	.word	0x40010400

08003e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
 8003e44:	4613      	mov	r3, r2
 8003e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e48:	787b      	ldrb	r3, [r7, #1]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e54:	e002      	b.n	8003e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e56:	887a      	ldrh	r2, [r7, #2]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	041a      	lsls	r2, r3, #16
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	43d9      	mvns	r1, r3
 8003e86:	887b      	ldrh	r3, [r7, #2]
 8003e88:	400b      	ands	r3, r1
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	619a      	str	r2, [r3, #24]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ea6:	4b08      	ldr	r3, [pc, #32]	@ (8003ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d006      	beq.n	8003ec0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eb2:	4a05      	ldr	r2, [pc, #20]	@ (8003ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fd46 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40010400 	.word	0x40010400

08003ecc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ece:	b08f      	sub	sp, #60	@ 0x3c
 8003ed0:	af0a      	add	r7, sp, #40	@ 0x28
 8003ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e116      	b.n	800410c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f009 f871 	bl	800cfe0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2203      	movs	r2, #3
 8003f02:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d102      	bne.n	8003f18 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f005 fcc8 	bl	80098b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	687e      	ldr	r6, [r7, #4]
 8003f2a:	466d      	mov	r5, sp
 8003f2c:	f106 0410 	add.w	r4, r6, #16
 8003f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f40:	1d33      	adds	r3, r6, #4
 8003f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f44:	6838      	ldr	r0, [r7, #0]
 8003f46:	f005 fbdb 	bl	8009700 <USB_CoreInit>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0d7      	b.n	800410c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f005 fcb6 	bl	80098d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
 8003f6c:	e04a      	b.n	8004004 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	333d      	adds	r3, #61	@ 0x3d
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	333c      	adds	r3, #60	@ 0x3c
 8003f92:	7bfa      	ldrb	r2, [r7, #15]
 8003f94:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	b298      	uxth	r0, r3
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3356      	adds	r3, #86	@ 0x56
 8003faa:	4602      	mov	r2, r0
 8003fac:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	3340      	adds	r3, #64	@ 0x40
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	3344      	adds	r3, #68	@ 0x44
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3348      	adds	r3, #72	@ 0x48
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	334c      	adds	r3, #76	@ 0x4c
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	3301      	adds	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d3af      	bcc.n	8003f6e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
 8004012:	e044      	b.n	800409e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800402a:	7bfa      	ldrb	r2, [r7, #15]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	3301      	adds	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
 800409e:	7bfa      	ldrb	r2, [r7, #15]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d3b5      	bcc.n	8004014 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	687e      	ldr	r6, [r7, #4]
 80040b0:	466d      	mov	r5, sp
 80040b2:	f106 0410 	add.w	r4, r6, #16
 80040b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80040c6:	1d33      	adds	r3, r6, #4
 80040c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ca:	6838      	ldr	r0, [r7, #0]
 80040cc:	f005 fc4e 	bl	800996c <USB_DevInit>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e014      	b.n	800410c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d102      	bne.n	8004100 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f001 f86a 	bl	80051d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f006 fbfc 	bl	800a902 <USB_DevDisconnect>

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004114 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_PCD_Start+0x1c>
 800412c:	2302      	movs	r3, #2
 800412e:	e01c      	b.n	800416a <HAL_PCD_Start+0x56>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004144:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f005 fb9d 	bl	8009890 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f006 fbb0 	bl	800a8c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004172:	b590      	push	{r4, r7, lr}
 8004174:	b08d      	sub	sp, #52	@ 0x34
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f006 fc6e 	bl	800aa6a <USB_GetMode>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 847e 	bne.w	8004a92 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f006 fbd2 	bl	800a944 <USB_ReadInterrupts>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8474 	beq.w	8004a90 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	0a1b      	lsrs	r3, r3, #8
 80041b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f006 fbbf 	bl	800a944 <USB_ReadInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d107      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f002 0202 	and.w	r2, r2, #2
 80041de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f006 fbad 	bl	800a944 <USB_ReadInterrupts>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d161      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0210 	bic.w	r2, r2, #16
 8004202:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f003 020f 	and.w	r2, r3, #15
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	3304      	adds	r3, #4
 8004222:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	0c5b      	lsrs	r3, r3, #17
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	2b02      	cmp	r3, #2
 800422e:	d124      	bne.n	800427a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d035      	beq.n	80042a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	6a38      	ldr	r0, [r7, #32]
 8004250:	f006 f9e4 	bl	800a61c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004260:	441a      	add	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004272:	441a      	add	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	615a      	str	r2, [r3, #20]
 8004278:	e016      	b.n	80042a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	0c5b      	lsrs	r3, r3, #17
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	2b06      	cmp	r3, #6
 8004284:	d110      	bne.n	80042a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800428c:	2208      	movs	r2, #8
 800428e:	4619      	mov	r1, r3
 8004290:	6a38      	ldr	r0, [r7, #32]
 8004292:	f006 f9c3 	bl	800a61c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042a2:	441a      	add	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0210 	orr.w	r2, r2, #16
 80042b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f006 fb41 	bl	800a944 <USB_ReadInterrupts>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042cc:	f040 80a7 	bne.w	800441e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f006 fb46 	bl	800a96a <USB_ReadDevAllOutEpInterrupt>
 80042de:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80042e0:	e099      	b.n	8004416 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 808e 	beq.w	800440a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f006 fb6a 	bl	800a9d2 <USB_ReadDevOutEPInterrupt>
 80042fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00c      	beq.n	8004324 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004316:	461a      	mov	r2, r3
 8004318:	2301      	movs	r3, #1
 800431a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800431c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fe7e 	bl	8005020 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433a:	461a      	mov	r2, r3
 800433c:	2308      	movs	r3, #8
 800433e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 feba 	bl	80050bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435e:	461a      	mov	r2, r3
 8004360:	2310      	movs	r3, #16
 8004362:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d030      	beq.n	80043d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004376:	2b80      	cmp	r3, #128	@ 0x80
 8004378:	d109      	bne.n	800438e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004388:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800438c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800438e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	3304      	adds	r3, #4
 80043a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	78db      	ldrb	r3, [r3, #3]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d108      	bne.n	80043be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f008 ff67 	bl	800d28c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	2302      	movs	r3, #2
 80043ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e6:	461a      	mov	r2, r3
 80043e8:	2320      	movs	r3, #32
 80043ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004402:	461a      	mov	r2, r3
 8004404:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004408:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	3301      	adds	r3, #1
 800440e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	f47f af62 	bne.w	80042e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f006 fa8e 	bl	800a944 <USB_ReadInterrupts>
 8004428:	4603      	mov	r3, r0
 800442a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800442e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004432:	f040 80a4 	bne.w	800457e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f006 faaf 	bl	800a99e <USB_ReadDevAllInEpInterrupt>
 8004440:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004446:	e096      	b.n	8004576 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 808b 	beq.w	800456a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f006 fad5 	bl	800aa0e <USB_ReadDevInEPInterrupt>
 8004464:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	2201      	movs	r2, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	43db      	mvns	r3, r3
 800448a:	69f9      	ldr	r1, [r7, #28]
 800448c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004490:	4013      	ands	r3, r2
 8004492:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a0:	461a      	mov	r2, r3
 80044a2:	2301      	movs	r3, #1
 80044a4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f008 fe58 	bl	800d162 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c8:	461a      	mov	r2, r3
 80044ca:	2308      	movs	r3, #8
 80044cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e4:	461a      	mov	r2, r3
 80044e6:	2310      	movs	r3, #16
 80044e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004500:	461a      	mov	r2, r3
 8004502:	2340      	movs	r3, #64	@ 0x40
 8004504:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d023      	beq.n	8004558 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004510:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004512:	6a38      	ldr	r0, [r7, #32]
 8004514:	f005 fb6c 	bl	8009bf0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	3338      	adds	r3, #56	@ 0x38
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	3304      	adds	r3, #4
 800452a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	78db      	ldrb	r3, [r3, #3]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d108      	bne.n	8004546 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2200      	movs	r2, #0
 8004538:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	b2db      	uxtb	r3, r3
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f008 feb5 	bl	800d2b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004552:	461a      	mov	r2, r3
 8004554:	2302      	movs	r3, #2
 8004556:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004562:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fcd2 	bl	8004f0e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	3301      	adds	r3, #1
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	f47f af65 	bne.w	8004448 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f006 f9de 	bl	800a944 <USB_ReadInterrupts>
 8004588:	4603      	mov	r3, r0
 800458a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800458e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004592:	d122      	bne.n	80045da <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d108      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045ba:	2100      	movs	r1, #0
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f009 f8e9 	bl	800d794 <HAL_PCDEx_LPM_Callback>
 80045c2:	e002      	b.n	80045ca <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f008 fe39 	bl	800d23c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80045d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f006 f9b0 	bl	800a944 <USB_ReadInterrupts>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ee:	d112      	bne.n	8004616 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d102      	bne.n	8004606 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f008 fdf5 	bl	800d1f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004614:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f006 f992 	bl	800a944 <USB_ReadInterrupts>
 8004620:	4603      	mov	r3, r0
 8004622:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800462a:	d121      	bne.n	8004670 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800463a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d111      	bne.n	800466a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	f003 020f 	and.w	r2, r3, #15
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004660:	2101      	movs	r1, #1
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f009 f896 	bl	800d794 <HAL_PCDEx_LPM_Callback>
 8004668:	e002      	b.n	8004670 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f008 fdc0 	bl	800d1f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f006 f965 	bl	800a944 <USB_ReadInterrupts>
 800467a:	4603      	mov	r3, r0
 800467c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004684:	f040 80b5 	bne.w	80047f2 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2110      	movs	r1, #16
 80046a2:	4618      	mov	r0, r3
 80046a4:	f005 faa4 	bl	8009bf0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ac:	e046      	b.n	800473c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ba:	461a      	mov	r2, r3
 80046bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ee:	461a      	mov	r2, r3
 80046f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004710:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004714:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	440a      	add	r2, r1
 800472c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004730:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004734:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004738:	3301      	adds	r3, #1
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004742:	429a      	cmp	r2, r3
 8004744:	d3b3      	bcc.n	80046ae <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004754:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004758:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004772:	f043 030b 	orr.w	r3, r3, #11
 8004776:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004788:	f043 030b 	orr.w	r3, r3, #11
 800478c:	6453      	str	r3, [r2, #68]	@ 0x44
 800478e:	e015      	b.n	80047bc <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800479e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80047a2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80047a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b6:	f043 030b 	orr.w	r3, r3, #11
 80047ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047ca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80047ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f006 f975 	bl	800aacc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80047f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f006 f8a4 	bl	800a944 <USB_ReadInterrupts>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004806:	d124      	bne.n	8004852 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f006 f93a 	bl	800aa86 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f005 fa67 	bl	8009cea <USB_GetDevSpeed>
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681c      	ldr	r4, [r3, #0]
 8004828:	f001 fbbc 	bl	8005fa4 <HAL_RCC_GetHCLKFreq>
 800482c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004832:	b2db      	uxtb	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	4620      	mov	r0, r4
 8004838:	f004 ff8e 	bl	8009758 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f008 fcb8 	bl	800d1b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004850:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f006 f874 	bl	800a944 <USB_ReadInterrupts>
 800485c:	4603      	mov	r3, r0
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b08      	cmp	r3, #8
 8004864:	d10a      	bne.n	800487c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f008 fc95 	bl	800d196 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f002 0208 	and.w	r2, r2, #8
 800487a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f006 f85f 	bl	800a944 <USB_ReadInterrupts>
 8004886:	4603      	mov	r3, r0
 8004888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488c:	2b80      	cmp	r3, #128	@ 0x80
 800488e:	d122      	bne.n	80048d6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800489c:	2301      	movs	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a0:	e014      	b.n	80048cc <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a6:	4613      	mov	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d105      	bne.n	80048c6 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	4619      	mov	r1, r3
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 faf3 	bl	8004eac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	3301      	adds	r3, #1
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d3e5      	bcc.n	80048a2 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f006 f832 	bl	800a944 <USB_ReadInterrupts>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ea:	d13b      	bne.n	8004964 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048ec:	2301      	movs	r3, #1
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f0:	e02b      	b.n	800494a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004906:	4613      	mov	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	3340      	adds	r3, #64	@ 0x40
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d115      	bne.n	8004944 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004918:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800491a:	2b00      	cmp	r3, #0
 800491c:	da12      	bge.n	8004944 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004922:	4613      	mov	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	333f      	adds	r3, #63	@ 0x3f
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800493a:	b2db      	uxtb	r3, r3
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fab4 	bl	8004eac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	3301      	adds	r3, #1
 8004948:	627b      	str	r3, [r7, #36]	@ 0x24
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004950:	429a      	cmp	r2, r3
 8004952:	d3ce      	bcc.n	80048f2 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f005 ffeb 	bl	800a944 <USB_ReadInterrupts>
 800496e:	4603      	mov	r3, r0
 8004970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004974:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004978:	d155      	bne.n	8004a26 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800497a:	2301      	movs	r3, #1
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24
 800497e:	e045      	b.n	8004a0c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d12e      	bne.n	8004a06 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da2b      	bge.n	8004a06 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80049ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049be:	429a      	cmp	r2, r3
 80049c0:	d121      	bne.n	8004a06 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c6:	4613      	mov	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a02:	6053      	str	r3, [r2, #4]
            break;
 8004a04:	e007      	b.n	8004a16 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	3301      	adds	r3, #1
 8004a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d3b4      	bcc.n	8004980 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695a      	ldr	r2, [r3, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f005 ff8a 	bl	800a944 <USB_ReadInterrupts>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a3a:	d10a      	bne.n	8004a52 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f008 fc49 	bl	800d2d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f005 ff74 	bl	800a944 <USB_ReadInterrupts>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d115      	bne.n	8004a92 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f008 fc39 	bl	800d2f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
 8004a8e:	e000      	b.n	8004a92 <HAL_PCD_IRQHandler+0x920>
      return;
 8004a90:	bf00      	nop
    }
  }
}
 8004a92:	3734      	adds	r7, #52	@ 0x34
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd90      	pop	{r4, r7, pc}

08004a98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_PCD_SetAddress+0x1a>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e013      	b.n	8004ada <HAL_PCD_SetAddress+0x42>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f005 fed2 	bl	800a874 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	4608      	mov	r0, r1
 8004aec:	4611      	mov	r1, r2
 8004aee:	461a      	mov	r2, r3
 8004af0:	4603      	mov	r3, r0
 8004af2:	70fb      	strb	r3, [r7, #3]
 8004af4:	460b      	mov	r3, r1
 8004af6:	803b      	strh	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	da0f      	bge.n	8004b28 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	f003 020f 	and.w	r2, r3, #15
 8004b0e:	4613      	mov	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	3338      	adds	r3, #56	@ 0x38
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	705a      	strb	r2, [r3, #1]
 8004b26:	e00f      	b.n	8004b48 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	f003 020f 	and.w	r2, r3, #15
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3304      	adds	r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b54:	883a      	ldrh	r2, [r7, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	78ba      	ldrb	r2, [r7, #2]
 8004b5e:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b72:	78bb      	ldrb	r3, [r7, #2]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d102      	bne.n	8004b7e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_PCD_EP_Open+0xaa>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e00e      	b.n	8004baa <HAL_PCD_EP_Open+0xc8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68f9      	ldr	r1, [r7, #12]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f005 f8c4 	bl	8009d28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004ba8:	7afb      	ldrb	r3, [r7, #11]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	da0f      	bge.n	8004be6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	f003 020f 	and.w	r2, r3, #15
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	3338      	adds	r3, #56	@ 0x38
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	3304      	adds	r3, #4
 8004bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	705a      	strb	r2, [r3, #1]
 8004be4:	e00f      	b.n	8004c06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_PCD_EP_Close+0x6e>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e00e      	b.n	8004c3e <HAL_PCD_EP_Close+0x8c>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68f9      	ldr	r1, [r7, #12]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f005 f902 	bl	8009e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b086      	sub	sp, #24
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
 8004c52:	460b      	mov	r3, r1
 8004c54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c56:	7afb      	ldrb	r3, [r7, #11]
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2200      	movs	r2, #0
 8004c86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c88:	7afb      	ldrb	r3, [r7, #11]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6979      	ldr	r1, [r7, #20]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f005 f9a8 	bl	8009ff0 <USB_EPStartXfer>

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	f003 020f 	and.w	r2, r3, #15
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004ccc:	681b      	ldr	r3, [r3, #0]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b086      	sub	sp, #24
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cea:	7afb      	ldrb	r3, [r7, #11]
 8004cec:	f003 020f 	and.w	r2, r3, #15
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	3338      	adds	r3, #56	@ 0x38
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3304      	adds	r3, #4
 8004d00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2200      	movs	r2, #0
 8004d12:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2201      	movs	r2, #1
 8004d18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d1a:	7afb      	ldrb	r3, [r7, #11]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6979      	ldr	r1, [r7, #20]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f005 f95f 	bl	8009ff0 <USB_EPStartXfer>

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	f003 020f 	and.w	r2, r3, #15
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d901      	bls.n	8004d5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e04e      	b.n	8004df8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	da0f      	bge.n	8004d82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	f003 020f 	and.w	r2, r3, #15
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	3338      	adds	r3, #56	@ 0x38
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	4413      	add	r3, r2
 8004d76:	3304      	adds	r3, #4
 8004d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	705a      	strb	r2, [r3, #1]
 8004d80:	e00d      	b.n	8004d9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	4413      	add	r3, r2
 8004d94:	3304      	adds	r3, #4
 8004d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_PCD_EP_SetStall+0x82>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e01c      	b.n	8004df8 <HAL_PCD_EP_SetStall+0xbc>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f005 fc7d 	bl	800a6cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d108      	bne.n	8004dee <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f005 fe6f 	bl	800aacc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	f003 020f 	and.w	r2, r3, #15
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d901      	bls.n	8004e1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e042      	b.n	8004ea4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da0f      	bge.n	8004e46 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	f003 020f 	and.w	r2, r3, #15
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	3338      	adds	r3, #56	@ 0x38
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4413      	add	r3, r2
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	705a      	strb	r2, [r3, #1]
 8004e44:	e00f      	b.n	8004e66 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	f003 020f 	and.w	r2, r3, #15
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_PCD_EP_ClrStall+0x86>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e00e      	b.n	8004ea4 <HAL_PCD_EP_ClrStall+0xa4>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f005 fc87 	bl	800a7a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	da0c      	bge.n	8004eda <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	f003 020f 	and.w	r2, r3, #15
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	3338      	adds	r3, #56	@ 0x38
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e00c      	b.n	8004ef4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	f003 020f 	and.w	r2, r3, #15
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4413      	add	r3, r2
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68f9      	ldr	r1, [r7, #12]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f005 faaa 	bl	800a454 <USB_EPStopXfer>
 8004f00:	4603      	mov	r3, r0
 8004f02:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f04:	7afb      	ldrb	r3, [r7, #11]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b088      	sub	sp, #32
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	4613      	mov	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	3338      	adds	r3, #56	@ 0x38
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	3304      	adds	r3, #4
 8004f34:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d901      	bls.n	8004f46 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e067      	b.n	8005016 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d902      	bls.n	8004f62 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3303      	adds	r3, #3
 8004f66:	089b      	lsrs	r3, r3, #2
 8004f68:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f6a:	e026      	b.n	8004fba <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d902      	bls.n	8004f88 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3303      	adds	r3, #3
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68d9      	ldr	r1, [r3, #12]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	6978      	ldr	r0, [r7, #20]
 8004f9e:	f005 fb03 	bl	800a5a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	441a      	add	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	441a      	add	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d809      	bhi.n	8004fe4 <PCD_WriteEmptyTxFifo+0xd6>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d203      	bcs.n	8004fe4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1c3      	bne.n	8004f6c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d811      	bhi.n	8005014 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	43db      	mvns	r3, r3
 800500a:	6939      	ldr	r1, [r7, #16]
 800500c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005010:	4013      	ands	r3, r2
 8005012:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	333c      	adds	r3, #60	@ 0x3c
 8005038:	3304      	adds	r3, #4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4a19      	ldr	r2, [pc, #100]	@ (80050b8 <PCD_EP_OutXfrComplete_int+0x98>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d124      	bne.n	80050a0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800506c:	461a      	mov	r2, r3
 800506e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005072:	6093      	str	r3, [r2, #8]
 8005074:	e01a      	b.n	80050ac <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508c:	461a      	mov	r2, r3
 800508e:	2320      	movs	r3, #32
 8005090:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f008 f847 	bl	800d12c <HAL_PCD_DataOutStageCallback>
 800509e:	e005      	b.n	80050ac <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f008 f840 	bl	800d12c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	4f54310a 	.word	0x4f54310a

080050bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	333c      	adds	r3, #60	@ 0x3c
 80050d4:	3304      	adds	r3, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005120 <PCD_EP_OutSetupPacket_int+0x64>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d90e      	bls.n	8005110 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d009      	beq.n	8005110 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005108:	461a      	mov	r2, r3
 800510a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800510e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f007 fff9 	bl	800d108 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	4f54300a 	.word	0x4f54300a

08005124 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
 8005130:	4613      	mov	r3, r2
 8005132:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005142:	883b      	ldrh	r3, [r7, #0]
 8005144:	0419      	lsls	r1, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	430a      	orrs	r2, r1
 800514e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005150:	e028      	b.n	80051a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	4413      	add	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]
 8005164:	e00d      	b.n	8005182 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	3340      	adds	r3, #64	@ 0x40
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4413      	add	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	3301      	adds	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
 8005182:	7bfa      	ldrb	r2, [r7, #15]
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	3b01      	subs	r3, #1
 8005188:	429a      	cmp	r2, r3
 800518a:	d3ec      	bcc.n	8005166 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800518c:	883b      	ldrh	r3, [r7, #0]
 800518e:	0418      	lsls	r0, r3, #16
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	3b01      	subs	r3, #1
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	4302      	orrs	r2, r0
 800519c:	3340      	adds	r3, #64	@ 0x40
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	887a      	ldrh	r2, [r7, #2]
 80051c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005206:	f043 0303 	orr.w	r3, r3, #3
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005220:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522c:	d102      	bne.n	8005234 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800522e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005232:	e00b      	b.n	800524c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005234:	4b08      	ldr	r3, [pc, #32]	@ (8005258 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800523a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005242:	d102      	bne.n	800524a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005244:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005248:	e000      	b.n	800524c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800524a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800524c:	4618      	mov	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40007000 	.word	0x40007000

0800525c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d141      	bne.n	80052ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800526a:	4b4b      	ldr	r3, [pc, #300]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005276:	d131      	bne.n	80052dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005278:	4b47      	ldr	r3, [pc, #284]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800527e:	4a46      	ldr	r2, [pc, #280]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005288:	4b43      	ldr	r3, [pc, #268]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005290:	4a41      	ldr	r2, [pc, #260]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005296:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005298:	4b40      	ldr	r3, [pc, #256]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2232      	movs	r2, #50	@ 0x32
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	4a3f      	ldr	r2, [pc, #252]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	0c9b      	lsrs	r3, r3, #18
 80052aa:	3301      	adds	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ae:	e002      	b.n	80052b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052b6:	4b38      	ldr	r3, [pc, #224]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c2:	d102      	bne.n	80052ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f2      	bne.n	80052b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ca:	4b33      	ldr	r3, [pc, #204]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d6:	d158      	bne.n	800538a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e057      	b.n	800538c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052ec:	e04d      	b.n	800538a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f4:	d141      	bne.n	800537a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052f6:	4b28      	ldr	r3, [pc, #160]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005302:	d131      	bne.n	8005368 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005304:	4b24      	ldr	r3, [pc, #144]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800530a:	4a23      	ldr	r2, [pc, #140]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005310:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005314:	4b20      	ldr	r3, [pc, #128]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800531c:	4a1e      	ldr	r2, [pc, #120]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005324:	4b1d      	ldr	r3, [pc, #116]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2232      	movs	r2, #50	@ 0x32
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	4a1c      	ldr	r2, [pc, #112]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	0c9b      	lsrs	r3, r3, #18
 8005336:	3301      	adds	r3, #1
 8005338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800533a:	e002      	b.n	8005342 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3b01      	subs	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005342:	4b15      	ldr	r3, [pc, #84]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800534e:	d102      	bne.n	8005356 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f2      	bne.n	800533c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005356:	4b10      	ldr	r3, [pc, #64]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800535e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005362:	d112      	bne.n	800538a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e011      	b.n	800538c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005368:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800536e:	4a0a      	ldr	r2, [pc, #40]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005378:	e007      	b.n	800538a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800537a:	4b07      	ldr	r3, [pc, #28]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005382:	4a05      	ldr	r2, [pc, #20]	@ (8005398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005384:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005388:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	40007000 	.word	0x40007000
 800539c:	20000000 	.word	0x20000000
 80053a0:	431bde83 	.word	0x431bde83

080053a4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a04      	ldr	r2, [pc, #16]	@ (80053c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80053ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053b2:	6053      	str	r3, [r2, #4]
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40007000 	.word	0x40007000

080053c4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80053c8:	4b05      	ldr	r3, [pc, #20]	@ (80053e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	4a04      	ldr	r2, [pc, #16]	@ (80053e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80053ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053d2:	6053      	str	r3, [r2, #4]
}
 80053d4:	bf00      	nop
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40007000 	.word	0x40007000

080053e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d102      	bne.n	80053f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f000 bc08 	b.w	8005c08 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053f8:	4b96      	ldr	r3, [pc, #600]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 030c 	and.w	r3, r3, #12
 8005400:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005402:	4b94      	ldr	r3, [pc, #592]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 80e4 	beq.w	80055e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <HAL_RCC_OscConfig+0x4c>
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b0c      	cmp	r3, #12
 8005424:	f040 808b 	bne.w	800553e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2b01      	cmp	r3, #1
 800542c:	f040 8087 	bne.w	800553e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005430:	4b88      	ldr	r3, [pc, #544]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d005      	beq.n	8005448 <HAL_RCC_OscConfig+0x64>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e3df      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1a      	ldr	r2, [r3, #32]
 800544c:	4b81      	ldr	r3, [pc, #516]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d004      	beq.n	8005462 <HAL_RCC_OscConfig+0x7e>
 8005458:	4b7e      	ldr	r3, [pc, #504]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005460:	e005      	b.n	800546e <HAL_RCC_OscConfig+0x8a>
 8005462:	4b7c      	ldr	r3, [pc, #496]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800546e:	4293      	cmp	r3, r2
 8005470:	d223      	bcs.n	80054ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fdcc 	bl	8006014 <RCC_SetFlashLatencyFromMSIRange>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e3c0      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005486:	4b73      	ldr	r3, [pc, #460]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a72      	ldr	r2, [pc, #456]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 800548c:	f043 0308 	orr.w	r3, r3, #8
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	4b70      	ldr	r3, [pc, #448]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	496d      	ldr	r1, [pc, #436]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	4968      	ldr	r1, [pc, #416]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	604b      	str	r3, [r1, #4]
 80054b8:	e025      	b.n	8005506 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ba:	4b66      	ldr	r3, [pc, #408]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a65      	ldr	r2, [pc, #404]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80054c0:	f043 0308 	orr.w	r3, r3, #8
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b63      	ldr	r3, [pc, #396]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	4960      	ldr	r1, [pc, #384]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	495b      	ldr	r1, [pc, #364]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fd8c 	bl	8006014 <RCC_SetFlashLatencyFromMSIRange>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e380      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005506:	f000 fcc1 	bl	8005e8c <HAL_RCC_GetSysClockFreq>
 800550a:	4602      	mov	r2, r0
 800550c:	4b51      	ldr	r3, [pc, #324]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	4950      	ldr	r1, [pc, #320]	@ (8005658 <HAL_RCC_OscConfig+0x274>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	fa22 f303 	lsr.w	r3, r2, r3
 8005522:	4a4e      	ldr	r2, [pc, #312]	@ (800565c <HAL_RCC_OscConfig+0x278>)
 8005524:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005526:	4b4e      	ldr	r3, [pc, #312]	@ (8005660 <HAL_RCC_OscConfig+0x27c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fc fa10 	bl	8001950 <HAL_InitTick>
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d052      	beq.n	80055e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	e364      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d032      	beq.n	80055ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005546:	4b43      	ldr	r3, [pc, #268]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a42      	ldr	r2, [pc, #264]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005552:	f7fc fa4d 	bl	80019f0 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800555a:	f7fc fa49 	bl	80019f0 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e34d      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800556c:	4b39      	ldr	r3, [pc, #228]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005578:	4b36      	ldr	r3, [pc, #216]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a35      	ldr	r2, [pc, #212]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 800557e:	f043 0308 	orr.w	r3, r3, #8
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	4b33      	ldr	r3, [pc, #204]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	4930      	ldr	r1, [pc, #192]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005592:	4313      	orrs	r3, r2
 8005594:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005596:	4b2f      	ldr	r3, [pc, #188]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	492b      	ldr	r1, [pc, #172]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	604b      	str	r3, [r1, #4]
 80055aa:	e01a      	b.n	80055e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055ac:	4b29      	ldr	r3, [pc, #164]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a28      	ldr	r2, [pc, #160]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055b8:	f7fc fa1a 	bl	80019f0 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055c0:	f7fc fa16 	bl	80019f0 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e31a      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055d2:	4b20      	ldr	r3, [pc, #128]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x1dc>
 80055de:	e000      	b.n	80055e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d073      	beq.n	80056d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d005      	beq.n	8005600 <HAL_RCC_OscConfig+0x21c>
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b0c      	cmp	r3, #12
 80055f8:	d10e      	bne.n	8005618 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d10b      	bne.n	8005618 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005600:	4b14      	ldr	r3, [pc, #80]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d063      	beq.n	80056d4 <HAL_RCC_OscConfig+0x2f0>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d15f      	bne.n	80056d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e2f7      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005620:	d106      	bne.n	8005630 <HAL_RCC_OscConfig+0x24c>
 8005622:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a0b      	ldr	r2, [pc, #44]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e025      	b.n	800567c <HAL_RCC_OscConfig+0x298>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005638:	d114      	bne.n	8005664 <HAL_RCC_OscConfig+0x280>
 800563a:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a05      	ldr	r2, [pc, #20]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	4b03      	ldr	r3, [pc, #12]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a02      	ldr	r2, [pc, #8]	@ (8005654 <HAL_RCC_OscConfig+0x270>)
 800564c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e013      	b.n	800567c <HAL_RCC_OscConfig+0x298>
 8005654:	40021000 	.word	0x40021000
 8005658:	0800d940 	.word	0x0800d940
 800565c:	20000000 	.word	0x20000000
 8005660:	20000004 	.word	0x20000004
 8005664:	4ba0      	ldr	r3, [pc, #640]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a9f      	ldr	r2, [pc, #636]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 800566a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	4b9d      	ldr	r3, [pc, #628]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a9c      	ldr	r2, [pc, #624]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 8005676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800567a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d013      	beq.n	80056ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fc f9b4 	bl	80019f0 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800568c:	f7fc f9b0 	bl	80019f0 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b64      	cmp	r3, #100	@ 0x64
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e2b4      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800569e:	4b92      	ldr	r3, [pc, #584]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x2a8>
 80056aa:	e014      	b.n	80056d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fc f9a0 	bl	80019f0 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b4:	f7fc f99c 	bl	80019f0 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b64      	cmp	r3, #100	@ 0x64
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e2a0      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056c6:	4b88      	ldr	r3, [pc, #544]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x2d0>
 80056d2:	e000      	b.n	80056d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d060      	beq.n	80057a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d005      	beq.n	80056f4 <HAL_RCC_OscConfig+0x310>
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	2b0c      	cmp	r3, #12
 80056ec:	d119      	bne.n	8005722 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d116      	bne.n	8005722 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056f4:	4b7c      	ldr	r3, [pc, #496]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_RCC_OscConfig+0x328>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e27d      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570c:	4b76      	ldr	r3, [pc, #472]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	061b      	lsls	r3, r3, #24
 800571a:	4973      	ldr	r1, [pc, #460]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 800571c:	4313      	orrs	r3, r2
 800571e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005720:	e040      	b.n	80057a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d023      	beq.n	8005772 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800572a:	4b6f      	ldr	r3, [pc, #444]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a6e      	ldr	r2, [pc, #440]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 8005730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005736:	f7fc f95b 	bl	80019f0 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800573e:	f7fc f957 	bl	80019f0 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e25b      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005750:	4b65      	ldr	r3, [pc, #404]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800575c:	4b62      	ldr	r3, [pc, #392]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	061b      	lsls	r3, r3, #24
 800576a:	495f      	ldr	r1, [pc, #380]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 800576c:	4313      	orrs	r3, r2
 800576e:	604b      	str	r3, [r1, #4]
 8005770:	e018      	b.n	80057a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005772:	4b5d      	ldr	r3, [pc, #372]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a5c      	ldr	r2, [pc, #368]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 8005778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800577c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577e:	f7fc f937 	bl	80019f0 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005786:	f7fc f933 	bl	80019f0 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e237      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005798:	4b53      	ldr	r3, [pc, #332]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1f0      	bne.n	8005786 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d03c      	beq.n	800582a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01c      	beq.n	80057f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057b8:	4b4b      	ldr	r3, [pc, #300]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80057ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057be:	4a4a      	ldr	r2, [pc, #296]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c8:	f7fc f912 	bl	80019f0 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057d0:	f7fc f90e 	bl	80019f0 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e212      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057e2:	4b41      	ldr	r3, [pc, #260]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80057e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ef      	beq.n	80057d0 <HAL_RCC_OscConfig+0x3ec>
 80057f0:	e01b      	b.n	800582a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057f2:	4b3d      	ldr	r3, [pc, #244]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80057f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057f8:	4a3b      	ldr	r2, [pc, #236]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005802:	f7fc f8f5 	bl	80019f0 <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800580a:	f7fc f8f1 	bl	80019f0 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e1f5      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800581c:	4b32      	ldr	r3, [pc, #200]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 800581e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1ef      	bne.n	800580a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 80a6 	beq.w	8005984 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005838:	2300      	movs	r3, #0
 800583a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800583c:	4b2a      	ldr	r3, [pc, #168]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 800583e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10d      	bne.n	8005864 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005848:	4b27      	ldr	r3, [pc, #156]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 800584a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800584c:	4a26      	ldr	r2, [pc, #152]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 800584e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005852:	6593      	str	r3, [r2, #88]	@ 0x58
 8005854:	4b24      	ldr	r3, [pc, #144]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 8005856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005860:	2301      	movs	r3, #1
 8005862:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005864:	4b21      	ldr	r3, [pc, #132]	@ (80058ec <HAL_RCC_OscConfig+0x508>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d118      	bne.n	80058a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005870:	4b1e      	ldr	r3, [pc, #120]	@ (80058ec <HAL_RCC_OscConfig+0x508>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1d      	ldr	r2, [pc, #116]	@ (80058ec <HAL_RCC_OscConfig+0x508>)
 8005876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800587a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800587c:	f7fc f8b8 	bl	80019f0 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005884:	f7fc f8b4 	bl	80019f0 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e1b8      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005896:	4b15      	ldr	r3, [pc, #84]	@ (80058ec <HAL_RCC_OscConfig+0x508>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d108      	bne.n	80058bc <HAL_RCC_OscConfig+0x4d8>
 80058aa:	4b0f      	ldr	r3, [pc, #60]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b0:	4a0d      	ldr	r2, [pc, #52]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058ba:	e029      	b.n	8005910 <HAL_RCC_OscConfig+0x52c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d115      	bne.n	80058f0 <HAL_RCC_OscConfig+0x50c>
 80058c4:	4b08      	ldr	r3, [pc, #32]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ca:	4a07      	ldr	r2, [pc, #28]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80058cc:	f043 0304 	orr.w	r3, r3, #4
 80058d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058d4:	4b04      	ldr	r3, [pc, #16]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058da:	4a03      	ldr	r2, [pc, #12]	@ (80058e8 <HAL_RCC_OscConfig+0x504>)
 80058dc:	f043 0301 	orr.w	r3, r3, #1
 80058e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058e4:	e014      	b.n	8005910 <HAL_RCC_OscConfig+0x52c>
 80058e6:	bf00      	nop
 80058e8:	40021000 	.word	0x40021000
 80058ec:	40007000 	.word	0x40007000
 80058f0:	4b9d      	ldr	r3, [pc, #628]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f6:	4a9c      	ldr	r2, [pc, #624]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005900:	4b99      	ldr	r3, [pc, #612]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005906:	4a98      	ldr	r2, [pc, #608]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005908:	f023 0304 	bic.w	r3, r3, #4
 800590c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d016      	beq.n	8005946 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005918:	f7fc f86a 	bl	80019f0 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800591e:	e00a      	b.n	8005936 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005920:	f7fc f866 	bl	80019f0 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e168      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005936:	4b8c      	ldr	r3, [pc, #560]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0ed      	beq.n	8005920 <HAL_RCC_OscConfig+0x53c>
 8005944:	e015      	b.n	8005972 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005946:	f7fc f853 	bl	80019f0 <HAL_GetTick>
 800594a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800594c:	e00a      	b.n	8005964 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594e:	f7fc f84f 	bl	80019f0 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e151      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005964:	4b80      	ldr	r3, [pc, #512]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1ed      	bne.n	800594e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005972:	7ffb      	ldrb	r3, [r7, #31]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d105      	bne.n	8005984 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005978:	4b7b      	ldr	r3, [pc, #492]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 800597a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597c:	4a7a      	ldr	r2, [pc, #488]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 800597e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005982:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d03c      	beq.n	8005a0a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01c      	beq.n	80059d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005998:	4b73      	ldr	r3, [pc, #460]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 800599a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800599e:	4a72      	ldr	r2, [pc, #456]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a8:	f7fc f822 	bl	80019f0 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059b0:	f7fc f81e 	bl	80019f0 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e122      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059c2:	4b69      	ldr	r3, [pc, #420]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 80059c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0ef      	beq.n	80059b0 <HAL_RCC_OscConfig+0x5cc>
 80059d0:	e01b      	b.n	8005a0a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059d2:	4b65      	ldr	r3, [pc, #404]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 80059d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059d8:	4a63      	ldr	r2, [pc, #396]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 80059da:	f023 0301 	bic.w	r3, r3, #1
 80059de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e2:	f7fc f805 	bl	80019f0 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ea:	f7fc f801 	bl	80019f0 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e105      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 80059fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1ef      	bne.n	80059ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80f9 	beq.w	8005c06 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	f040 80cf 	bne.w	8005bbc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a1e:	4b52      	ldr	r3, [pc, #328]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 0203 	and.w	r2, r3, #3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d12c      	bne.n	8005a8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d123      	bne.n	8005a8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d11b      	bne.n	8005a8c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d113      	bne.n	8005a8c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	3b01      	subs	r3, #1
 8005a72:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d109      	bne.n	8005a8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	3b01      	subs	r3, #1
 8005a86:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d071      	beq.n	8005b70 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	2b0c      	cmp	r3, #12
 8005a90:	d068      	beq.n	8005b64 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a92:	4b35      	ldr	r3, [pc, #212]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d105      	bne.n	8005aaa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a9e:	4b32      	ldr	r3, [pc, #200]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e0ac      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005aae:	4b2e      	ldr	r3, [pc, #184]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005ab4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ab8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005aba:	f7fb ff99 	bl	80019f0 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac2:	f7fb ff95 	bl	80019f0 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e099      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ad4:	4b24      	ldr	r3, [pc, #144]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f0      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ae0:	4b21      	ldr	r3, [pc, #132]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	4b21      	ldr	r3, [pc, #132]	@ (8005b6c <HAL_RCC_OscConfig+0x788>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005af0:	3a01      	subs	r2, #1
 8005af2:	0112      	lsls	r2, r2, #4
 8005af4:	4311      	orrs	r1, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005afa:	0212      	lsls	r2, r2, #8
 8005afc:	4311      	orrs	r1, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b02:	0852      	lsrs	r2, r2, #1
 8005b04:	3a01      	subs	r2, #1
 8005b06:	0552      	lsls	r2, r2, #21
 8005b08:	4311      	orrs	r1, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005b0e:	0852      	lsrs	r2, r2, #1
 8005b10:	3a01      	subs	r2, #1
 8005b12:	0652      	lsls	r2, r2, #25
 8005b14:	4311      	orrs	r1, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b1a:	06d2      	lsls	r2, r2, #27
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	4912      	ldr	r1, [pc, #72]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b24:	4b10      	ldr	r3, [pc, #64]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a0f      	ldr	r2, [pc, #60]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b30:	4b0d      	ldr	r3, [pc, #52]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4a0c      	ldr	r2, [pc, #48]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b3c:	f7fb ff58 	bl	80019f0 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b44:	f7fb ff54 	bl	80019f0 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e058      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b56:	4b04      	ldr	r3, [pc, #16]	@ (8005b68 <HAL_RCC_OscConfig+0x784>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b62:	e050      	b.n	8005c06 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e04f      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b70:	4b27      	ldr	r3, [pc, #156]	@ (8005c10 <HAL_RCC_OscConfig+0x82c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d144      	bne.n	8005c06 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b7c:	4b24      	ldr	r3, [pc, #144]	@ (8005c10 <HAL_RCC_OscConfig+0x82c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a23      	ldr	r2, [pc, #140]	@ (8005c10 <HAL_RCC_OscConfig+0x82c>)
 8005b82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b88:	4b21      	ldr	r3, [pc, #132]	@ (8005c10 <HAL_RCC_OscConfig+0x82c>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	4a20      	ldr	r2, [pc, #128]	@ (8005c10 <HAL_RCC_OscConfig+0x82c>)
 8005b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b94:	f7fb ff2c 	bl	80019f0 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b9c:	f7fb ff28 	bl	80019f0 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e02c      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bae:	4b18      	ldr	r3, [pc, #96]	@ (8005c10 <HAL_RCC_OscConfig+0x82c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x7b8>
 8005bba:	e024      	b.n	8005c06 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	2b0c      	cmp	r3, #12
 8005bc0:	d01f      	beq.n	8005c02 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc2:	4b13      	ldr	r3, [pc, #76]	@ (8005c10 <HAL_RCC_OscConfig+0x82c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a12      	ldr	r2, [pc, #72]	@ (8005c10 <HAL_RCC_OscConfig+0x82c>)
 8005bc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bce:	f7fb ff0f 	bl	80019f0 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd6:	f7fb ff0b 	bl	80019f0 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e00f      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005be8:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <HAL_RCC_OscConfig+0x82c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f0      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005bf4:	4b06      	ldr	r3, [pc, #24]	@ (8005c10 <HAL_RCC_OscConfig+0x82c>)
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	4905      	ldr	r1, [pc, #20]	@ (8005c10 <HAL_RCC_OscConfig+0x82c>)
 8005bfa:	4b06      	ldr	r3, [pc, #24]	@ (8005c14 <HAL_RCC_OscConfig+0x830>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60cb      	str	r3, [r1, #12]
 8005c00:	e001      	b.n	8005c06 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40021000 	.word	0x40021000
 8005c14:	feeefffc 	.word	0xfeeefffc

08005c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e11d      	b.n	8005e6c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c30:	4b90      	ldr	r3, [pc, #576]	@ (8005e74 <HAL_RCC_ClockConfig+0x25c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d910      	bls.n	8005c60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8005e74 <HAL_RCC_ClockConfig+0x25c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f023 020f 	bic.w	r2, r3, #15
 8005c46:	498b      	ldr	r1, [pc, #556]	@ (8005e74 <HAL_RCC_ClockConfig+0x25c>)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4e:	4b89      	ldr	r3, [pc, #548]	@ (8005e74 <HAL_RCC_ClockConfig+0x25c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e105      	b.n	8005e6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d010      	beq.n	8005c8e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	4b81      	ldr	r3, [pc, #516]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d908      	bls.n	8005c8e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c7c:	4b7e      	ldr	r3, [pc, #504]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	497b      	ldr	r1, [pc, #492]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d079      	beq.n	8005d8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d11e      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca2:	4b75      	ldr	r3, [pc, #468]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e0dc      	b.n	8005e6c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005cb2:	f000 fa09 	bl	80060c8 <RCC_GetSysClockFreqFromPLLSource>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	4a70      	ldr	r2, [pc, #448]	@ (8005e7c <HAL_RCC_ClockConfig+0x264>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d946      	bls.n	8005d4c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005cbe:	4b6e      	ldr	r3, [pc, #440]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d140      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cca:	4b6b      	ldr	r3, [pc, #428]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cd2:	4a69      	ldr	r2, [pc, #420]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cda:	2380      	movs	r3, #128	@ 0x80
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	e035      	b.n	8005d4c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d107      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ce8:	4b63      	ldr	r3, [pc, #396]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d115      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0b9      	b.n	8005e6c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d00:	4b5d      	ldr	r3, [pc, #372]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0ad      	b.n	8005e6c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d10:	4b59      	ldr	r3, [pc, #356]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0a5      	b.n	8005e6c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005d20:	f000 f8b4 	bl	8005e8c <HAL_RCC_GetSysClockFreq>
 8005d24:	4603      	mov	r3, r0
 8005d26:	4a55      	ldr	r2, [pc, #340]	@ (8005e7c <HAL_RCC_ClockConfig+0x264>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d90f      	bls.n	8005d4c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005d2c:	4b52      	ldr	r3, [pc, #328]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d38:	4b4f      	ldr	r3, [pc, #316]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d40:	4a4d      	ldr	r2, [pc, #308]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d46:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d48:	2380      	movs	r3, #128	@ 0x80
 8005d4a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d4c:	4b4a      	ldr	r3, [pc, #296]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f023 0203 	bic.w	r2, r3, #3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4947      	ldr	r1, [pc, #284]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d5e:	f7fb fe47 	bl	80019f0 <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d64:	e00a      	b.n	8005d7c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d66:	f7fb fe43 	bl	80019f0 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e077      	b.n	8005e6c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7c:	4b3e      	ldr	r3, [pc, #248]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 020c 	and.w	r2, r3, #12
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d1eb      	bne.n	8005d66 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b80      	cmp	r3, #128	@ 0x80
 8005d92:	d105      	bne.n	8005da0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d94:	4b38      	ldr	r3, [pc, #224]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4a37      	ldr	r2, [pc, #220]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d9e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d010      	beq.n	8005dce <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	4b31      	ldr	r3, [pc, #196]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d208      	bcs.n	8005dce <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	492b      	ldr	r1, [pc, #172]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dce:	4b29      	ldr	r3, [pc, #164]	@ (8005e74 <HAL_RCC_ClockConfig+0x25c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d210      	bcs.n	8005dfe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ddc:	4b25      	ldr	r3, [pc, #148]	@ (8005e74 <HAL_RCC_ClockConfig+0x25c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f023 020f 	bic.w	r2, r3, #15
 8005de4:	4923      	ldr	r1, [pc, #140]	@ (8005e74 <HAL_RCC_ClockConfig+0x25c>)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dec:	4b21      	ldr	r3, [pc, #132]	@ (8005e74 <HAL_RCC_ClockConfig+0x25c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d001      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e036      	b.n	8005e6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	4918      	ldr	r1, [pc, #96]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d009      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e28:	4b13      	ldr	r3, [pc, #76]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4910      	ldr	r1, [pc, #64]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e3c:	f000 f826 	bl	8005e8c <HAL_RCC_GetSysClockFreq>
 8005e40:	4602      	mov	r2, r0
 8005e42:	4b0d      	ldr	r3, [pc, #52]	@ (8005e78 <HAL_RCC_ClockConfig+0x260>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	490c      	ldr	r1, [pc, #48]	@ (8005e80 <HAL_RCC_ClockConfig+0x268>)
 8005e4e:	5ccb      	ldrb	r3, [r1, r3]
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	fa22 f303 	lsr.w	r3, r2, r3
 8005e58:	4a0a      	ldr	r2, [pc, #40]	@ (8005e84 <HAL_RCC_ClockConfig+0x26c>)
 8005e5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <HAL_RCC_ClockConfig+0x270>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fb fd75 	bl	8001950 <HAL_InitTick>
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]

  return status;
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40022000 	.word	0x40022000
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	04c4b400 	.word	0x04c4b400
 8005e80:	0800d940 	.word	0x0800d940
 8005e84:	20000000 	.word	0x20000000
 8005e88:	20000004 	.word	0x20000004

08005e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	@ 0x24
 8005e90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
 8005ea2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	2b0c      	cmp	r3, #12
 8005eb8:	d121      	bne.n	8005efe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d11e      	bne.n	8005efe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ec0:	4b34      	ldr	r3, [pc, #208]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d107      	bne.n	8005edc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ecc:	4b31      	ldr	r3, [pc, #196]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	61fb      	str	r3, [r7, #28]
 8005eda:	e005      	b.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005edc:	4b2d      	ldr	r3, [pc, #180]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8005f98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10d      	bne.n	8005f14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005efc:	e00a      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d102      	bne.n	8005f0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f04:	4b25      	ldr	r3, [pc, #148]	@ (8005f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8005f06:	61bb      	str	r3, [r7, #24]
 8005f08:	e004      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d101      	bne.n	8005f14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f10:	4b23      	ldr	r3, [pc, #140]	@ (8005fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2b0c      	cmp	r3, #12
 8005f18:	d134      	bne.n	8005f84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d003      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d003      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0xac>
 8005f30:	e005      	b.n	8005f3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f32:	4b1a      	ldr	r3, [pc, #104]	@ (8005f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8005f34:	617b      	str	r3, [r7, #20]
      break;
 8005f36:	e005      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f38:	4b19      	ldr	r3, [pc, #100]	@ (8005fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f3a:	617b      	str	r3, [r7, #20]
      break;
 8005f3c:	e002      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	617b      	str	r3, [r7, #20]
      break;
 8005f42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f44:	4b13      	ldr	r3, [pc, #76]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	091b      	lsrs	r3, r3, #4
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	3301      	adds	r3, #1
 8005f50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f52:	4b10      	ldr	r3, [pc, #64]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	0a1b      	lsrs	r3, r3, #8
 8005f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	fb03 f202 	mul.w	r2, r3, r2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	0e5b      	lsrs	r3, r3, #25
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	3301      	adds	r3, #1
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f84:	69bb      	ldr	r3, [r7, #24]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3724      	adds	r7, #36	@ 0x24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40021000 	.word	0x40021000
 8005f98:	0800d958 	.word	0x0800d958
 8005f9c:	00f42400 	.word	0x00f42400
 8005fa0:	007a1200 	.word	0x007a1200

08005fa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fa8:	4b03      	ldr	r3, [pc, #12]	@ (8005fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005faa:	681b      	ldr	r3, [r3, #0]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20000000 	.word	0x20000000

08005fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fc0:	f7ff fff0 	bl	8005fa4 <HAL_RCC_GetHCLKFreq>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	0a1b      	lsrs	r3, r3, #8
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	4904      	ldr	r1, [pc, #16]	@ (8005fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fd2:	5ccb      	ldrb	r3, [r1, r3]
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	0800d950 	.word	0x0800d950

08005fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fec:	f7ff ffda 	bl	8005fa4 <HAL_RCC_GetHCLKFreq>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	4b06      	ldr	r3, [pc, #24]	@ (800600c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	0adb      	lsrs	r3, r3, #11
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	4904      	ldr	r1, [pc, #16]	@ (8006010 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ffe:	5ccb      	ldrb	r3, [r1, r3]
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40021000 	.word	0x40021000
 8006010:	0800d950 	.word	0x0800d950

08006014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006020:	4b27      	ldr	r3, [pc, #156]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800602c:	f7ff f8f6 	bl	800521c <HAL_PWREx_GetVoltageRange>
 8006030:	6178      	str	r0, [r7, #20]
 8006032:	e014      	b.n	800605e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006034:	4b22      	ldr	r3, [pc, #136]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006038:	4a21      	ldr	r2, [pc, #132]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800603a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800603e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006040:	4b1f      	ldr	r3, [pc, #124]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800604c:	f7ff f8e6 	bl	800521c <HAL_PWREx_GetVoltageRange>
 8006050:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006052:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006056:	4a1a      	ldr	r2, [pc, #104]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800605c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006064:	d10b      	bne.n	800607e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b80      	cmp	r3, #128	@ 0x80
 800606a:	d913      	bls.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006070:	d902      	bls.n	8006078 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006072:	2302      	movs	r3, #2
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	e00d      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006078:	2301      	movs	r3, #1
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e00a      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b7f      	cmp	r3, #127	@ 0x7f
 8006082:	d902      	bls.n	800608a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006084:	2302      	movs	r3, #2
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e004      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b70      	cmp	r3, #112	@ 0x70
 800608e:	d101      	bne.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006090:	2301      	movs	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006094:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f023 020f 	bic.w	r2, r3, #15
 800609c:	4909      	ldr	r1, [pc, #36]	@ (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060a4:	4b07      	ldr	r3, [pc, #28]	@ (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d001      	beq.n	80060b6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40022000 	.word	0x40022000

080060c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006184 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d00b      	beq.n	80060f6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d825      	bhi.n	8006130 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d008      	beq.n	80060fc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d11f      	bne.n	8006130 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80060f0:	4b25      	ldr	r3, [pc, #148]	@ (8006188 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80060f2:	613b      	str	r3, [r7, #16]
    break;
 80060f4:	e01f      	b.n	8006136 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80060f6:	4b25      	ldr	r3, [pc, #148]	@ (800618c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80060f8:	613b      	str	r3, [r7, #16]
    break;
 80060fa:	e01c      	b.n	8006136 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060fc:	4b21      	ldr	r3, [pc, #132]	@ (8006184 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d107      	bne.n	8006118 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006108:	4b1e      	ldr	r3, [pc, #120]	@ (8006184 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800610a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e005      	b.n	8006124 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006118:	4b1a      	ldr	r3, [pc, #104]	@ (8006184 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	091b      	lsrs	r3, r3, #4
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006124:	4a1a      	ldr	r2, [pc, #104]	@ (8006190 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800612c:	613b      	str	r3, [r7, #16]
    break;
 800612e:	e002      	b.n	8006136 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006130:	2300      	movs	r3, #0
 8006132:	613b      	str	r3, [r7, #16]
    break;
 8006134:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006136:	4b13      	ldr	r3, [pc, #76]	@ (8006184 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	091b      	lsrs	r3, r3, #4
 800613c:	f003 030f 	and.w	r3, r3, #15
 8006140:	3301      	adds	r3, #1
 8006142:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006144:	4b0f      	ldr	r3, [pc, #60]	@ (8006184 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	0a1b      	lsrs	r3, r3, #8
 800614a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	fb03 f202 	mul.w	r2, r3, r2
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	fbb2 f3f3 	udiv	r3, r2, r3
 800615a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800615c:	4b09      	ldr	r3, [pc, #36]	@ (8006184 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	0e5b      	lsrs	r3, r3, #25
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	3301      	adds	r3, #1
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	fbb2 f3f3 	udiv	r3, r2, r3
 8006174:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006176:	683b      	ldr	r3, [r7, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40021000 	.word	0x40021000
 8006188:	00f42400 	.word	0x00f42400
 800618c:	007a1200 	.word	0x007a1200
 8006190:	0800d958 	.word	0x0800d958

08006194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800619c:	2300      	movs	r3, #0
 800619e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061a0:	2300      	movs	r3, #0
 80061a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d040      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061b4:	2b80      	cmp	r3, #128	@ 0x80
 80061b6:	d02a      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061b8:	2b80      	cmp	r3, #128	@ 0x80
 80061ba:	d825      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061bc:	2b60      	cmp	r3, #96	@ 0x60
 80061be:	d026      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061c0:	2b60      	cmp	r3, #96	@ 0x60
 80061c2:	d821      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061c4:	2b40      	cmp	r3, #64	@ 0x40
 80061c6:	d006      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80061c8:	2b40      	cmp	r3, #64	@ 0x40
 80061ca:	d81d      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d009      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d010      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80061d4:	e018      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061d6:	4b89      	ldr	r3, [pc, #548]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	4a88      	ldr	r2, [pc, #544]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061e0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061e2:	e015      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3304      	adds	r3, #4
 80061e8:	2100      	movs	r1, #0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fb02 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061f4:	e00c      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3320      	adds	r3, #32
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fbed 	bl	80069dc <RCCEx_PLLSAI2_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006206:	e003      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	74fb      	strb	r3, [r7, #19]
      break;
 800620c:	e000      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800620e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006210:	7cfb      	ldrb	r3, [r7, #19]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006216:	4b79      	ldr	r3, [pc, #484]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006218:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800621c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006224:	4975      	ldr	r1, [pc, #468]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800622c:	e001      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622e:	7cfb      	ldrb	r3, [r7, #19]
 8006230:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d047      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006246:	d030      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800624c:	d82a      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800624e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006252:	d02a      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006254:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006258:	d824      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800625a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800625e:	d008      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006264:	d81e      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800626a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800626e:	d010      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006270:	e018      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006272:	4b62      	ldr	r3, [pc, #392]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	4a61      	ldr	r2, [pc, #388]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800627c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800627e:	e015      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3304      	adds	r3, #4
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fab4 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006290:	e00c      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3320      	adds	r3, #32
 8006296:	2100      	movs	r1, #0
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fb9f 	bl	80069dc <RCCEx_PLLSAI2_Config>
 800629e:	4603      	mov	r3, r0
 80062a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062a2:	e003      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	74fb      	strb	r3, [r7, #19]
      break;
 80062a8:	e000      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80062aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ac:	7cfb      	ldrb	r3, [r7, #19]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10b      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062b2:	4b52      	ldr	r3, [pc, #328]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c0:	494e      	ldr	r1, [pc, #312]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80062c8:	e001      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ca:	7cfb      	ldrb	r3, [r7, #19]
 80062cc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 809f 	beq.w	800641a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062dc:	2300      	movs	r3, #0
 80062de:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062e0:	4b46      	ldr	r3, [pc, #280]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80062f0:	2300      	movs	r3, #0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00d      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062f6:	4b41      	ldr	r3, [pc, #260]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fa:	4a40      	ldr	r2, [pc, #256]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006300:	6593      	str	r3, [r2, #88]	@ 0x58
 8006302:	4b3e      	ldr	r3, [pc, #248]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800630a:	60bb      	str	r3, [r7, #8]
 800630c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800630e:	2301      	movs	r3, #1
 8006310:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006312:	4b3b      	ldr	r3, [pc, #236]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a3a      	ldr	r2, [pc, #232]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800631c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800631e:	f7fb fb67 	bl	80019f0 <HAL_GetTick>
 8006322:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006324:	e009      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006326:	f7fb fb63 	bl	80019f0 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d902      	bls.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	74fb      	strb	r3, [r7, #19]
        break;
 8006338:	e005      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800633a:	4b31      	ldr	r3, [pc, #196]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0ef      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006346:	7cfb      	ldrb	r3, [r7, #19]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d15b      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800634c:	4b2b      	ldr	r3, [pc, #172]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006356:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01f      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	429a      	cmp	r2, r3
 8006368:	d019      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800636a:	4b24      	ldr	r3, [pc, #144]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006374:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006376:	4b21      	ldr	r3, [pc, #132]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637c:	4a1f      	ldr	r2, [pc, #124]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800637e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006382:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006386:	4b1d      	ldr	r3, [pc, #116]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638c:	4a1b      	ldr	r2, [pc, #108]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800638e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006392:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006396:	4a19      	ldr	r2, [pc, #100]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d016      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a8:	f7fb fb22 	bl	80019f0 <HAL_GetTick>
 80063ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063ae:	e00b      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b0:	f7fb fb1e 	bl	80019f0 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d902      	bls.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	74fb      	strb	r3, [r7, #19]
            break;
 80063c6:	e006      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063c8:	4b0c      	ldr	r3, [pc, #48]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0ec      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80063d6:	7cfb      	ldrb	r3, [r7, #19]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10c      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063dc:	4b07      	ldr	r3, [pc, #28]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ec:	4903      	ldr	r1, [pc, #12]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80063f4:	e008      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063f6:	7cfb      	ldrb	r3, [r7, #19]
 80063f8:	74bb      	strb	r3, [r7, #18]
 80063fa:	e005      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80063fc:	40021000 	.word	0x40021000
 8006400:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006404:	7cfb      	ldrb	r3, [r7, #19]
 8006406:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006408:	7c7b      	ldrb	r3, [r7, #17]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d105      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800640e:	4ba0      	ldr	r3, [pc, #640]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006412:	4a9f      	ldr	r2, [pc, #636]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006418:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006426:	4b9a      	ldr	r3, [pc, #616]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800642c:	f023 0203 	bic.w	r2, r3, #3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006434:	4996      	ldr	r1, [pc, #600]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006448:	4b91      	ldr	r3, [pc, #580]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800644a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644e:	f023 020c 	bic.w	r2, r3, #12
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006456:	498e      	ldr	r1, [pc, #568]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800646a:	4b89      	ldr	r3, [pc, #548]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006470:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006478:	4985      	ldr	r1, [pc, #532]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800648c:	4b80      	ldr	r3, [pc, #512]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006492:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800649a:	497d      	ldr	r1, [pc, #500]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064ae:	4b78      	ldr	r3, [pc, #480]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064bc:	4974      	ldr	r1, [pc, #464]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0320 	and.w	r3, r3, #32
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064d0:	4b6f      	ldr	r3, [pc, #444]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064de:	496c      	ldr	r1, [pc, #432]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064f2:	4b67      	ldr	r3, [pc, #412]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006500:	4963      	ldr	r1, [pc, #396]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006514:	4b5e      	ldr	r3, [pc, #376]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006522:	495b      	ldr	r1, [pc, #364]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006536:	4b56      	ldr	r3, [pc, #344]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006544:	4952      	ldr	r1, [pc, #328]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006558:	4b4d      	ldr	r3, [pc, #308]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006566:	494a      	ldr	r1, [pc, #296]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800657a:	4b45      	ldr	r3, [pc, #276]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006580:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006588:	4941      	ldr	r1, [pc, #260]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800659c:	4b3c      	ldr	r3, [pc, #240]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800659e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065a2:	f023 0203 	bic.w	r2, r3, #3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065aa:	4939      	ldr	r1, [pc, #228]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d028      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065be:	4b34      	ldr	r3, [pc, #208]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065cc:	4930      	ldr	r1, [pc, #192]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065dc:	d106      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065de:	4b2c      	ldr	r3, [pc, #176]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065e8:	60d3      	str	r3, [r2, #12]
 80065ea:	e011      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065f4:	d10c      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3304      	adds	r3, #4
 80065fa:	2101      	movs	r1, #1
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 f8f9 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006606:	7cfb      	ldrb	r3, [r7, #19]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800660c:	7cfb      	ldrb	r3, [r7, #19]
 800660e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d04d      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006624:	d108      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006626:	4b1a      	ldr	r3, [pc, #104]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006628:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800662c:	4a18      	ldr	r2, [pc, #96]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800662e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006632:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006636:	e012      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006638:	4b15      	ldr	r3, [pc, #84]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800663a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800663e:	4a14      	ldr	r2, [pc, #80]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006640:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006644:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006648:	4b11      	ldr	r3, [pc, #68]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800664a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800664e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006656:	490e      	ldr	r1, [pc, #56]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006658:	4313      	orrs	r3, r2
 800665a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006666:	d106      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006668:	4b09      	ldr	r3, [pc, #36]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	4a08      	ldr	r2, [pc, #32]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800666e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006672:	60d3      	str	r3, [r2, #12]
 8006674:	e020      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800667a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800667e:	d109      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006680:	4b03      	ldr	r3, [pc, #12]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	4a02      	ldr	r2, [pc, #8]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800668a:	60d3      	str	r3, [r2, #12]
 800668c:	e014      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800668e:	bf00      	nop
 8006690:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800669c:	d10c      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3304      	adds	r3, #4
 80066a2:	2101      	movs	r1, #1
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 f8a5 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ae:	7cfb      	ldrb	r3, [r7, #19]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80066b4:	7cfb      	ldrb	r3, [r7, #19]
 80066b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d028      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066c4:	4b4a      	ldr	r3, [pc, #296]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066d2:	4947      	ldr	r1, [pc, #284]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066e2:	d106      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066e4:	4b42      	ldr	r3, [pc, #264]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	4a41      	ldr	r2, [pc, #260]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ee:	60d3      	str	r3, [r2, #12]
 80066f0:	e011      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066fa:	d10c      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3304      	adds	r3, #4
 8006700:	2101      	movs	r1, #1
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f876 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800670c:	7cfb      	ldrb	r3, [r7, #19]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006712:	7cfb      	ldrb	r3, [r7, #19]
 8006714:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d01e      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006722:	4b33      	ldr	r3, [pc, #204]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006728:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006732:	492f      	ldr	r1, [pc, #188]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006734:	4313      	orrs	r3, r2
 8006736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006744:	d10c      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3304      	adds	r3, #4
 800674a:	2102      	movs	r1, #2
 800674c:	4618      	mov	r0, r3
 800674e:	f000 f851 	bl	80067f4 <RCCEx_PLLSAI1_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006756:	7cfb      	ldrb	r3, [r7, #19]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800675c:	7cfb      	ldrb	r3, [r7, #19]
 800675e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800676c:	4b20      	ldr	r3, [pc, #128]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800676e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006772:	f023 0204 	bic.w	r2, r3, #4
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800677c:	491c      	ldr	r1, [pc, #112]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00b      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006790:	4b17      	ldr	r3, [pc, #92]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006792:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006796:	f023 0218 	bic.w	r2, r3, #24
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a0:	4913      	ldr	r1, [pc, #76]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d017      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80067b4:	4b0e      	ldr	r3, [pc, #56]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067c4:	490a      	ldr	r1, [pc, #40]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067d6:	d105      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067d8:	4b05      	ldr	r3, [pc, #20]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4a04      	ldr	r2, [pc, #16]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80067e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40021000 	.word	0x40021000

080067f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006802:	4b72      	ldr	r3, [pc, #456]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00e      	beq.n	800682c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800680e:	4b6f      	ldr	r3, [pc, #444]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f003 0203 	and.w	r2, r3, #3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d103      	bne.n	8006826 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
       ||
 8006822:	2b00      	cmp	r3, #0
 8006824:	d142      	bne.n	80068ac <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
 800682a:	e03f      	b.n	80068ac <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b03      	cmp	r3, #3
 8006832:	d018      	beq.n	8006866 <RCCEx_PLLSAI1_Config+0x72>
 8006834:	2b03      	cmp	r3, #3
 8006836:	d825      	bhi.n	8006884 <RCCEx_PLLSAI1_Config+0x90>
 8006838:	2b01      	cmp	r3, #1
 800683a:	d002      	beq.n	8006842 <RCCEx_PLLSAI1_Config+0x4e>
 800683c:	2b02      	cmp	r3, #2
 800683e:	d009      	beq.n	8006854 <RCCEx_PLLSAI1_Config+0x60>
 8006840:	e020      	b.n	8006884 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006842:	4b62      	ldr	r3, [pc, #392]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d11d      	bne.n	800688a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006852:	e01a      	b.n	800688a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006854:	4b5d      	ldr	r3, [pc, #372]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800685c:	2b00      	cmp	r3, #0
 800685e:	d116      	bne.n	800688e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006864:	e013      	b.n	800688e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006866:	4b59      	ldr	r3, [pc, #356]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10f      	bne.n	8006892 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006872:	4b56      	ldr	r3, [pc, #344]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006882:	e006      	b.n	8006892 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
      break;
 8006888:	e004      	b.n	8006894 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800688a:	bf00      	nop
 800688c:	e002      	b.n	8006894 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800688e:	bf00      	nop
 8006890:	e000      	b.n	8006894 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006892:	bf00      	nop
    }

    if(status == HAL_OK)
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d108      	bne.n	80068ac <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800689a:	4b4c      	ldr	r3, [pc, #304]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f023 0203 	bic.w	r2, r3, #3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4949      	ldr	r1, [pc, #292]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 8086 	bne.w	80069c0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80068b4:	4b45      	ldr	r3, [pc, #276]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a44      	ldr	r2, [pc, #272]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80068ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c0:	f7fb f896 	bl	80019f0 <HAL_GetTick>
 80068c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068c6:	e009      	b.n	80068dc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068c8:	f7fb f892 	bl	80019f0 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d902      	bls.n	80068dc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	73fb      	strb	r3, [r7, #15]
        break;
 80068da:	e005      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068dc:	4b3b      	ldr	r3, [pc, #236]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1ef      	bne.n	80068c8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d168      	bne.n	80069c0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d113      	bne.n	800691c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068f4:	4b35      	ldr	r3, [pc, #212]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	4b35      	ldr	r3, [pc, #212]	@ (80069d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6892      	ldr	r2, [r2, #8]
 8006900:	0211      	lsls	r1, r2, #8
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	68d2      	ldr	r2, [r2, #12]
 8006906:	06d2      	lsls	r2, r2, #27
 8006908:	4311      	orrs	r1, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6852      	ldr	r2, [r2, #4]
 800690e:	3a01      	subs	r2, #1
 8006910:	0112      	lsls	r2, r2, #4
 8006912:	430a      	orrs	r2, r1
 8006914:	492d      	ldr	r1, [pc, #180]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006916:	4313      	orrs	r3, r2
 8006918:	610b      	str	r3, [r1, #16]
 800691a:	e02d      	b.n	8006978 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d115      	bne.n	800694e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006922:	4b2a      	ldr	r3, [pc, #168]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	4b2b      	ldr	r3, [pc, #172]	@ (80069d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006928:	4013      	ands	r3, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6892      	ldr	r2, [r2, #8]
 800692e:	0211      	lsls	r1, r2, #8
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6912      	ldr	r2, [r2, #16]
 8006934:	0852      	lsrs	r2, r2, #1
 8006936:	3a01      	subs	r2, #1
 8006938:	0552      	lsls	r2, r2, #21
 800693a:	4311      	orrs	r1, r2
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6852      	ldr	r2, [r2, #4]
 8006940:	3a01      	subs	r2, #1
 8006942:	0112      	lsls	r2, r2, #4
 8006944:	430a      	orrs	r2, r1
 8006946:	4921      	ldr	r1, [pc, #132]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006948:	4313      	orrs	r3, r2
 800694a:	610b      	str	r3, [r1, #16]
 800694c:	e014      	b.n	8006978 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800694e:	4b1f      	ldr	r3, [pc, #124]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	4b21      	ldr	r3, [pc, #132]	@ (80069d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006954:	4013      	ands	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6892      	ldr	r2, [r2, #8]
 800695a:	0211      	lsls	r1, r2, #8
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6952      	ldr	r2, [r2, #20]
 8006960:	0852      	lsrs	r2, r2, #1
 8006962:	3a01      	subs	r2, #1
 8006964:	0652      	lsls	r2, r2, #25
 8006966:	4311      	orrs	r1, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6852      	ldr	r2, [r2, #4]
 800696c:	3a01      	subs	r2, #1
 800696e:	0112      	lsls	r2, r2, #4
 8006970:	430a      	orrs	r2, r1
 8006972:	4916      	ldr	r1, [pc, #88]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006974:	4313      	orrs	r3, r2
 8006976:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006978:	4b14      	ldr	r3, [pc, #80]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a13      	ldr	r2, [pc, #76]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800697e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006982:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fb f834 	bl	80019f0 <HAL_GetTick>
 8006988:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800698a:	e009      	b.n	80069a0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800698c:	f7fb f830 	bl	80019f0 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d902      	bls.n	80069a0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	73fb      	strb	r3, [r7, #15]
          break;
 800699e:	e005      	b.n	80069ac <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069a0:	4b0a      	ldr	r3, [pc, #40]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0ef      	beq.n	800698c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069b2:	4b06      	ldr	r3, [pc, #24]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	4904      	ldr	r1, [pc, #16]	@ (80069cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40021000 	.word	0x40021000
 80069d0:	07ff800f 	.word	0x07ff800f
 80069d4:	ff9f800f 	.word	0xff9f800f
 80069d8:	f9ff800f 	.word	0xf9ff800f

080069dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069ea:	4b72      	ldr	r3, [pc, #456]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00e      	beq.n	8006a14 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069f6:	4b6f      	ldr	r3, [pc, #444]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f003 0203 	and.w	r2, r3, #3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d103      	bne.n	8006a0e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
       ||
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d142      	bne.n	8006a94 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	73fb      	strb	r3, [r7, #15]
 8006a12:	e03f      	b.n	8006a94 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d018      	beq.n	8006a4e <RCCEx_PLLSAI2_Config+0x72>
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d825      	bhi.n	8006a6c <RCCEx_PLLSAI2_Config+0x90>
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d002      	beq.n	8006a2a <RCCEx_PLLSAI2_Config+0x4e>
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d009      	beq.n	8006a3c <RCCEx_PLLSAI2_Config+0x60>
 8006a28:	e020      	b.n	8006a6c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a2a:	4b62      	ldr	r3, [pc, #392]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d11d      	bne.n	8006a72 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a3a:	e01a      	b.n	8006a72 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d116      	bne.n	8006a76 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a4c:	e013      	b.n	8006a76 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a4e:	4b59      	ldr	r3, [pc, #356]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10f      	bne.n	8006a7a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a5a:	4b56      	ldr	r3, [pc, #344]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a6a:	e006      	b.n	8006a7a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a70:	e004      	b.n	8006a7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a72:	bf00      	nop
 8006a74:	e002      	b.n	8006a7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a76:	bf00      	nop
 8006a78:	e000      	b.n	8006a7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d108      	bne.n	8006a94 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006a82:	4b4c      	ldr	r3, [pc, #304]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f023 0203 	bic.w	r2, r3, #3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4949      	ldr	r1, [pc, #292]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f040 8086 	bne.w	8006ba8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a9c:	4b45      	ldr	r3, [pc, #276]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a44      	ldr	r2, [pc, #272]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aa8:	f7fa ffa2 	bl	80019f0 <HAL_GetTick>
 8006aac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006aae:	e009      	b.n	8006ac4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ab0:	f7fa ff9e 	bl	80019f0 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d902      	bls.n	8006ac4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ac2:	e005      	b.n	8006ad0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1ef      	bne.n	8006ab0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d168      	bne.n	8006ba8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d113      	bne.n	8006b04 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006adc:	4b35      	ldr	r3, [pc, #212]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ade:	695a      	ldr	r2, [r3, #20]
 8006ae0:	4b35      	ldr	r3, [pc, #212]	@ (8006bb8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6892      	ldr	r2, [r2, #8]
 8006ae8:	0211      	lsls	r1, r2, #8
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	68d2      	ldr	r2, [r2, #12]
 8006aee:	06d2      	lsls	r2, r2, #27
 8006af0:	4311      	orrs	r1, r2
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6852      	ldr	r2, [r2, #4]
 8006af6:	3a01      	subs	r2, #1
 8006af8:	0112      	lsls	r2, r2, #4
 8006afa:	430a      	orrs	r2, r1
 8006afc:	492d      	ldr	r1, [pc, #180]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	614b      	str	r3, [r1, #20]
 8006b02:	e02d      	b.n	8006b60 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d115      	bne.n	8006b36 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b0c:	695a      	ldr	r2, [r3, #20]
 8006b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8006bbc <RCCEx_PLLSAI2_Config+0x1e0>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6892      	ldr	r2, [r2, #8]
 8006b16:	0211      	lsls	r1, r2, #8
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	6912      	ldr	r2, [r2, #16]
 8006b1c:	0852      	lsrs	r2, r2, #1
 8006b1e:	3a01      	subs	r2, #1
 8006b20:	0552      	lsls	r2, r2, #21
 8006b22:	4311      	orrs	r1, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6852      	ldr	r2, [r2, #4]
 8006b28:	3a01      	subs	r2, #1
 8006b2a:	0112      	lsls	r2, r2, #4
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	4921      	ldr	r1, [pc, #132]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	614b      	str	r3, [r1, #20]
 8006b34:	e014      	b.n	8006b60 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b36:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	4b21      	ldr	r3, [pc, #132]	@ (8006bc0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6892      	ldr	r2, [r2, #8]
 8006b42:	0211      	lsls	r1, r2, #8
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6952      	ldr	r2, [r2, #20]
 8006b48:	0852      	lsrs	r2, r2, #1
 8006b4a:	3a01      	subs	r2, #1
 8006b4c:	0652      	lsls	r2, r2, #25
 8006b4e:	4311      	orrs	r1, r2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6852      	ldr	r2, [r2, #4]
 8006b54:	3a01      	subs	r2, #1
 8006b56:	0112      	lsls	r2, r2, #4
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	4916      	ldr	r1, [pc, #88]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b60:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a13      	ldr	r2, [pc, #76]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6c:	f7fa ff40 	bl	80019f0 <HAL_GetTick>
 8006b70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b72:	e009      	b.n	8006b88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b74:	f7fa ff3c 	bl	80019f0 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d902      	bls.n	8006b88 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	73fb      	strb	r3, [r7, #15]
          break;
 8006b86:	e005      	b.n	8006b94 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b88:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0ef      	beq.n	8006b74 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b9a:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b9c:	695a      	ldr	r2, [r3, #20]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	4904      	ldr	r1, [pc, #16]	@ (8006bb4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	07ff800f 	.word	0x07ff800f
 8006bbc:	ff9f800f 	.word	0xff9f800f
 8006bc0:	f9ff800f 	.word	0xf9ff800f

08006bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e049      	b.n	8006c6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fa fcd2 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f000 fb02 	bl	800720c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d001      	beq.n	8006c8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e047      	b.n	8006d1c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a23      	ldr	r2, [pc, #140]	@ (8006d28 <HAL_TIM_Base_Start+0xb4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d01d      	beq.n	8006cda <HAL_TIM_Base_Start+0x66>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca6:	d018      	beq.n	8006cda <HAL_TIM_Base_Start+0x66>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1f      	ldr	r2, [pc, #124]	@ (8006d2c <HAL_TIM_Base_Start+0xb8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <HAL_TIM_Base_Start+0x66>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8006d30 <HAL_TIM_Base_Start+0xbc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00e      	beq.n	8006cda <HAL_TIM_Base_Start+0x66>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d34 <HAL_TIM_Base_Start+0xc0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d009      	beq.n	8006cda <HAL_TIM_Base_Start+0x66>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1b      	ldr	r2, [pc, #108]	@ (8006d38 <HAL_TIM_Base_Start+0xc4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d004      	beq.n	8006cda <HAL_TIM_Base_Start+0x66>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a19      	ldr	r2, [pc, #100]	@ (8006d3c <HAL_TIM_Base_Start+0xc8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d115      	bne.n	8006d06 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	4b17      	ldr	r3, [pc, #92]	@ (8006d40 <HAL_TIM_Base_Start+0xcc>)
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b06      	cmp	r3, #6
 8006cea:	d015      	beq.n	8006d18 <HAL_TIM_Base_Start+0xa4>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cf2:	d011      	beq.n	8006d18 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d04:	e008      	b.n	8006d18 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0201 	orr.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	e000      	b.n	8006d1a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	40000400 	.word	0x40000400
 8006d30:	40000800 	.word	0x40000800
 8006d34:	40000c00 	.word	0x40000c00
 8006d38:	40013400 	.word	0x40013400
 8006d3c:	40014000 	.word	0x40014000
 8006d40:	00010007 	.word	0x00010007

08006d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d001      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e04f      	b.n	8006dfc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a23      	ldr	r2, [pc, #140]	@ (8006e08 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d01d      	beq.n	8006dba <HAL_TIM_Base_Start_IT+0x76>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d86:	d018      	beq.n	8006dba <HAL_TIM_Base_Start_IT+0x76>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8006e0c <HAL_TIM_Base_Start_IT+0xc8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d013      	beq.n	8006dba <HAL_TIM_Base_Start_IT+0x76>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1e      	ldr	r2, [pc, #120]	@ (8006e10 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00e      	beq.n	8006dba <HAL_TIM_Base_Start_IT+0x76>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1c      	ldr	r2, [pc, #112]	@ (8006e14 <HAL_TIM_Base_Start_IT+0xd0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d009      	beq.n	8006dba <HAL_TIM_Base_Start_IT+0x76>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1b      	ldr	r2, [pc, #108]	@ (8006e18 <HAL_TIM_Base_Start_IT+0xd4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d004      	beq.n	8006dba <HAL_TIM_Base_Start_IT+0x76>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a19      	ldr	r2, [pc, #100]	@ (8006e1c <HAL_TIM_Base_Start_IT+0xd8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d115      	bne.n	8006de6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	4b17      	ldr	r3, [pc, #92]	@ (8006e20 <HAL_TIM_Base_Start_IT+0xdc>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b06      	cmp	r3, #6
 8006dca:	d015      	beq.n	8006df8 <HAL_TIM_Base_Start_IT+0xb4>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd2:	d011      	beq.n	8006df8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de4:	e008      	b.n	8006df8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0201 	orr.w	r2, r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e000      	b.n	8006dfa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	40012c00 	.word	0x40012c00
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800
 8006e14:	40000c00 	.word	0x40000c00
 8006e18:	40013400 	.word	0x40013400
 8006e1c:	40014000 	.word	0x40014000
 8006e20:	00010007 	.word	0x00010007

08006e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d020      	beq.n	8006e88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01b      	beq.n	8006e88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0202 	mvn.w	r2, #2
 8006e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f9ad 	bl	80071ce <HAL_TIM_IC_CaptureCallback>
 8006e74:	e005      	b.n	8006e82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f99f 	bl	80071ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f9b0 	bl	80071e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d020      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01b      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0204 	mvn.w	r2, #4
 8006ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f987 	bl	80071ce <HAL_TIM_IC_CaptureCallback>
 8006ec0:	e005      	b.n	8006ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f979 	bl	80071ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f98a 	bl	80071e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d020      	beq.n	8006f20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01b      	beq.n	8006f20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0208 	mvn.w	r2, #8
 8006ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f961 	bl	80071ce <HAL_TIM_IC_CaptureCallback>
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f953 	bl	80071ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f964 	bl	80071e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d020      	beq.n	8006f6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01b      	beq.n	8006f6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0210 	mvn.w	r2, #16
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2208      	movs	r2, #8
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f93b 	bl	80071ce <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f92d 	bl	80071ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f93e 	bl	80071e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00c      	beq.n	8006f90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d007      	beq.n	8006f90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0201 	mvn.w	r2, #1
 8006f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7f9 ff7c 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00c      	beq.n	8006fb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 faf2 	bl	8007598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00c      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d007      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 faea 	bl	80075ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00c      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f8fd 	bl	80071f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f003 0320 	and.w	r3, r3, #32
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00c      	beq.n	8007020 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f003 0320 	and.w	r3, r3, #32
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0220 	mvn.w	r2, #32
 8007018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fab2 	bl	8007584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_TIM_ConfigClockSource+0x1c>
 8007040:	2302      	movs	r3, #2
 8007042:	e0b6      	b.n	80071b2 <HAL_TIM_ConfigClockSource+0x18a>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007062:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800706e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007080:	d03e      	beq.n	8007100 <HAL_TIM_ConfigClockSource+0xd8>
 8007082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007086:	f200 8087 	bhi.w	8007198 <HAL_TIM_ConfigClockSource+0x170>
 800708a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800708e:	f000 8086 	beq.w	800719e <HAL_TIM_ConfigClockSource+0x176>
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007096:	d87f      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x170>
 8007098:	2b70      	cmp	r3, #112	@ 0x70
 800709a:	d01a      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0xaa>
 800709c:	2b70      	cmp	r3, #112	@ 0x70
 800709e:	d87b      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x170>
 80070a0:	2b60      	cmp	r3, #96	@ 0x60
 80070a2:	d050      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x11e>
 80070a4:	2b60      	cmp	r3, #96	@ 0x60
 80070a6:	d877      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x170>
 80070a8:	2b50      	cmp	r3, #80	@ 0x50
 80070aa:	d03c      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0xfe>
 80070ac:	2b50      	cmp	r3, #80	@ 0x50
 80070ae:	d873      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x170>
 80070b0:	2b40      	cmp	r3, #64	@ 0x40
 80070b2:	d058      	beq.n	8007166 <HAL_TIM_ConfigClockSource+0x13e>
 80070b4:	2b40      	cmp	r3, #64	@ 0x40
 80070b6:	d86f      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x170>
 80070b8:	2b30      	cmp	r3, #48	@ 0x30
 80070ba:	d064      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x15e>
 80070bc:	2b30      	cmp	r3, #48	@ 0x30
 80070be:	d86b      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x170>
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d060      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x15e>
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d867      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x170>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d05c      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x15e>
 80070cc:	2b10      	cmp	r3, #16
 80070ce:	d05a      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x15e>
 80070d0:	e062      	b.n	8007198 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070e2:	f000 f9a7 	bl	8007434 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	609a      	str	r2, [r3, #8]
      break;
 80070fe:	e04f      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007110:	f000 f990 	bl	8007434 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007122:	609a      	str	r2, [r3, #8]
      break;
 8007124:	e03c      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007132:	461a      	mov	r2, r3
 8007134:	f000 f904 	bl	8007340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2150      	movs	r1, #80	@ 0x50
 800713e:	4618      	mov	r0, r3
 8007140:	f000 f95d 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8007144:	e02c      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007152:	461a      	mov	r2, r3
 8007154:	f000 f923 	bl	800739e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2160      	movs	r1, #96	@ 0x60
 800715e:	4618      	mov	r0, r3
 8007160:	f000 f94d 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8007164:	e01c      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007172:	461a      	mov	r2, r3
 8007174:	f000 f8e4 	bl	8007340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2140      	movs	r1, #64	@ 0x40
 800717e:	4618      	mov	r0, r3
 8007180:	f000 f93d 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8007184:	e00c      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4619      	mov	r1, r3
 8007190:	4610      	mov	r0, r2
 8007192:	f000 f934 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8007196:	e003      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	73fb      	strb	r3, [r7, #15]
      break;
 800719c:	e000      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800719e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a40      	ldr	r2, [pc, #256]	@ (8007320 <TIM_Base_SetConfig+0x114>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d013      	beq.n	800724c <TIM_Base_SetConfig+0x40>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800722a:	d00f      	beq.n	800724c <TIM_Base_SetConfig+0x40>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a3d      	ldr	r2, [pc, #244]	@ (8007324 <TIM_Base_SetConfig+0x118>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00b      	beq.n	800724c <TIM_Base_SetConfig+0x40>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a3c      	ldr	r2, [pc, #240]	@ (8007328 <TIM_Base_SetConfig+0x11c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d007      	beq.n	800724c <TIM_Base_SetConfig+0x40>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a3b      	ldr	r2, [pc, #236]	@ (800732c <TIM_Base_SetConfig+0x120>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d003      	beq.n	800724c <TIM_Base_SetConfig+0x40>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a3a      	ldr	r2, [pc, #232]	@ (8007330 <TIM_Base_SetConfig+0x124>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d108      	bne.n	800725e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a2f      	ldr	r2, [pc, #188]	@ (8007320 <TIM_Base_SetConfig+0x114>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d01f      	beq.n	80072a6 <TIM_Base_SetConfig+0x9a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800726c:	d01b      	beq.n	80072a6 <TIM_Base_SetConfig+0x9a>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a2c      	ldr	r2, [pc, #176]	@ (8007324 <TIM_Base_SetConfig+0x118>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d017      	beq.n	80072a6 <TIM_Base_SetConfig+0x9a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a2b      	ldr	r2, [pc, #172]	@ (8007328 <TIM_Base_SetConfig+0x11c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <TIM_Base_SetConfig+0x9a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a2a      	ldr	r2, [pc, #168]	@ (800732c <TIM_Base_SetConfig+0x120>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00f      	beq.n	80072a6 <TIM_Base_SetConfig+0x9a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a29      	ldr	r2, [pc, #164]	@ (8007330 <TIM_Base_SetConfig+0x124>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00b      	beq.n	80072a6 <TIM_Base_SetConfig+0x9a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a28      	ldr	r2, [pc, #160]	@ (8007334 <TIM_Base_SetConfig+0x128>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d007      	beq.n	80072a6 <TIM_Base_SetConfig+0x9a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a27      	ldr	r2, [pc, #156]	@ (8007338 <TIM_Base_SetConfig+0x12c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d003      	beq.n	80072a6 <TIM_Base_SetConfig+0x9a>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a26      	ldr	r2, [pc, #152]	@ (800733c <TIM_Base_SetConfig+0x130>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d108      	bne.n	80072b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a10      	ldr	r2, [pc, #64]	@ (8007320 <TIM_Base_SetConfig+0x114>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00f      	beq.n	8007304 <TIM_Base_SetConfig+0xf8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a12      	ldr	r2, [pc, #72]	@ (8007330 <TIM_Base_SetConfig+0x124>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00b      	beq.n	8007304 <TIM_Base_SetConfig+0xf8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a11      	ldr	r2, [pc, #68]	@ (8007334 <TIM_Base_SetConfig+0x128>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d007      	beq.n	8007304 <TIM_Base_SetConfig+0xf8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a10      	ldr	r2, [pc, #64]	@ (8007338 <TIM_Base_SetConfig+0x12c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d003      	beq.n	8007304 <TIM_Base_SetConfig+0xf8>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a0f      	ldr	r2, [pc, #60]	@ (800733c <TIM_Base_SetConfig+0x130>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d103      	bne.n	800730c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	615a      	str	r2, [r3, #20]
}
 8007312:	bf00      	nop
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40000400 	.word	0x40000400
 8007328:	40000800 	.word	0x40000800
 800732c:	40000c00 	.word	0x40000c00
 8007330:	40013400 	.word	0x40013400
 8007334:	40014000 	.word	0x40014000
 8007338:	40014400 	.word	0x40014400
 800733c:	40014800 	.word	0x40014800

08007340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	f023 0201 	bic.w	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800736a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f023 030a 	bic.w	r3, r3, #10
 800737c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	621a      	str	r2, [r3, #32]
}
 8007392:	bf00      	nop
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800739e:	b480      	push	{r7}
 80073a0:	b087      	sub	sp, #28
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	f023 0210 	bic.w	r2, r3, #16
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	031b      	lsls	r3, r3, #12
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	f043 0307 	orr.w	r3, r3, #7
 8007420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	609a      	str	r2, [r3, #8]
}
 8007428:	bf00      	nop
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800744e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	021a      	lsls	r2, r3, #8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	431a      	orrs	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4313      	orrs	r3, r2
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	4313      	orrs	r3, r2
 8007460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	609a      	str	r2, [r3, #8]
}
 8007468:	bf00      	nop
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007488:	2302      	movs	r3, #2
 800748a:	e068      	b.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a2e      	ldr	r2, [pc, #184]	@ (800756c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d004      	beq.n	80074c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007570 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d108      	bne.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80074c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a1e      	ldr	r2, [pc, #120]	@ (800756c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d01d      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074fe:	d018      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1b      	ldr	r2, [pc, #108]	@ (8007574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d013      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1a      	ldr	r2, [pc, #104]	@ (8007578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00e      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a18      	ldr	r2, [pc, #96]	@ (800757c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d009      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a13      	ldr	r2, [pc, #76]	@ (8007570 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d004      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a14      	ldr	r2, [pc, #80]	@ (8007580 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d10c      	bne.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	4313      	orrs	r3, r2
 8007542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40012c00 	.word	0x40012c00
 8007570:	40013400 	.word	0x40013400
 8007574:	40000400 	.word	0x40000400
 8007578:	40000800 	.word	0x40000800
 800757c:	40000c00 	.word	0x40000c00
 8007580:	40014000 	.word	0x40014000

08007584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e042      	b.n	8007658 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7fa f8c3 	bl	8001770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2224      	movs	r2, #36	@ 0x24
 80075ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0201 	bic.w	r2, r2, #1
 8007600:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 feb4 	bl	8008378 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fbb5 	bl	8007d80 <UART_SetConfig>
 8007616:	4603      	mov	r3, r0
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e01b      	b.n	8007658 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800762e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800763e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 ff33 	bl	80084bc <UART_CheckIdleState>
 8007656:	4603      	mov	r3, r0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08a      	sub	sp, #40	@ 0x28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007674:	2b20      	cmp	r3, #32
 8007676:	d137      	bne.n	80076e8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <HAL_UART_Receive_IT+0x24>
 800767e:	88fb      	ldrh	r3, [r7, #6]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e030      	b.n	80076ea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a18      	ldr	r2, [pc, #96]	@ (80076f4 <HAL_UART_Receive_IT+0x94>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d01f      	beq.n	80076d8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d018      	beq.n	80076d8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	613b      	str	r3, [r7, #16]
   return(result);
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c4:	623b      	str	r3, [r7, #32]
 80076c6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	69f9      	ldr	r1, [r7, #28]
 80076ca:	6a3a      	ldr	r2, [r7, #32]
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e6      	bne.n	80076a6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076d8:	88fb      	ldrh	r3, [r7, #6]
 80076da:	461a      	mov	r2, r3
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fffe 	bl	80086e0 <UART_Start_Receive_IT>
 80076e4:	4603      	mov	r3, r0
 80076e6:	e000      	b.n	80076ea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076e8:	2302      	movs	r3, #2
  }
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3728      	adds	r7, #40	@ 0x28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	40008000 	.word	0x40008000

080076f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b0ba      	sub	sp, #232	@ 0xe8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800771e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007722:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007726:	4013      	ands	r3, r2
 8007728:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800772c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11b      	bne.n	800776c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d015      	beq.n	800776c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007744:	f003 0320 	and.w	r3, r3, #32
 8007748:	2b00      	cmp	r3, #0
 800774a:	d105      	bne.n	8007758 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800774c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d009      	beq.n	800776c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 82e3 	beq.w	8007d28 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	4798      	blx	r3
      }
      return;
 800776a:	e2dd      	b.n	8007d28 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800776c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 8123 	beq.w	80079bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007776:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800777a:	4b8d      	ldr	r3, [pc, #564]	@ (80079b0 <HAL_UART_IRQHandler+0x2b8>)
 800777c:	4013      	ands	r3, r2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007782:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007786:	4b8b      	ldr	r3, [pc, #556]	@ (80079b4 <HAL_UART_IRQHandler+0x2bc>)
 8007788:	4013      	ands	r3, r2
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8116 	beq.w	80079bc <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	d011      	beq.n	80077c0 <HAL_UART_IRQHandler+0xc8>
 800779c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2201      	movs	r2, #1
 80077ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b6:	f043 0201 	orr.w	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d011      	beq.n	80077f0 <HAL_UART_IRQHandler+0xf8>
 80077cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2202      	movs	r2, #2
 80077de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e6:	f043 0204 	orr.w	r2, r3, #4
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d011      	beq.n	8007820 <HAL_UART_IRQHandler+0x128>
 80077fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00b      	beq.n	8007820 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2204      	movs	r2, #4
 800780e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007816:	f043 0202 	orr.w	r2, r3, #2
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007824:	f003 0308 	and.w	r3, r3, #8
 8007828:	2b00      	cmp	r3, #0
 800782a:	d017      	beq.n	800785c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800782c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007830:	f003 0320 	and.w	r3, r3, #32
 8007834:	2b00      	cmp	r3, #0
 8007836:	d105      	bne.n	8007844 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007838:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800783c:	4b5c      	ldr	r3, [pc, #368]	@ (80079b0 <HAL_UART_IRQHandler+0x2b8>)
 800783e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2208      	movs	r2, #8
 800784a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007852:	f043 0208 	orr.w	r2, r3, #8
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800785c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007864:	2b00      	cmp	r3, #0
 8007866:	d012      	beq.n	800788e <HAL_UART_IRQHandler+0x196>
 8007868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800786c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00c      	beq.n	800788e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800787c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007884:	f043 0220 	orr.w	r2, r3, #32
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8249 	beq.w	8007d2c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800789a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d013      	beq.n	80078ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d105      	bne.n	80078be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e2:	2b40      	cmp	r3, #64	@ 0x40
 80078e4:	d005      	beq.n	80078f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d054      	beq.n	800799c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 f816 	bl	8008924 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007902:	2b40      	cmp	r3, #64	@ 0x40
 8007904:	d146      	bne.n	8007994 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3308      	adds	r3, #8
 800790c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800791c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3308      	adds	r3, #8
 800792e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007932:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800793e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800794a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1d9      	bne.n	8007906 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007958:	2b00      	cmp	r3, #0
 800795a:	d017      	beq.n	800798c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007962:	4a15      	ldr	r2, [pc, #84]	@ (80079b8 <HAL_UART_IRQHandler+0x2c0>)
 8007964:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800796c:	4618      	mov	r0, r3
 800796e:	f7fb feda 	bl	8003726 <HAL_DMA_Abort_IT>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d019      	beq.n	80079ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800797e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007986:	4610      	mov	r0, r2
 8007988:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798a:	e00f      	b.n	80079ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f9e1 	bl	8007d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007992:	e00b      	b.n	80079ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f9dd 	bl	8007d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800799a:	e007      	b.n	80079ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f9d9 	bl	8007d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80079aa:	e1bf      	b.n	8007d2c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ac:	bf00      	nop
    return;
 80079ae:	e1bd      	b.n	8007d2c <HAL_UART_IRQHandler+0x634>
 80079b0:	10000001 	.word	0x10000001
 80079b4:	04000120 	.word	0x04000120
 80079b8:	080089f1 	.word	0x080089f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	f040 8153 	bne.w	8007c6c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ca:	f003 0310 	and.w	r3, r3, #16
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 814c 	beq.w	8007c6c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d8:	f003 0310 	and.w	r3, r3, #16
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8145 	beq.w	8007c6c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2210      	movs	r2, #16
 80079e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f4:	2b40      	cmp	r3, #64	@ 0x40
 80079f6:	f040 80bb 	bne.w	8007b70 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 818f 	beq.w	8007d30 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	f080 8187 	bcs.w	8007d30 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f040 8087 	bne.w	8007b4e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a6e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1da      	bne.n	8007a40 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3308      	adds	r3, #8
 8007a90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007aae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ab2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ab6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e1      	bne.n	8007a8a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007adc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007aea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007aec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007af0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e3      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b1c:	f023 0310 	bic.w	r3, r3, #16
 8007b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e4      	bne.n	8007b0c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fb fd90 	bl	800366e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f8fd 	bl	8007d68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b6e:	e0df      	b.n	8007d30 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80d1 	beq.w	8007d34 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007b92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 80cc 	beq.w	8007d34 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bc0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e4      	bne.n	8007b9c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	623b      	str	r3, [r7, #32]
   return(result);
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007be8:	f023 0301 	bic.w	r3, r3, #1
 8007bec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007bfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e1      	bne.n	8007bd2 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0310 	bic.w	r3, r3, #16
 8007c36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c44:	61fb      	str	r3, [r7, #28]
 8007c46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	69b9      	ldr	r1, [r7, #24]
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	617b      	str	r3, [r7, #20]
   return(result);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e4      	bne.n	8007c22 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f87f 	bl	8007d68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c6a:	e063      	b.n	8007d34 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00e      	beq.n	8007c96 <HAL_UART_IRQHandler+0x59e>
 8007c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d008      	beq.n	8007c96 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007c8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 fc14 	bl	80094bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c94:	e051      	b.n	8007d3a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d014      	beq.n	8007ccc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d105      	bne.n	8007cba <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d008      	beq.n	8007ccc <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d03a      	beq.n	8007d38 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
    }
    return;
 8007cca:	e035      	b.n	8007d38 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d009      	beq.n	8007cec <HAL_UART_IRQHandler+0x5f4>
 8007cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fe99 	bl	8008a1c <UART_EndTransmit_IT>
    return;
 8007cea:	e026      	b.n	8007d3a <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d009      	beq.n	8007d0c <HAL_UART_IRQHandler+0x614>
 8007cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cfc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f001 fbed 	bl	80094e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d0a:	e016      	b.n	8007d3a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d010      	beq.n	8007d3a <HAL_UART_IRQHandler+0x642>
 8007d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	da0c      	bge.n	8007d3a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 fbd5 	bl	80094d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d26:	e008      	b.n	8007d3a <HAL_UART_IRQHandler+0x642>
      return;
 8007d28:	bf00      	nop
 8007d2a:	e006      	b.n	8007d3a <HAL_UART_IRQHandler+0x642>
    return;
 8007d2c:	bf00      	nop
 8007d2e:	e004      	b.n	8007d3a <HAL_UART_IRQHandler+0x642>
      return;
 8007d30:	bf00      	nop
 8007d32:	e002      	b.n	8007d3a <HAL_UART_IRQHandler+0x642>
      return;
 8007d34:	bf00      	nop
 8007d36:	e000      	b.n	8007d3a <HAL_UART_IRQHandler+0x642>
    return;
 8007d38:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d3a:	37e8      	adds	r7, #232	@ 0xe8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d84:	b08c      	sub	sp, #48	@ 0x30
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	4baa      	ldr	r3, [pc, #680]	@ (8008058 <UART_SetConfig+0x2d8>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	6812      	ldr	r2, [r2, #0]
 8007db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007db8:	430b      	orrs	r3, r1
 8007dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a9f      	ldr	r2, [pc, #636]	@ (800805c <UART_SetConfig+0x2dc>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d004      	beq.n	8007dec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007de8:	4313      	orrs	r3, r2
 8007dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007df6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	6812      	ldr	r2, [r2, #0]
 8007dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e00:	430b      	orrs	r3, r1
 8007e02:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0a:	f023 010f 	bic.w	r1, r3, #15
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a90      	ldr	r2, [pc, #576]	@ (8008060 <UART_SetConfig+0x2e0>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d125      	bne.n	8007e70 <UART_SetConfig+0xf0>
 8007e24:	4b8f      	ldr	r3, [pc, #572]	@ (8008064 <UART_SetConfig+0x2e4>)
 8007e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e2a:	f003 0303 	and.w	r3, r3, #3
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d81a      	bhi.n	8007e68 <UART_SetConfig+0xe8>
 8007e32:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <UART_SetConfig+0xb8>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e49 	.word	0x08007e49
 8007e3c:	08007e59 	.word	0x08007e59
 8007e40:	08007e51 	.word	0x08007e51
 8007e44:	08007e61 	.word	0x08007e61
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e4e:	e116      	b.n	800807e <UART_SetConfig+0x2fe>
 8007e50:	2302      	movs	r3, #2
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e56:	e112      	b.n	800807e <UART_SetConfig+0x2fe>
 8007e58:	2304      	movs	r3, #4
 8007e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e5e:	e10e      	b.n	800807e <UART_SetConfig+0x2fe>
 8007e60:	2308      	movs	r3, #8
 8007e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e66:	e10a      	b.n	800807e <UART_SetConfig+0x2fe>
 8007e68:	2310      	movs	r3, #16
 8007e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e6e:	e106      	b.n	800807e <UART_SetConfig+0x2fe>
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a7c      	ldr	r2, [pc, #496]	@ (8008068 <UART_SetConfig+0x2e8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d138      	bne.n	8007eec <UART_SetConfig+0x16c>
 8007e7a:	4b7a      	ldr	r3, [pc, #488]	@ (8008064 <UART_SetConfig+0x2e4>)
 8007e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e80:	f003 030c 	and.w	r3, r3, #12
 8007e84:	2b0c      	cmp	r3, #12
 8007e86:	d82d      	bhi.n	8007ee4 <UART_SetConfig+0x164>
 8007e88:	a201      	add	r2, pc, #4	@ (adr r2, 8007e90 <UART_SetConfig+0x110>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ec5 	.word	0x08007ec5
 8007e94:	08007ee5 	.word	0x08007ee5
 8007e98:	08007ee5 	.word	0x08007ee5
 8007e9c:	08007ee5 	.word	0x08007ee5
 8007ea0:	08007ed5 	.word	0x08007ed5
 8007ea4:	08007ee5 	.word	0x08007ee5
 8007ea8:	08007ee5 	.word	0x08007ee5
 8007eac:	08007ee5 	.word	0x08007ee5
 8007eb0:	08007ecd 	.word	0x08007ecd
 8007eb4:	08007ee5 	.word	0x08007ee5
 8007eb8:	08007ee5 	.word	0x08007ee5
 8007ebc:	08007ee5 	.word	0x08007ee5
 8007ec0:	08007edd 	.word	0x08007edd
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eca:	e0d8      	b.n	800807e <UART_SetConfig+0x2fe>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed2:	e0d4      	b.n	800807e <UART_SetConfig+0x2fe>
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eda:	e0d0      	b.n	800807e <UART_SetConfig+0x2fe>
 8007edc:	2308      	movs	r3, #8
 8007ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ee2:	e0cc      	b.n	800807e <UART_SetConfig+0x2fe>
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eea:	e0c8      	b.n	800807e <UART_SetConfig+0x2fe>
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a5e      	ldr	r2, [pc, #376]	@ (800806c <UART_SetConfig+0x2ec>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d125      	bne.n	8007f42 <UART_SetConfig+0x1c2>
 8007ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8008064 <UART_SetConfig+0x2e4>)
 8007ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f00:	2b30      	cmp	r3, #48	@ 0x30
 8007f02:	d016      	beq.n	8007f32 <UART_SetConfig+0x1b2>
 8007f04:	2b30      	cmp	r3, #48	@ 0x30
 8007f06:	d818      	bhi.n	8007f3a <UART_SetConfig+0x1ba>
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d00a      	beq.n	8007f22 <UART_SetConfig+0x1a2>
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d814      	bhi.n	8007f3a <UART_SetConfig+0x1ba>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <UART_SetConfig+0x19a>
 8007f14:	2b10      	cmp	r3, #16
 8007f16:	d008      	beq.n	8007f2a <UART_SetConfig+0x1aa>
 8007f18:	e00f      	b.n	8007f3a <UART_SetConfig+0x1ba>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f20:	e0ad      	b.n	800807e <UART_SetConfig+0x2fe>
 8007f22:	2302      	movs	r3, #2
 8007f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f28:	e0a9      	b.n	800807e <UART_SetConfig+0x2fe>
 8007f2a:	2304      	movs	r3, #4
 8007f2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f30:	e0a5      	b.n	800807e <UART_SetConfig+0x2fe>
 8007f32:	2308      	movs	r3, #8
 8007f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f38:	e0a1      	b.n	800807e <UART_SetConfig+0x2fe>
 8007f3a:	2310      	movs	r3, #16
 8007f3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f40:	e09d      	b.n	800807e <UART_SetConfig+0x2fe>
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a4a      	ldr	r2, [pc, #296]	@ (8008070 <UART_SetConfig+0x2f0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d125      	bne.n	8007f98 <UART_SetConfig+0x218>
 8007f4c:	4b45      	ldr	r3, [pc, #276]	@ (8008064 <UART_SetConfig+0x2e4>)
 8007f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f56:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f58:	d016      	beq.n	8007f88 <UART_SetConfig+0x208>
 8007f5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f5c:	d818      	bhi.n	8007f90 <UART_SetConfig+0x210>
 8007f5e:	2b80      	cmp	r3, #128	@ 0x80
 8007f60:	d00a      	beq.n	8007f78 <UART_SetConfig+0x1f8>
 8007f62:	2b80      	cmp	r3, #128	@ 0x80
 8007f64:	d814      	bhi.n	8007f90 <UART_SetConfig+0x210>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d002      	beq.n	8007f70 <UART_SetConfig+0x1f0>
 8007f6a:	2b40      	cmp	r3, #64	@ 0x40
 8007f6c:	d008      	beq.n	8007f80 <UART_SetConfig+0x200>
 8007f6e:	e00f      	b.n	8007f90 <UART_SetConfig+0x210>
 8007f70:	2300      	movs	r3, #0
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f76:	e082      	b.n	800807e <UART_SetConfig+0x2fe>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7e:	e07e      	b.n	800807e <UART_SetConfig+0x2fe>
 8007f80:	2304      	movs	r3, #4
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f86:	e07a      	b.n	800807e <UART_SetConfig+0x2fe>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8e:	e076      	b.n	800807e <UART_SetConfig+0x2fe>
 8007f90:	2310      	movs	r3, #16
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f96:	e072      	b.n	800807e <UART_SetConfig+0x2fe>
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a35      	ldr	r2, [pc, #212]	@ (8008074 <UART_SetConfig+0x2f4>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d12a      	bne.n	8007ff8 <UART_SetConfig+0x278>
 8007fa2:	4b30      	ldr	r3, [pc, #192]	@ (8008064 <UART_SetConfig+0x2e4>)
 8007fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fb0:	d01a      	beq.n	8007fe8 <UART_SetConfig+0x268>
 8007fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fb6:	d81b      	bhi.n	8007ff0 <UART_SetConfig+0x270>
 8007fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fbc:	d00c      	beq.n	8007fd8 <UART_SetConfig+0x258>
 8007fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fc2:	d815      	bhi.n	8007ff0 <UART_SetConfig+0x270>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <UART_SetConfig+0x250>
 8007fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fcc:	d008      	beq.n	8007fe0 <UART_SetConfig+0x260>
 8007fce:	e00f      	b.n	8007ff0 <UART_SetConfig+0x270>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd6:	e052      	b.n	800807e <UART_SetConfig+0x2fe>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fde:	e04e      	b.n	800807e <UART_SetConfig+0x2fe>
 8007fe0:	2304      	movs	r3, #4
 8007fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe6:	e04a      	b.n	800807e <UART_SetConfig+0x2fe>
 8007fe8:	2308      	movs	r3, #8
 8007fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fee:	e046      	b.n	800807e <UART_SetConfig+0x2fe>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff6:	e042      	b.n	800807e <UART_SetConfig+0x2fe>
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a17      	ldr	r2, [pc, #92]	@ (800805c <UART_SetConfig+0x2dc>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d13a      	bne.n	8008078 <UART_SetConfig+0x2f8>
 8008002:	4b18      	ldr	r3, [pc, #96]	@ (8008064 <UART_SetConfig+0x2e4>)
 8008004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008008:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800800c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008010:	d01a      	beq.n	8008048 <UART_SetConfig+0x2c8>
 8008012:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008016:	d81b      	bhi.n	8008050 <UART_SetConfig+0x2d0>
 8008018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800801c:	d00c      	beq.n	8008038 <UART_SetConfig+0x2b8>
 800801e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008022:	d815      	bhi.n	8008050 <UART_SetConfig+0x2d0>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <UART_SetConfig+0x2b0>
 8008028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800802c:	d008      	beq.n	8008040 <UART_SetConfig+0x2c0>
 800802e:	e00f      	b.n	8008050 <UART_SetConfig+0x2d0>
 8008030:	2300      	movs	r3, #0
 8008032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008036:	e022      	b.n	800807e <UART_SetConfig+0x2fe>
 8008038:	2302      	movs	r3, #2
 800803a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800803e:	e01e      	b.n	800807e <UART_SetConfig+0x2fe>
 8008040:	2304      	movs	r3, #4
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008046:	e01a      	b.n	800807e <UART_SetConfig+0x2fe>
 8008048:	2308      	movs	r3, #8
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800804e:	e016      	b.n	800807e <UART_SetConfig+0x2fe>
 8008050:	2310      	movs	r3, #16
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008056:	e012      	b.n	800807e <UART_SetConfig+0x2fe>
 8008058:	cfff69f3 	.word	0xcfff69f3
 800805c:	40008000 	.word	0x40008000
 8008060:	40013800 	.word	0x40013800
 8008064:	40021000 	.word	0x40021000
 8008068:	40004400 	.word	0x40004400
 800806c:	40004800 	.word	0x40004800
 8008070:	40004c00 	.word	0x40004c00
 8008074:	40005000 	.word	0x40005000
 8008078:	2310      	movs	r3, #16
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4aae      	ldr	r2, [pc, #696]	@ (800833c <UART_SetConfig+0x5bc>)
 8008084:	4293      	cmp	r3, r2
 8008086:	f040 8097 	bne.w	80081b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800808a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800808e:	2b08      	cmp	r3, #8
 8008090:	d823      	bhi.n	80080da <UART_SetConfig+0x35a>
 8008092:	a201      	add	r2, pc, #4	@ (adr r2, 8008098 <UART_SetConfig+0x318>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080bd 	.word	0x080080bd
 800809c:	080080db 	.word	0x080080db
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	080080db 	.word	0x080080db
 80080a8:	080080cb 	.word	0x080080cb
 80080ac:	080080db 	.word	0x080080db
 80080b0:	080080db 	.word	0x080080db
 80080b4:	080080db 	.word	0x080080db
 80080b8:	080080d3 	.word	0x080080d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080bc:	f7fd ff7e 	bl	8005fbc <HAL_RCC_GetPCLK1Freq>
 80080c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080c2:	e010      	b.n	80080e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080c4:	4b9e      	ldr	r3, [pc, #632]	@ (8008340 <UART_SetConfig+0x5c0>)
 80080c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080c8:	e00d      	b.n	80080e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080ca:	f7fd fedf 	bl	8005e8c <HAL_RCC_GetSysClockFreq>
 80080ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080d0:	e009      	b.n	80080e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080d8:	e005      	b.n	80080e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80080da:	2300      	movs	r3, #0
 80080dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 8130 	beq.w	800834e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f2:	4a94      	ldr	r2, [pc, #592]	@ (8008344 <UART_SetConfig+0x5c4>)
 80080f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080f8:	461a      	mov	r2, r3
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008100:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4613      	mov	r3, r2
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	4413      	add	r3, r2
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	429a      	cmp	r2, r3
 8008110:	d305      	bcc.n	800811e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	429a      	cmp	r2, r3
 800811c:	d903      	bls.n	8008126 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008124:	e113      	b.n	800834e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	2200      	movs	r2, #0
 800812a:	60bb      	str	r3, [r7, #8]
 800812c:	60fa      	str	r2, [r7, #12]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008132:	4a84      	ldr	r2, [pc, #528]	@ (8008344 <UART_SetConfig+0x5c4>)
 8008134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008138:	b29b      	uxth	r3, r3
 800813a:	2200      	movs	r2, #0
 800813c:	603b      	str	r3, [r7, #0]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008144:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008148:	f7f8 f858 	bl	80001fc <__aeabi_uldivmod>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4610      	mov	r0, r2
 8008152:	4619      	mov	r1, r3
 8008154:	f04f 0200 	mov.w	r2, #0
 8008158:	f04f 0300 	mov.w	r3, #0
 800815c:	020b      	lsls	r3, r1, #8
 800815e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008162:	0202      	lsls	r2, r0, #8
 8008164:	6979      	ldr	r1, [r7, #20]
 8008166:	6849      	ldr	r1, [r1, #4]
 8008168:	0849      	lsrs	r1, r1, #1
 800816a:	2000      	movs	r0, #0
 800816c:	460c      	mov	r4, r1
 800816e:	4605      	mov	r5, r0
 8008170:	eb12 0804 	adds.w	r8, r2, r4
 8008174:	eb43 0905 	adc.w	r9, r3, r5
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	469a      	mov	sl, r3
 8008180:	4693      	mov	fp, r2
 8008182:	4652      	mov	r2, sl
 8008184:	465b      	mov	r3, fp
 8008186:	4640      	mov	r0, r8
 8008188:	4649      	mov	r1, r9
 800818a:	f7f8 f837 	bl	80001fc <__aeabi_uldivmod>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	4613      	mov	r3, r2
 8008194:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800819c:	d308      	bcc.n	80081b0 <UART_SetConfig+0x430>
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081a4:	d204      	bcs.n	80081b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6a3a      	ldr	r2, [r7, #32]
 80081ac:	60da      	str	r2, [r3, #12]
 80081ae:	e0ce      	b.n	800834e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081b6:	e0ca      	b.n	800834e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081c0:	d166      	bne.n	8008290 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80081c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081c6:	2b08      	cmp	r3, #8
 80081c8:	d827      	bhi.n	800821a <UART_SetConfig+0x49a>
 80081ca:	a201      	add	r2, pc, #4	@ (adr r2, 80081d0 <UART_SetConfig+0x450>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	080081f5 	.word	0x080081f5
 80081d4:	080081fd 	.word	0x080081fd
 80081d8:	08008205 	.word	0x08008205
 80081dc:	0800821b 	.word	0x0800821b
 80081e0:	0800820b 	.word	0x0800820b
 80081e4:	0800821b 	.word	0x0800821b
 80081e8:	0800821b 	.word	0x0800821b
 80081ec:	0800821b 	.word	0x0800821b
 80081f0:	08008213 	.word	0x08008213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f4:	f7fd fee2 	bl	8005fbc <HAL_RCC_GetPCLK1Freq>
 80081f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081fa:	e014      	b.n	8008226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081fc:	f7fd fef4 	bl	8005fe8 <HAL_RCC_GetPCLK2Freq>
 8008200:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008202:	e010      	b.n	8008226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008204:	4b4e      	ldr	r3, [pc, #312]	@ (8008340 <UART_SetConfig+0x5c0>)
 8008206:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008208:	e00d      	b.n	8008226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800820a:	f7fd fe3f 	bl	8005e8c <HAL_RCC_GetSysClockFreq>
 800820e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008210:	e009      	b.n	8008226 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008218:	e005      	b.n	8008226 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8090 	beq.w	800834e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008232:	4a44      	ldr	r2, [pc, #272]	@ (8008344 <UART_SetConfig+0x5c4>)
 8008234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008238:	461a      	mov	r2, r3
 800823a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008240:	005a      	lsls	r2, r3, #1
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	441a      	add	r2, r3
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008252:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	2b0f      	cmp	r3, #15
 8008258:	d916      	bls.n	8008288 <UART_SetConfig+0x508>
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008260:	d212      	bcs.n	8008288 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f023 030f 	bic.w	r3, r3, #15
 800826a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	085b      	lsrs	r3, r3, #1
 8008270:	b29b      	uxth	r3, r3
 8008272:	f003 0307 	and.w	r3, r3, #7
 8008276:	b29a      	uxth	r2, r3
 8008278:	8bfb      	ldrh	r3, [r7, #30]
 800827a:	4313      	orrs	r3, r2
 800827c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	8bfa      	ldrh	r2, [r7, #30]
 8008284:	60da      	str	r2, [r3, #12]
 8008286:	e062      	b.n	800834e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800828e:	e05e      	b.n	800834e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008290:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008294:	2b08      	cmp	r3, #8
 8008296:	d828      	bhi.n	80082ea <UART_SetConfig+0x56a>
 8008298:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <UART_SetConfig+0x520>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	080082c5 	.word	0x080082c5
 80082a4:	080082cd 	.word	0x080082cd
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	080082eb 	.word	0x080082eb
 80082b0:	080082db 	.word	0x080082db
 80082b4:	080082eb 	.word	0x080082eb
 80082b8:	080082eb 	.word	0x080082eb
 80082bc:	080082eb 	.word	0x080082eb
 80082c0:	080082e3 	.word	0x080082e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082c4:	f7fd fe7a 	bl	8005fbc <HAL_RCC_GetPCLK1Freq>
 80082c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082ca:	e014      	b.n	80082f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082cc:	f7fd fe8c 	bl	8005fe8 <HAL_RCC_GetPCLK2Freq>
 80082d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082d2:	e010      	b.n	80082f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008340 <UART_SetConfig+0x5c0>)
 80082d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082d8:	e00d      	b.n	80082f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082da:	f7fd fdd7 	bl	8005e8c <HAL_RCC_GetSysClockFreq>
 80082de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082e0:	e009      	b.n	80082f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082e8:	e005      	b.n	80082f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082f4:	bf00      	nop
    }

    if (pclk != 0U)
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d028      	beq.n	800834e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008300:	4a10      	ldr	r2, [pc, #64]	@ (8008344 <UART_SetConfig+0x5c4>)
 8008302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008306:	461a      	mov	r2, r3
 8008308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830a:	fbb3 f2f2 	udiv	r2, r3, r2
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	085b      	lsrs	r3, r3, #1
 8008314:	441a      	add	r2, r3
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	fbb2 f3f3 	udiv	r3, r2, r3
 800831e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	2b0f      	cmp	r3, #15
 8008324:	d910      	bls.n	8008348 <UART_SetConfig+0x5c8>
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800832c:	d20c      	bcs.n	8008348 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	b29a      	uxth	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60da      	str	r2, [r3, #12]
 8008338:	e009      	b.n	800834e <UART_SetConfig+0x5ce>
 800833a:	bf00      	nop
 800833c:	40008000 	.word	0x40008000
 8008340:	00f42400 	.word	0x00f42400
 8008344:	0800d988 	.word	0x0800d988
      }
      else
      {
        ret = HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2201      	movs	r2, #1
 8008352:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2201      	movs	r2, #1
 800835a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2200      	movs	r2, #0
 8008362:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2200      	movs	r2, #0
 8008368:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800836a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800836e:	4618      	mov	r0, r3
 8008370:	3730      	adds	r7, #48	@ 0x30
 8008372:	46bd      	mov	sp, r7
 8008374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008384:	f003 0308 	and.w	r3, r3, #8
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840c:	f003 0310 	and.w	r3, r3, #16
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00a      	beq.n	800842a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008454:	2b00      	cmp	r3, #0
 8008456:	d01a      	beq.n	800848e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008476:	d10a      	bne.n	800848e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	430a      	orrs	r2, r1
 80084ae:	605a      	str	r2, [r3, #4]
  }
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b098      	sub	sp, #96	@ 0x60
 80084c0:	af02      	add	r7, sp, #8
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084cc:	f7f9 fa90 	bl	80019f0 <HAL_GetTick>
 80084d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0308 	and.w	r3, r3, #8
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d12f      	bne.n	8008540 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084e8:	2200      	movs	r2, #0
 80084ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f88e 	bl	8008610 <UART_WaitOnFlagUntilTimeout>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d022      	beq.n	8008540 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008502:	e853 3f00 	ldrex	r3, [r3]
 8008506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800850e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
 8008516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008518:	647b      	str	r3, [r7, #68]	@ 0x44
 800851a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800851e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008520:	e841 2300 	strex	r3, r2, [r1]
 8008524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e6      	bne.n	80084fa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2220      	movs	r2, #32
 8008530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e063      	b.n	8008608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0304 	and.w	r3, r3, #4
 800854a:	2b04      	cmp	r3, #4
 800854c:	d149      	bne.n	80085e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800854e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008556:	2200      	movs	r2, #0
 8008558:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f857 	bl	8008610 <UART_WaitOnFlagUntilTimeout>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d03c      	beq.n	80085e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	623b      	str	r3, [r7, #32]
   return(result);
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800857c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008586:	633b      	str	r3, [r7, #48]	@ 0x30
 8008588:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800858c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e6      	bne.n	8008568 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f023 0301 	bic.w	r3, r3, #1
 80085b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3308      	adds	r3, #8
 80085b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ba:	61fa      	str	r2, [r7, #28]
 80085bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	69b9      	ldr	r1, [r7, #24]
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	617b      	str	r3, [r7, #20]
   return(result);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e5      	bne.n	800859a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e012      	b.n	8008608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2220      	movs	r2, #32
 80085e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2220      	movs	r2, #32
 80085ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3758      	adds	r7, #88	@ 0x58
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	4613      	mov	r3, r2
 800861e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008620:	e049      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008628:	d045      	beq.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800862a:	f7f9 f9e1 	bl	80019f0 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	429a      	cmp	r2, r3
 8008638:	d302      	bcc.n	8008640 <UART_WaitOnFlagUntilTimeout+0x30>
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e048      	b.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	d031      	beq.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b08      	cmp	r3, #8
 800865e:	d110      	bne.n	8008682 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2208      	movs	r2, #8
 8008666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 f95b 	bl	8008924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2208      	movs	r2, #8
 8008672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e029      	b.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800868c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008690:	d111      	bne.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800869a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 f941 	bl	8008924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e00f      	b.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69da      	ldr	r2, [r3, #28]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	4013      	ands	r3, r2
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	bf0c      	ite	eq
 80086c6:	2301      	moveq	r3, #1
 80086c8:	2300      	movne	r3, #0
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	461a      	mov	r2, r3
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d0a6      	beq.n	8008622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b0a3      	sub	sp, #140	@ 0x8c
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	88fa      	ldrh	r2, [r7, #6]
 80086f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	88fa      	ldrh	r2, [r7, #6]
 8008700:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008712:	d10e      	bne.n	8008732 <UART_Start_Receive_IT+0x52>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d105      	bne.n	8008728 <UART_Start_Receive_IT+0x48>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008722:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008726:	e02d      	b.n	8008784 <UART_Start_Receive_IT+0xa4>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	22ff      	movs	r2, #255	@ 0xff
 800872c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008730:	e028      	b.n	8008784 <UART_Start_Receive_IT+0xa4>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10d      	bne.n	8008756 <UART_Start_Receive_IT+0x76>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d104      	bne.n	800874c <UART_Start_Receive_IT+0x6c>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	22ff      	movs	r2, #255	@ 0xff
 8008746:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800874a:	e01b      	b.n	8008784 <UART_Start_Receive_IT+0xa4>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	227f      	movs	r2, #127	@ 0x7f
 8008750:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008754:	e016      	b.n	8008784 <UART_Start_Receive_IT+0xa4>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800875e:	d10d      	bne.n	800877c <UART_Start_Receive_IT+0x9c>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d104      	bne.n	8008772 <UART_Start_Receive_IT+0x92>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	227f      	movs	r2, #127	@ 0x7f
 800876c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008770:	e008      	b.n	8008784 <UART_Start_Receive_IT+0xa4>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	223f      	movs	r2, #63	@ 0x3f
 8008776:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800877a:	e003      	b.n	8008784 <UART_Start_Receive_IT+0xa4>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2222      	movs	r2, #34	@ 0x22
 8008790:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3308      	adds	r3, #8
 800879a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80087a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087a6:	f043 0301 	orr.w	r3, r3, #1
 80087aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3308      	adds	r3, #8
 80087b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80087b8:	673a      	str	r2, [r7, #112]	@ 0x70
 80087ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80087be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80087c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e3      	bne.n	8008794 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087d4:	d14f      	bne.n	8008876 <UART_Start_Receive_IT+0x196>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80087dc:	88fa      	ldrh	r2, [r7, #6]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d349      	bcc.n	8008876 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ea:	d107      	bne.n	80087fc <UART_Start_Receive_IT+0x11c>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d103      	bne.n	80087fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4a47      	ldr	r2, [pc, #284]	@ (8008914 <UART_Start_Receive_IT+0x234>)
 80087f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80087fa:	e002      	b.n	8008802 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4a46      	ldr	r2, [pc, #280]	@ (8008918 <UART_Start_Receive_IT+0x238>)
 8008800:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d01a      	beq.n	8008840 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008812:	e853 3f00 	ldrex	r3, [r3]
 8008816:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800881a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800881e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800882c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800882e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008832:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800883a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e4      	bne.n	800880a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3308      	adds	r3, #8
 8008846:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800884a:	e853 3f00 	ldrex	r3, [r3]
 800884e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008856:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3308      	adds	r3, #8
 800885e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008860:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008862:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800886e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e5      	bne.n	8008840 <UART_Start_Receive_IT+0x160>
 8008874:	e046      	b.n	8008904 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800887e:	d107      	bne.n	8008890 <UART_Start_Receive_IT+0x1b0>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d103      	bne.n	8008890 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4a24      	ldr	r2, [pc, #144]	@ (800891c <UART_Start_Receive_IT+0x23c>)
 800888c:	675a      	str	r2, [r3, #116]	@ 0x74
 800888e:	e002      	b.n	8008896 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4a23      	ldr	r2, [pc, #140]	@ (8008920 <UART_Start_Receive_IT+0x240>)
 8008894:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d019      	beq.n	80088d2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a6:	e853 3f00 	ldrex	r3, [r3]
 80088aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ae:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80088b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80088be:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088c4:	e841 2300 	strex	r3, r2, [r1]
 80088c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80088ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1e6      	bne.n	800889e <UART_Start_Receive_IT+0x1be>
 80088d0:	e018      	b.n	8008904 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	613b      	str	r3, [r7, #16]
   return(result);
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	f043 0320 	orr.w	r3, r3, #32
 80088e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088f0:	623b      	str	r3, [r7, #32]
 80088f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	69f9      	ldr	r1, [r7, #28]
 80088f6:	6a3a      	ldr	r2, [r7, #32]
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e6      	bne.n	80088d2 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	378c      	adds	r7, #140	@ 0x8c
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	08009151 	.word	0x08009151
 8008918:	08008ded 	.word	0x08008ded
 800891c:	08008c31 	.word	0x08008c31
 8008920:	08008a75 	.word	0x08008a75

08008924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008924:	b480      	push	{r7}
 8008926:	b095      	sub	sp, #84	@ 0x54
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008940:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800894a:	643b      	str	r3, [r7, #64]	@ 0x40
 800894c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008950:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e6      	bne.n	800892c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3308      	adds	r3, #8
 8008964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	61fb      	str	r3, [r7, #28]
   return(result);
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008974:	f023 0301 	bic.w	r3, r3, #1
 8008978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3308      	adds	r3, #8
 8008980:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008984:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e3      	bne.n	800895e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800899a:	2b01      	cmp	r3, #1
 800899c:	d118      	bne.n	80089d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f023 0310 	bic.w	r3, r3, #16
 80089b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089bc:	61bb      	str	r3, [r7, #24]
 80089be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6979      	ldr	r1, [r7, #20]
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e6      	bne.n	800899e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80089e4:	bf00      	nop
 80089e6:	3754      	adds	r7, #84	@ 0x54
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f7ff f9a0 	bl	8007d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a14:	bf00      	nop
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a38:	61fb      	str	r3, [r7, #28]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	61bb      	str	r3, [r7, #24]
 8008a44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6979      	ldr	r1, [r7, #20]
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e6      	bne.n	8008a24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff f96b 	bl	8007d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a6a:	bf00      	nop
 8008a6c:	3720      	adds	r7, #32
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b09c      	sub	sp, #112	@ 0x70
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a8c:	2b22      	cmp	r3, #34	@ 0x22
 8008a8e:	f040 80be 	bne.w	8008c0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008a98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008aa0:	b2d9      	uxtb	r1, r3
 8008aa2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aac:	400a      	ands	r2, r1
 8008aae:	b2d2      	uxtb	r2, r2
 8008ab0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f040 80a3 	bne.w	8008c22 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008afa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008afc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e6      	bne.n	8008adc <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3308      	adds	r3, #8
 8008b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b20:	f023 0301 	bic.w	r3, r3, #1
 8008b24:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008b2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e5      	bne.n	8008b0e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a34      	ldr	r2, [pc, #208]	@ (8008c2c <UART_RxISR_8BIT+0x1b8>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d01f      	beq.n	8008ba0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d018      	beq.n	8008ba0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b76:	e853 3f00 	ldrex	r3, [r3]
 8008b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b82:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b94:	e841 2300 	strex	r3, r2, [r1]
 8008b98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e6      	bne.n	8008b6e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d12e      	bne.n	8008c06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0310 	bic.w	r3, r3, #16
 8008bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bcc:	61fb      	str	r3, [r7, #28]
 8008bce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	69b9      	ldr	r1, [r7, #24]
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e6      	bne.n	8008bae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	f003 0310 	and.w	r3, r3, #16
 8008bea:	2b10      	cmp	r3, #16
 8008bec:	d103      	bne.n	8008bf6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2210      	movs	r2, #16
 8008bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff f8b2 	bl	8007d68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c04:	e00d      	b.n	8008c22 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7f8 f92c 	bl	8000e64 <HAL_UART_RxCpltCallback>
}
 8008c0c:	e009      	b.n	8008c22 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	8b1b      	ldrh	r3, [r3, #24]
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 0208 	orr.w	r2, r2, #8
 8008c1e:	b292      	uxth	r2, r2
 8008c20:	831a      	strh	r2, [r3, #24]
}
 8008c22:	bf00      	nop
 8008c24:	3770      	adds	r7, #112	@ 0x70
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	40008000 	.word	0x40008000

08008c30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b09c      	sub	sp, #112	@ 0x70
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c48:	2b22      	cmp	r3, #34	@ 0x22
 8008c4a:	f040 80be 	bne.w	8008dca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008c54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008c62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c66:	4013      	ands	r3, r2
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c72:	1c9a      	adds	r2, r3, #2
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	3b01      	subs	r3, #1
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f040 80a3 	bne.w	8008dde <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cac:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cb8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008cbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008cc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e6      	bne.n	8008c98 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cdc:	f023 0301 	bic.w	r3, r3, #1
 8008ce0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008cea:	643a      	str	r2, [r7, #64]	@ 0x40
 8008cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008cf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e5      	bne.n	8008cca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a34      	ldr	r2, [pc, #208]	@ (8008de8 <UART_RxISR_16BIT+0x1b8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d01f      	beq.n	8008d5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d018      	beq.n	8008d5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	461a      	mov	r2, r3
 8008d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d4a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e6      	bne.n	8008d2a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d12e      	bne.n	8008dc2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	e853 3f00 	ldrex	r3, [r3]
 8008d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f023 0310 	bic.w	r3, r3, #16
 8008d7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	461a      	mov	r2, r3
 8008d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d88:	61bb      	str	r3, [r7, #24]
 8008d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	6979      	ldr	r1, [r7, #20]
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	613b      	str	r3, [r7, #16]
   return(result);
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e6      	bne.n	8008d6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f003 0310 	and.w	r3, r3, #16
 8008da6:	2b10      	cmp	r3, #16
 8008da8:	d103      	bne.n	8008db2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2210      	movs	r2, #16
 8008db0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7fe ffd4 	bl	8007d68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dc0:	e00d      	b.n	8008dde <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7f8 f84e 	bl	8000e64 <HAL_UART_RxCpltCallback>
}
 8008dc8:	e009      	b.n	8008dde <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	8b1b      	ldrh	r3, [r3, #24]
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0208 	orr.w	r2, r2, #8
 8008dda:	b292      	uxth	r2, r2
 8008ddc:	831a      	strh	r2, [r3, #24]
}
 8008dde:	bf00      	nop
 8008de0:	3770      	adds	r7, #112	@ 0x70
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	40008000 	.word	0x40008000

08008dec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b0ac      	sub	sp, #176	@ 0xb0
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008dfa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e22:	2b22      	cmp	r3, #34	@ 0x22
 8008e24:	f040 8182 	bne.w	800912c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e2e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e32:	e125      	b.n	8009080 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008e3a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e3e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008e42:	b2d9      	uxtb	r1, r3
 8008e44:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e4e:	400a      	ands	r2, r1
 8008e50:	b2d2      	uxtb	r2, r2
 8008e52:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	3b01      	subs	r3, #1
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d053      	beq.n	8008f2e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d011      	beq.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00b      	beq.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eac:	f043 0201 	orr.w	r2, r3, #1
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d011      	beq.n	8008ee6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008edc:	f043 0204 	orr.w	r2, r3, #4
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eea:	f003 0304 	and.w	r3, r3, #4
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d011      	beq.n	8008f16 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2204      	movs	r2, #4
 8008f04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f0c:	f043 0202 	orr.w	r2, r3, #2
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d006      	beq.n	8008f2e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fe ff17 	bl	8007d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f040 80a2 	bne.w	8009080 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f60:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008f64:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008f6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1e4      	bne.n	8008f3c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3308      	adds	r3, #8
 8008f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008f82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f88:	f023 0301 	bic.w	r3, r3, #1
 8008f8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f9a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008f9c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008fa0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008fa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e1      	bne.n	8008f72 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a60      	ldr	r2, [pc, #384]	@ (8009148 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d021      	beq.n	8009010 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d01a      	beq.n	8009010 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fe2:	e853 3f00 	ldrex	r3, [r3]
 8008fe6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008fee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008ffc:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ffe:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009002:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009004:	e841 2300 	strex	r3, r2, [r1]
 8009008:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800900a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1e4      	bne.n	8008fda <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009014:	2b01      	cmp	r3, #1
 8009016:	d130      	bne.n	800907a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800902c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902e:	f023 0310 	bic.w	r3, r3, #16
 8009032:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009040:	643b      	str	r3, [r7, #64]	@ 0x40
 8009042:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009046:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009048:	e841 2300 	strex	r3, r2, [r1]
 800904c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800904e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e4      	bne.n	800901e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f003 0310 	and.w	r3, r3, #16
 800905e:	2b10      	cmp	r3, #16
 8009060:	d103      	bne.n	800906a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2210      	movs	r2, #16
 8009068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7fe fe78 	bl	8007d68 <HAL_UARTEx_RxEventCallback>
 8009078:	e002      	b.n	8009080 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7f7 fef2 	bl	8000e64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009080:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009084:	2b00      	cmp	r3, #0
 8009086:	d006      	beq.n	8009096 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800908c:	f003 0320 	and.w	r3, r3, #32
 8009090:	2b00      	cmp	r3, #0
 8009092:	f47f aecf 	bne.w	8008e34 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800909c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80090a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d04b      	beq.n	8009140 <UART_RxISR_8BIT_FIFOEN+0x354>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80090ae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d244      	bcs.n	8009140 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3308      	adds	r3, #8
 80090bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3308      	adds	r3, #8
 80090d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80090da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e3      	bne.n	80090b6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a16      	ldr	r2, [pc, #88]	@ (800914c <UART_RxISR_8BIT_FIFOEN+0x360>)
 80090f2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	60bb      	str	r3, [r7, #8]
   return(result);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f043 0320 	orr.w	r3, r3, #32
 8009108:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	461a      	mov	r2, r3
 8009112:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009116:	61bb      	str	r3, [r7, #24]
 8009118:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6979      	ldr	r1, [r7, #20]
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	613b      	str	r3, [r7, #16]
   return(result);
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e4      	bne.n	80090f4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800912a:	e009      	b.n	8009140 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	8b1b      	ldrh	r3, [r3, #24]
 8009132:	b29a      	uxth	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f042 0208 	orr.w	r2, r2, #8
 800913c:	b292      	uxth	r2, r2
 800913e:	831a      	strh	r2, [r3, #24]
}
 8009140:	bf00      	nop
 8009142:	37b0      	adds	r7, #176	@ 0xb0
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	40008000 	.word	0x40008000
 800914c:	08008a75 	.word	0x08008a75

08009150 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b0ae      	sub	sp, #184	@ 0xb8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800915e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009186:	2b22      	cmp	r3, #34	@ 0x22
 8009188:	f040 8186 	bne.w	8009498 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009192:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009196:	e129      	b.n	80093ec <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800919e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80091aa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80091ae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80091b2:	4013      	ands	r3, r2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c0:	1c9a      	adds	r2, r3, #2
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	3b01      	subs	r3, #1
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d053      	beq.n	8009296 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d011      	beq.n	800921e <UART_RxISR_16BIT_FIFOEN+0xce>
 80091fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00b      	beq.n	800921e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2201      	movs	r2, #1
 800920c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009214:	f043 0201 	orr.w	r2, r3, #1
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800921e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009222:	f003 0302 	and.w	r3, r3, #2
 8009226:	2b00      	cmp	r3, #0
 8009228:	d011      	beq.n	800924e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800922a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00b      	beq.n	800924e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2202      	movs	r2, #2
 800923c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009244:	f043 0204 	orr.w	r2, r3, #4
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800924e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009252:	f003 0304 	and.w	r3, r3, #4
 8009256:	2b00      	cmp	r3, #0
 8009258:	d011      	beq.n	800927e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800925a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2204      	movs	r2, #4
 800926c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009274:	f043 0202 	orr.w	r2, r3, #2
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009284:	2b00      	cmp	r3, #0
 8009286:	d006      	beq.n	8009296 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7fe fd63 	bl	8007d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800929c:	b29b      	uxth	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f040 80a4 	bne.w	80093ec <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092d2:	e841 2300 	strex	r3, r2, [r1]
 80092d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1e2      	bne.n	80092a4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3308      	adds	r3, #8
 80092e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092e8:	e853 3f00 	ldrex	r3, [r3]
 80092ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092f4:	f023 0301 	bic.w	r3, r3, #1
 80092f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3308      	adds	r3, #8
 8009302:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009306:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009308:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800930c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009314:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e1      	bne.n	80092de <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a60      	ldr	r2, [pc, #384]	@ (80094b4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d021      	beq.n	800937c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d01a      	beq.n	800937c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800934e:	e853 3f00 	ldrex	r3, [r3]
 8009352:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009356:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800935a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009368:	65bb      	str	r3, [r7, #88]	@ 0x58
 800936a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800936e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e4      	bne.n	8009346 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009380:	2b01      	cmp	r3, #1
 8009382:	d130      	bne.n	80093e6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800939a:	f023 0310 	bic.w	r3, r3, #16
 800939e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80093ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093b4:	e841 2300 	strex	r3, r2, [r1]
 80093b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1e4      	bne.n	800938a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f003 0310 	and.w	r3, r3, #16
 80093ca:	2b10      	cmp	r3, #16
 80093cc:	d103      	bne.n	80093d6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2210      	movs	r2, #16
 80093d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7fe fcc2 	bl	8007d68 <HAL_UARTEx_RxEventCallback>
 80093e4:	e002      	b.n	80093ec <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7f7 fd3c 	bl	8000e64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093ec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d006      	beq.n	8009402 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80093f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093f8:	f003 0320 	and.w	r3, r3, #32
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f47f aecb 	bne.w	8009198 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009408:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800940c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009410:	2b00      	cmp	r3, #0
 8009412:	d04b      	beq.n	80094ac <UART_RxISR_16BIT_FIFOEN+0x35c>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800941a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800941e:	429a      	cmp	r2, r3
 8009420:	d244      	bcs.n	80094ac <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3308      	adds	r3, #8
 8009428:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942c:	e853 3f00 	ldrex	r3, [r3]
 8009430:	623b      	str	r3, [r7, #32]
   return(result);
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3308      	adds	r3, #8
 8009442:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009446:	633a      	str	r2, [r7, #48]	@ 0x30
 8009448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800944c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e3      	bne.n	8009422 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a16      	ldr	r2, [pc, #88]	@ (80094b8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800945e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	e853 3f00 	ldrex	r3, [r3]
 800946c:	60fb      	str	r3, [r7, #12]
   return(result);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f043 0320 	orr.w	r3, r3, #32
 8009474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009482:	61fb      	str	r3, [r7, #28]
 8009484:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	69b9      	ldr	r1, [r7, #24]
 8009488:	69fa      	ldr	r2, [r7, #28]
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	617b      	str	r3, [r7, #20]
   return(result);
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e4      	bne.n	8009460 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009496:	e009      	b.n	80094ac <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	8b1b      	ldrh	r3, [r3, #24]
 800949e:	b29a      	uxth	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f042 0208 	orr.w	r2, r2, #8
 80094a8:	b292      	uxth	r2, r2
 80094aa:	831a      	strh	r2, [r3, #24]
}
 80094ac:	bf00      	nop
 80094ae:	37b8      	adds	r7, #184	@ 0xb8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	40008000 	.word	0x40008000
 80094b8:	08008c31 	.word	0x08008c31

080094bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009506:	2b01      	cmp	r3, #1
 8009508:	d101      	bne.n	800950e <HAL_UARTEx_DisableFifoMode+0x16>
 800950a:	2302      	movs	r3, #2
 800950c:	e027      	b.n	800955e <HAL_UARTEx_DisableFifoMode+0x66>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2224      	movs	r2, #36	@ 0x24
 800951a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f022 0201 	bic.w	r2, r2, #1
 8009534:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800953c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2220      	movs	r2, #32
 8009550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800957a:	2b01      	cmp	r3, #1
 800957c:	d101      	bne.n	8009582 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800957e:	2302      	movs	r3, #2
 8009580:	e02d      	b.n	80095de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2224      	movs	r2, #36	@ 0x24
 800958e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f022 0201 	bic.w	r2, r2, #1
 80095a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f850 	bl	8009664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2220      	movs	r2, #32
 80095d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b084      	sub	sp, #16
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d101      	bne.n	80095fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095fa:	2302      	movs	r3, #2
 80095fc:	e02d      	b.n	800965a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2224      	movs	r2, #36	@ 0x24
 800960a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0201 	bic.w	r2, r2, #1
 8009624:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f812 	bl	8009664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2220      	movs	r2, #32
 800964c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009670:	2b00      	cmp	r3, #0
 8009672:	d108      	bne.n	8009686 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009684:	e031      	b.n	80096ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009686:	2308      	movs	r3, #8
 8009688:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800968a:	2308      	movs	r3, #8
 800968c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	0e5b      	lsrs	r3, r3, #25
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	0f5b      	lsrs	r3, r3, #29
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	f003 0307 	and.w	r3, r3, #7
 80096ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	7b3a      	ldrb	r2, [r7, #12]
 80096b2:	4911      	ldr	r1, [pc, #68]	@ (80096f8 <UARTEx_SetNbDataToProcess+0x94>)
 80096b4:	5c8a      	ldrb	r2, [r1, r2]
 80096b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096ba:	7b3a      	ldrb	r2, [r7, #12]
 80096bc:	490f      	ldr	r1, [pc, #60]	@ (80096fc <UARTEx_SetNbDataToProcess+0x98>)
 80096be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	7b7a      	ldrb	r2, [r7, #13]
 80096d0:	4909      	ldr	r1, [pc, #36]	@ (80096f8 <UARTEx_SetNbDataToProcess+0x94>)
 80096d2:	5c8a      	ldrb	r2, [r1, r2]
 80096d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096d8:	7b7a      	ldrb	r2, [r7, #13]
 80096da:	4908      	ldr	r1, [pc, #32]	@ (80096fc <UARTEx_SetNbDataToProcess+0x98>)
 80096dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096de:	fb93 f3f2 	sdiv	r3, r3, r2
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096ea:	bf00      	nop
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	0800d9a0 	.word	0x0800d9a0
 80096fc:	0800d9a8 	.word	0x0800d9a8

08009700 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009700:	b084      	sub	sp, #16
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	f107 001c 	add.w	r0, r7, #28
 800970e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f001 fa1c 	bl	800ab5c <USB_CoreReset>
 8009724:	4603      	mov	r3, r0
 8009726:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	d106      	bne.n	800973c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009732:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	639a      	str	r2, [r3, #56]	@ 0x38
 800973a:	e005      	b.n	8009748 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009740:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8009748:	7bfb      	ldrb	r3, [r7, #15]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009754:	b004      	add	sp, #16
 8009756:	4770      	bx	lr

08009758 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	4613      	mov	r3, r2
 8009764:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d165      	bne.n	8009838 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	4a3e      	ldr	r2, [pc, #248]	@ (8009868 <USB_SetTurnaroundTime+0x110>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d906      	bls.n	8009782 <USB_SetTurnaroundTime+0x2a>
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	4a3d      	ldr	r2, [pc, #244]	@ (800986c <USB_SetTurnaroundTime+0x114>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d202      	bcs.n	8009782 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800977c:	230f      	movs	r3, #15
 800977e:	617b      	str	r3, [r7, #20]
 8009780:	e05c      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	4a39      	ldr	r2, [pc, #228]	@ (800986c <USB_SetTurnaroundTime+0x114>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d306      	bcc.n	8009798 <USB_SetTurnaroundTime+0x40>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	4a38      	ldr	r2, [pc, #224]	@ (8009870 <USB_SetTurnaroundTime+0x118>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d202      	bcs.n	8009798 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009792:	230e      	movs	r3, #14
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	e051      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	4a35      	ldr	r2, [pc, #212]	@ (8009870 <USB_SetTurnaroundTime+0x118>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d306      	bcc.n	80097ae <USB_SetTurnaroundTime+0x56>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4a34      	ldr	r2, [pc, #208]	@ (8009874 <USB_SetTurnaroundTime+0x11c>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d202      	bcs.n	80097ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80097a8:	230d      	movs	r3, #13
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	e046      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	4a30      	ldr	r2, [pc, #192]	@ (8009874 <USB_SetTurnaroundTime+0x11c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d306      	bcc.n	80097c4 <USB_SetTurnaroundTime+0x6c>
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	4a2f      	ldr	r2, [pc, #188]	@ (8009878 <USB_SetTurnaroundTime+0x120>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d802      	bhi.n	80097c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80097be:	230c      	movs	r3, #12
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	e03b      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	4a2c      	ldr	r2, [pc, #176]	@ (8009878 <USB_SetTurnaroundTime+0x120>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d906      	bls.n	80097da <USB_SetTurnaroundTime+0x82>
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	4a2b      	ldr	r2, [pc, #172]	@ (800987c <USB_SetTurnaroundTime+0x124>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d802      	bhi.n	80097da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80097d4:	230b      	movs	r3, #11
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	e030      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	4a27      	ldr	r2, [pc, #156]	@ (800987c <USB_SetTurnaroundTime+0x124>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d906      	bls.n	80097f0 <USB_SetTurnaroundTime+0x98>
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	4a26      	ldr	r2, [pc, #152]	@ (8009880 <USB_SetTurnaroundTime+0x128>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d802      	bhi.n	80097f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80097ea:	230a      	movs	r3, #10
 80097ec:	617b      	str	r3, [r7, #20]
 80097ee:	e025      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	4a23      	ldr	r2, [pc, #140]	@ (8009880 <USB_SetTurnaroundTime+0x128>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d906      	bls.n	8009806 <USB_SetTurnaroundTime+0xae>
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	4a22      	ldr	r2, [pc, #136]	@ (8009884 <USB_SetTurnaroundTime+0x12c>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d202      	bcs.n	8009806 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009800:	2309      	movs	r3, #9
 8009802:	617b      	str	r3, [r7, #20]
 8009804:	e01a      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	4a1e      	ldr	r2, [pc, #120]	@ (8009884 <USB_SetTurnaroundTime+0x12c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d306      	bcc.n	800981c <USB_SetTurnaroundTime+0xc4>
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	4a1d      	ldr	r2, [pc, #116]	@ (8009888 <USB_SetTurnaroundTime+0x130>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d802      	bhi.n	800981c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009816:	2308      	movs	r3, #8
 8009818:	617b      	str	r3, [r7, #20]
 800981a:	e00f      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	4a1a      	ldr	r2, [pc, #104]	@ (8009888 <USB_SetTurnaroundTime+0x130>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d906      	bls.n	8009832 <USB_SetTurnaroundTime+0xda>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	4a19      	ldr	r2, [pc, #100]	@ (800988c <USB_SetTurnaroundTime+0x134>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d202      	bcs.n	8009832 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800982c:	2307      	movs	r3, #7
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	e004      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009832:	2306      	movs	r3, #6
 8009834:	617b      	str	r3, [r7, #20]
 8009836:	e001      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009838:	2309      	movs	r3, #9
 800983a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	68da      	ldr	r2, [r3, #12]
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	029b      	lsls	r3, r3, #10
 8009850:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009854:	431a      	orrs	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	371c      	adds	r7, #28
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	00d8acbf 	.word	0x00d8acbf
 800986c:	00e4e1c0 	.word	0x00e4e1c0
 8009870:	00f42400 	.word	0x00f42400
 8009874:	01067380 	.word	0x01067380
 8009878:	011a499f 	.word	0x011a499f
 800987c:	01312cff 	.word	0x01312cff
 8009880:	014ca43f 	.word	0x014ca43f
 8009884:	016e3600 	.word	0x016e3600
 8009888:	01a6ab1f 	.word	0x01a6ab1f
 800988c:	01e84800 	.word	0x01e84800

08009890 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f043 0201 	orr.w	r2, r3, #1
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b083      	sub	sp, #12
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f023 0201 	bic.w	r2, r3, #1
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d115      	bne.n	8009922 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009902:	2001      	movs	r0, #1
 8009904:	f7f8 f880 	bl	8001a08 <HAL_Delay>
      ms++;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3301      	adds	r3, #1
 800990c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 f8ab 	bl	800aa6a <USB_GetMode>
 8009914:	4603      	mov	r3, r0
 8009916:	2b01      	cmp	r3, #1
 8009918:	d01e      	beq.n	8009958 <USB_SetCurrentMode+0x84>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b31      	cmp	r3, #49	@ 0x31
 800991e:	d9f0      	bls.n	8009902 <USB_SetCurrentMode+0x2e>
 8009920:	e01a      	b.n	8009958 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d115      	bne.n	8009954 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009934:	2001      	movs	r0, #1
 8009936:	f7f8 f867 	bl	8001a08 <HAL_Delay>
      ms++;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3301      	adds	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 f892 	bl	800aa6a <USB_GetMode>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d005      	beq.n	8009958 <USB_SetCurrentMode+0x84>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b31      	cmp	r3, #49	@ 0x31
 8009950:	d9f0      	bls.n	8009934 <USB_SetCurrentMode+0x60>
 8009952:	e001      	b.n	8009958 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e005      	b.n	8009964 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2b32      	cmp	r3, #50	@ 0x32
 800995c:	d101      	bne.n	8009962 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e000      	b.n	8009964 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800996c:	b084      	sub	sp, #16
 800996e:	b580      	push	{r7, lr}
 8009970:	b086      	sub	sp, #24
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800997a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009986:	2300      	movs	r3, #0
 8009988:	613b      	str	r3, [r7, #16]
 800998a:	e009      	b.n	80099a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	3340      	adds	r3, #64	@ 0x40
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	2200      	movs	r2, #0
 8009998:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3301      	adds	r3, #1
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2b0e      	cmp	r3, #14
 80099a4:	d9f2      	bls.n	800998c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80099a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11c      	bne.n	80099e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099ba:	f043 0302 	orr.w	r3, r3, #2
 80099be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	e005      	b.n	80099f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099f8:	461a      	mov	r2, r3
 80099fa:	2300      	movs	r3, #0
 80099fc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099fe:	2103      	movs	r1, #3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f959 	bl	8009cb8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a06:	2110      	movs	r1, #16
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f8f1 	bl	8009bf0 <USB_FlushTxFifo>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f91d 	bl	8009c58 <USB_FlushRxFifo>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a2e:	461a      	mov	r2, r3
 8009a30:	2300      	movs	r3, #0
 8009a32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a46:	461a      	mov	r2, r3
 8009a48:	2300      	movs	r3, #0
 8009a4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	613b      	str	r3, [r7, #16]
 8009a50:	e043      	b.n	8009ada <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a68:	d118      	bne.n	8009a9c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10a      	bne.n	8009a86 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	e013      	b.n	8009aae <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a92:	461a      	mov	r2, r3
 8009a94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a98:	6013      	str	r3, [r2, #0]
 8009a9a:	e008      	b.n	8009aae <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	2300      	movs	r3, #0
 8009aac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aba:	461a      	mov	r2, r3
 8009abc:	2300      	movs	r3, #0
 8009abe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009acc:	461a      	mov	r2, r3
 8009ace:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009ad2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	613b      	str	r3, [r7, #16]
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d3b7      	bcc.n	8009a52 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	613b      	str	r3, [r7, #16]
 8009ae6:	e043      	b.n	8009b70 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009afa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009afe:	d118      	bne.n	8009b32 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10a      	bne.n	8009b1c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b12:	461a      	mov	r2, r3
 8009b14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b18:	6013      	str	r3, [r2, #0]
 8009b1a:	e013      	b.n	8009b44 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b28:	461a      	mov	r2, r3
 8009b2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	e008      	b.n	8009b44 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b3e:	461a      	mov	r2, r3
 8009b40:	2300      	movs	r3, #0
 8009b42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b50:	461a      	mov	r2, r3
 8009b52:	2300      	movs	r3, #0
 8009b54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b62:	461a      	mov	r2, r3
 8009b64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	613b      	str	r3, [r7, #16]
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d3b7      	bcc.n	8009ae8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009b98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	f043 0210 	orr.w	r2, r3, #16
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	699a      	ldr	r2, [r3, #24]
 8009baa:	4b10      	ldr	r3, [pc, #64]	@ (8009bec <USB_DevInit+0x280>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	f043 0208 	orr.w	r2, r3, #8
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d107      	bne.n	8009bda <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009bd2:	f043 0304 	orr.w	r3, r3, #4
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009be6:	b004      	add	sp, #16
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	803c3800 	.word	0x803c3800

08009bf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4a13      	ldr	r2, [pc, #76]	@ (8009c54 <USB_FlushTxFifo+0x64>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d901      	bls.n	8009c10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e01b      	b.n	8009c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	daf2      	bge.n	8009bfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	019b      	lsls	r3, r3, #6
 8009c20:	f043 0220 	orr.w	r2, r3, #32
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4a08      	ldr	r2, [pc, #32]	@ (8009c54 <USB_FlushTxFifo+0x64>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d901      	bls.n	8009c3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e006      	b.n	8009c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	f003 0320 	and.w	r3, r3, #32
 8009c42:	2b20      	cmp	r3, #32
 8009c44:	d0f0      	beq.n	8009c28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	00030d40 	.word	0x00030d40

08009c58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3301      	adds	r3, #1
 8009c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4a11      	ldr	r2, [pc, #68]	@ (8009cb4 <USB_FlushRxFifo+0x5c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d901      	bls.n	8009c76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e018      	b.n	8009ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	daf2      	bge.n	8009c64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2210      	movs	r2, #16
 8009c86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4a08      	ldr	r2, [pc, #32]	@ (8009cb4 <USB_FlushRxFifo+0x5c>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d901      	bls.n	8009c9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e006      	b.n	8009ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	f003 0310 	and.w	r3, r3, #16
 8009ca2:	2b10      	cmp	r3, #16
 8009ca4:	d0f0      	beq.n	8009c88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	00030d40 	.word	0x00030d40

08009cb8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	68f9      	ldr	r1, [r7, #12]
 8009cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009cea:	b480      	push	{r7}
 8009cec:	b087      	sub	sp, #28
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	f003 0306 	and.w	r3, r3, #6
 8009d02:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d002      	beq.n	8009d10 <USB_GetDevSpeed+0x26>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b06      	cmp	r3, #6
 8009d0e:	d102      	bne.n	8009d16 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009d10:	2302      	movs	r3, #2
 8009d12:	75fb      	strb	r3, [r7, #23]
 8009d14:	e001      	b.n	8009d1a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009d16:	230f      	movs	r3, #15
 8009d18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	371c      	adds	r7, #28
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	785b      	ldrb	r3, [r3, #1]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d13a      	bne.n	8009dba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d4a:	69da      	ldr	r2, [r3, #28]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	f003 030f 	and.w	r3, r3, #15
 8009d54:	2101      	movs	r1, #1
 8009d56:	fa01 f303 	lsl.w	r3, r1, r3
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	68f9      	ldr	r1, [r7, #12]
 8009d5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d62:	4313      	orrs	r3, r2
 8009d64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d155      	bne.n	8009e28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	791b      	ldrb	r3, [r3, #4]
 8009d96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	059b      	lsls	r3, r3, #22
 8009d9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009da0:	4313      	orrs	r3, r2
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	0151      	lsls	r1, r2, #5
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	440a      	add	r2, r1
 8009daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	e036      	b.n	8009e28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dc0:	69da      	ldr	r2, [r3, #28]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 030f 	and.w	r3, r3, #15
 8009dca:	2101      	movs	r1, #1
 8009dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd0:	041b      	lsls	r3, r3, #16
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d11a      	bne.n	8009e28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	791b      	ldrb	r3, [r3, #4]
 8009e0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	4313      	orrs	r3, r2
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	0151      	lsls	r1, r2, #5
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	440a      	add	r2, r1
 8009e1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
	...

08009e38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d161      	bne.n	8009f18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e6a:	d11f      	bne.n	8009eac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	0151      	lsls	r1, r2, #5
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	440a      	add	r2, r1
 8009e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	0151      	lsls	r1, r2, #5
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	440a      	add	r2, r1
 8009ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ea6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	43db      	mvns	r3, r3
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ecc:	4013      	ands	r3, r2
 8009ece:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ed6:	69da      	ldr	r2, [r3, #28]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f003 030f 	and.w	r3, r3, #15
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	43db      	mvns	r3, r3
 8009eea:	68f9      	ldr	r1, [r7, #12]
 8009eec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	0159      	lsls	r1, r3, #5
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	440b      	add	r3, r1
 8009f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f0e:	4619      	mov	r1, r3
 8009f10:	4b35      	ldr	r3, [pc, #212]	@ (8009fe8 <USB_DeactivateEndpoint+0x1b0>)
 8009f12:	4013      	ands	r3, r2
 8009f14:	600b      	str	r3, [r1, #0]
 8009f16:	e060      	b.n	8009fda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f2e:	d11f      	bne.n	8009f70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	0151      	lsls	r1, r2, #5
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	440a      	add	r2, r1
 8009f46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	0151      	lsls	r1, r2, #5
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	440a      	add	r2, r1
 8009f66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	2101      	movs	r1, #1
 8009f82:	fa01 f303 	lsl.w	r3, r1, r3
 8009f86:	041b      	lsls	r3, r3, #16
 8009f88:	43db      	mvns	r3, r3
 8009f8a:	68f9      	ldr	r1, [r7, #12]
 8009f8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f90:	4013      	ands	r3, r2
 8009f92:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f9a:	69da      	ldr	r2, [r3, #28]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	f003 030f 	and.w	r3, r3, #15
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8009faa:	041b      	lsls	r3, r3, #16
 8009fac:	43db      	mvns	r3, r3
 8009fae:	68f9      	ldr	r1, [r7, #12]
 8009fb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	015a      	lsls	r2, r3, #5
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	0159      	lsls	r1, r3, #5
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	440b      	add	r3, r1
 8009fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4b05      	ldr	r3, [pc, #20]	@ (8009fec <USB_DeactivateEndpoint+0x1b4>)
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	ec337800 	.word	0xec337800
 8009fec:	eff37800 	.word	0xeff37800

08009ff0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	785b      	ldrb	r3, [r3, #1]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	f040 8128 	bne.w	800a25e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d132      	bne.n	800a07c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a030:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a034:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	0151      	lsls	r1, r2, #5
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	440a      	add	r2, r1
 800a050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a054:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a058:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	015a      	lsls	r2, r3, #5
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	4413      	add	r3, r2
 800a062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	0151      	lsls	r1, r2, #5
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	440a      	add	r2, r1
 800a070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a074:	0cdb      	lsrs	r3, r3, #19
 800a076:	04db      	lsls	r3, r3, #19
 800a078:	6113      	str	r3, [r2, #16]
 800a07a:	e092      	b.n	800a1a2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	0151      	lsls	r1, r2, #5
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	440a      	add	r2, r1
 800a092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a096:	0cdb      	lsrs	r3, r3, #19
 800a098:	04db      	lsls	r3, r3, #19
 800a09a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	0151      	lsls	r1, r2, #5
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	440a      	add	r2, r1
 800a0b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a0ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a0be:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d11a      	bne.n	800a0fc <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d903      	bls.n	800a0da <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	0151      	lsls	r1, r2, #5
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	440a      	add	r2, r1
 800a0f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0f8:	6113      	str	r3, [r2, #16]
 800a0fa:	e01b      	b.n	800a134 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	015a      	lsls	r2, r3, #5
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	4413      	add	r3, r2
 800a104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a108:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	6919      	ldr	r1, [r3, #16]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	440b      	add	r3, r1
 800a114:	1e59      	subs	r1, r3, #1
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a11e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a120:	4b8d      	ldr	r3, [pc, #564]	@ (800a358 <USB_EPStartXfer+0x368>)
 800a122:	400b      	ands	r3, r1
 800a124:	6939      	ldr	r1, [r7, #16]
 800a126:	0148      	lsls	r0, r1, #5
 800a128:	6979      	ldr	r1, [r7, #20]
 800a12a:	4401      	add	r1, r0
 800a12c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a130:	4313      	orrs	r3, r2
 800a132:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a140:	691a      	ldr	r2, [r3, #16]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a14a:	6939      	ldr	r1, [r7, #16]
 800a14c:	0148      	lsls	r0, r1, #5
 800a14e:	6979      	ldr	r1, [r7, #20]
 800a150:	4401      	add	r1, r0
 800a152:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a156:	4313      	orrs	r3, r2
 800a158:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	791b      	ldrb	r3, [r3, #4]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d11f      	bne.n	800a1a2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	440a      	add	r2, r1
 800a178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a17c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a180:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	0151      	lsls	r1, r2, #5
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	440a      	add	r2, r1
 800a198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a19c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a1a0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	0151      	lsls	r1, r2, #5
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	440a      	add	r2, r1
 800a1b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a1c0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	791b      	ldrb	r3, [r3, #4]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d015      	beq.n	800a1f6 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 8139 	beq.w	800a446 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	f003 030f 	and.w	r3, r3, #15
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ea:	6979      	ldr	r1, [r7, #20]
 800a1ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	634b      	str	r3, [r1, #52]	@ 0x34
 800a1f4:	e127      	b.n	800a446 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a202:	2b00      	cmp	r3, #0
 800a204:	d110      	bne.n	800a228 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	0151      	lsls	r1, r2, #5
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	440a      	add	r2, r1
 800a21c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a220:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	e00f      	b.n	800a248 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	0151      	lsls	r1, r2, #5
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	440a      	add	r2, r1
 800a23e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a246:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	68d9      	ldr	r1, [r3, #12]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781a      	ldrb	r2, [r3, #0]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	b29b      	uxth	r3, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f9a6 	bl	800a5a8 <USB_WritePacket>
 800a25c:	e0f3      	b.n	800a446 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	0151      	lsls	r1, r2, #5
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	440a      	add	r2, r1
 800a274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a278:	0cdb      	lsrs	r3, r3, #19
 800a27a:	04db      	lsls	r3, r3, #19
 800a27c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	0151      	lsls	r1, r2, #5
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	440a      	add	r2, r1
 800a294:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a298:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a29c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a2a0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d12f      	bne.n	800a308 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d003      	beq.n	800a2b8 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	689a      	ldr	r2, [r3, #8]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2cc:	691a      	ldr	r2, [r3, #16]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2d6:	6939      	ldr	r1, [r7, #16]
 800a2d8:	0148      	lsls	r0, r1, #5
 800a2da:	6979      	ldr	r1, [r7, #20]
 800a2dc:	4401      	add	r1, r0
 800a2de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	015a      	lsls	r2, r3, #5
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	0151      	lsls	r1, r2, #5
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	440a      	add	r2, r1
 800a2fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a300:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a304:	6113      	str	r3, [r2, #16]
 800a306:	e061      	b.n	800a3cc <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d125      	bne.n	800a35c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a31c:	691a      	ldr	r2, [r3, #16]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a326:	6939      	ldr	r1, [r7, #16]
 800a328:	0148      	lsls	r0, r1, #5
 800a32a:	6979      	ldr	r1, [r7, #20]
 800a32c:	4401      	add	r1, r0
 800a32e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a332:	4313      	orrs	r3, r2
 800a334:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	0151      	lsls	r1, r2, #5
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	440a      	add	r2, r1
 800a34c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a350:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a354:	6113      	str	r3, [r2, #16]
 800a356:	e039      	b.n	800a3cc <USB_EPStartXfer+0x3dc>
 800a358:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	691a      	ldr	r2, [r3, #16]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	4413      	add	r3, r2
 800a366:	1e5a      	subs	r2, r3, #1
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a370:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	89fa      	ldrh	r2, [r7, #14]
 800a378:	fb03 f202 	mul.w	r2, r3, r2
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38c:	691a      	ldr	r2, [r3, #16]
 800a38e:	89fb      	ldrh	r3, [r7, #14]
 800a390:	04d9      	lsls	r1, r3, #19
 800a392:	4b2f      	ldr	r3, [pc, #188]	@ (800a450 <USB_EPStartXfer+0x460>)
 800a394:	400b      	ands	r3, r1
 800a396:	6939      	ldr	r1, [r7, #16]
 800a398:	0148      	lsls	r0, r1, #5
 800a39a:	6979      	ldr	r1, [r7, #20]
 800a39c:	4401      	add	r1, r0
 800a39e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	015a      	lsls	r2, r3, #5
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b2:	691a      	ldr	r2, [r3, #16]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3bc:	6939      	ldr	r1, [r7, #16]
 800a3be:	0148      	lsls	r0, r1, #5
 800a3c0:	6979      	ldr	r1, [r7, #20]
 800a3c2:	4401      	add	r1, r0
 800a3c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	791b      	ldrb	r3, [r3, #4]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d128      	bne.n	800a426 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d110      	bne.n	800a406 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	015a      	lsls	r2, r3, #5
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	0151      	lsls	r1, r2, #5
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	440a      	add	r2, r1
 800a3fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	e00f      	b.n	800a426 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	0151      	lsls	r1, r2, #5
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	440a      	add	r2, r1
 800a41c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a424:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	015a      	lsls	r2, r3, #5
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	4413      	add	r3, r2
 800a42e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	0151      	lsls	r1, r2, #5
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	440a      	add	r2, r1
 800a43c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a440:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a444:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	1ff80000 	.word	0x1ff80000

0800a454 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a45e:	2300      	movs	r3, #0
 800a460:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	785b      	ldrb	r3, [r3, #1]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d14a      	bne.n	800a508 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a486:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a48a:	f040 8086 	bne.w	800a59a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	7812      	ldrb	r2, [r2, #0]
 800a4a2:	0151      	lsls	r1, r2, #5
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	440a      	add	r2, r1
 800a4a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a4b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	7812      	ldrb	r2, [r2, #0]
 800a4c6:	0151      	lsls	r1, r2, #5
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	440a      	add	r2, r1
 800a4cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d902      	bls.n	800a4ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	75fb      	strb	r3, [r7, #23]
          break;
 800a4ea:	e056      	b.n	800a59a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a504:	d0e7      	beq.n	800a4d6 <USB_EPStopXfer+0x82>
 800a506:	e048      	b.n	800a59a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	015a      	lsls	r2, r3, #5
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	4413      	add	r3, r2
 800a512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a51c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a520:	d13b      	bne.n	800a59a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	7812      	ldrb	r2, [r2, #0]
 800a536:	0151      	lsls	r1, r2, #5
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	440a      	add	r2, r1
 800a53c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a540:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a544:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	7812      	ldrb	r2, [r2, #0]
 800a55a:	0151      	lsls	r1, r2, #5
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	440a      	add	r2, r1
 800a560:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a564:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a568:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3301      	adds	r3, #1
 800a56e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a576:	4293      	cmp	r3, r2
 800a578:	d902      	bls.n	800a580 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	75fb      	strb	r3, [r7, #23]
          break;
 800a57e:	e00c      	b.n	800a59a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a594:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a598:	d0e7      	beq.n	800a56a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	371c      	adds	r7, #28
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b089      	sub	sp, #36	@ 0x24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	71fb      	strb	r3, [r7, #7]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a5c6:	88bb      	ldrh	r3, [r7, #4]
 800a5c8:	3303      	adds	r3, #3
 800a5ca:	089b      	lsrs	r3, r3, #2
 800a5cc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	61bb      	str	r3, [r7, #24]
 800a5d2:	e018      	b.n	800a606 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	031a      	lsls	r2, r3, #12
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	3301      	adds	r3, #1
 800a604:	61bb      	str	r3, [r7, #24]
 800a606:	69ba      	ldr	r2, [r7, #24]
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d3e2      	bcc.n	800a5d4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3724      	adds	r7, #36	@ 0x24
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b08b      	sub	sp, #44	@ 0x2c
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	4613      	mov	r3, r2
 800a628:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a632:	88fb      	ldrh	r3, [r7, #6]
 800a634:	089b      	lsrs	r3, r3, #2
 800a636:	b29b      	uxth	r3, r3
 800a638:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a63a:	88fb      	ldrh	r3, [r7, #6]
 800a63c:	f003 0303 	and.w	r3, r3, #3
 800a640:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a642:	2300      	movs	r3, #0
 800a644:	623b      	str	r3, [r7, #32]
 800a646:	e014      	b.n	800a672 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a652:	601a      	str	r2, [r3, #0]
    pDest++;
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	3301      	adds	r3, #1
 800a658:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65c:	3301      	adds	r3, #1
 800a65e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	3301      	adds	r3, #1
 800a664:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a668:	3301      	adds	r3, #1
 800a66a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	3301      	adds	r3, #1
 800a670:	623b      	str	r3, [r7, #32]
 800a672:	6a3a      	ldr	r2, [r7, #32]
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	429a      	cmp	r2, r3
 800a678:	d3e6      	bcc.n	800a648 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a67a:	8bfb      	ldrh	r3, [r7, #30]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d01e      	beq.n	800a6be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a680:	2300      	movs	r3, #0
 800a682:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a68a:	461a      	mov	r2, r3
 800a68c:	f107 0310 	add.w	r3, r7, #16
 800a690:	6812      	ldr	r2, [r2, #0]
 800a692:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a4:	701a      	strb	r2, [r3, #0]
      i++;
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	623b      	str	r3, [r7, #32]
      pDest++;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a6b2:	8bfb      	ldrh	r3, [r7, #30]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a6b8:	8bfb      	ldrh	r3, [r7, #30]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1ea      	bne.n	800a694 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	372c      	adds	r7, #44	@ 0x2c
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	785b      	ldrb	r3, [r3, #1]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d12c      	bne.n	800a742 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	db12      	blt.n	800a720 <USB_EPSetStall+0x54>
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00f      	beq.n	800a720 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	0151      	lsls	r1, r2, #5
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	440a      	add	r2, r1
 800a716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a71a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a71e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	0151      	lsls	r1, r2, #5
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	440a      	add	r2, r1
 800a736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a73a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	e02b      	b.n	800a79a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	db12      	blt.n	800a77a <USB_EPSetStall+0xae>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00f      	beq.n	800a77a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	0151      	lsls	r1, r2, #5
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	440a      	add	r2, r1
 800a770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a774:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a778:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	4413      	add	r3, r2
 800a782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	0151      	lsls	r1, r2, #5
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	440a      	add	r2, r1
 800a790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a794:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a798:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3714      	adds	r7, #20
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d128      	bne.n	800a816 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	0151      	lsls	r1, r2, #5
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	440a      	add	r2, r1
 800a7da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	791b      	ldrb	r3, [r3, #4]
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d003      	beq.n	800a7f4 <USB_EPClearStall+0x4c>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	791b      	ldrb	r3, [r3, #4]
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d138      	bne.n	800a866 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	015a      	lsls	r2, r3, #5
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	0151      	lsls	r1, r2, #5
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	440a      	add	r2, r1
 800a80a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a80e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	e027      	b.n	800a866 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	0151      	lsls	r1, r2, #5
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	440a      	add	r2, r1
 800a82c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a830:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a834:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	791b      	ldrb	r3, [r3, #4]
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d003      	beq.n	800a846 <USB_EPClearStall+0x9e>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	791b      	ldrb	r3, [r3, #4]
 800a842:	2b02      	cmp	r3, #2
 800a844:	d10f      	bne.n	800a866 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	015a      	lsls	r2, r3, #5
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	4413      	add	r3, r2
 800a84e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	0151      	lsls	r1, r2, #5
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	440a      	add	r2, r1
 800a85c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a864:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a892:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a896:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	78fb      	ldrb	r3, [r7, #3]
 800a8a2:	011b      	lsls	r3, r3, #4
 800a8a4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a8a8:	68f9      	ldr	r1, [r7, #12]
 800a8aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8da:	f023 0303 	bic.w	r3, r3, #3
 800a8de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8ee:	f023 0302 	bic.w	r3, r3, #2
 800a8f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a902:	b480      	push	{r7}
 800a904:	b085      	sub	sp, #20
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a91c:	f023 0303 	bic.w	r3, r3, #3
 800a920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a930:	f043 0302 	orr.w	r3, r3, #2
 800a934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	4013      	ands	r3, r2
 800a95a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a95c:	68fb      	ldr	r3, [r7, #12]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a96a:	b480      	push	{r7}
 800a96c:	b085      	sub	sp, #20
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a986:	69db      	ldr	r3, [r3, #28]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	4013      	ands	r3, r2
 800a98c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	0c1b      	lsrs	r3, r3, #16
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b085      	sub	sp, #20
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	4013      	ands	r3, r2
 800a9c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	b29b      	uxth	r3, r3
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b085      	sub	sp, #20
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa00:	68bb      	ldr	r3, [r7, #8]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b087      	sub	sp, #28
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	460b      	mov	r3, r1
 800aa18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa32:	78fb      	ldrb	r3, [r7, #3]
 800aa34:	f003 030f 	and.w	r3, r3, #15
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa3e:	01db      	lsls	r3, r3, #7
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	4013      	ands	r3, r2
 800aa5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	371c      	adds	r7, #28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b083      	sub	sp, #12
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	f003 0301 	and.w	r3, r3, #1
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaa0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aaa4:	f023 0307 	bic.w	r3, r3, #7
 800aaa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aabc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	333c      	adds	r3, #60	@ 0x3c
 800aade:	3304      	adds	r3, #4
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	4a1c      	ldr	r2, [pc, #112]	@ (800ab58 <USB_EP0_OutStart+0x8c>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d90a      	bls.n	800ab02 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aaf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aafc:	d101      	bne.n	800ab02 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	e024      	b.n	800ab4c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab08:	461a      	mov	r2, r3
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab30:	f043 0318 	orr.w	r3, r3, #24
 800ab34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab44:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ab48:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	4f54300a 	.word	0x4f54300a

0800ab5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab64:	2300      	movs	r3, #0
 800ab66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4a13      	ldr	r2, [pc, #76]	@ (800abc0 <USB_CoreReset+0x64>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d901      	bls.n	800ab7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e01b      	b.n	800abb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	daf2      	bge.n	800ab68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab82:	2300      	movs	r3, #0
 800ab84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f043 0201 	orr.w	r2, r3, #1
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3301      	adds	r3, #1
 800ab96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	4a09      	ldr	r2, [pc, #36]	@ (800abc0 <USB_CoreReset+0x64>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d901      	bls.n	800aba4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e006      	b.n	800abb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	2b01      	cmp	r3, #1
 800abae:	d0f0      	beq.n	800ab92 <USB_CoreReset+0x36>

  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	00030d40 	.word	0x00030d40

0800abc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	460b      	mov	r3, r1
 800abce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abd0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800abd4:	f002 fe2c 	bl	800d830 <USBD_static_malloc>
 800abd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d109      	bne.n	800abf4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	32b0      	adds	r2, #176	@ 0xb0
 800abea:	2100      	movs	r1, #0
 800abec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800abf0:	2302      	movs	r3, #2
 800abf2:	e0d4      	b.n	800ad9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800abf4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800abf8:	2100      	movs	r1, #0
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f002 fe36 	bl	800d86c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	32b0      	adds	r2, #176	@ 0xb0
 800ac0a:	68f9      	ldr	r1, [r7, #12]
 800ac0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	32b0      	adds	r2, #176	@ 0xb0
 800ac1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7c1b      	ldrb	r3, [r3, #16]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d138      	bne.n	800ac9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac2c:	4b5e      	ldr	r3, [pc, #376]	@ (800ada8 <USBD_CDC_Init+0x1e4>)
 800ac2e:	7819      	ldrb	r1, [r3, #0]
 800ac30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac34:	2202      	movs	r2, #2
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f002 fbe6 	bl	800d408 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac3c:	4b5a      	ldr	r3, [pc, #360]	@ (800ada8 <USBD_CDC_Init+0x1e4>)
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	f003 020f 	and.w	r2, r3, #15
 800ac44:	6879      	ldr	r1, [r7, #4]
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	440b      	add	r3, r1
 800ac50:	3324      	adds	r3, #36	@ 0x24
 800ac52:	2201      	movs	r2, #1
 800ac54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac56:	4b55      	ldr	r3, [pc, #340]	@ (800adac <USBD_CDC_Init+0x1e8>)
 800ac58:	7819      	ldrb	r1, [r3, #0]
 800ac5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac5e:	2202      	movs	r2, #2
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f002 fbd1 	bl	800d408 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac66:	4b51      	ldr	r3, [pc, #324]	@ (800adac <USBD_CDC_Init+0x1e8>)
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	f003 020f 	and.w	r2, r3, #15
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	4613      	mov	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	440b      	add	r3, r1
 800ac7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac7e:	2201      	movs	r2, #1
 800ac80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac82:	4b4b      	ldr	r3, [pc, #300]	@ (800adb0 <USBD_CDC_Init+0x1ec>)
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	f003 020f 	and.w	r2, r3, #15
 800ac8a:	6879      	ldr	r1, [r7, #4]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4413      	add	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	440b      	add	r3, r1
 800ac96:	3326      	adds	r3, #38	@ 0x26
 800ac98:	2210      	movs	r2, #16
 800ac9a:	801a      	strh	r2, [r3, #0]
 800ac9c:	e035      	b.n	800ad0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac9e:	4b42      	ldr	r3, [pc, #264]	@ (800ada8 <USBD_CDC_Init+0x1e4>)
 800aca0:	7819      	ldrb	r1, [r3, #0]
 800aca2:	2340      	movs	r3, #64	@ 0x40
 800aca4:	2202      	movs	r2, #2
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f002 fbae 	bl	800d408 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800acac:	4b3e      	ldr	r3, [pc, #248]	@ (800ada8 <USBD_CDC_Init+0x1e4>)
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	f003 020f 	and.w	r2, r3, #15
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	440b      	add	r3, r1
 800acc0:	3324      	adds	r3, #36	@ 0x24
 800acc2:	2201      	movs	r2, #1
 800acc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acc6:	4b39      	ldr	r3, [pc, #228]	@ (800adac <USBD_CDC_Init+0x1e8>)
 800acc8:	7819      	ldrb	r1, [r3, #0]
 800acca:	2340      	movs	r3, #64	@ 0x40
 800accc:	2202      	movs	r2, #2
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f002 fb9a 	bl	800d408 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800acd4:	4b35      	ldr	r3, [pc, #212]	@ (800adac <USBD_CDC_Init+0x1e8>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	f003 020f 	and.w	r2, r3, #15
 800acdc:	6879      	ldr	r1, [r7, #4]
 800acde:	4613      	mov	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	440b      	add	r3, r1
 800ace8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800acec:	2201      	movs	r2, #1
 800acee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800acf0:	4b2f      	ldr	r3, [pc, #188]	@ (800adb0 <USBD_CDC_Init+0x1ec>)
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	f003 020f 	and.w	r2, r3, #15
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	4613      	mov	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	440b      	add	r3, r1
 800ad04:	3326      	adds	r3, #38	@ 0x26
 800ad06:	2210      	movs	r2, #16
 800ad08:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad0a:	4b29      	ldr	r3, [pc, #164]	@ (800adb0 <USBD_CDC_Init+0x1ec>)
 800ad0c:	7819      	ldrb	r1, [r3, #0]
 800ad0e:	2308      	movs	r3, #8
 800ad10:	2203      	movs	r2, #3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f002 fb78 	bl	800d408 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad18:	4b25      	ldr	r3, [pc, #148]	@ (800adb0 <USBD_CDC_Init+0x1ec>)
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	f003 020f 	and.w	r2, r3, #15
 800ad20:	6879      	ldr	r1, [r7, #4]
 800ad22:	4613      	mov	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	440b      	add	r3, r1
 800ad2c:	3324      	adds	r3, #36	@ 0x24
 800ad2e:	2201      	movs	r2, #1
 800ad30:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	33b0      	adds	r3, #176	@ 0xb0
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e018      	b.n	800ad9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	7c1b      	ldrb	r3, [r3, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10a      	bne.n	800ad8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad74:	4b0d      	ldr	r3, [pc, #52]	@ (800adac <USBD_CDC_Init+0x1e8>)
 800ad76:	7819      	ldrb	r1, [r3, #0]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f002 fcba 	bl	800d6fc <USBD_LL_PrepareReceive>
 800ad88:	e008      	b.n	800ad9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad8a:	4b08      	ldr	r3, [pc, #32]	@ (800adac <USBD_CDC_Init+0x1e8>)
 800ad8c:	7819      	ldrb	r1, [r3, #0]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad94:	2340      	movs	r3, #64	@ 0x40
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f002 fcb0 	bl	800d6fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20000093 	.word	0x20000093
 800adac:	20000094 	.word	0x20000094
 800adb0:	20000095 	.word	0x20000095

0800adb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800adc0:	4b3a      	ldr	r3, [pc, #232]	@ (800aeac <USBD_CDC_DeInit+0xf8>)
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f002 fb5c 	bl	800d484 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800adcc:	4b37      	ldr	r3, [pc, #220]	@ (800aeac <USBD_CDC_DeInit+0xf8>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	f003 020f 	and.w	r2, r3, #15
 800add4:	6879      	ldr	r1, [r7, #4]
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	440b      	add	r3, r1
 800ade0:	3324      	adds	r3, #36	@ 0x24
 800ade2:	2200      	movs	r2, #0
 800ade4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ade6:	4b32      	ldr	r3, [pc, #200]	@ (800aeb0 <USBD_CDC_DeInit+0xfc>)
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f002 fb49 	bl	800d484 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800adf2:	4b2f      	ldr	r3, [pc, #188]	@ (800aeb0 <USBD_CDC_DeInit+0xfc>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	f003 020f 	and.w	r2, r3, #15
 800adfa:	6879      	ldr	r1, [r7, #4]
 800adfc:	4613      	mov	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	440b      	add	r3, r1
 800ae06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae0e:	4b29      	ldr	r3, [pc, #164]	@ (800aeb4 <USBD_CDC_DeInit+0x100>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f002 fb35 	bl	800d484 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae1a:	4b26      	ldr	r3, [pc, #152]	@ (800aeb4 <USBD_CDC_DeInit+0x100>)
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	f003 020f 	and.w	r2, r3, #15
 800ae22:	6879      	ldr	r1, [r7, #4]
 800ae24:	4613      	mov	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4413      	add	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	440b      	add	r3, r1
 800ae2e:	3324      	adds	r3, #36	@ 0x24
 800ae30:	2200      	movs	r2, #0
 800ae32:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae34:	4b1f      	ldr	r3, [pc, #124]	@ (800aeb4 <USBD_CDC_DeInit+0x100>)
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	f003 020f 	and.w	r2, r3, #15
 800ae3c:	6879      	ldr	r1, [r7, #4]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	440b      	add	r3, r1
 800ae48:	3326      	adds	r3, #38	@ 0x26
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	32b0      	adds	r2, #176	@ 0xb0
 800ae58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01f      	beq.n	800aea0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	33b0      	adds	r3, #176	@ 0xb0
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	4413      	add	r3, r2
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	32b0      	adds	r2, #176	@ 0xb0
 800ae7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f002 fce2 	bl	800d84c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	32b0      	adds	r2, #176	@ 0xb0
 800ae92:	2100      	movs	r1, #0
 800ae94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	20000093 	.word	0x20000093
 800aeb0:	20000094 	.word	0x20000094
 800aeb4:	20000095 	.word	0x20000095

0800aeb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	32b0      	adds	r2, #176	@ 0xb0
 800aecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aed2:	2300      	movs	r3, #0
 800aed4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aed6:	2300      	movs	r3, #0
 800aed8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e0bf      	b.n	800b068 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d050      	beq.n	800af96 <USBD_CDC_Setup+0xde>
 800aef4:	2b20      	cmp	r3, #32
 800aef6:	f040 80af 	bne.w	800b058 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	88db      	ldrh	r3, [r3, #6]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d03a      	beq.n	800af78 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	b25b      	sxtb	r3, r3
 800af08:	2b00      	cmp	r3, #0
 800af0a:	da1b      	bge.n	800af44 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	33b0      	adds	r3, #176	@ 0xb0
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	683a      	ldr	r2, [r7, #0]
 800af20:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	88d2      	ldrh	r2, [r2, #6]
 800af28:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	88db      	ldrh	r3, [r3, #6]
 800af2e:	2b07      	cmp	r3, #7
 800af30:	bf28      	it	cs
 800af32:	2307      	movcs	r3, #7
 800af34:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	89fa      	ldrh	r2, [r7, #14]
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f001 fdb1 	bl	800caa4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af42:	e090      	b.n	800b066 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	785a      	ldrb	r2, [r3, #1]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	88db      	ldrh	r3, [r3, #6]
 800af52:	2b3f      	cmp	r3, #63	@ 0x3f
 800af54:	d803      	bhi.n	800af5e <USBD_CDC_Setup+0xa6>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	88db      	ldrh	r3, [r3, #6]
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	e000      	b.n	800af60 <USBD_CDC_Setup+0xa8>
 800af5e:	2240      	movs	r2, #64	@ 0x40
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af66:	6939      	ldr	r1, [r7, #16]
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800af6e:	461a      	mov	r2, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f001 fdc3 	bl	800cafc <USBD_CtlPrepareRx>
      break;
 800af76:	e076      	b.n	800b066 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	33b0      	adds	r3, #176	@ 0xb0
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	7850      	ldrb	r0, [r2, #1]
 800af8e:	2200      	movs	r2, #0
 800af90:	6839      	ldr	r1, [r7, #0]
 800af92:	4798      	blx	r3
      break;
 800af94:	e067      	b.n	800b066 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	785b      	ldrb	r3, [r3, #1]
 800af9a:	2b0b      	cmp	r3, #11
 800af9c:	d851      	bhi.n	800b042 <USBD_CDC_Setup+0x18a>
 800af9e:	a201      	add	r2, pc, #4	@ (adr r2, 800afa4 <USBD_CDC_Setup+0xec>)
 800afa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa4:	0800afd5 	.word	0x0800afd5
 800afa8:	0800b051 	.word	0x0800b051
 800afac:	0800b043 	.word	0x0800b043
 800afb0:	0800b043 	.word	0x0800b043
 800afb4:	0800b043 	.word	0x0800b043
 800afb8:	0800b043 	.word	0x0800b043
 800afbc:	0800b043 	.word	0x0800b043
 800afc0:	0800b043 	.word	0x0800b043
 800afc4:	0800b043 	.word	0x0800b043
 800afc8:	0800b043 	.word	0x0800b043
 800afcc:	0800afff 	.word	0x0800afff
 800afd0:	0800b029 	.word	0x0800b029
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d107      	bne.n	800aff0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afe0:	f107 030a 	add.w	r3, r7, #10
 800afe4:	2202      	movs	r2, #2
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f001 fd5b 	bl	800caa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afee:	e032      	b.n	800b056 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f001 fce5 	bl	800c9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aff8:	2303      	movs	r3, #3
 800affa:	75fb      	strb	r3, [r7, #23]
          break;
 800affc:	e02b      	b.n	800b056 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b03      	cmp	r3, #3
 800b008:	d107      	bne.n	800b01a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b00a:	f107 030d 	add.w	r3, r7, #13
 800b00e:	2201      	movs	r2, #1
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f001 fd46 	bl	800caa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b018:	e01d      	b.n	800b056 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b01a:	6839      	ldr	r1, [r7, #0]
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 fcd0 	bl	800c9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b022:	2303      	movs	r3, #3
 800b024:	75fb      	strb	r3, [r7, #23]
          break;
 800b026:	e016      	b.n	800b056 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b03      	cmp	r3, #3
 800b032:	d00f      	beq.n	800b054 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f001 fcc3 	bl	800c9c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b03c:	2303      	movs	r3, #3
 800b03e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b040:	e008      	b.n	800b054 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 fcbc 	bl	800c9c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b04a:	2303      	movs	r3, #3
 800b04c:	75fb      	strb	r3, [r7, #23]
          break;
 800b04e:	e002      	b.n	800b056 <USBD_CDC_Setup+0x19e>
          break;
 800b050:	bf00      	nop
 800b052:	e008      	b.n	800b066 <USBD_CDC_Setup+0x1ae>
          break;
 800b054:	bf00      	nop
      }
      break;
 800b056:	e006      	b.n	800b066 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 fcb1 	bl	800c9c2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b060:	2303      	movs	r3, #3
 800b062:	75fb      	strb	r3, [r7, #23]
      break;
 800b064:	bf00      	nop
  }

  return (uint8_t)ret;
 800b066:	7dfb      	ldrb	r3, [r7, #23]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	460b      	mov	r3, r1
 800b07a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b082:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	32b0      	adds	r2, #176	@ 0xb0
 800b08e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b096:	2303      	movs	r3, #3
 800b098:	e065      	b.n	800b166 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	32b0      	adds	r2, #176	@ 0xb0
 800b0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0aa:	78fb      	ldrb	r3, [r7, #3]
 800b0ac:	f003 020f 	and.w	r2, r3, #15
 800b0b0:	6879      	ldr	r1, [r7, #4]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	440b      	add	r3, r1
 800b0bc:	3318      	adds	r3, #24
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d02f      	beq.n	800b124 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b0c4:	78fb      	ldrb	r3, [r7, #3]
 800b0c6:	f003 020f 	and.w	r2, r3, #15
 800b0ca:	6879      	ldr	r1, [r7, #4]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	440b      	add	r3, r1
 800b0d6:	3318      	adds	r3, #24
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	78fb      	ldrb	r3, [r7, #3]
 800b0dc:	f003 010f 	and.w	r1, r3, #15
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	00db      	lsls	r3, r3, #3
 800b0e6:	440b      	add	r3, r1
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4403      	add	r3, r0
 800b0ec:	3344      	adds	r3, #68	@ 0x44
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0f4:	fb01 f303 	mul.w	r3, r1, r3
 800b0f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d112      	bne.n	800b124 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0fe:	78fb      	ldrb	r3, [r7, #3]
 800b100:	f003 020f 	and.w	r2, r3, #15
 800b104:	6879      	ldr	r1, [r7, #4]
 800b106:	4613      	mov	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	440b      	add	r3, r1
 800b110:	3318      	adds	r3, #24
 800b112:	2200      	movs	r2, #0
 800b114:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b116:	78f9      	ldrb	r1, [r7, #3]
 800b118:	2300      	movs	r3, #0
 800b11a:	2200      	movs	r2, #0
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f002 fab5 	bl	800d68c <USBD_LL_Transmit>
 800b122:	e01f      	b.n	800b164 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	2200      	movs	r2, #0
 800b128:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	33b0      	adds	r3, #176	@ 0xb0
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d010      	beq.n	800b164 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	33b0      	adds	r3, #176	@ 0xb0
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b160:	78fa      	ldrb	r2, [r7, #3]
 800b162:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b084      	sub	sp, #16
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	460b      	mov	r3, r1
 800b178:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	32b0      	adds	r2, #176	@ 0xb0
 800b184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b188:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	32b0      	adds	r2, #176	@ 0xb0
 800b194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b19c:	2303      	movs	r3, #3
 800b19e:	e01a      	b.n	800b1d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b1a0:	78fb      	ldrb	r3, [r7, #3]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f002 fae1 	bl	800d76c <USBD_LL_GetRxDataSize>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	33b0      	adds	r3, #176	@ 0xb0
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	32b0      	adds	r2, #176	@ 0xb0
 800b1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e024      	b.n	800b24a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	33b0      	adds	r3, #176	@ 0xb0
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4413      	add	r3, r2
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d019      	beq.n	800b248 <USBD_CDC_EP0_RxReady+0x6a>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b21a:	2bff      	cmp	r3, #255	@ 0xff
 800b21c:	d014      	beq.n	800b248 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	33b0      	adds	r3, #176	@ 0xb0
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b236:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b23e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	22ff      	movs	r2, #255	@ 0xff
 800b244:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
	...

0800b254 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b25c:	2182      	movs	r1, #130	@ 0x82
 800b25e:	4818      	ldr	r0, [pc, #96]	@ (800b2c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b260:	f000 fd4f 	bl	800bd02 <USBD_GetEpDesc>
 800b264:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b266:	2101      	movs	r1, #1
 800b268:	4815      	ldr	r0, [pc, #84]	@ (800b2c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b26a:	f000 fd4a 	bl	800bd02 <USBD_GetEpDesc>
 800b26e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b270:	2181      	movs	r1, #129	@ 0x81
 800b272:	4813      	ldr	r0, [pc, #76]	@ (800b2c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b274:	f000 fd45 	bl	800bd02 <USBD_GetEpDesc>
 800b278:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2210      	movs	r2, #16
 800b284:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d006      	beq.n	800b29a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	2200      	movs	r2, #0
 800b290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b294:	711a      	strb	r2, [r3, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d006      	beq.n	800b2ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2a8:	711a      	strb	r2, [r3, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2243      	movs	r2, #67	@ 0x43
 800b2b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2b4:	4b02      	ldr	r3, [pc, #8]	@ (800b2c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	20000050 	.word	0x20000050

0800b2c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2cc:	2182      	movs	r1, #130	@ 0x82
 800b2ce:	4818      	ldr	r0, [pc, #96]	@ (800b330 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2d0:	f000 fd17 	bl	800bd02 <USBD_GetEpDesc>
 800b2d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	4815      	ldr	r0, [pc, #84]	@ (800b330 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2da:	f000 fd12 	bl	800bd02 <USBD_GetEpDesc>
 800b2de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2e0:	2181      	movs	r1, #129	@ 0x81
 800b2e2:	4813      	ldr	r0, [pc, #76]	@ (800b330 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2e4:	f000 fd0d 	bl	800bd02 <USBD_GetEpDesc>
 800b2e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	2210      	movs	r2, #16
 800b2f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d006      	beq.n	800b30a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	2200      	movs	r2, #0
 800b300:	711a      	strb	r2, [r3, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	f042 0202 	orr.w	r2, r2, #2
 800b308:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d006      	beq.n	800b31e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	711a      	strb	r2, [r3, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	f042 0202 	orr.w	r2, r2, #2
 800b31c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2243      	movs	r2, #67	@ 0x43
 800b322:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b324:	4b02      	ldr	r3, [pc, #8]	@ (800b330 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b326:	4618      	mov	r0, r3
 800b328:	3718      	adds	r7, #24
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	20000050 	.word	0x20000050

0800b334 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b33c:	2182      	movs	r1, #130	@ 0x82
 800b33e:	4818      	ldr	r0, [pc, #96]	@ (800b3a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b340:	f000 fcdf 	bl	800bd02 <USBD_GetEpDesc>
 800b344:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b346:	2101      	movs	r1, #1
 800b348:	4815      	ldr	r0, [pc, #84]	@ (800b3a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b34a:	f000 fcda 	bl	800bd02 <USBD_GetEpDesc>
 800b34e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b350:	2181      	movs	r1, #129	@ 0x81
 800b352:	4813      	ldr	r0, [pc, #76]	@ (800b3a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b354:	f000 fcd5 	bl	800bd02 <USBD_GetEpDesc>
 800b358:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	2210      	movs	r2, #16
 800b364:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d006      	beq.n	800b37a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	2200      	movs	r2, #0
 800b370:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b374:	711a      	strb	r2, [r3, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d006      	beq.n	800b38e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b388:	711a      	strb	r2, [r3, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2243      	movs	r2, #67	@ 0x43
 800b392:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b394:	4b02      	ldr	r3, [pc, #8]	@ (800b3a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b396:	4618      	mov	r0, r3
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20000050 	.word	0x20000050

0800b3a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	220a      	movs	r2, #10
 800b3b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3b2:	4b03      	ldr	r3, [pc, #12]	@ (800b3c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	2000000c 	.word	0x2000000c

0800b3c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	e009      	b.n	800b3ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	33b0      	adds	r3, #176	@ 0xb0
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	32b0      	adds	r2, #176	@ 0xb0
 800b40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b412:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e008      	b.n	800b430 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	371c      	adds	r7, #28
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	32b0      	adds	r2, #176	@ 0xb0
 800b450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b454:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b45c:	2303      	movs	r3, #3
 800b45e:	e004      	b.n	800b46a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3714      	adds	r7, #20
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
	...

0800b478 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	32b0      	adds	r2, #176	@ 0xb0
 800b48a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b490:	2301      	movs	r3, #1
 800b492:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d101      	bne.n	800b49e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b49a:	2303      	movs	r3, #3
 800b49c:	e025      	b.n	800b4ea <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d11f      	bne.n	800b4e8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b4b0:	4b10      	ldr	r3, [pc, #64]	@ (800b4f4 <USBD_CDC_TransmitPacket+0x7c>)
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	f003 020f 	and.w	r2, r3, #15
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4413      	add	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4403      	add	r3, r0
 800b4ca:	3318      	adds	r3, #24
 800b4cc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b4ce:	4b09      	ldr	r3, [pc, #36]	@ (800b4f4 <USBD_CDC_TransmitPacket+0x7c>)
 800b4d0:	7819      	ldrb	r1, [r3, #0]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f002 f8d4 	bl	800d68c <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20000093 	.word	0x20000093

0800b4f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	32b0      	adds	r2, #176	@ 0xb0
 800b50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b50e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	32b0      	adds	r2, #176	@ 0xb0
 800b51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b522:	2303      	movs	r3, #3
 800b524:	e018      	b.n	800b558 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	7c1b      	ldrb	r3, [r3, #16]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10a      	bne.n	800b544 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b52e:	4b0c      	ldr	r3, [pc, #48]	@ (800b560 <USBD_CDC_ReceivePacket+0x68>)
 800b530:	7819      	ldrb	r1, [r3, #0]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b538:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f002 f8dd 	bl	800d6fc <USBD_LL_PrepareReceive>
 800b542:	e008      	b.n	800b556 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b544:	4b06      	ldr	r3, [pc, #24]	@ (800b560 <USBD_CDC_ReceivePacket+0x68>)
 800b546:	7819      	ldrb	r1, [r3, #0]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b54e:	2340      	movs	r3, #64	@ 0x40
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f002 f8d3 	bl	800d6fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	20000094 	.word	0x20000094

0800b564 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	4613      	mov	r3, r2
 800b570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d101      	bne.n	800b57c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b578:	2303      	movs	r3, #3
 800b57a:	e01f      	b.n	800b5bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2200      	movs	r2, #0
 800b588:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d003      	beq.n	800b5a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	79fa      	ldrb	r2, [r7, #7]
 800b5ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f001 feab 	bl	800d30c <USBD_LL_Init>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d101      	bne.n	800b5dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	e025      	b.n	800b628 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	32ae      	adds	r2, #174	@ 0xae
 800b5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00f      	beq.n	800b618 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	32ae      	adds	r2, #174	@ 0xae
 800b602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b608:	f107 020e 	add.w	r2, r7, #14
 800b60c:	4610      	mov	r0, r2
 800b60e:	4798      	blx	r3
 800b610:	4602      	mov	r2, r0
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b61e:	1c5a      	adds	r2, r3, #1
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f001 feb3 	bl	800d3a4 <USBD_LL_Start>
 800b63e:	4603      	mov	r3, r0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b650:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b652:	4618      	mov	r0, r3
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr

0800b65e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b084      	sub	sp, #16
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	460b      	mov	r3, r1
 800b668:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b66a:	2300      	movs	r3, #0
 800b66c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b674:	2b00      	cmp	r3, #0
 800b676:	d009      	beq.n	800b68c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	78fa      	ldrb	r2, [r7, #3]
 800b682:	4611      	mov	r1, r2
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	4798      	blx	r3
 800b688:	4603      	mov	r3, r0
 800b68a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b084      	sub	sp, #16
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	78fa      	ldrb	r2, [r7, #3]
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	4798      	blx	r3
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d001      	beq.n	800b6c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b084      	sub	sp, #16
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f001 f936 	bl	800c94e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6fe:	f003 031f 	and.w	r3, r3, #31
 800b702:	2b02      	cmp	r3, #2
 800b704:	d01a      	beq.n	800b73c <USBD_LL_SetupStage+0x72>
 800b706:	2b02      	cmp	r3, #2
 800b708:	d822      	bhi.n	800b750 <USBD_LL_SetupStage+0x86>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d002      	beq.n	800b714 <USBD_LL_SetupStage+0x4a>
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d00a      	beq.n	800b728 <USBD_LL_SetupStage+0x5e>
 800b712:	e01d      	b.n	800b750 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fb63 	bl	800bde8 <USBD_StdDevReq>
 800b722:	4603      	mov	r3, r0
 800b724:	73fb      	strb	r3, [r7, #15]
      break;
 800b726:	e020      	b.n	800b76a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fbcb 	bl	800becc <USBD_StdItfReq>
 800b736:	4603      	mov	r3, r0
 800b738:	73fb      	strb	r3, [r7, #15]
      break;
 800b73a:	e016      	b.n	800b76a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b742:	4619      	mov	r1, r3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fc2d 	bl	800bfa4 <USBD_StdEPReq>
 800b74a:	4603      	mov	r3, r0
 800b74c:	73fb      	strb	r3, [r7, #15]
      break;
 800b74e:	e00c      	b.n	800b76a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b756:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f001 fec6 	bl	800d4f0 <USBD_LL_StallEP>
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]
      break;
 800b768:	bf00      	nop
  }

  return ret;
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	460b      	mov	r3, r1
 800b77e:	607a      	str	r2, [r7, #4]
 800b780:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b786:	7afb      	ldrb	r3, [r7, #11]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d16e      	bne.n	800b86a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b792:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	f040 8098 	bne.w	800b8d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	689a      	ldr	r2, [r3, #8]
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d913      	bls.n	800b7d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	689a      	ldr	r2, [r3, #8]
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	1ad2      	subs	r2, r2, r3
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	68da      	ldr	r2, [r3, #12]
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	bf28      	it	cs
 800b7c6:	4613      	movcs	r3, r2
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	6879      	ldr	r1, [r7, #4]
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f001 f9b2 	bl	800cb36 <USBD_CtlContinueRx>
 800b7d2:	e07d      	b.n	800b8d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7da:	f003 031f 	and.w	r3, r3, #31
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d014      	beq.n	800b80c <USBD_LL_DataOutStage+0x98>
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d81d      	bhi.n	800b822 <USBD_LL_DataOutStage+0xae>
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d002      	beq.n	800b7f0 <USBD_LL_DataOutStage+0x7c>
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d003      	beq.n	800b7f6 <USBD_LL_DataOutStage+0x82>
 800b7ee:	e018      	b.n	800b822 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	75bb      	strb	r3, [r7, #22]
            break;
 800b7f4:	e018      	b.n	800b828 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	4619      	mov	r1, r3
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f000 fa64 	bl	800bcce <USBD_CoreFindIF>
 800b806:	4603      	mov	r3, r0
 800b808:	75bb      	strb	r3, [r7, #22]
            break;
 800b80a:	e00d      	b.n	800b828 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b812:	b2db      	uxtb	r3, r3
 800b814:	4619      	mov	r1, r3
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f000 fa66 	bl	800bce8 <USBD_CoreFindEP>
 800b81c:	4603      	mov	r3, r0
 800b81e:	75bb      	strb	r3, [r7, #22]
            break;
 800b820:	e002      	b.n	800b828 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	75bb      	strb	r3, [r7, #22]
            break;
 800b826:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b828:	7dbb      	ldrb	r3, [r7, #22]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d119      	bne.n	800b862 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b03      	cmp	r3, #3
 800b838:	d113      	bne.n	800b862 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b83a:	7dba      	ldrb	r2, [r7, #22]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	32ae      	adds	r2, #174	@ 0xae
 800b840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00b      	beq.n	800b862 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b84a:	7dba      	ldrb	r2, [r7, #22]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b852:	7dba      	ldrb	r2, [r7, #22]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	32ae      	adds	r2, #174	@ 0xae
 800b858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f001 f978 	bl	800cb58 <USBD_CtlSendStatus>
 800b868:	e032      	b.n	800b8d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b86a:	7afb      	ldrb	r3, [r7, #11]
 800b86c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b870:	b2db      	uxtb	r3, r3
 800b872:	4619      	mov	r1, r3
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 fa37 	bl	800bce8 <USBD_CoreFindEP>
 800b87a:	4603      	mov	r3, r0
 800b87c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b87e:	7dbb      	ldrb	r3, [r7, #22]
 800b880:	2bff      	cmp	r3, #255	@ 0xff
 800b882:	d025      	beq.n	800b8d0 <USBD_LL_DataOutStage+0x15c>
 800b884:	7dbb      	ldrb	r3, [r7, #22]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d122      	bne.n	800b8d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b03      	cmp	r3, #3
 800b894:	d117      	bne.n	800b8c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b896:	7dba      	ldrb	r2, [r7, #22]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	32ae      	adds	r2, #174	@ 0xae
 800b89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00f      	beq.n	800b8c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b8a6:	7dba      	ldrb	r2, [r7, #22]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b8ae:	7dba      	ldrb	r2, [r7, #22]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	32ae      	adds	r2, #174	@ 0xae
 800b8b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	7afa      	ldrb	r2, [r7, #11]
 800b8bc:	4611      	mov	r1, r2
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	4798      	blx	r3
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d001      	beq.n	800b8d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
 800b8ce:	e000      	b.n	800b8d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3718      	adds	r7, #24
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b086      	sub	sp, #24
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	607a      	str	r2, [r7, #4]
 800b8e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8e8:	7afb      	ldrb	r3, [r7, #11]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d16f      	bne.n	800b9ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3314      	adds	r3, #20
 800b8f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d15a      	bne.n	800b9b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	689a      	ldr	r2, [r3, #8]
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	429a      	cmp	r2, r3
 800b908:	d914      	bls.n	800b934 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	689a      	ldr	r2, [r3, #8]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	1ad2      	subs	r2, r2, r3
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	461a      	mov	r2, r3
 800b91e:	6879      	ldr	r1, [r7, #4]
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f001 f8da 	bl	800cada <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b926:	2300      	movs	r3, #0
 800b928:	2200      	movs	r2, #0
 800b92a:	2100      	movs	r1, #0
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f001 fee5 	bl	800d6fc <USBD_LL_PrepareReceive>
 800b932:	e03f      	b.n	800b9b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	68da      	ldr	r2, [r3, #12]
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d11c      	bne.n	800b97a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	685a      	ldr	r2, [r3, #4]
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b948:	429a      	cmp	r2, r3
 800b94a:	d316      	bcc.n	800b97a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b956:	429a      	cmp	r2, r3
 800b958:	d20f      	bcs.n	800b97a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b95a:	2200      	movs	r2, #0
 800b95c:	2100      	movs	r1, #0
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f001 f8bb 	bl	800cada <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2200      	movs	r2, #0
 800b968:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b96c:	2300      	movs	r3, #0
 800b96e:	2200      	movs	r2, #0
 800b970:	2100      	movs	r1, #0
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f001 fec2 	bl	800d6fc <USBD_LL_PrepareReceive>
 800b978:	e01c      	b.n	800b9b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b03      	cmp	r3, #3
 800b984:	d10f      	bne.n	800b9a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d009      	beq.n	800b9a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2200      	movs	r2, #0
 800b996:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9a6:	2180      	movs	r1, #128	@ 0x80
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f001 fda1 	bl	800d4f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f001 f8e5 	bl	800cb7e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d03a      	beq.n	800ba34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f7ff fe42 	bl	800b648 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b9cc:	e032      	b.n	800ba34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9ce:	7afb      	ldrb	r3, [r7, #11]
 800b9d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f000 f985 	bl	800bce8 <USBD_CoreFindEP>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	2bff      	cmp	r3, #255	@ 0xff
 800b9e6:	d025      	beq.n	800ba34 <USBD_LL_DataInStage+0x15a>
 800b9e8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d122      	bne.n	800ba34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	2b03      	cmp	r3, #3
 800b9f8:	d11c      	bne.n	800ba34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9fa:	7dfa      	ldrb	r2, [r7, #23]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	32ae      	adds	r2, #174	@ 0xae
 800ba00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba04:	695b      	ldr	r3, [r3, #20]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d014      	beq.n	800ba34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba0a:	7dfa      	ldrb	r2, [r7, #23]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba12:	7dfa      	ldrb	r2, [r7, #23]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	32ae      	adds	r2, #174	@ 0xae
 800ba18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	7afa      	ldrb	r2, [r7, #11]
 800ba20:	4611      	mov	r1, r2
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	4798      	blx	r3
 800ba26:	4603      	mov	r3, r0
 800ba28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba2a:	7dbb      	ldrb	r3, [r7, #22]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba30:	7dbb      	ldrb	r3, [r7, #22]
 800ba32:	e000      	b.n	800ba36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b084      	sub	sp, #16
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d014      	beq.n	800baa4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00e      	beq.n	800baa4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	6852      	ldr	r2, [r2, #4]
 800ba92:	b2d2      	uxtb	r2, r2
 800ba94:	4611      	mov	r1, r2
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	4798      	blx	r3
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d001      	beq.n	800baa4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800baa0:	2303      	movs	r3, #3
 800baa2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800baa4:	2340      	movs	r3, #64	@ 0x40
 800baa6:	2200      	movs	r2, #0
 800baa8:	2100      	movs	r1, #0
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f001 fcac 	bl	800d408 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2240      	movs	r2, #64	@ 0x40
 800babc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bac0:	2340      	movs	r3, #64	@ 0x40
 800bac2:	2200      	movs	r2, #0
 800bac4:	2180      	movs	r1, #128	@ 0x80
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f001 fc9e 	bl	800d408 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2240      	movs	r2, #64	@ 0x40
 800bad6:	621a      	str	r2, [r3, #32]

  return ret;
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bae2:	b480      	push	{r7}
 800bae4:	b083      	sub	sp, #12
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	460b      	mov	r3, r1
 800baec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	78fa      	ldrb	r2, [r7, #3]
 800baf2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b083      	sub	sp, #12
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b04      	cmp	r3, #4
 800bb14:	d006      	beq.n	800bb24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2204      	movs	r2, #4
 800bb28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b083      	sub	sp, #12
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	2b04      	cmp	r3, #4
 800bb4c:	d106      	bne.n	800bb5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bb54:	b2da      	uxtb	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b082      	sub	sp, #8
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b03      	cmp	r3, #3
 800bb7c:	d110      	bne.n	800bba0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00b      	beq.n	800bba0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb8e:	69db      	ldr	r3, [r3, #28]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d005      	beq.n	800bba0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b082      	sub	sp, #8
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	32ae      	adds	r2, #174	@ 0xae
 800bbc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d101      	bne.n	800bbcc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e01c      	b.n	800bc06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	d115      	bne.n	800bc04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	32ae      	adds	r2, #174	@ 0xae
 800bbe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00b      	beq.n	800bc04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	32ae      	adds	r2, #174	@ 0xae
 800bbf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfa:	6a1b      	ldr	r3, [r3, #32]
 800bbfc:	78fa      	ldrb	r2, [r7, #3]
 800bbfe:	4611      	mov	r1, r2
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	460b      	mov	r3, r1
 800bc18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	32ae      	adds	r2, #174	@ 0xae
 800bc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e01c      	b.n	800bc6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d115      	bne.n	800bc68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	32ae      	adds	r2, #174	@ 0xae
 800bc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00b      	beq.n	800bc68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	32ae      	adds	r2, #174	@ 0xae
 800bc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc60:	78fa      	ldrb	r2, [r7, #3]
 800bc62:	4611      	mov	r1, r2
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc72:	b480      	push	{r7}
 800bc74:	b083      	sub	sp, #12
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00e      	beq.n	800bcc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	6852      	ldr	r2, [r2, #4]
 800bcb2:	b2d2      	uxtb	r2, r2
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	4798      	blx	r3
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b083      	sub	sp, #12
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b086      	sub	sp, #24
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	885b      	ldrh	r3, [r3, #2]
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	7812      	ldrb	r2, [r2, #0]
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d91f      	bls.n	800bd68 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd2e:	e013      	b.n	800bd58 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd30:	f107 030a 	add.w	r3, r7, #10
 800bd34:	4619      	mov	r1, r3
 800bd36:	6978      	ldr	r0, [r7, #20]
 800bd38:	f000 f81b 	bl	800bd72 <USBD_GetNextDesc>
 800bd3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	785b      	ldrb	r3, [r3, #1]
 800bd42:	2b05      	cmp	r3, #5
 800bd44:	d108      	bne.n	800bd58 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	789b      	ldrb	r3, [r3, #2]
 800bd4e:	78fa      	ldrb	r2, [r7, #3]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d008      	beq.n	800bd66 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	885b      	ldrh	r3, [r3, #2]
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	897b      	ldrh	r3, [r7, #10]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d8e5      	bhi.n	800bd30 <USBD_GetEpDesc+0x2e>
 800bd64:	e000      	b.n	800bd68 <USBD_GetEpDesc+0x66>
          break;
 800bd66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd68:	693b      	ldr	r3, [r7, #16]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b085      	sub	sp, #20
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	7812      	ldrb	r2, [r2, #0]
 800bd88:	4413      	add	r3, r2
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	461a      	mov	r2, r3
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4413      	add	r3, r2
 800bd9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b087      	sub	sp, #28
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdc8:	8a3b      	ldrh	r3, [r7, #16]
 800bdca:	021b      	lsls	r3, r3, #8
 800bdcc:	b21a      	sxth	r2, r3
 800bdce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	b21b      	sxth	r3, r3
 800bdd6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdd8:	89fb      	ldrh	r3, [r7, #14]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	371c      	adds	r7, #28
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
	...

0800bde8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdfe:	2b40      	cmp	r3, #64	@ 0x40
 800be00:	d005      	beq.n	800be0e <USBD_StdDevReq+0x26>
 800be02:	2b40      	cmp	r3, #64	@ 0x40
 800be04:	d857      	bhi.n	800beb6 <USBD_StdDevReq+0xce>
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00f      	beq.n	800be2a <USBD_StdDevReq+0x42>
 800be0a:	2b20      	cmp	r3, #32
 800be0c:	d153      	bne.n	800beb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	32ae      	adds	r2, #174	@ 0xae
 800be18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	4798      	blx	r3
 800be24:	4603      	mov	r3, r0
 800be26:	73fb      	strb	r3, [r7, #15]
      break;
 800be28:	e04a      	b.n	800bec0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	785b      	ldrb	r3, [r3, #1]
 800be2e:	2b09      	cmp	r3, #9
 800be30:	d83b      	bhi.n	800beaa <USBD_StdDevReq+0xc2>
 800be32:	a201      	add	r2, pc, #4	@ (adr r2, 800be38 <USBD_StdDevReq+0x50>)
 800be34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be38:	0800be8d 	.word	0x0800be8d
 800be3c:	0800bea1 	.word	0x0800bea1
 800be40:	0800beab 	.word	0x0800beab
 800be44:	0800be97 	.word	0x0800be97
 800be48:	0800beab 	.word	0x0800beab
 800be4c:	0800be6b 	.word	0x0800be6b
 800be50:	0800be61 	.word	0x0800be61
 800be54:	0800beab 	.word	0x0800beab
 800be58:	0800be83 	.word	0x0800be83
 800be5c:	0800be75 	.word	0x0800be75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fa3c 	bl	800c2e0 <USBD_GetDescriptor>
          break;
 800be68:	e024      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fbcb 	bl	800c608 <USBD_SetAddress>
          break;
 800be72:	e01f      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fc0a 	bl	800c690 <USBD_SetConfig>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]
          break;
 800be80:	e018      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be82:	6839      	ldr	r1, [r7, #0]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fcad 	bl	800c7e4 <USBD_GetConfig>
          break;
 800be8a:	e013      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fcde 	bl	800c850 <USBD_GetStatus>
          break;
 800be94:	e00e      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fd0d 	bl	800c8b8 <USBD_SetFeature>
          break;
 800be9e:	e009      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bea0:	6839      	ldr	r1, [r7, #0]
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fd31 	bl	800c90a <USBD_ClrFeature>
          break;
 800bea8:	e004      	b.n	800beb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fd88 	bl	800c9c2 <USBD_CtlError>
          break;
 800beb2:	bf00      	nop
      }
      break;
 800beb4:	e004      	b.n	800bec0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fd82 	bl	800c9c2 <USBD_CtlError>
      break;
 800bebe:	bf00      	nop
  }

  return ret;
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop

0800becc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bee2:	2b40      	cmp	r3, #64	@ 0x40
 800bee4:	d005      	beq.n	800bef2 <USBD_StdItfReq+0x26>
 800bee6:	2b40      	cmp	r3, #64	@ 0x40
 800bee8:	d852      	bhi.n	800bf90 <USBD_StdItfReq+0xc4>
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <USBD_StdItfReq+0x26>
 800beee:	2b20      	cmp	r3, #32
 800bef0:	d14e      	bne.n	800bf90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	3b01      	subs	r3, #1
 800befc:	2b02      	cmp	r3, #2
 800befe:	d840      	bhi.n	800bf82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	889b      	ldrh	r3, [r3, #4]
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d836      	bhi.n	800bf78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	889b      	ldrh	r3, [r3, #4]
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	4619      	mov	r1, r3
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff fedb 	bl	800bcce <USBD_CoreFindIF>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
 800bf1e:	2bff      	cmp	r3, #255	@ 0xff
 800bf20:	d01d      	beq.n	800bf5e <USBD_StdItfReq+0x92>
 800bf22:	7bbb      	ldrb	r3, [r7, #14]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d11a      	bne.n	800bf5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf28:	7bba      	ldrb	r2, [r7, #14]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	32ae      	adds	r2, #174	@ 0xae
 800bf2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00f      	beq.n	800bf58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf38:	7bba      	ldrb	r2, [r7, #14]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf40:	7bba      	ldrb	r2, [r7, #14]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	32ae      	adds	r2, #174	@ 0xae
 800bf46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4798      	blx	r3
 800bf52:	4603      	mov	r3, r0
 800bf54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf56:	e004      	b.n	800bf62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf5c:	e001      	b.n	800bf62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf5e:	2303      	movs	r3, #3
 800bf60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	88db      	ldrh	r3, [r3, #6]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d110      	bne.n	800bf8c <USBD_StdItfReq+0xc0>
 800bf6a:	7bfb      	ldrb	r3, [r7, #15]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10d      	bne.n	800bf8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fdf1 	bl	800cb58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf76:	e009      	b.n	800bf8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fd21 	bl	800c9c2 <USBD_CtlError>
          break;
 800bf80:	e004      	b.n	800bf8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fd1c 	bl	800c9c2 <USBD_CtlError>
          break;
 800bf8a:	e000      	b.n	800bf8e <USBD_StdItfReq+0xc2>
          break;
 800bf8c:	bf00      	nop
      }
      break;
 800bf8e:	e004      	b.n	800bf9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf90:	6839      	ldr	r1, [r7, #0]
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 fd15 	bl	800c9c2 <USBD_CtlError>
      break;
 800bf98:	bf00      	nop
  }

  return ret;
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	889b      	ldrh	r3, [r3, #4]
 800bfb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfc0:	2b40      	cmp	r3, #64	@ 0x40
 800bfc2:	d007      	beq.n	800bfd4 <USBD_StdEPReq+0x30>
 800bfc4:	2b40      	cmp	r3, #64	@ 0x40
 800bfc6:	f200 817f 	bhi.w	800c2c8 <USBD_StdEPReq+0x324>
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d02a      	beq.n	800c024 <USBD_StdEPReq+0x80>
 800bfce:	2b20      	cmp	r3, #32
 800bfd0:	f040 817a 	bne.w	800c2c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f7ff fe85 	bl	800bce8 <USBD_CoreFindEP>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfe2:	7b7b      	ldrb	r3, [r7, #13]
 800bfe4:	2bff      	cmp	r3, #255	@ 0xff
 800bfe6:	f000 8174 	beq.w	800c2d2 <USBD_StdEPReq+0x32e>
 800bfea:	7b7b      	ldrb	r3, [r7, #13]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f040 8170 	bne.w	800c2d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bff2:	7b7a      	ldrb	r2, [r7, #13]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bffa:	7b7a      	ldrb	r2, [r7, #13]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	32ae      	adds	r2, #174	@ 0xae
 800c000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 8163 	beq.w	800c2d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c00c:	7b7a      	ldrb	r2, [r7, #13]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	32ae      	adds	r2, #174	@ 0xae
 800c012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	4798      	blx	r3
 800c01e:	4603      	mov	r3, r0
 800c020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c022:	e156      	b.n	800c2d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	785b      	ldrb	r3, [r3, #1]
 800c028:	2b03      	cmp	r3, #3
 800c02a:	d008      	beq.n	800c03e <USBD_StdEPReq+0x9a>
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	f300 8145 	bgt.w	800c2bc <USBD_StdEPReq+0x318>
 800c032:	2b00      	cmp	r3, #0
 800c034:	f000 809b 	beq.w	800c16e <USBD_StdEPReq+0x1ca>
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d03c      	beq.n	800c0b6 <USBD_StdEPReq+0x112>
 800c03c:	e13e      	b.n	800c2bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c044:	b2db      	uxtb	r3, r3
 800c046:	2b02      	cmp	r3, #2
 800c048:	d002      	beq.n	800c050 <USBD_StdEPReq+0xac>
 800c04a:	2b03      	cmp	r3, #3
 800c04c:	d016      	beq.n	800c07c <USBD_StdEPReq+0xd8>
 800c04e:	e02c      	b.n	800c0aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c050:	7bbb      	ldrb	r3, [r7, #14]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00d      	beq.n	800c072 <USBD_StdEPReq+0xce>
 800c056:	7bbb      	ldrb	r3, [r7, #14]
 800c058:	2b80      	cmp	r3, #128	@ 0x80
 800c05a:	d00a      	beq.n	800c072 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	4619      	mov	r1, r3
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f001 fa45 	bl	800d4f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c066:	2180      	movs	r1, #128	@ 0x80
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f001 fa41 	bl	800d4f0 <USBD_LL_StallEP>
 800c06e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c070:	e020      	b.n	800c0b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fca4 	bl	800c9c2 <USBD_CtlError>
              break;
 800c07a:	e01b      	b.n	800c0b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	885b      	ldrh	r3, [r3, #2]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10e      	bne.n	800c0a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00b      	beq.n	800c0a2 <USBD_StdEPReq+0xfe>
 800c08a:	7bbb      	ldrb	r3, [r7, #14]
 800c08c:	2b80      	cmp	r3, #128	@ 0x80
 800c08e:	d008      	beq.n	800c0a2 <USBD_StdEPReq+0xfe>
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	88db      	ldrh	r3, [r3, #6]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d104      	bne.n	800c0a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c098:	7bbb      	ldrb	r3, [r7, #14]
 800c09a:	4619      	mov	r1, r3
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f001 fa27 	bl	800d4f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fd58 	bl	800cb58 <USBD_CtlSendStatus>

              break;
 800c0a8:	e004      	b.n	800c0b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fc88 	bl	800c9c2 <USBD_CtlError>
              break;
 800c0b2:	bf00      	nop
          }
          break;
 800c0b4:	e107      	b.n	800c2c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d002      	beq.n	800c0c8 <USBD_StdEPReq+0x124>
 800c0c2:	2b03      	cmp	r3, #3
 800c0c4:	d016      	beq.n	800c0f4 <USBD_StdEPReq+0x150>
 800c0c6:	e04b      	b.n	800c160 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00d      	beq.n	800c0ea <USBD_StdEPReq+0x146>
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
 800c0d0:	2b80      	cmp	r3, #128	@ 0x80
 800c0d2:	d00a      	beq.n	800c0ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f001 fa09 	bl	800d4f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0de:	2180      	movs	r1, #128	@ 0x80
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f001 fa05 	bl	800d4f0 <USBD_LL_StallEP>
 800c0e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0e8:	e040      	b.n	800c16c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fc68 	bl	800c9c2 <USBD_CtlError>
              break;
 800c0f2:	e03b      	b.n	800c16c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	885b      	ldrh	r3, [r3, #2]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d136      	bne.n	800c16a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c102:	2b00      	cmp	r3, #0
 800c104:	d004      	beq.n	800c110 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c106:	7bbb      	ldrb	r3, [r7, #14]
 800c108:	4619      	mov	r1, r3
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f001 fa26 	bl	800d55c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 fd21 	bl	800cb58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c116:	7bbb      	ldrb	r3, [r7, #14]
 800c118:	4619      	mov	r1, r3
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7ff fde4 	bl	800bce8 <USBD_CoreFindEP>
 800c120:	4603      	mov	r3, r0
 800c122:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c124:	7b7b      	ldrb	r3, [r7, #13]
 800c126:	2bff      	cmp	r3, #255	@ 0xff
 800c128:	d01f      	beq.n	800c16a <USBD_StdEPReq+0x1c6>
 800c12a:	7b7b      	ldrb	r3, [r7, #13]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d11c      	bne.n	800c16a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c130:	7b7a      	ldrb	r2, [r7, #13]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c138:	7b7a      	ldrb	r2, [r7, #13]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	32ae      	adds	r2, #174	@ 0xae
 800c13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d010      	beq.n	800c16a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c148:	7b7a      	ldrb	r2, [r7, #13]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	32ae      	adds	r2, #174	@ 0xae
 800c14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	4798      	blx	r3
 800c15a:	4603      	mov	r3, r0
 800c15c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c15e:	e004      	b.n	800c16a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c160:	6839      	ldr	r1, [r7, #0]
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fc2d 	bl	800c9c2 <USBD_CtlError>
              break;
 800c168:	e000      	b.n	800c16c <USBD_StdEPReq+0x1c8>
              break;
 800c16a:	bf00      	nop
          }
          break;
 800c16c:	e0ab      	b.n	800c2c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b02      	cmp	r3, #2
 800c178:	d002      	beq.n	800c180 <USBD_StdEPReq+0x1dc>
 800c17a:	2b03      	cmp	r3, #3
 800c17c:	d032      	beq.n	800c1e4 <USBD_StdEPReq+0x240>
 800c17e:	e097      	b.n	800c2b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d007      	beq.n	800c196 <USBD_StdEPReq+0x1f2>
 800c186:	7bbb      	ldrb	r3, [r7, #14]
 800c188:	2b80      	cmp	r3, #128	@ 0x80
 800c18a:	d004      	beq.n	800c196 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fc17 	bl	800c9c2 <USBD_CtlError>
                break;
 800c194:	e091      	b.n	800c2ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	da0b      	bge.n	800c1b6 <USBD_StdEPReq+0x212>
 800c19e:	7bbb      	ldrb	r3, [r7, #14]
 800c1a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	4413      	add	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	3310      	adds	r3, #16
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	e00b      	b.n	800c1ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1b6:	7bbb      	ldrb	r3, [r7, #14]
 800c1b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1bc:	4613      	mov	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2202      	movs	r2, #2
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fc61 	bl	800caa4 <USBD_CtlSendData>
              break;
 800c1e2:	e06a      	b.n	800c2ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	da11      	bge.n	800c210 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
 800c1ee:	f003 020f 	and.w	r2, r3, #15
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	440b      	add	r3, r1
 800c1fe:	3324      	adds	r3, #36	@ 0x24
 800c200:	881b      	ldrh	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d117      	bne.n	800c236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fbda 	bl	800c9c2 <USBD_CtlError>
                  break;
 800c20e:	e054      	b.n	800c2ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c210:	7bbb      	ldrb	r3, [r7, #14]
 800c212:	f003 020f 	and.w	r2, r3, #15
 800c216:	6879      	ldr	r1, [r7, #4]
 800c218:	4613      	mov	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	440b      	add	r3, r1
 800c222:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c226:	881b      	ldrh	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d104      	bne.n	800c236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fbc7 	bl	800c9c2 <USBD_CtlError>
                  break;
 800c234:	e041      	b.n	800c2ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c236:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	da0b      	bge.n	800c256 <USBD_StdEPReq+0x2b2>
 800c23e:	7bbb      	ldrb	r3, [r7, #14]
 800c240:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c244:	4613      	mov	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	3310      	adds	r3, #16
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	4413      	add	r3, r2
 800c252:	3304      	adds	r3, #4
 800c254:	e00b      	b.n	800c26e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c256:	7bbb      	ldrb	r3, [r7, #14]
 800c258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c25c:	4613      	mov	r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	4413      	add	r3, r2
 800c26c:	3304      	adds	r3, #4
 800c26e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c270:	7bbb      	ldrb	r3, [r7, #14]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d002      	beq.n	800c27c <USBD_StdEPReq+0x2d8>
 800c276:	7bbb      	ldrb	r3, [r7, #14]
 800c278:	2b80      	cmp	r3, #128	@ 0x80
 800c27a:	d103      	bne.n	800c284 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	2200      	movs	r2, #0
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	e00e      	b.n	800c2a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c284:	7bbb      	ldrb	r3, [r7, #14]
 800c286:	4619      	mov	r1, r3
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f001 f99d 	bl	800d5c8 <USBD_LL_IsStallEP>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d003      	beq.n	800c29c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	2201      	movs	r2, #1
 800c298:	601a      	str	r2, [r3, #0]
 800c29a:	e002      	b.n	800c2a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2202      	movs	r2, #2
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fbfb 	bl	800caa4 <USBD_CtlSendData>
              break;
 800c2ae:	e004      	b.n	800c2ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fb85 	bl	800c9c2 <USBD_CtlError>
              break;
 800c2b8:	bf00      	nop
          }
          break;
 800c2ba:	e004      	b.n	800c2c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fb7f 	bl	800c9c2 <USBD_CtlError>
          break;
 800c2c4:	bf00      	nop
      }
      break;
 800c2c6:	e005      	b.n	800c2d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2c8:	6839      	ldr	r1, [r7, #0]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 fb79 	bl	800c9c2 <USBD_CtlError>
      break;
 800c2d0:	e000      	b.n	800c2d4 <USBD_StdEPReq+0x330>
      break;
 800c2d2:	bf00      	nop
  }

  return ret;
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
	...

0800c2e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	885b      	ldrh	r3, [r3, #2]
 800c2fa:	0a1b      	lsrs	r3, r3, #8
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	3b01      	subs	r3, #1
 800c300:	2b0e      	cmp	r3, #14
 800c302:	f200 8152 	bhi.w	800c5aa <USBD_GetDescriptor+0x2ca>
 800c306:	a201      	add	r2, pc, #4	@ (adr r2, 800c30c <USBD_GetDescriptor+0x2c>)
 800c308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30c:	0800c37d 	.word	0x0800c37d
 800c310:	0800c395 	.word	0x0800c395
 800c314:	0800c3d5 	.word	0x0800c3d5
 800c318:	0800c5ab 	.word	0x0800c5ab
 800c31c:	0800c5ab 	.word	0x0800c5ab
 800c320:	0800c54b 	.word	0x0800c54b
 800c324:	0800c577 	.word	0x0800c577
 800c328:	0800c5ab 	.word	0x0800c5ab
 800c32c:	0800c5ab 	.word	0x0800c5ab
 800c330:	0800c5ab 	.word	0x0800c5ab
 800c334:	0800c5ab 	.word	0x0800c5ab
 800c338:	0800c5ab 	.word	0x0800c5ab
 800c33c:	0800c5ab 	.word	0x0800c5ab
 800c340:	0800c5ab 	.word	0x0800c5ab
 800c344:	0800c349 	.word	0x0800c349
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c34e:	69db      	ldr	r3, [r3, #28]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00b      	beq.n	800c36c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c35a:	69db      	ldr	r3, [r3, #28]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	7c12      	ldrb	r2, [r2, #16]
 800c360:	f107 0108 	add.w	r1, r7, #8
 800c364:	4610      	mov	r0, r2
 800c366:	4798      	blx	r3
 800c368:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c36a:	e126      	b.n	800c5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fb27 	bl	800c9c2 <USBD_CtlError>
        err++;
 800c374:	7afb      	ldrb	r3, [r7, #11]
 800c376:	3301      	adds	r3, #1
 800c378:	72fb      	strb	r3, [r7, #11]
      break;
 800c37a:	e11e      	b.n	800c5ba <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	7c12      	ldrb	r2, [r2, #16]
 800c388:	f107 0108 	add.w	r1, r7, #8
 800c38c:	4610      	mov	r0, r2
 800c38e:	4798      	blx	r3
 800c390:	60f8      	str	r0, [r7, #12]
      break;
 800c392:	e112      	b.n	800c5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	7c1b      	ldrb	r3, [r3, #16]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10d      	bne.n	800c3b8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3a4:	f107 0208 	add.w	r2, r7, #8
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	4798      	blx	r3
 800c3ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3b6:	e100      	b.n	800c5ba <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3c0:	f107 0208 	add.w	r2, r7, #8
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	4798      	blx	r3
 800c3c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	2202      	movs	r2, #2
 800c3d0:	701a      	strb	r2, [r3, #0]
      break;
 800c3d2:	e0f2      	b.n	800c5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	885b      	ldrh	r3, [r3, #2]
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b05      	cmp	r3, #5
 800c3dc:	f200 80ac 	bhi.w	800c538 <USBD_GetDescriptor+0x258>
 800c3e0:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e8 <USBD_GetDescriptor+0x108>)
 800c3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e6:	bf00      	nop
 800c3e8:	0800c401 	.word	0x0800c401
 800c3ec:	0800c435 	.word	0x0800c435
 800c3f0:	0800c469 	.word	0x0800c469
 800c3f4:	0800c49d 	.word	0x0800c49d
 800c3f8:	0800c4d1 	.word	0x0800c4d1
 800c3fc:	0800c505 	.word	0x0800c505
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00b      	beq.n	800c424 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	7c12      	ldrb	r2, [r2, #16]
 800c418:	f107 0108 	add.w	r1, r7, #8
 800c41c:	4610      	mov	r0, r2
 800c41e:	4798      	blx	r3
 800c420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c422:	e091      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 facb 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c42c:	7afb      	ldrb	r3, [r7, #11]
 800c42e:	3301      	adds	r3, #1
 800c430:	72fb      	strb	r3, [r7, #11]
          break;
 800c432:	e089      	b.n	800c548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00b      	beq.n	800c458 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	7c12      	ldrb	r2, [r2, #16]
 800c44c:	f107 0108 	add.w	r1, r7, #8
 800c450:	4610      	mov	r0, r2
 800c452:	4798      	blx	r3
 800c454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c456:	e077      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fab1 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c460:	7afb      	ldrb	r3, [r7, #11]
 800c462:	3301      	adds	r3, #1
 800c464:	72fb      	strb	r3, [r7, #11]
          break;
 800c466:	e06f      	b.n	800c548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00b      	beq.n	800c48c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	7c12      	ldrb	r2, [r2, #16]
 800c480:	f107 0108 	add.w	r1, r7, #8
 800c484:	4610      	mov	r0, r2
 800c486:	4798      	blx	r3
 800c488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c48a:	e05d      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c48c:	6839      	ldr	r1, [r7, #0]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 fa97 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c494:	7afb      	ldrb	r3, [r7, #11]
 800c496:	3301      	adds	r3, #1
 800c498:	72fb      	strb	r3, [r7, #11]
          break;
 800c49a:	e055      	b.n	800c548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00b      	beq.n	800c4c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	7c12      	ldrb	r2, [r2, #16]
 800c4b4:	f107 0108 	add.w	r1, r7, #8
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	4798      	blx	r3
 800c4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4be:	e043      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fa7d 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c4c8:	7afb      	ldrb	r3, [r7, #11]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ce:	e03b      	b.n	800c548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4d6:	695b      	ldr	r3, [r3, #20]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00b      	beq.n	800c4f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	7c12      	ldrb	r2, [r2, #16]
 800c4e8:	f107 0108 	add.w	r1, r7, #8
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	4798      	blx	r3
 800c4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4f2:	e029      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fa63 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c4fc:	7afb      	ldrb	r3, [r7, #11]
 800c4fe:	3301      	adds	r3, #1
 800c500:	72fb      	strb	r3, [r7, #11]
          break;
 800c502:	e021      	b.n	800c548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00b      	beq.n	800c528 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	7c12      	ldrb	r2, [r2, #16]
 800c51c:	f107 0108 	add.w	r1, r7, #8
 800c520:	4610      	mov	r0, r2
 800c522:	4798      	blx	r3
 800c524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c526:	e00f      	b.n	800c548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c528:	6839      	ldr	r1, [r7, #0]
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 fa49 	bl	800c9c2 <USBD_CtlError>
            err++;
 800c530:	7afb      	ldrb	r3, [r7, #11]
 800c532:	3301      	adds	r3, #1
 800c534:	72fb      	strb	r3, [r7, #11]
          break;
 800c536:	e007      	b.n	800c548 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fa41 	bl	800c9c2 <USBD_CtlError>
          err++;
 800c540:	7afb      	ldrb	r3, [r7, #11]
 800c542:	3301      	adds	r3, #1
 800c544:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c546:	bf00      	nop
      }
      break;
 800c548:	e037      	b.n	800c5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	7c1b      	ldrb	r3, [r3, #16]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d109      	bne.n	800c566 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c55a:	f107 0208 	add.w	r2, r7, #8
 800c55e:	4610      	mov	r0, r2
 800c560:	4798      	blx	r3
 800c562:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c564:	e029      	b.n	800c5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fa2a 	bl	800c9c2 <USBD_CtlError>
        err++;
 800c56e:	7afb      	ldrb	r3, [r7, #11]
 800c570:	3301      	adds	r3, #1
 800c572:	72fb      	strb	r3, [r7, #11]
      break;
 800c574:	e021      	b.n	800c5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	7c1b      	ldrb	r3, [r3, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10d      	bne.n	800c59a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c586:	f107 0208 	add.w	r2, r7, #8
 800c58a:	4610      	mov	r0, r2
 800c58c:	4798      	blx	r3
 800c58e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3301      	adds	r3, #1
 800c594:	2207      	movs	r2, #7
 800c596:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c598:	e00f      	b.n	800c5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fa10 	bl	800c9c2 <USBD_CtlError>
        err++;
 800c5a2:	7afb      	ldrb	r3, [r7, #11]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5a8:	e007      	b.n	800c5ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 fa08 	bl	800c9c2 <USBD_CtlError>
      err++;
 800c5b2:	7afb      	ldrb	r3, [r7, #11]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c5b8:	bf00      	nop
  }

  if (err != 0U)
 800c5ba:	7afb      	ldrb	r3, [r7, #11]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d11e      	bne.n	800c5fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	88db      	ldrh	r3, [r3, #6]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d016      	beq.n	800c5f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c5c8:	893b      	ldrh	r3, [r7, #8]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00e      	beq.n	800c5ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	88da      	ldrh	r2, [r3, #6]
 800c5d2:	893b      	ldrh	r3, [r7, #8]
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	bf28      	it	cs
 800c5d8:	4613      	movcs	r3, r2
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5de:	893b      	ldrh	r3, [r7, #8]
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	68f9      	ldr	r1, [r7, #12]
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fa5d 	bl	800caa4 <USBD_CtlSendData>
 800c5ea:	e009      	b.n	800c600 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f9e7 	bl	800c9c2 <USBD_CtlError>
 800c5f4:	e004      	b.n	800c600 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 faae 	bl	800cb58 <USBD_CtlSendStatus>
 800c5fc:	e000      	b.n	800c600 <USBD_GetDescriptor+0x320>
    return;
 800c5fe:	bf00      	nop
  }
}
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop

0800c608 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	889b      	ldrh	r3, [r3, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d131      	bne.n	800c67e <USBD_SetAddress+0x76>
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	88db      	ldrh	r3, [r3, #6]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d12d      	bne.n	800c67e <USBD_SetAddress+0x76>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	885b      	ldrh	r3, [r3, #2]
 800c626:	2b7f      	cmp	r3, #127	@ 0x7f
 800c628:	d829      	bhi.n	800c67e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	885b      	ldrh	r3, [r3, #2]
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c634:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b03      	cmp	r3, #3
 800c640:	d104      	bne.n	800c64c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c642:	6839      	ldr	r1, [r7, #0]
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 f9bc 	bl	800c9c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c64a:	e01d      	b.n	800c688 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	7bfa      	ldrb	r2, [r7, #15]
 800c650:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c654:	7bfb      	ldrb	r3, [r7, #15]
 800c656:	4619      	mov	r1, r3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 ffe1 	bl	800d620 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 fa7a 	bl	800cb58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c664:	7bfb      	ldrb	r3, [r7, #15]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d004      	beq.n	800c674 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2202      	movs	r2, #2
 800c66e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c672:	e009      	b.n	800c688 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c67c:	e004      	b.n	800c688 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c67e:	6839      	ldr	r1, [r7, #0]
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f99e 	bl	800c9c2 <USBD_CtlError>
  }
}
 800c686:	bf00      	nop
 800c688:	bf00      	nop
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c69a:	2300      	movs	r3, #0
 800c69c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	885b      	ldrh	r3, [r3, #2]
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	4b4e      	ldr	r3, [pc, #312]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c6a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c6a8:	4b4d      	ldr	r3, [pc, #308]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d905      	bls.n	800c6bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 f985 	bl	800c9c2 <USBD_CtlError>
    return USBD_FAIL;
 800c6b8:	2303      	movs	r3, #3
 800c6ba:	e08c      	b.n	800c7d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d002      	beq.n	800c6ce <USBD_SetConfig+0x3e>
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d029      	beq.n	800c720 <USBD_SetConfig+0x90>
 800c6cc:	e075      	b.n	800c7ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6ce:	4b44      	ldr	r3, [pc, #272]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d020      	beq.n	800c718 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6d6:	4b42      	ldr	r3, [pc, #264]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6e0:	4b3f      	ldr	r3, [pc, #252]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f7fe ffb9 	bl	800b65e <USBD_SetClassConfig>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d008      	beq.n	800c708 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6f6:	6839      	ldr	r1, [r7, #0]
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 f962 	bl	800c9c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2202      	movs	r2, #2
 800c702:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c706:	e065      	b.n	800c7d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 fa25 	bl	800cb58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2203      	movs	r2, #3
 800c712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c716:	e05d      	b.n	800c7d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fa1d 	bl	800cb58 <USBD_CtlSendStatus>
      break;
 800c71e:	e059      	b.n	800c7d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c720:	4b2f      	ldr	r3, [pc, #188]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d112      	bne.n	800c74e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2202      	movs	r2, #2
 800c72c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c730:	4b2b      	ldr	r3, [pc, #172]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	461a      	mov	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c73a:	4b29      	ldr	r3, [pc, #164]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	4619      	mov	r1, r3
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7fe ffa8 	bl	800b696 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fa06 	bl	800cb58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c74c:	e042      	b.n	800c7d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c74e:	4b24      	ldr	r3, [pc, #144]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d02a      	beq.n	800c7b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	b2db      	uxtb	r3, r3
 800c762:	4619      	mov	r1, r3
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7fe ff96 	bl	800b696 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c76a:	4b1d      	ldr	r3, [pc, #116]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	461a      	mov	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c774:	4b1a      	ldr	r3, [pc, #104]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7fe ff6f 	bl	800b65e <USBD_SetClassConfig>
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00f      	beq.n	800c7aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f918 	bl	800c9c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	b2db      	uxtb	r3, r3
 800c798:	4619      	mov	r1, r3
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7fe ff7b 	bl	800b696 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2202      	movs	r2, #2
 800c7a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c7a8:	e014      	b.n	800c7d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f9d4 	bl	800cb58 <USBD_CtlSendStatus>
      break;
 800c7b0:	e010      	b.n	800c7d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f9d0 	bl	800cb58 <USBD_CtlSendStatus>
      break;
 800c7b8:	e00c      	b.n	800c7d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f900 	bl	800c9c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7c2:	4b07      	ldr	r3, [pc, #28]	@ (800c7e0 <USBD_SetConfig+0x150>)
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7fe ff64 	bl	800b696 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7d2:	bf00      	nop
  }

  return ret;
 800c7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	20003584 	.word	0x20003584

0800c7e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	88db      	ldrh	r3, [r3, #6]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d004      	beq.n	800c800 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f8e2 	bl	800c9c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7fe:	e023      	b.n	800c848 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c806:	b2db      	uxtb	r3, r3
 800c808:	2b02      	cmp	r3, #2
 800c80a:	dc02      	bgt.n	800c812 <USBD_GetConfig+0x2e>
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	dc03      	bgt.n	800c818 <USBD_GetConfig+0x34>
 800c810:	e015      	b.n	800c83e <USBD_GetConfig+0x5a>
 800c812:	2b03      	cmp	r3, #3
 800c814:	d00b      	beq.n	800c82e <USBD_GetConfig+0x4a>
 800c816:	e012      	b.n	800c83e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3308      	adds	r3, #8
 800c822:	2201      	movs	r2, #1
 800c824:	4619      	mov	r1, r3
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f93c 	bl	800caa4 <USBD_CtlSendData>
        break;
 800c82c:	e00c      	b.n	800c848 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	3304      	adds	r3, #4
 800c832:	2201      	movs	r2, #1
 800c834:	4619      	mov	r1, r3
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f934 	bl	800caa4 <USBD_CtlSendData>
        break;
 800c83c:	e004      	b.n	800c848 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 f8be 	bl	800c9c2 <USBD_CtlError>
        break;
 800c846:	bf00      	nop
}
 800c848:	bf00      	nop
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c860:	b2db      	uxtb	r3, r3
 800c862:	3b01      	subs	r3, #1
 800c864:	2b02      	cmp	r3, #2
 800c866:	d81e      	bhi.n	800c8a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	88db      	ldrh	r3, [r3, #6]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d004      	beq.n	800c87a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f8a5 	bl	800c9c2 <USBD_CtlError>
        break;
 800c878:	e01a      	b.n	800c8b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c886:	2b00      	cmp	r3, #0
 800c888:	d005      	beq.n	800c896 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	f043 0202 	orr.w	r2, r3, #2
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	330c      	adds	r3, #12
 800c89a:	2202      	movs	r2, #2
 800c89c:	4619      	mov	r1, r3
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f900 	bl	800caa4 <USBD_CtlSendData>
      break;
 800c8a4:	e004      	b.n	800c8b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c8a6:	6839      	ldr	r1, [r7, #0]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f88a 	bl	800c9c2 <USBD_CtlError>
      break;
 800c8ae:	bf00      	nop
  }
}
 800c8b0:	bf00      	nop
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	885b      	ldrh	r3, [r3, #2]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d107      	bne.n	800c8da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f940 	bl	800cb58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8d8:	e013      	b.n	800c902 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	885b      	ldrh	r3, [r3, #2]
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d10b      	bne.n	800c8fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	889b      	ldrh	r3, [r3, #4]
 800c8e6:	0a1b      	lsrs	r3, r3, #8
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f930 	bl	800cb58 <USBD_CtlSendStatus>
}
 800c8f8:	e003      	b.n	800c902 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f860 	bl	800c9c2 <USBD_CtlError>
}
 800c902:	bf00      	nop
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	3b01      	subs	r3, #1
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d80b      	bhi.n	800c93a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	885b      	ldrh	r3, [r3, #2]
 800c926:	2b01      	cmp	r3, #1
 800c928:	d10c      	bne.n	800c944 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f910 	bl	800cb58 <USBD_CtlSendStatus>
      }
      break;
 800c938:	e004      	b.n	800c944 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f840 	bl	800c9c2 <USBD_CtlError>
      break;
 800c942:	e000      	b.n	800c946 <USBD_ClrFeature+0x3c>
      break;
 800c944:	bf00      	nop
  }
}
 800c946:	bf00      	nop
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	781a      	ldrb	r2, [r3, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	3301      	adds	r3, #1
 800c968:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	781a      	ldrb	r2, [r3, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	3301      	adds	r3, #1
 800c976:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f7ff fa16 	bl	800bdaa <SWAPBYTE>
 800c97e:	4603      	mov	r3, r0
 800c980:	461a      	mov	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3301      	adds	r3, #1
 800c98a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	3301      	adds	r3, #1
 800c990:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f7ff fa09 	bl	800bdaa <SWAPBYTE>
 800c998:	4603      	mov	r3, r0
 800c99a:	461a      	mov	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f7ff f9fc 	bl	800bdaa <SWAPBYTE>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	80da      	strh	r2, [r3, #6]
}
 800c9ba:	bf00      	nop
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9cc:	2180      	movs	r1, #128	@ 0x80
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fd8e 	bl	800d4f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 fd8a 	bl	800d4f0 <USBD_LL_StallEP>
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d036      	beq.n	800ca68 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9fe:	6938      	ldr	r0, [r7, #16]
 800ca00:	f000 f836 	bl	800ca70 <USBD_GetLen>
 800ca04:	4603      	mov	r3, r0
 800ca06:	3301      	adds	r3, #1
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	005b      	lsls	r3, r3, #1
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	4413      	add	r3, r2
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	7812      	ldrb	r2, [r2, #0]
 800ca1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
 800ca20:	3301      	adds	r3, #1
 800ca22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	4413      	add	r3, r2
 800ca2a:	2203      	movs	r2, #3
 800ca2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	3301      	adds	r3, #1
 800ca32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca34:	e013      	b.n	800ca5e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	7812      	ldrb	r2, [r2, #0]
 800ca40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	3301      	adds	r3, #1
 800ca46:	613b      	str	r3, [r7, #16]
    idx++;
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca4e:	7dfb      	ldrb	r3, [r7, #23]
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	4413      	add	r3, r2
 800ca54:	2200      	movs	r2, #0
 800ca56:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca58:	7dfb      	ldrb	r3, [r7, #23]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e7      	bne.n	800ca36 <USBD_GetString+0x52>
 800ca66:	e000      	b.n	800ca6a <USBD_GetString+0x86>
    return;
 800ca68:	bf00      	nop
  }
}
 800ca6a:	3718      	adds	r7, #24
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca80:	e005      	b.n	800ca8e <USBD_GetLen+0x1e>
  {
    len++;
 800ca82:	7bfb      	ldrb	r3, [r7, #15]
 800ca84:	3301      	adds	r3, #1
 800ca86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1f5      	bne.n	800ca82 <USBD_GetLen+0x12>
  }

  return len;
 800ca96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2202      	movs	r2, #2
 800cab4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	2100      	movs	r1, #0
 800caca:	68f8      	ldr	r0, [r7, #12]
 800cacc:	f000 fdde 	bl	800d68c <USBD_LL_Transmit>

  return USBD_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	60f8      	str	r0, [r7, #12]
 800cae2:	60b9      	str	r1, [r7, #8]
 800cae4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	2100      	movs	r1, #0
 800caec:	68f8      	ldr	r0, [r7, #12]
 800caee:	f000 fdcd 	bl	800d68c <USBD_LL_Transmit>

  return USBD_OK;
 800caf2:	2300      	movs	r3, #0
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2203      	movs	r2, #3
 800cb0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	2100      	movs	r1, #0
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f000 fde8 	bl	800d6fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b084      	sub	sp, #16
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	60b9      	str	r1, [r7, #8]
 800cb40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	2100      	movs	r1, #0
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f000 fdd7 	bl	800d6fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2204      	movs	r2, #4
 800cb64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb68:	2300      	movs	r3, #0
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fd8c 	bl	800d68c <USBD_LL_Transmit>

  return USBD_OK;
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b082      	sub	sp, #8
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2205      	movs	r2, #5
 800cb8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb8e:	2300      	movs	r3, #0
 800cb90:	2200      	movs	r2, #0
 800cb92:	2100      	movs	r1, #0
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fdb1 	bl	800d6fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	4912      	ldr	r1, [pc, #72]	@ (800cbf4 <MX_USB_DEVICE_Init+0x50>)
 800cbac:	4812      	ldr	r0, [pc, #72]	@ (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbae:	f7fe fcd9 	bl	800b564 <USBD_Init>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbb8:	f7f4 fb5d 	bl	8001276 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cbbc:	490f      	ldr	r1, [pc, #60]	@ (800cbfc <MX_USB_DEVICE_Init+0x58>)
 800cbbe:	480e      	ldr	r0, [pc, #56]	@ (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbc0:	f7fe fd00 	bl	800b5c4 <USBD_RegisterClass>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d001      	beq.n	800cbce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cbca:	f7f4 fb54 	bl	8001276 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cbce:	490c      	ldr	r1, [pc, #48]	@ (800cc00 <MX_USB_DEVICE_Init+0x5c>)
 800cbd0:	4809      	ldr	r0, [pc, #36]	@ (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbd2:	f7fe fbf7 	bl	800b3c4 <USBD_CDC_RegisterInterface>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d001      	beq.n	800cbe0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbdc:	f7f4 fb4b 	bl	8001276 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbe0:	4805      	ldr	r0, [pc, #20]	@ (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbe2:	f7fe fd25 	bl	800b630 <USBD_Start>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbec:	f7f4 fb43 	bl	8001276 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cbf0:	bf00      	nop
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	200000ac 	.word	0x200000ac
 800cbf8:	20003588 	.word	0x20003588
 800cbfc:	20000018 	.word	0x20000018
 800cc00:	20000098 	.word	0x20000098

0800cc04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc08:	2200      	movs	r2, #0
 800cc0a:	4905      	ldr	r1, [pc, #20]	@ (800cc20 <CDC_Init_FS+0x1c>)
 800cc0c:	4805      	ldr	r0, [pc, #20]	@ (800cc24 <CDC_Init_FS+0x20>)
 800cc0e:	f7fe fbf3 	bl	800b3f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc12:	4905      	ldr	r1, [pc, #20]	@ (800cc28 <CDC_Init_FS+0x24>)
 800cc14:	4803      	ldr	r0, [pc, #12]	@ (800cc24 <CDC_Init_FS+0x20>)
 800cc16:	f7fe fc11 	bl	800b43c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	20004064 	.word	0x20004064
 800cc24:	20003588 	.word	0x20003588
 800cc28:	20003864 	.word	0x20003864

0800cc2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	71fb      	strb	r3, [r7, #7]
 800cc48:	4613      	mov	r3, r2
 800cc4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc4c:	79fb      	ldrb	r3, [r7, #7]
 800cc4e:	2b23      	cmp	r3, #35	@ 0x23
 800cc50:	d84a      	bhi.n	800cce8 <CDC_Control_FS+0xac>
 800cc52:	a201      	add	r2, pc, #4	@ (adr r2, 800cc58 <CDC_Control_FS+0x1c>)
 800cc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc58:	0800cce9 	.word	0x0800cce9
 800cc5c:	0800cce9 	.word	0x0800cce9
 800cc60:	0800cce9 	.word	0x0800cce9
 800cc64:	0800cce9 	.word	0x0800cce9
 800cc68:	0800cce9 	.word	0x0800cce9
 800cc6c:	0800cce9 	.word	0x0800cce9
 800cc70:	0800cce9 	.word	0x0800cce9
 800cc74:	0800cce9 	.word	0x0800cce9
 800cc78:	0800cce9 	.word	0x0800cce9
 800cc7c:	0800cce9 	.word	0x0800cce9
 800cc80:	0800cce9 	.word	0x0800cce9
 800cc84:	0800cce9 	.word	0x0800cce9
 800cc88:	0800cce9 	.word	0x0800cce9
 800cc8c:	0800cce9 	.word	0x0800cce9
 800cc90:	0800cce9 	.word	0x0800cce9
 800cc94:	0800cce9 	.word	0x0800cce9
 800cc98:	0800cce9 	.word	0x0800cce9
 800cc9c:	0800cce9 	.word	0x0800cce9
 800cca0:	0800cce9 	.word	0x0800cce9
 800cca4:	0800cce9 	.word	0x0800cce9
 800cca8:	0800cce9 	.word	0x0800cce9
 800ccac:	0800cce9 	.word	0x0800cce9
 800ccb0:	0800cce9 	.word	0x0800cce9
 800ccb4:	0800cce9 	.word	0x0800cce9
 800ccb8:	0800cce9 	.word	0x0800cce9
 800ccbc:	0800cce9 	.word	0x0800cce9
 800ccc0:	0800cce9 	.word	0x0800cce9
 800ccc4:	0800cce9 	.word	0x0800cce9
 800ccc8:	0800cce9 	.word	0x0800cce9
 800cccc:	0800cce9 	.word	0x0800cce9
 800ccd0:	0800cce9 	.word	0x0800cce9
 800ccd4:	0800cce9 	.word	0x0800cce9
 800ccd8:	0800cce9 	.word	0x0800cce9
 800ccdc:	0800cce9 	.word	0x0800cce9
 800cce0:	0800cce9 	.word	0x0800cce9
 800cce4:	0800cce9 	.word	0x0800cce9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cce8:	bf00      	nop
  }

  return (USBD_OK);
 800ccea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd02:	6879      	ldr	r1, [r7, #4]
 800cd04:	4808      	ldr	r0, [pc, #32]	@ (800cd28 <CDC_Receive_FS+0x30>)
 800cd06:	f7fe fb99 	bl	800b43c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd0a:	4807      	ldr	r0, [pc, #28]	@ (800cd28 <CDC_Receive_FS+0x30>)
 800cd0c:	f7fe fbf4 	bl	800b4f8 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  //USB_My_Receive(Buf, *Len);
  comms_cdc_rx_callback(Buf, *Len);
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4619      	mov	r1, r3
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7f3 ff98 	bl	8000c4c <comms_cdc_rx_callback>

  return (USBD_OK);
 800cd1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	20003588 	.word	0x20003588

0800cd2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	460b      	mov	r3, r1
 800cd36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd3c:	4b0d      	ldr	r3, [pc, #52]	@ (800cd74 <CDC_Transmit_FS+0x48>)
 800cd3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d001      	beq.n	800cd52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e00b      	b.n	800cd6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd52:	887b      	ldrh	r3, [r7, #2]
 800cd54:	461a      	mov	r2, r3
 800cd56:	6879      	ldr	r1, [r7, #4]
 800cd58:	4806      	ldr	r0, [pc, #24]	@ (800cd74 <CDC_Transmit_FS+0x48>)
 800cd5a:	f7fe fb4d 	bl	800b3f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd5e:	4805      	ldr	r0, [pc, #20]	@ (800cd74 <CDC_Transmit_FS+0x48>)
 800cd60:	f7fe fb8a 	bl	800b478 <USBD_CDC_TransmitPacket>
 800cd64:	4603      	mov	r3, r0
 800cd66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	20003588 	.word	0x20003588

0800cd78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b087      	sub	sp, #28
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	4613      	mov	r3, r2
 800cd84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd86:	2300      	movs	r3, #0
 800cd88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	371c      	adds	r7, #28
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
	...

0800cd9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	4603      	mov	r3, r0
 800cda4:	6039      	str	r1, [r7, #0]
 800cda6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	2212      	movs	r2, #18
 800cdac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cdae:	4b03      	ldr	r3, [pc, #12]	@ (800cdbc <USBD_FS_DeviceDescriptor+0x20>)
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	200000cc 	.word	0x200000cc

0800cdc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	6039      	str	r1, [r7, #0]
 800cdca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	2204      	movs	r2, #4
 800cdd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdd2:	4b03      	ldr	r3, [pc, #12]	@ (800cde0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr
 800cde0:	200000ec 	.word	0x200000ec

0800cde4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	4603      	mov	r3, r0
 800cdec:	6039      	str	r1, [r7, #0]
 800cdee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdf0:	79fb      	ldrb	r3, [r7, #7]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d105      	bne.n	800ce02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdf6:	683a      	ldr	r2, [r7, #0]
 800cdf8:	4907      	ldr	r1, [pc, #28]	@ (800ce18 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdfa:	4808      	ldr	r0, [pc, #32]	@ (800ce1c <USBD_FS_ProductStrDescriptor+0x38>)
 800cdfc:	f7ff fdf2 	bl	800c9e4 <USBD_GetString>
 800ce00:	e004      	b.n	800ce0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce02:	683a      	ldr	r2, [r7, #0]
 800ce04:	4904      	ldr	r1, [pc, #16]	@ (800ce18 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce06:	4805      	ldr	r0, [pc, #20]	@ (800ce1c <USBD_FS_ProductStrDescriptor+0x38>)
 800ce08:	f7ff fdec 	bl	800c9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce0c:	4b02      	ldr	r3, [pc, #8]	@ (800ce18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	20004864 	.word	0x20004864
 800ce1c:	0800d8f8 	.word	0x0800d8f8

0800ce20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	6039      	str	r1, [r7, #0]
 800ce2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce2c:	683a      	ldr	r2, [r7, #0]
 800ce2e:	4904      	ldr	r1, [pc, #16]	@ (800ce40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce30:	4804      	ldr	r0, [pc, #16]	@ (800ce44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce32:	f7ff fdd7 	bl	800c9e4 <USBD_GetString>
  return USBD_StrDesc;
 800ce36:	4b02      	ldr	r3, [pc, #8]	@ (800ce40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	20004864 	.word	0x20004864
 800ce44:	0800d910 	.word	0x0800d910

0800ce48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	221a      	movs	r2, #26
 800ce58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce5a:	f000 f855 	bl	800cf08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce5e:	4b02      	ldr	r3, [pc, #8]	@ (800ce68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	200000f0 	.word	0x200000f0

0800ce6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	4603      	mov	r3, r0
 800ce74:	6039      	str	r1, [r7, #0]
 800ce76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce78:	79fb      	ldrb	r3, [r7, #7]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d105      	bne.n	800ce8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce7e:	683a      	ldr	r2, [r7, #0]
 800ce80:	4907      	ldr	r1, [pc, #28]	@ (800cea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce82:	4808      	ldr	r0, [pc, #32]	@ (800cea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce84:	f7ff fdae 	bl	800c9e4 <USBD_GetString>
 800ce88:	e004      	b.n	800ce94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	4904      	ldr	r1, [pc, #16]	@ (800cea0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce8e:	4805      	ldr	r0, [pc, #20]	@ (800cea4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce90:	f7ff fda8 	bl	800c9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce94:	4b02      	ldr	r3, [pc, #8]	@ (800cea0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	20004864 	.word	0x20004864
 800cea4:	0800d924 	.word	0x0800d924

0800cea8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	4603      	mov	r3, r0
 800ceb0:	6039      	str	r1, [r7, #0]
 800ceb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d105      	bne.n	800cec6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	4907      	ldr	r1, [pc, #28]	@ (800cedc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cebe:	4808      	ldr	r0, [pc, #32]	@ (800cee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cec0:	f7ff fd90 	bl	800c9e4 <USBD_GetString>
 800cec4:	e004      	b.n	800ced0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cec6:	683a      	ldr	r2, [r7, #0]
 800cec8:	4904      	ldr	r1, [pc, #16]	@ (800cedc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ceca:	4805      	ldr	r0, [pc, #20]	@ (800cee0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cecc:	f7ff fd8a 	bl	800c9e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ced0:	4b02      	ldr	r3, [pc, #8]	@ (800cedc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	20004864 	.word	0x20004864
 800cee0:	0800d930 	.word	0x0800d930

0800cee4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	4603      	mov	r3, r0
 800ceec:	6039      	str	r1, [r7, #0]
 800ceee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	220c      	movs	r2, #12
 800cef4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cef6:	4b03      	ldr	r3, [pc, #12]	@ (800cf04 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	370c      	adds	r7, #12
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr
 800cf04:	200000e0 	.word	0x200000e0

0800cf08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf0e:	4b0f      	ldr	r3, [pc, #60]	@ (800cf4c <Get_SerialNum+0x44>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf14:	4b0e      	ldr	r3, [pc, #56]	@ (800cf50 <Get_SerialNum+0x48>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf1a:	4b0e      	ldr	r3, [pc, #56]	@ (800cf54 <Get_SerialNum+0x4c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	4413      	add	r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d009      	beq.n	800cf42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf2e:	2208      	movs	r2, #8
 800cf30:	4909      	ldr	r1, [pc, #36]	@ (800cf58 <Get_SerialNum+0x50>)
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f000 f814 	bl	800cf60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf38:	2204      	movs	r2, #4
 800cf3a:	4908      	ldr	r1, [pc, #32]	@ (800cf5c <Get_SerialNum+0x54>)
 800cf3c:	68b8      	ldr	r0, [r7, #8]
 800cf3e:	f000 f80f 	bl	800cf60 <IntToUnicode>
  }
}
 800cf42:	bf00      	nop
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	1fff7590 	.word	0x1fff7590
 800cf50:	1fff7594 	.word	0x1fff7594
 800cf54:	1fff7598 	.word	0x1fff7598
 800cf58:	200000f2 	.word	0x200000f2
 800cf5c:	20000102 	.word	0x20000102

0800cf60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b087      	sub	sp, #28
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf72:	2300      	movs	r3, #0
 800cf74:	75fb      	strb	r3, [r7, #23]
 800cf76:	e027      	b.n	800cfc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	0f1b      	lsrs	r3, r3, #28
 800cf7c:	2b09      	cmp	r3, #9
 800cf7e:	d80b      	bhi.n	800cf98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	0f1b      	lsrs	r3, r3, #28
 800cf84:	b2da      	uxtb	r2, r3
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
 800cf88:	005b      	lsls	r3, r3, #1
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	440b      	add	r3, r1
 800cf90:	3230      	adds	r2, #48	@ 0x30
 800cf92:	b2d2      	uxtb	r2, r2
 800cf94:	701a      	strb	r2, [r3, #0]
 800cf96:	e00a      	b.n	800cfae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	0f1b      	lsrs	r3, r3, #28
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	7dfb      	ldrb	r3, [r7, #23]
 800cfa0:	005b      	lsls	r3, r3, #1
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	440b      	add	r3, r1
 800cfa8:	3237      	adds	r2, #55	@ 0x37
 800cfaa:	b2d2      	uxtb	r2, r2
 800cfac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	011b      	lsls	r3, r3, #4
 800cfb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	005b      	lsls	r3, r3, #1
 800cfb8:	3301      	adds	r3, #1
 800cfba:	68ba      	ldr	r2, [r7, #8]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfc2:	7dfb      	ldrb	r3, [r7, #23]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	75fb      	strb	r3, [r7, #23]
 800cfc8:	7dfa      	ldrb	r2, [r7, #23]
 800cfca:	79fb      	ldrb	r3, [r7, #7]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d3d3      	bcc.n	800cf78 <IntToUnicode+0x18>
  }
}
 800cfd0:	bf00      	nop
 800cfd2:	bf00      	nop
 800cfd4:	371c      	adds	r7, #28
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
	...

0800cfe0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b0b0      	sub	sp, #192	@ 0xc0
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfe8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800cfec:	2200      	movs	r2, #0
 800cfee:	601a      	str	r2, [r3, #0]
 800cff0:	605a      	str	r2, [r3, #4]
 800cff2:	609a      	str	r2, [r3, #8]
 800cff4:	60da      	str	r2, [r3, #12]
 800cff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cff8:	f107 0318 	add.w	r3, r7, #24
 800cffc:	2294      	movs	r2, #148	@ 0x94
 800cffe:	2100      	movs	r1, #0
 800d000:	4618      	mov	r0, r3
 800d002:	f000 fc33 	bl	800d86c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d00e:	d174      	bne.n	800d0fa <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d010:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d014:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d016:	2300      	movs	r3, #0
 800d018:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d01c:	f107 0318 	add.w	r3, r7, #24
 800d020:	4618      	mov	r0, r3
 800d022:	f7f9 f8b7 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d02c:	f7f4 f923 	bl	8001276 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d030:	4b34      	ldr	r3, [pc, #208]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d034:	4a33      	ldr	r2, [pc, #204]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d036:	f043 0301 	orr.w	r3, r3, #1
 800d03a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d03c:	4b31      	ldr	r3, [pc, #196]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d03e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d040:	f003 0301 	and.w	r3, r3, #1
 800d044:	617b      	str	r3, [r7, #20]
 800d046:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d048:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800d04c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d050:	2302      	movs	r3, #2
 800d052:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d056:	2300      	movs	r3, #0
 800d058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d05c:	2303      	movs	r3, #3
 800d05e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d062:	230a      	movs	r3, #10
 800d064:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d068:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d06c:	4619      	mov	r1, r3
 800d06e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d072:	f7f6 fd4f 	bl	8003b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d076:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d07a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d07e:	2300      	movs	r3, #0
 800d080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d084:	2300      	movs	r3, #0
 800d086:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d08a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d08e:	4619      	mov	r1, r3
 800d090:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d094:	f7f6 fd3e 	bl	8003b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d098:	4b1a      	ldr	r3, [pc, #104]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d09a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d09c:	4a19      	ldr	r2, [pc, #100]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d09e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d0a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d0a4:	4b17      	ldr	r3, [pc, #92]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d0a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d0ac:	613b      	str	r3, [r7, #16]
 800d0ae:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d0b0:	4b14      	ldr	r3, [pc, #80]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d0b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d114      	bne.n	800d0e6 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d0bc:	4b11      	ldr	r3, [pc, #68]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d0be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0c0:	4a10      	ldr	r2, [pc, #64]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d0c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d0c6:	6593      	str	r3, [r2, #88]	@ 0x58
 800d0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d0ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0d0:	60fb      	str	r3, [r7, #12]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d0d4:	f7f8 f966 	bl	80053a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d0da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0dc:	4a09      	ldr	r2, [pc, #36]	@ (800d104 <HAL_PCD_MspInit+0x124>)
 800d0de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d0e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d0e4:	e001      	b.n	800d0ea <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d0e6:	f7f8 f95d 	bl	80053a4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	2043      	movs	r0, #67	@ 0x43
 800d0f0:	f7f6 f963 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0f4:	2043      	movs	r0, #67	@ 0x43
 800d0f6:	f7f6 f97c 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0fa:	bf00      	nop
 800d0fc:	37c0      	adds	r7, #192	@ 0xc0
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	40021000 	.word	0x40021000

0800d108 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d11c:	4619      	mov	r1, r3
 800d11e:	4610      	mov	r0, r2
 800d120:	f7fe fad3 	bl	800b6ca <USBD_LL_SetupStage>
}
 800d124:	bf00      	nop
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d13e:	78fa      	ldrb	r2, [r7, #3]
 800d140:	6879      	ldr	r1, [r7, #4]
 800d142:	4613      	mov	r3, r2
 800d144:	00db      	lsls	r3, r3, #3
 800d146:	4413      	add	r3, r2
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	440b      	add	r3, r1
 800d14c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	78fb      	ldrb	r3, [r7, #3]
 800d154:	4619      	mov	r1, r3
 800d156:	f7fe fb0d 	bl	800b774 <USBD_LL_DataOutStage>
}
 800d15a:	bf00      	nop
 800d15c:	3708      	adds	r7, #8
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b082      	sub	sp, #8
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
 800d16a:	460b      	mov	r3, r1
 800d16c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d174:	78fa      	ldrb	r2, [r7, #3]
 800d176:	6879      	ldr	r1, [r7, #4]
 800d178:	4613      	mov	r3, r2
 800d17a:	00db      	lsls	r3, r3, #3
 800d17c:	4413      	add	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	440b      	add	r3, r1
 800d182:	3348      	adds	r3, #72	@ 0x48
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	78fb      	ldrb	r3, [r7, #3]
 800d188:	4619      	mov	r1, r3
 800d18a:	f7fe fba6 	bl	800b8da <USBD_LL_DataInStage>
}
 800d18e:	bf00      	nop
 800d190:	3708      	adds	r7, #8
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b082      	sub	sp, #8
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fe fce0 	bl	800bb6a <USBD_LL_SOF>
}
 800d1aa:	bf00      	nop
 800d1ac:	3708      	adds	r7, #8
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b084      	sub	sp, #16
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d001      	beq.n	800d1ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d1c6:	f7f4 f856 	bl	8001276 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d1d0:	7bfa      	ldrb	r2, [r7, #15]
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7fe fc84 	bl	800bae2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fe fc2c 	bl	800ba3e <USBD_LL_Reset>
}
 800d1e6:	bf00      	nop
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
	...

0800d1f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	6812      	ldr	r2, [r2, #0]
 800d206:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d20a:	f043 0301 	orr.w	r3, r3, #1
 800d20e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe fc73 	bl	800bb02 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d005      	beq.n	800d230 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d224:	4b04      	ldr	r3, [pc, #16]	@ (800d238 <HAL_PCD_SuspendCallback+0x48>)
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	4a03      	ldr	r2, [pc, #12]	@ (800d238 <HAL_PCD_SuspendCallback+0x48>)
 800d22a:	f043 0306 	orr.w	r3, r3, #6
 800d22e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d230:	bf00      	nop
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	e000ed00 	.word	0xe000ed00

0800d23c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	6812      	ldr	r2, [r2, #0]
 800d252:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d256:	f023 0301 	bic.w	r3, r3, #1
 800d25a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6a1b      	ldr	r3, [r3, #32]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d007      	beq.n	800d274 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d264:	4b08      	ldr	r3, [pc, #32]	@ (800d288 <HAL_PCD_ResumeCallback+0x4c>)
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	4a07      	ldr	r2, [pc, #28]	@ (800d288 <HAL_PCD_ResumeCallback+0x4c>)
 800d26a:	f023 0306 	bic.w	r3, r3, #6
 800d26e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d270:	f000 faf6 	bl	800d860 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fe fc5d 	bl	800bb3a <USBD_LL_Resume>
}
 800d280:	bf00      	nop
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	e000ed00 	.word	0xe000ed00

0800d28c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d29e:	78fa      	ldrb	r2, [r7, #3]
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fe fcb3 	bl	800bc0e <USBD_LL_IsoOUTIncomplete>
}
 800d2a8:	bf00      	nop
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d2c2:	78fa      	ldrb	r2, [r7, #3]
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fe fc6f 	bl	800bbaa <USBD_LL_IsoINIncomplete>
}
 800d2cc:	bf00      	nop
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fe fcc5 	bl	800bc72 <USBD_LL_DevConnected>
}
 800d2e8:	bf00      	nop
 800d2ea:	3708      	adds	r7, #8
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fe fcc2 	bl	800bc88 <USBD_LL_DevDisconnected>
}
 800d304:	bf00      	nop
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d13c      	bne.n	800d396 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d31c:	4a20      	ldr	r2, [pc, #128]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4a1e      	ldr	r2, [pc, #120]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d328:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d32c:	4b1c      	ldr	r3, [pc, #112]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d32e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d332:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d334:	4b1a      	ldr	r3, [pc, #104]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d336:	2206      	movs	r2, #6
 800d338:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d33a:	4b19      	ldr	r3, [pc, #100]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d33c:	2202      	movs	r2, #2
 800d33e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d340:	4b17      	ldr	r3, [pc, #92]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d342:	2202      	movs	r2, #2
 800d344:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d346:	4b16      	ldr	r3, [pc, #88]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d348:	2200      	movs	r2, #0
 800d34a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d34c:	4b14      	ldr	r3, [pc, #80]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d34e:	2200      	movs	r2, #0
 800d350:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d352:	4b13      	ldr	r3, [pc, #76]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d354:	2200      	movs	r2, #0
 800d356:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d358:	4b11      	ldr	r3, [pc, #68]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d35a:	2200      	movs	r2, #0
 800d35c:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d35e:	4b10      	ldr	r3, [pc, #64]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d360:	2200      	movs	r2, #0
 800d362:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d364:	4b0e      	ldr	r3, [pc, #56]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d366:	2200      	movs	r2, #0
 800d368:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d36a:	480d      	ldr	r0, [pc, #52]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d36c:	f7f6 fdae 	bl	8003ecc <HAL_PCD_Init>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d001      	beq.n	800d37a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d376:	f7f3 ff7e 	bl	8001276 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d37a:	2180      	movs	r1, #128	@ 0x80
 800d37c:	4808      	ldr	r0, [pc, #32]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d37e:	f7f7 ff18 	bl	80051b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d382:	2240      	movs	r2, #64	@ 0x40
 800d384:	2100      	movs	r1, #0
 800d386:	4806      	ldr	r0, [pc, #24]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d388:	f7f7 fecc 	bl	8005124 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d38c:	2280      	movs	r2, #128	@ 0x80
 800d38e:	2101      	movs	r1, #1
 800d390:	4803      	ldr	r0, [pc, #12]	@ (800d3a0 <USBD_LL_Init+0x94>)
 800d392:	f7f7 fec7 	bl	8005124 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	20004a64 	.word	0x20004a64

0800d3a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7f6 feaa 	bl	8004114 <HAL_PCD_Start>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d3c4:	7bbb      	ldrb	r3, [r7, #14]
 800d3c6:	2b03      	cmp	r3, #3
 800d3c8:	d816      	bhi.n	800d3f8 <USBD_LL_Start+0x54>
 800d3ca:	a201      	add	r2, pc, #4	@ (adr r2, 800d3d0 <USBD_LL_Start+0x2c>)
 800d3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d0:	0800d3e1 	.word	0x0800d3e1
 800d3d4:	0800d3e7 	.word	0x0800d3e7
 800d3d8:	0800d3ed 	.word	0x0800d3ed
 800d3dc:	0800d3f3 	.word	0x0800d3f3
    case HAL_OK :
      usb_status = USBD_OK;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3e4:	e00b      	b.n	800d3fe <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ea:	e008      	b.n	800d3fe <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f0:	e005      	b.n	800d3fe <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3f2:	2303      	movs	r3, #3
 800d3f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f6:	e002      	b.n	800d3fe <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d3fc:	bf00      	nop
  }
  return usb_status;
 800d3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d400:	4618      	mov	r0, r3
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	4608      	mov	r0, r1
 800d412:	4611      	mov	r1, r2
 800d414:	461a      	mov	r2, r3
 800d416:	4603      	mov	r3, r0
 800d418:	70fb      	strb	r3, [r7, #3]
 800d41a:	460b      	mov	r3, r1
 800d41c:	70bb      	strb	r3, [r7, #2]
 800d41e:	4613      	mov	r3, r2
 800d420:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d422:	2300      	movs	r3, #0
 800d424:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d426:	2300      	movs	r3, #0
 800d428:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d430:	78bb      	ldrb	r3, [r7, #2]
 800d432:	883a      	ldrh	r2, [r7, #0]
 800d434:	78f9      	ldrb	r1, [r7, #3]
 800d436:	f7f7 fb54 	bl	8004ae2 <HAL_PCD_EP_Open>
 800d43a:	4603      	mov	r3, r0
 800d43c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d43e:	7bbb      	ldrb	r3, [r7, #14]
 800d440:	2b03      	cmp	r3, #3
 800d442:	d817      	bhi.n	800d474 <USBD_LL_OpenEP+0x6c>
 800d444:	a201      	add	r2, pc, #4	@ (adr r2, 800d44c <USBD_LL_OpenEP+0x44>)
 800d446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d44a:	bf00      	nop
 800d44c:	0800d45d 	.word	0x0800d45d
 800d450:	0800d463 	.word	0x0800d463
 800d454:	0800d469 	.word	0x0800d469
 800d458:	0800d46f 	.word	0x0800d46f
    case HAL_OK :
      usb_status = USBD_OK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	73fb      	strb	r3, [r7, #15]
    break;
 800d460:	e00b      	b.n	800d47a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d462:	2303      	movs	r3, #3
 800d464:	73fb      	strb	r3, [r7, #15]
    break;
 800d466:	e008      	b.n	800d47a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d468:	2301      	movs	r3, #1
 800d46a:	73fb      	strb	r3, [r7, #15]
    break;
 800d46c:	e005      	b.n	800d47a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d46e:	2303      	movs	r3, #3
 800d470:	73fb      	strb	r3, [r7, #15]
    break;
 800d472:	e002      	b.n	800d47a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d474:	2303      	movs	r3, #3
 800d476:	73fb      	strb	r3, [r7, #15]
    break;
 800d478:	bf00      	nop
  }
  return usb_status;
 800d47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	460b      	mov	r3, r1
 800d48e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d490:	2300      	movs	r3, #0
 800d492:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d494:	2300      	movs	r3, #0
 800d496:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d49e:	78fa      	ldrb	r2, [r7, #3]
 800d4a0:	4611      	mov	r1, r2
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7f7 fb85 	bl	8004bb2 <HAL_PCD_EP_Close>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4ac:	7bbb      	ldrb	r3, [r7, #14]
 800d4ae:	2b03      	cmp	r3, #3
 800d4b0:	d816      	bhi.n	800d4e0 <USBD_LL_CloseEP+0x5c>
 800d4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d4b8 <USBD_LL_CloseEP+0x34>)
 800d4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b8:	0800d4c9 	.word	0x0800d4c9
 800d4bc:	0800d4cf 	.word	0x0800d4cf
 800d4c0:	0800d4d5 	.word	0x0800d4d5
 800d4c4:	0800d4db 	.word	0x0800d4db
    case HAL_OK :
      usb_status = USBD_OK;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d4cc:	e00b      	b.n	800d4e6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d2:	e008      	b.n	800d4e6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d8:	e005      	b.n	800d4e6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4da:	2303      	movs	r3, #3
 800d4dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d4de:	e002      	b.n	800d4e6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d4e0:	2303      	movs	r3, #3
 800d4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e4:	bf00      	nop
  }
  return usb_status;
 800d4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d50a:	78fa      	ldrb	r2, [r7, #3]
 800d50c:	4611      	mov	r1, r2
 800d50e:	4618      	mov	r0, r3
 800d510:	f7f7 fc14 	bl	8004d3c <HAL_PCD_EP_SetStall>
 800d514:	4603      	mov	r3, r0
 800d516:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d518:	7bbb      	ldrb	r3, [r7, #14]
 800d51a:	2b03      	cmp	r3, #3
 800d51c:	d816      	bhi.n	800d54c <USBD_LL_StallEP+0x5c>
 800d51e:	a201      	add	r2, pc, #4	@ (adr r2, 800d524 <USBD_LL_StallEP+0x34>)
 800d520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d524:	0800d535 	.word	0x0800d535
 800d528:	0800d53b 	.word	0x0800d53b
 800d52c:	0800d541 	.word	0x0800d541
 800d530:	0800d547 	.word	0x0800d547
    case HAL_OK :
      usb_status = USBD_OK;
 800d534:	2300      	movs	r3, #0
 800d536:	73fb      	strb	r3, [r7, #15]
    break;
 800d538:	e00b      	b.n	800d552 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d53a:	2303      	movs	r3, #3
 800d53c:	73fb      	strb	r3, [r7, #15]
    break;
 800d53e:	e008      	b.n	800d552 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d540:	2301      	movs	r3, #1
 800d542:	73fb      	strb	r3, [r7, #15]
    break;
 800d544:	e005      	b.n	800d552 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d546:	2303      	movs	r3, #3
 800d548:	73fb      	strb	r3, [r7, #15]
    break;
 800d54a:	e002      	b.n	800d552 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d54c:	2303      	movs	r3, #3
 800d54e:	73fb      	strb	r3, [r7, #15]
    break;
 800d550:	bf00      	nop
  }
  return usb_status;
 800d552:	7bfb      	ldrb	r3, [r7, #15]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	460b      	mov	r3, r1
 800d566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d568:	2300      	movs	r3, #0
 800d56a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d56c:	2300      	movs	r3, #0
 800d56e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d576:	78fa      	ldrb	r2, [r7, #3]
 800d578:	4611      	mov	r1, r2
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7f7 fc40 	bl	8004e00 <HAL_PCD_EP_ClrStall>
 800d580:	4603      	mov	r3, r0
 800d582:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d584:	7bbb      	ldrb	r3, [r7, #14]
 800d586:	2b03      	cmp	r3, #3
 800d588:	d816      	bhi.n	800d5b8 <USBD_LL_ClearStallEP+0x5c>
 800d58a:	a201      	add	r2, pc, #4	@ (adr r2, 800d590 <USBD_LL_ClearStallEP+0x34>)
 800d58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d590:	0800d5a1 	.word	0x0800d5a1
 800d594:	0800d5a7 	.word	0x0800d5a7
 800d598:	0800d5ad 	.word	0x0800d5ad
 800d59c:	0800d5b3 	.word	0x0800d5b3
    case HAL_OK :
      usb_status = USBD_OK;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5a4:	e00b      	b.n	800d5be <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5a6:	2303      	movs	r3, #3
 800d5a8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5aa:	e008      	b.n	800d5be <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d5b0:	e005      	b.n	800d5be <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d5b6:	e002      	b.n	800d5be <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d5b8:	2303      	movs	r3, #3
 800d5ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d5bc:	bf00      	nop
  }
  return usb_status;
 800d5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d5dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	da0b      	bge.n	800d5fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d5e4:	78fb      	ldrb	r3, [r7, #3]
 800d5e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d5ea:	68f9      	ldr	r1, [r7, #12]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	00db      	lsls	r3, r3, #3
 800d5f0:	4413      	add	r3, r2
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	440b      	add	r3, r1
 800d5f6:	333e      	adds	r3, #62	@ 0x3e
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	e00b      	b.n	800d614 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d5fc:	78fb      	ldrb	r3, [r7, #3]
 800d5fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d602:	68f9      	ldr	r1, [r7, #12]
 800d604:	4613      	mov	r3, r2
 800d606:	00db      	lsls	r3, r3, #3
 800d608:	4413      	add	r3, r2
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	440b      	add	r3, r1
 800d60e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800d612:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d614:	4618      	mov	r0, r3
 800d616:	3714      	adds	r7, #20
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	460b      	mov	r3, r1
 800d62a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d63a:	78fa      	ldrb	r2, [r7, #3]
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f7 fa2a 	bl	8004a98 <HAL_PCD_SetAddress>
 800d644:	4603      	mov	r3, r0
 800d646:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d648:	7bbb      	ldrb	r3, [r7, #14]
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d816      	bhi.n	800d67c <USBD_LL_SetUSBAddress+0x5c>
 800d64e:	a201      	add	r2, pc, #4	@ (adr r2, 800d654 <USBD_LL_SetUSBAddress+0x34>)
 800d650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d654:	0800d665 	.word	0x0800d665
 800d658:	0800d66b 	.word	0x0800d66b
 800d65c:	0800d671 	.word	0x0800d671
 800d660:	0800d677 	.word	0x0800d677
    case HAL_OK :
      usb_status = USBD_OK;
 800d664:	2300      	movs	r3, #0
 800d666:	73fb      	strb	r3, [r7, #15]
    break;
 800d668:	e00b      	b.n	800d682 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d66a:	2303      	movs	r3, #3
 800d66c:	73fb      	strb	r3, [r7, #15]
    break;
 800d66e:	e008      	b.n	800d682 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d670:	2301      	movs	r3, #1
 800d672:	73fb      	strb	r3, [r7, #15]
    break;
 800d674:	e005      	b.n	800d682 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d676:	2303      	movs	r3, #3
 800d678:	73fb      	strb	r3, [r7, #15]
    break;
 800d67a:	e002      	b.n	800d682 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d67c:	2303      	movs	r3, #3
 800d67e:	73fb      	strb	r3, [r7, #15]
    break;
 800d680:	bf00      	nop
  }
  return usb_status;
 800d682:	7bfb      	ldrb	r3, [r7, #15]
}
 800d684:	4618      	mov	r0, r3
 800d686:	3710      	adds	r7, #16
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	607a      	str	r2, [r7, #4]
 800d696:	603b      	str	r3, [r7, #0]
 800d698:	460b      	mov	r3, r1
 800d69a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d69c:	2300      	movs	r3, #0
 800d69e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d6aa:	7af9      	ldrb	r1, [r7, #11]
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	f7f7 fb13 	bl	8004cda <HAL_PCD_EP_Transmit>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d6b8:	7dbb      	ldrb	r3, [r7, #22]
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d816      	bhi.n	800d6ec <USBD_LL_Transmit+0x60>
 800d6be:	a201      	add	r2, pc, #4	@ (adr r2, 800d6c4 <USBD_LL_Transmit+0x38>)
 800d6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c4:	0800d6d5 	.word	0x0800d6d5
 800d6c8:	0800d6db 	.word	0x0800d6db
 800d6cc:	0800d6e1 	.word	0x0800d6e1
 800d6d0:	0800d6e7 	.word	0x0800d6e7
    case HAL_OK :
      usb_status = USBD_OK;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	75fb      	strb	r3, [r7, #23]
    break;
 800d6d8:	e00b      	b.n	800d6f2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	75fb      	strb	r3, [r7, #23]
    break;
 800d6de:	e008      	b.n	800d6f2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	75fb      	strb	r3, [r7, #23]
    break;
 800d6e4:	e005      	b.n	800d6f2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6e6:	2303      	movs	r3, #3
 800d6e8:	75fb      	strb	r3, [r7, #23]
    break;
 800d6ea:	e002      	b.n	800d6f2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d6ec:	2303      	movs	r3, #3
 800d6ee:	75fb      	strb	r3, [r7, #23]
    break;
 800d6f0:	bf00      	nop
  }
  return usb_status;
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3718      	adds	r7, #24
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b086      	sub	sp, #24
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	607a      	str	r2, [r7, #4]
 800d706:	603b      	str	r3, [r7, #0]
 800d708:	460b      	mov	r3, r1
 800d70a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d70c:	2300      	movs	r3, #0
 800d70e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d71a:	7af9      	ldrb	r1, [r7, #11]
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	f7f7 fa91 	bl	8004c46 <HAL_PCD_EP_Receive>
 800d724:	4603      	mov	r3, r0
 800d726:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d728:	7dbb      	ldrb	r3, [r7, #22]
 800d72a:	2b03      	cmp	r3, #3
 800d72c:	d816      	bhi.n	800d75c <USBD_LL_PrepareReceive+0x60>
 800d72e:	a201      	add	r2, pc, #4	@ (adr r2, 800d734 <USBD_LL_PrepareReceive+0x38>)
 800d730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d734:	0800d745 	.word	0x0800d745
 800d738:	0800d74b 	.word	0x0800d74b
 800d73c:	0800d751 	.word	0x0800d751
 800d740:	0800d757 	.word	0x0800d757
    case HAL_OK :
      usb_status = USBD_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	75fb      	strb	r3, [r7, #23]
    break;
 800d748:	e00b      	b.n	800d762 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d74a:	2303      	movs	r3, #3
 800d74c:	75fb      	strb	r3, [r7, #23]
    break;
 800d74e:	e008      	b.n	800d762 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d750:	2301      	movs	r3, #1
 800d752:	75fb      	strb	r3, [r7, #23]
    break;
 800d754:	e005      	b.n	800d762 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d756:	2303      	movs	r3, #3
 800d758:	75fb      	strb	r3, [r7, #23]
    break;
 800d75a:	e002      	b.n	800d762 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d75c:	2303      	movs	r3, #3
 800d75e:	75fb      	strb	r3, [r7, #23]
    break;
 800d760:	bf00      	nop
  }
  return usb_status;
 800d762:	7dfb      	ldrb	r3, [r7, #23]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3718      	adds	r7, #24
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	460b      	mov	r3, r1
 800d776:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d77e:	78fa      	ldrb	r2, [r7, #3]
 800d780:	4611      	mov	r1, r2
 800d782:	4618      	mov	r0, r3
 800d784:	f7f7 fa91 	bl	8004caa <HAL_PCD_EP_GetRxCount>
 800d788:	4603      	mov	r3, r0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
	...

0800d794 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	460b      	mov	r3, r1
 800d79e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d7a0:	78fb      	ldrb	r3, [r7, #3]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d002      	beq.n	800d7ac <HAL_PCDEx_LPM_Callback+0x18>
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d01f      	beq.n	800d7ea <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d7aa:	e03b      	b.n	800d824 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a1b      	ldr	r3, [r3, #32]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d007      	beq.n	800d7c4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d7b4:	f000 f854 	bl	800d860 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7b8:	4b1c      	ldr	r3, [pc, #112]	@ (800d82c <HAL_PCDEx_LPM_Callback+0x98>)
 800d7ba:	691b      	ldr	r3, [r3, #16]
 800d7bc:	4a1b      	ldr	r2, [pc, #108]	@ (800d82c <HAL_PCDEx_LPM_Callback+0x98>)
 800d7be:	f023 0306 	bic.w	r3, r3, #6
 800d7c2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	6812      	ldr	r2, [r2, #0]
 800d7d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d7d6:	f023 0301 	bic.w	r3, r3, #1
 800d7da:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7fe f9a9 	bl	800bb3a <USBD_LL_Resume>
    break;
 800d7e8:	e01c      	b.n	800d824 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	6812      	ldr	r2, [r2, #0]
 800d7f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d7fc:	f043 0301 	orr.w	r3, r3, #1
 800d800:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d808:	4618      	mov	r0, r3
 800d80a:	f7fe f97a 	bl	800bb02 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a1b      	ldr	r3, [r3, #32]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d005      	beq.n	800d822 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d816:	4b05      	ldr	r3, [pc, #20]	@ (800d82c <HAL_PCDEx_LPM_Callback+0x98>)
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	4a04      	ldr	r2, [pc, #16]	@ (800d82c <HAL_PCDEx_LPM_Callback+0x98>)
 800d81c:	f043 0306 	orr.w	r3, r3, #6
 800d820:	6113      	str	r3, [r2, #16]
    break;
 800d822:	bf00      	nop
}
 800d824:	bf00      	nop
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	e000ed00 	.word	0xe000ed00

0800d830 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d838:	4b03      	ldr	r3, [pc, #12]	@ (800d848 <USBD_static_malloc+0x18>)
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	370c      	adds	r7, #12
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	20004f70 	.word	0x20004f70

0800d84c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]

}
 800d854:	bf00      	nop
 800d856:	370c      	adds	r7, #12
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr

0800d860 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d864:	f7f3 fcb4 	bl	80011d0 <SystemClock_Config>
}
 800d868:	bf00      	nop
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <memset>:
 800d86c:	4402      	add	r2, r0
 800d86e:	4603      	mov	r3, r0
 800d870:	4293      	cmp	r3, r2
 800d872:	d100      	bne.n	800d876 <memset+0xa>
 800d874:	4770      	bx	lr
 800d876:	f803 1b01 	strb.w	r1, [r3], #1
 800d87a:	e7f9      	b.n	800d870 <memset+0x4>

0800d87c <__libc_init_array>:
 800d87c:	b570      	push	{r4, r5, r6, lr}
 800d87e:	4d0d      	ldr	r5, [pc, #52]	@ (800d8b4 <__libc_init_array+0x38>)
 800d880:	4c0d      	ldr	r4, [pc, #52]	@ (800d8b8 <__libc_init_array+0x3c>)
 800d882:	1b64      	subs	r4, r4, r5
 800d884:	10a4      	asrs	r4, r4, #2
 800d886:	2600      	movs	r6, #0
 800d888:	42a6      	cmp	r6, r4
 800d88a:	d109      	bne.n	800d8a0 <__libc_init_array+0x24>
 800d88c:	4d0b      	ldr	r5, [pc, #44]	@ (800d8bc <__libc_init_array+0x40>)
 800d88e:	4c0c      	ldr	r4, [pc, #48]	@ (800d8c0 <__libc_init_array+0x44>)
 800d890:	f000 f826 	bl	800d8e0 <_init>
 800d894:	1b64      	subs	r4, r4, r5
 800d896:	10a4      	asrs	r4, r4, #2
 800d898:	2600      	movs	r6, #0
 800d89a:	42a6      	cmp	r6, r4
 800d89c:	d105      	bne.n	800d8aa <__libc_init_array+0x2e>
 800d89e:	bd70      	pop	{r4, r5, r6, pc}
 800d8a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8a4:	4798      	blx	r3
 800d8a6:	3601      	adds	r6, #1
 800d8a8:	e7ee      	b.n	800d888 <__libc_init_array+0xc>
 800d8aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8ae:	4798      	blx	r3
 800d8b0:	3601      	adds	r6, #1
 800d8b2:	e7f2      	b.n	800d89a <__libc_init_array+0x1e>
 800d8b4:	0800d9b8 	.word	0x0800d9b8
 800d8b8:	0800d9b8 	.word	0x0800d9b8
 800d8bc:	0800d9b8 	.word	0x0800d9b8
 800d8c0:	0800d9bc 	.word	0x0800d9bc

0800d8c4 <memcpy>:
 800d8c4:	440a      	add	r2, r1
 800d8c6:	4291      	cmp	r1, r2
 800d8c8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d8cc:	d100      	bne.n	800d8d0 <memcpy+0xc>
 800d8ce:	4770      	bx	lr
 800d8d0:	b510      	push	{r4, lr}
 800d8d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8da:	4291      	cmp	r1, r2
 800d8dc:	d1f9      	bne.n	800d8d2 <memcpy+0xe>
 800d8de:	bd10      	pop	{r4, pc}

0800d8e0 <_init>:
 800d8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e2:	bf00      	nop
 800d8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8e6:	bc08      	pop	{r3}
 800d8e8:	469e      	mov	lr, r3
 800d8ea:	4770      	bx	lr

0800d8ec <_fini>:
 800d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ee:	bf00      	nop
 800d8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8f2:	bc08      	pop	{r3}
 800d8f4:	469e      	mov	lr, r3
 800d8f6:	4770      	bx	lr
