
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db14  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800dcd0  0800dcd0  0000ecd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd88  0800dd88  0000f10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd88  0800dd88  0000ed88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd90  0800dd90  0000f10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd90  0800dd90  0000ed90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd94  0800dd94  0000ed94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800dd98  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054a0  2000010c  0800dea4  0000f10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200055ac  0800dea4  0000f5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247f3  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e45  00000000  00000000  0003392f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  00038778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001621  00000000  00000000  0003a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff2b  00000000  00000000  0003ba01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023959  00000000  00000000  0006b92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d9cc  00000000  00000000  0008f285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001acc51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077bc  00000000  00000000  001acc94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b4450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800dcb8 	.word	0x0800dcb8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800dcb8 	.word	0x0800dcb8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fdcb 	bl	8002104 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 ffc5 	bl	8001502 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f002 f947 	bl	8002828 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 ffaf 	bl	8001502 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f002 f939 	bl	8002828 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 ffa1 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00d fb23 	bl	800dc44 <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 ff09 	bl	8006450 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 ff5d 	bl	8001502 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 fb85 	bl	8003da0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 ffef 	bl	80036b4 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 ff11 	bl	8001502 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 ffa8 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 ffc1 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 ff92 	bl	80036b4 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 feb4 	bl	8001502 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 ff51 	bl	8003646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 ff6a 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 ff49 	bl	8003646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 ff62 	bl	800367e <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 ff0f 	bl	8005680 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 fc37 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 fc32 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 fc2d 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f003 fa75 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f003 fa66 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f003 fa5a 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f003 fa4c 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f003 fa3e 	bl	8003da0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fe8c 	bl	8003646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fea5 	bl	800367e <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d125      	bne.n	80009aa <HAL_GPIO_EXTI_Callback+0x5e>
		static bool previous;
		if(previous == false){
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000974:	f003 fbbe 	bl	80040f4 <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		} else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000988:	f003 fbb4 	bl	80040f4 <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
		}

		int test = 1984;
 8000992:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000996:	60fb      	str	r3, [r7, #12]
		comms_append_int32(10, 1, &test);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	461a      	mov	r2, r3
 800099e:	2101      	movs	r1, #1
 80009a0:	200a      	movs	r0, #10
 80009a2:	f000 f8d5 	bl	8000b50 <comms_append_int32>
		comms_send();
 80009a6:	f000 f94b 	bl	8000c40 <comms_send>
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000250 	.word	0x20000250
 80009b8:	48000400 	.word	0x48000400

080009bc <comms_reset_active_tx_buffer>:
	DataValue data[255];
} CommsData;

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);

void comms_reset_active_tx_buffer() {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_tx_active_buffer)) = START_HEADER; // start bits
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 80009c8:	801a      	strh	r2, [r3, #0]
	comms_tx_active_buffer[2] = 0; // buffer id
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3302      	adds	r3, #2
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	*((uint16_t*) (comms_tx_active_buffer + 3)) = 0; // num of elements
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3303      	adds	r3, #3
 80009da:	2200      	movs	r2, #0
 80009dc:	801a      	strh	r2, [r3, #0]
	comms_tx_active_wr_pointer = comms_tx_active_buffer + 5; // first empty position for data
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3305      	adds	r3, #5
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <comms_reset_active_tx_buffer+0x3c>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000a54 	.word	0x20000a54
 80009f8:	20000a58 	.word	0x20000a58

080009fc <comms_reset_active_rx_buffer>:

void comms_reset_active_rx_buffer() {
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	//reset whole head
	comms_rx_active_buffer[0] = 0;
 8000a00:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <comms_reset_active_rx_buffer+0x3c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
	comms_rx_active_buffer[1] = 0;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <comms_reset_active_rx_buffer+0x3c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
	comms_rx_active_buffer[2] = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <comms_reset_active_rx_buffer+0x3c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3302      	adds	r3, #2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
	*((uint16_t*) (comms_rx_active_buffer + 3)) = 0;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <comms_reset_active_rx_buffer+0x3c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3303      	adds	r3, #3
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]
	//reset pointer
	comms_rx_active_rd_pointer = comms_rx_active_buffer;
 8000a26:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <comms_reset_active_rx_buffer+0x3c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <comms_reset_active_rx_buffer+0x40>)
 8000a2c:	6013      	str	r3, [r2, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	20001660 	.word	0x20001660
 8000a3c:	20001664 	.word	0x20001664

08000a40 <comms_uart_init>:

void comms_uart_init() {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_buffer,
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <comms_uart_init+0x20>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <comms_uart_init+0x24>)
 8000a50:	f006 fff2 	bl	8007a38 <HAL_UART_Receive_IT>
 8000a54:	4603      	mov	r3, r0
 8000a56:	71fb      	strb	r3, [r7, #7]
			5);
	UNUSED(rcode);
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20001660 	.word	0x20001660
 8000a64:	20003874 	.word	0x20003874

08000a68 <comms_init>:

void comms_init() {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	comms_tx_active_buffer = comms_tx_buffer1;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <comms_init+0x48>)
 8000a6e:	4a11      	ldr	r2, [pc, #68]	@ (8000ab4 <comms_init+0x4c>)
 8000a70:	601a      	str	r2, [r3, #0]
	comms_tx_prepared_buffer = comms_tx_buffer2;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <comms_init+0x50>)
 8000a74:	4a11      	ldr	r2, [pc, #68]	@ (8000abc <comms_init+0x54>)
 8000a76:	601a      	str	r2, [r3, #0]

	comms_reset_active_tx_buffer();
 8000a78:	f7ff ffa0 	bl	80009bc <comms_reset_active_tx_buffer>
	comms_tx_prepared_wr_pointer = comms_tx_prepared_buffer + 5;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <comms_init+0x50>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3305      	adds	r3, #5
 8000a82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac0 <comms_init+0x58>)
 8000a84:	6013      	str	r3, [r2, #0]

	if (comms_selected_interface == COMMS_UART){
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <comms_init+0x5c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <comms_init+0x2a>
		comms_uart_init();
 8000a8e:	f7ff ffd7 	bl	8000a40 <comms_uart_init>
	}

	comms_rx_active_buffer = comms_rx_buffer1;
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <comms_init+0x60>)
 8000a94:	4a0d      	ldr	r2, [pc, #52]	@ (8000acc <comms_init+0x64>)
 8000a96:	601a      	str	r2, [r3, #0]
	comms_rx_prepared_buffer = comms_rx_buffer2;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <comms_init+0x68>)
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad4 <comms_init+0x6c>)
 8000a9c:	601a      	str	r2, [r3, #0]

	comms_reset_active_rx_buffer();
 8000a9e:	f7ff ffad 	bl	80009fc <comms_reset_active_rx_buffer>
	comms_rx_prepared_rd_pointer = comms_rx_prepared_buffer + 5;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <comms_init+0x68>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	3305      	adds	r3, #5
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad8 <comms_init+0x70>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000a54 	.word	0x20000a54
 8000ab4:	20000254 	.word	0x20000254
 8000ab8:	20000a5c 	.word	0x20000a5c
 8000abc:	20000654 	.word	0x20000654
 8000ac0:	20000a60 	.word	0x20000a60
 8000ac4:	20001678 	.word	0x20001678
 8000ac8:	20001660 	.word	0x20001660
 8000acc:	20000e60 	.word	0x20000e60
 8000ad0:	20001668 	.word	0x20001668
 8000ad4:	20001260 	.word	0x20001260
 8000ad8:	2000166c 	.word	0x2000166c

08000adc <comms_purge_id_register>:

void comms_purge_id_register() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	memset(comms_tx_data_id_register, NULL, sizeof(comms_tx_data_id_register));
 8000ae0:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <comms_purge_id_register+0x14>)
 8000ae8:	f00d f8ac 	bl	800dc44 <memset>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000a64 	.word	0x20000a64

08000af4 <comms_find_existing_data>:

void* comms_find_existing_data(uint8_t data_id) {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	if (comms_tx_data_id_register[data_id] != NULL) {
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <comms_find_existing_data+0x30>)
 8000b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d004      	beq.n	8000b14 <comms_find_existing_data+0x20>
		return comms_tx_data_id_register[data_id];
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <comms_find_existing_data+0x30>)
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	e000      	b.n	8000b16 <comms_find_existing_data+0x22>
	}
	return NULL;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000a64 	.word	0x20000a64

08000b28 <comms_increment_active_buffer_data>:

void comms_increment_active_buffer_data() {
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_tx_active_buffer + 3)) += 1;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <comms_increment_active_buffer_data+0x24>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3303      	adds	r3, #3
 8000b32:	881a      	ldrh	r2, [r3, #0]
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <comms_increment_active_buffer_data+0x24>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	3201      	adds	r2, #1
 8000b3c:	b292      	uxth	r2, r2
 8000b3e:	801a      	strh	r2, [r3, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000a54 	.word	0x20000a54

08000b50 <comms_append_int32>:

int comms_append_int32(uint8_t data_id, uint8_t data_count, int *data) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	603a      	str	r2, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	71bb      	strb	r3, [r7, #6]
	// dissable interrupts
//	uint32_t primask = __get_PRIMASK();
//	__disable_irq();

	//check tx_register for same data id, return if existing
	if (comms_find_existing_data(data_id) != NULL) {
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ffc6 	bl	8000af4 <comms_find_existing_data>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <comms_append_int32+0x22>
		return 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e02d      	b.n	8000bce <comms_append_int32+0x7e>
	}

	if (wr_status) {
 8000b72:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <comms_append_int32+0x88>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <comms_append_int32+0x2e>
		return COMMS_WR_LOCKED;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	e027      	b.n	8000bce <comms_append_int32+0x7e>
	}
	else {
		wr_status = COMMS_INPROGRESS;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <comms_append_int32+0x88>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
	}

	// save the pointer to new data to register
	comms_tx_data_id_register[data_id] = (void*) comms_tx_active_wr_pointer;
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	4a15      	ldr	r2, [pc, #84]	@ (8000bdc <comms_append_int32+0x8c>)
 8000b88:	6812      	ldr	r2, [r2, #0]
 8000b8a:	4915      	ldr	r1, [pc, #84]	@ (8000be0 <comms_append_int32+0x90>)
 8000b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_increment_active_buffer_data();
 8000b90:	f7ff ffca 	bl	8000b28 <comms_increment_active_buffer_data>

	// write id, bytes and count
	*comms_tx_active_wr_pointer = data_id;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <comms_append_int32+0x8c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	79fa      	ldrb	r2, [r7, #7]
 8000b9a:	701a      	strb	r2, [r3, #0]
	*(comms_tx_active_wr_pointer + 1) = (uint8_t) sizeof(*data);
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <comms_append_int32+0x8c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	701a      	strb	r2, [r3, #0]
	*(comms_tx_active_wr_pointer + 2) = data_count;
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <comms_append_int32+0x8c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3302      	adds	r3, #2
 8000bac:	79ba      	ldrb	r2, [r7, #6]
 8000bae:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int*) (comms_tx_active_wr_pointer + 3)) = *data;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <comms_append_int32+0x8c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3303      	adds	r3, #3
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_tx_active_wr_pointer = (comms_tx_active_wr_pointer + 3 + sizeof(*data));
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <comms_append_int32+0x8c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3307      	adds	r3, #7
 8000bc2:	4a06      	ldr	r2, [pc, #24]	@ (8000bdc <comms_append_int32+0x8c>)
 8000bc4:	6013      	str	r3, [r2, #0]

	wr_status = COMMS_READY;
 8000bc6:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <comms_append_int32+0x88>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]

	// restore interrupts
//	__set_PRIMASK(primask);

	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20001679 	.word	0x20001679
 8000bdc:	20000a58 	.word	0x20000a58
 8000be0:	20000a64 	.word	0x20000a64

08000be4 <comms_switch_tx_buffers>:

void comms_switch_tx_buffers() {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000bea:	f3ef 8310 	mrs	r3, PRIMASK
 8000bee:	603b      	str	r3, [r7, #0]
  return(result);
 8000bf0:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000bf2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t *_temp = comms_tx_prepared_buffer;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <comms_switch_tx_buffers+0x4c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60bb      	str	r3, [r7, #8]
	comms_tx_prepared_buffer = comms_tx_active_buffer;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <comms_switch_tx_buffers+0x50>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <comms_switch_tx_buffers+0x4c>)
 8000c04:	6013      	str	r3, [r2, #0]
	comms_tx_active_buffer = _temp;
 8000c06:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <comms_switch_tx_buffers+0x50>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_tx_prepared_wr_pointer = comms_tx_active_wr_pointer;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <comms_switch_tx_buffers+0x54>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <comms_switch_tx_buffers+0x58>)
 8000c12:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_tx_buffer();
 8000c14:	f7ff fed2 	bl	80009bc <comms_reset_active_tx_buffer>
	comms_purge_id_register();
 8000c18:	f7ff ff60 	bl	8000adc <comms_purge_id_register>
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f383 8810 	msr	PRIMASK, r3
}
 8000c26:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000a5c 	.word	0x20000a5c
 8000c34:	20000a54 	.word	0x20000a54
 8000c38:	20000a58 	.word	0x20000a58
 8000c3c:	20000a60 	.word	0x20000a60

08000c40 <comms_send>:

int comms_send() {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

	if (tx_status > 0) {
 8000c46:	4b32      	ldr	r3, [pc, #200]	@ (8000d10 <comms_send+0xd0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <comms_send+0x12>
		return COMMS_TX_LOCKED;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	e059      	b.n	8000d06 <comms_send+0xc6>
	}

	tx_status = COMMS_INPROGRESS;
 8000c52:	4b2f      	ldr	r3, [pc, #188]	@ (8000d10 <comms_send+0xd0>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]

	// need to switch buffers
	comms_switch_tx_buffers();
 8000c58:	f7ff ffc4 	bl	8000be4 <comms_switch_tx_buffers>

	// terminator at the end
	*comms_tx_prepared_wr_pointer = END_CR;
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d14 <comms_send+0xd4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	220d      	movs	r2, #13
 8000c62:	701a      	strb	r2, [r3, #0]
	*(comms_tx_prepared_wr_pointer + 1) = END_LF;
 8000c64:	4b2b      	ldr	r3, [pc, #172]	@ (8000d14 <comms_send+0xd4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	220a      	movs	r2, #10
 8000c6c:	701a      	strb	r2, [r3, #0]
	comms_tx_prepared_wr_pointer += 2;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	@ (8000d14 <comms_send+0xd4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3302      	adds	r3, #2
 8000c74:	4a27      	ldr	r2, [pc, #156]	@ (8000d14 <comms_send+0xd4>)
 8000c76:	6013      	str	r3, [r2, #0]

	// buffer is empty
	if (comms_tx_prepared_buffer[3] == 0) {
 8000c78:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <comms_send+0xd8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3303      	adds	r3, #3
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d109      	bne.n	8000c98 <comms_send+0x58>
		++empty; //DEBUG
 8000c84:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <comms_send+0xdc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a24      	ldr	r2, [pc, #144]	@ (8000d1c <comms_send+0xdc>)
 8000c8c:	6013      	str	r3, [r2, #0]
		tx_status = COMMS_READY;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <comms_send+0xd0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
		return COMMS_TX_BUFFER_EMPTY;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e036      	b.n	8000d06 <comms_send+0xc6>
	} else {
		full++;
 8000c98:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <comms_send+0xe0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	4a20      	ldr	r2, [pc, #128]	@ (8000d20 <comms_send+0xe0>)
 8000ca0:	6013      	str	r3, [r2, #0]
	}

	// send data
	USBD_StatusTypeDef cdc_return = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_return = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	71bb      	strb	r3, [r7, #6]

	if(comms_selected_interface == COMMS_USB_OTG){
 8000caa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <comms_send+0xe4>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10d      	bne.n	8000cce <comms_send+0x8e>
		cdc_return = CDC_Transmit_FS(comms_tx_prepared_buffer, comms_tx_prepared_wr_pointer - comms_tx_prepared_buffer);
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <comms_send+0xd8>)
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <comms_send+0xd4>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <comms_send+0xd8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f00c fa1e 	bl	800d104 <CDC_Transmit_FS>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	e00d      	b.n	8000cea <comms_send+0xaa>
	} else {
		uart_return = HAL_UART_Transmit(&hlpuart1, comms_tx_prepared_buffer, comms_tx_prepared_wr_pointer - comms_tx_prepared_buffer, 100);
 8000cce:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <comms_send+0xd8>)
 8000cd0:	6819      	ldr	r1, [r3, #0]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <comms_send+0xd4>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <comms_send+0xd8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	2364      	movs	r3, #100	@ 0x64
 8000ce0:	4811      	ldr	r0, [pc, #68]	@ (8000d28 <comms_send+0xe8>)
 8000ce2:	f006 fe1b 	bl	800791c <HAL_UART_Transmit>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71bb      	strb	r3, [r7, #6]
	}

	tx_status = COMMS_READY;
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <comms_send+0xd0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]

	if (cdc_return) {
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <comms_send+0xba>
		return COMMS_TX_CDC_FAIL;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e005      	b.n	8000d06 <comms_send+0xc6>
	}

	if (uart_return) {
 8000cfa:	79bb      	ldrb	r3, [r7, #6]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <comms_send+0xc4>
		return COMMS_TX_UART_FAIL;
 8000d00:	2306      	movs	r3, #6
 8000d02:	e000      	b.n	8000d06 <comms_send+0xc6>
	}

	return COMMS_SUCCESS;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000167a 	.word	0x2000167a
 8000d14:	20000a60 	.word	0x20000a60
 8000d18:	20000a5c 	.word	0x20000a5c
 8000d1c:	20001670 	.word	0x20001670
 8000d20:	20001674 	.word	0x20001674
 8000d24:	20001678 	.word	0x20001678
 8000d28:	20003874 	.word	0x20003874

08000d2c <comms_switch_rx_buffers>:

void comms_switch_rx_buffers(){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d32:	f3ef 8310 	mrs	r3, PRIMASK
 8000d36:	603b      	str	r3, [r7, #0]
  return(result);
 8000d38:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000d3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
	__disable_irq();

	// switch rx buffers
	uint8_t *_temp = comms_rx_prepared_buffer;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <comms_switch_rx_buffers+0x48>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60bb      	str	r3, [r7, #8]
	comms_rx_prepared_buffer = comms_rx_active_buffer;
 8000d46:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <comms_switch_rx_buffers+0x4c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <comms_switch_rx_buffers+0x48>)
 8000d4c:	6013      	str	r3, [r2, #0]
	comms_rx_active_buffer = _temp;
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <comms_switch_rx_buffers+0x4c>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	6013      	str	r3, [r2, #0]

	// set pointer to the prepared buffer data
	comms_rx_prepared_rd_pointer = comms_rx_active_rd_pointer;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <comms_switch_rx_buffers+0x50>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a09      	ldr	r2, [pc, #36]	@ (8000d80 <comms_switch_rx_buffers+0x54>)
 8000d5a:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_rx_buffer();
 8000d5c:	f7ff fe4e 	bl	80009fc <comms_reset_active_rx_buffer>
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f383 8810 	msr	PRIMASK, r3
}
 8000d6a:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20001668 	.word	0x20001668
 8000d78:	20001660 	.word	0x20001660
 8000d7c:	20001664 	.word	0x20001664
 8000d80:	2000166c 	.word	0x2000166c

08000d84 <comms_cdc_rx_callback>:

void comms_cdc_rx_callback(uint8_t *buffer, uint32_t length) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	// call this func inside of usbd_cdc_if.c in CDC_Receive_FS()

	if (comms_selected_interface != COMMS_USB_OTG){
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <comms_cdc_rx_callback+0x5c>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11b      	bne.n	8000dce <comms_cdc_rx_callback+0x4a>
		// quit if UART is in use
		return;
	}

	if (rx_status) {
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <comms_cdc_rx_callback+0x60>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d119      	bne.n	8000dd2 <comms_cdc_rx_callback+0x4e>
		// not ready yet
		return;
	}

	if (length < 3) {
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d918      	bls.n	8000dd6 <comms_cdc_rx_callback+0x52>
		// invalid buffer
		return;
	}

	rx_status = COMMS_INPROGRESS;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <comms_cdc_rx_callback+0x60>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]

	//copy to the active buffer
	memcpy(comms_rx_active_buffer, buffer, length);
 8000daa:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <comms_cdc_rx_callback+0x64>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f00c ff72 	bl	800dc9c <memcpy>
	comms_rx_active_rd_pointer = comms_rx_active_buffer + 5;
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <comms_cdc_rx_callback+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3305      	adds	r3, #5
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <comms_cdc_rx_callback+0x68>)
 8000dc0:	6013      	str	r3, [r2, #0]
	comms_switch_rx_buffers();
 8000dc2:	f7ff ffb3 	bl	8000d2c <comms_switch_rx_buffers>

	rx_status = COMMS_RECEIVED;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <comms_cdc_rx_callback+0x60>)
 8000dc8:	2202      	movs	r2, #2
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e004      	b.n	8000dd8 <comms_cdc_rx_callback+0x54>
		return;
 8000dce:	bf00      	nop
 8000dd0:	e002      	b.n	8000dd8 <comms_cdc_rx_callback+0x54>
		return;
 8000dd2:	bf00      	nop
 8000dd4:	e000      	b.n	8000dd8 <comms_cdc_rx_callback+0x54>
		return;
 8000dd6:	bf00      	nop
}
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20001678 	.word	0x20001678
 8000de4:	2000167b 	.word	0x2000167b
 8000de8:	20001660 	.word	0x20001660
 8000dec:	20001664 	.word	0x20001664

08000df0 <comms_data_handler>:

__weak void comms_data_handler(CommsData *data) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

	if (data == NULL) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d017      	beq.n	8000e2e <comms_data_handler+0x3e>
		return;
	}

	switch (data->data_id) {
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d115      	bne.n	8000e32 <comms_data_handler+0x42>
	case 5:
		GPIO_PinState currentState = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000e06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e0a:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <comms_data_handler+0x4c>)
 8000e0c:	f003 f95a 	bl	80040c4 <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	bf14      	ite	ne
 8000e1a:	2301      	movne	r3, #1
 8000e1c:	2300      	moveq	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <comms_data_handler+0x4c>)
 8000e28:	f003 f964 	bl	80040f4 <HAL_GPIO_WritePin>
				(currentState == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
		break;
 8000e2c:	e002      	b.n	8000e34 <comms_data_handler+0x44>
		return;
 8000e2e:	bf00      	nop
 8000e30:	e000      	b.n	8000e34 <comms_data_handler+0x44>
	default:
		break;
 8000e32:	bf00      	nop
	}

}
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	48000400 	.word	0x48000400

08000e40 <comms_rx_process>:

void comms_rx_process() {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000e46:	af00      	add	r7, sp, #0
	if (!rx_status) {
 8000e48:	4b50      	ldr	r3, [pc, #320]	@ (8000f8c <comms_rx_process+0x14c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 8096 	beq.w	8000f7e <comms_rx_process+0x13e>
		// no data yet
		return;
	}

	if (comms_rx_prepared_buffer[2] == 0) {
 8000e52:	4b4f      	ldr	r3, [pc, #316]	@ (8000f90 <comms_rx_process+0x150>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3302      	adds	r3, #2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 808b 	bne.w	8000f76 <comms_rx_process+0x136>
		uint16_t elements = *((uint16_t*) (comms_rx_prepared_buffer + 3));
 8000e60:	4b4b      	ldr	r3, [pc, #300]	@ (8000f90 <comms_rx_process+0x150>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000e68:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406

		for (; elements > 0; --elements) {
 8000e6c:	e07e      	b.n	8000f6c <comms_rx_process+0x12c>
			CommsData data;
			data.data_id = *comms_rx_prepared_rd_pointer;
 8000e6e:	4b49      	ldr	r3, [pc, #292]	@ (8000f94 <comms_rx_process+0x154>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	781a      	ldrb	r2, [r3, #0]
 8000e74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e78:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e7c:	701a      	strb	r2, [r3, #0]
			data.data_size = *(comms_rx_prepared_rd_pointer + 1);
 8000e7e:	4b45      	ldr	r3, [pc, #276]	@ (8000f94 <comms_rx_process+0x154>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	785a      	ldrb	r2, [r3, #1]
 8000e84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e88:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e8c:	705a      	strb	r2, [r3, #1]
			data.data_count = *(comms_rx_prepared_rd_pointer + 2);
 8000e8e:	4b41      	ldr	r3, [pc, #260]	@ (8000f94 <comms_rx_process+0x154>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	789a      	ldrb	r2, [r3, #2]
 8000e94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e98:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e9c:	709a      	strb	r2, [r3, #2]

			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000ea4:	e03d      	b.n	8000f22 <comms_rx_process+0xe2>
				switch (data.data_size) {
 8000ea6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000eaa:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000eae:	785b      	ldrb	r3, [r3, #1]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d023      	beq.n	8000efc <comms_rx_process+0xbc>
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	dc64      	bgt.n	8000f82 <comms_rx_process+0x142>
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d002      	beq.n	8000ec2 <comms_rx_process+0x82>
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d00e      	beq.n	8000ede <comms_rx_process+0x9e>
				case 4:
					data.data[x].u32 =
							*((uint32_t*) (comms_rx_prepared_rd_pointer + 3));
					break;
				default:
					return;
 8000ec0:	e05f      	b.n	8000f82 <comms_rx_process+0x142>
					data.data[x].u8 = *(comms_rx_prepared_rd_pointer + 3);
 8000ec2:	4b34      	ldr	r3, [pc, #208]	@ (8000f94 <comms_rx_process+0x154>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000eca:	78d1      	ldrb	r1, [r2, #3]
 8000ecc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000ed0:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	460a      	mov	r2, r1
 8000eda:	711a      	strb	r2, [r3, #4]
					break;
 8000edc:	e01c      	b.n	8000f18 <comms_rx_process+0xd8>
					data.data[x].u16 =
 8000ede:	4b2d      	ldr	r3, [pc, #180]	@ (8000f94 <comms_rx_process+0x154>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000ee6:	f8b2 1003 	ldrh.w	r1, [r2, #3]
 8000eea:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000eee:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	460a      	mov	r2, r1
 8000ef8:	809a      	strh	r2, [r3, #4]
					break;
 8000efa:	e00d      	b.n	8000f18 <comms_rx_process+0xd8>
					data.data[x].u32 =
 8000efc:	4b25      	ldr	r3, [pc, #148]	@ (8000f94 <comms_rx_process+0x154>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000f04:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8000f08:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000f0c:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	605a      	str	r2, [r3, #4]
					break;
 8000f16:	bf00      	nop
			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000f18:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000f22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000f26:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000f2a:	789b      	ldrb	r3, [r3, #2]
 8000f2c:	f897 2405 	ldrb.w	r2, [r7, #1029]	@ 0x405
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d3b8      	bcc.n	8000ea6 <comms_rx_process+0x66>
				}
			}

			comms_data_handler(&data);
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff5a 	bl	8000df0 <comms_data_handler>

			comms_rx_prepared_rd_pointer = (comms_rx_prepared_rd_pointer + 3
					+ (data.data_size * data.data_count));
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <comms_rx_process+0x154>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000f44:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000f48:	785b      	ldrb	r3, [r3, #1]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000f50:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000f54:	789b      	ldrb	r3, [r3, #2]
 8000f56:	fb01 f303 	mul.w	r3, r1, r3
 8000f5a:	3303      	adds	r3, #3
 8000f5c:	4413      	add	r3, r2
			comms_rx_prepared_rd_pointer = (comms_rx_prepared_rd_pointer + 3
 8000f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <comms_rx_process+0x154>)
 8000f60:	6013      	str	r3, [r2, #0]
		for (; elements > 0; --elements) {
 8000f62:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
 8000f6c:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f47f af7c 	bne.w	8000e6e <comms_rx_process+0x2e>
		}
	}

	rx_status = COMMS_READY;
 8000f76:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <comms_rx_process+0x14c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e002      	b.n	8000f84 <comms_rx_process+0x144>
		return;
 8000f7e:	bf00      	nop
 8000f80:	e000      	b.n	8000f84 <comms_rx_process+0x144>
					return;
 8000f82:	bf00      	nop
}
 8000f84:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000167b 	.word	0x2000167b
 8000f90:	20001668 	.word	0x20001668
 8000f94:	2000166c 	.word	0x2000166c

08000f98 <comms_lpuart_rx_callback>:


void comms_lpuart_rx_callback(UART_HandleTypeDef *huart) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	static int uart_elements;
	static int data_total_length;
	static HAL_StatusTypeDef rcode;
	UNUSED(rcode);

	if (comms_selected_interface != COMMS_UART){
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80010cc <comms_lpuart_rx_callback+0x134>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f040 808b 	bne.w	80010c0 <comms_lpuart_rx_callback+0x128>
		// quit if USB OTG is in use
		return;
	}

	switch (uart_rx_state) {
 8000faa:	4b49      	ldr	r3, [pc, #292]	@ (80010d0 <comms_lpuart_rx_callback+0x138>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d04f      	beq.n	8001052 <comms_lpuart_rx_callback+0xba>
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	f300 8086 	bgt.w	80010c4 <comms_lpuart_rx_callback+0x12c>
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <comms_lpuart_rx_callback+0x2a>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d025      	beq.n	800100c <comms_lpuart_rx_callback+0x74>
			UNUSED(rcode);

			break;

		default:
			break;
 8000fc0:	e080      	b.n	80010c4 <comms_lpuart_rx_callback+0x12c>
			if (*((uint16_t*) (comms_rx_active_buffer)) != START_HEADER) {
 8000fc2:	4b44      	ldr	r3, [pc, #272]	@ (80010d4 <comms_lpuart_rx_callback+0x13c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d002      	beq.n	8000fd6 <comms_lpuart_rx_callback+0x3e>
				comms_uart_init();
 8000fd0:	f7ff fd36 	bl	8000a40 <comms_uart_init>
				break;
 8000fd4:	e077      	b.n	80010c6 <comms_lpuart_rx_callback+0x12e>
			uart_elements = *((uint16_t*) (comms_rx_active_buffer + 3));
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80010d4 <comms_lpuart_rx_callback+0x13c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3303      	adds	r3, #3
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80010d8 <comms_lpuart_rx_callback+0x140>)
 8000fe2:	601a      	str	r2, [r3, #0]
			comms_rx_active_rd_pointer = comms_rx_active_buffer + 5;
 8000fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80010d4 <comms_lpuart_rx_callback+0x13c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3305      	adds	r3, #5
 8000fea:	4a3c      	ldr	r2, [pc, #240]	@ (80010dc <comms_lpuart_rx_callback+0x144>)
 8000fec:	6013      	str	r3, [r2, #0]
			rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, 3);
 8000fee:	4b3b      	ldr	r3, [pc, #236]	@ (80010dc <comms_lpuart_rx_callback+0x144>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	483a      	ldr	r0, [pc, #232]	@ (80010e0 <comms_lpuart_rx_callback+0x148>)
 8000ff8:	f006 fd1e 	bl	8007a38 <HAL_UART_Receive_IT>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b38      	ldr	r3, [pc, #224]	@ (80010e4 <comms_lpuart_rx_callback+0x14c>)
 8001002:	701a      	strb	r2, [r3, #0]
			uart_rx_state = COMMS_UART_PACKET_HEAD;
 8001004:	4b32      	ldr	r3, [pc, #200]	@ (80010d0 <comms_lpuart_rx_callback+0x138>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
			break;
 800100a:	e05c      	b.n	80010c6 <comms_lpuart_rx_callback+0x12e>
			data_total_length = (*(comms_rx_active_rd_pointer + 1)) * (*(comms_rx_active_rd_pointer + 2));
 800100c:	4b33      	ldr	r3, [pc, #204]	@ (80010dc <comms_lpuart_rx_callback+0x144>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b31      	ldr	r3, [pc, #196]	@ (80010dc <comms_lpuart_rx_callback+0x144>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3302      	adds	r3, #2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	fb02 f303 	mul.w	r3, r2, r3
 8001022:	4a31      	ldr	r2, [pc, #196]	@ (80010e8 <comms_lpuart_rx_callback+0x150>)
 8001024:	6013      	str	r3, [r2, #0]
			comms_rx_active_rd_pointer = comms_rx_active_rd_pointer + 3;
 8001026:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <comms_lpuart_rx_callback+0x144>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	3303      	adds	r3, #3
 800102c:	4a2b      	ldr	r2, [pc, #172]	@ (80010dc <comms_lpuart_rx_callback+0x144>)
 800102e:	6013      	str	r3, [r2, #0]
			rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, data_total_length);
 8001030:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <comms_lpuart_rx_callback+0x144>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a2c      	ldr	r2, [pc, #176]	@ (80010e8 <comms_lpuart_rx_callback+0x150>)
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	b292      	uxth	r2, r2
 800103a:	4619      	mov	r1, r3
 800103c:	4828      	ldr	r0, [pc, #160]	@ (80010e0 <comms_lpuart_rx_callback+0x148>)
 800103e:	f006 fcfb 	bl	8007a38 <HAL_UART_Receive_IT>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <comms_lpuart_rx_callback+0x14c>)
 8001048:	701a      	strb	r2, [r3, #0]
			uart_rx_state = COMMS_UART_PACKET_DATA;
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <comms_lpuart_rx_callback+0x138>)
 800104c:	2202      	movs	r2, #2
 800104e:	701a      	strb	r2, [r3, #0]
			break;
 8001050:	e039      	b.n	80010c6 <comms_lpuart_rx_callback+0x12e>
			comms_rx_active_rd_pointer = comms_rx_active_rd_pointer + data_total_length;
 8001052:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <comms_lpuart_rx_callback+0x144>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a24      	ldr	r2, [pc, #144]	@ (80010e8 <comms_lpuart_rx_callback+0x150>)
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a1f      	ldr	r2, [pc, #124]	@ (80010dc <comms_lpuart_rx_callback+0x144>)
 800105e:	6013      	str	r3, [r2, #0]
			if(uart_elements > 0) {
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <comms_lpuart_rx_callback+0x140>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	dd07      	ble.n	8001078 <comms_lpuart_rx_callback+0xe0>
				uart_rx_state = COMMS_UART_PACKET_HEAD;
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <comms_lpuart_rx_callback+0x138>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
				--uart_elements;
 800106e:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <comms_lpuart_rx_callback+0x140>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <comms_lpuart_rx_callback+0x140>)
 8001076:	6013      	str	r3, [r2, #0]
			if (uart_elements == 0) {
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <comms_lpuart_rx_callback+0x140>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d115      	bne.n	80010ac <comms_lpuart_rx_callback+0x114>
				comms_rx_active_rd_pointer = comms_rx_active_buffer + 5;
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <comms_lpuart_rx_callback+0x13c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3305      	adds	r3, #5
 8001086:	4a15      	ldr	r2, [pc, #84]	@ (80010dc <comms_lpuart_rx_callback+0x144>)
 8001088:	6013      	str	r3, [r2, #0]
				comms_switch_rx_buffers();
 800108a:	f7ff fe4f 	bl	8000d2c <comms_switch_rx_buffers>
				rx_status = COMMS_RECEIVED;
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <comms_lpuart_rx_callback+0x154>)
 8001090:	2202      	movs	r2, #2
 8001092:	701a      	strb	r2, [r3, #0]
				uart_rx_state = COMMS_UART_HEAD;
 8001094:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <comms_lpuart_rx_callback+0x138>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
				uart_elements = 0;
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <comms_lpuart_rx_callback+0x140>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
				data_total_length = 0;
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <comms_lpuart_rx_callback+0x150>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
				comms_uart_init();
 80010a6:	f7ff fccb 	bl	8000a40 <comms_uart_init>
				break;
 80010aa:	e00c      	b.n	80010c6 <comms_lpuart_rx_callback+0x12e>
			HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, 3);
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <comms_lpuart_rx_callback+0x144>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2203      	movs	r2, #3
 80010b2:	4619      	mov	r1, r3
 80010b4:	480a      	ldr	r0, [pc, #40]	@ (80010e0 <comms_lpuart_rx_callback+0x148>)
 80010b6:	f006 fcbf 	bl	8007a38 <HAL_UART_Receive_IT>
 80010ba:	4603      	mov	r3, r0
 80010bc:	73fb      	strb	r3, [r7, #15]
			break;
 80010be:	e002      	b.n	80010c6 <comms_lpuart_rx_callback+0x12e>
		return;
 80010c0:	bf00      	nop
 80010c2:	e000      	b.n	80010c6 <comms_lpuart_rx_callback+0x12e>
			break;
 80010c4:	bf00      	nop
	}

}
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20001678 	.word	0x20001678
 80010d0:	2000167c 	.word	0x2000167c
 80010d4:	20001660 	.word	0x20001660
 80010d8:	20003784 	.word	0x20003784
 80010dc:	20001664 	.word	0x20001664
 80010e0:	20003874 	.word	0x20003874
 80010e4:	20003788 	.word	0x20003788
 80010e8:	2000378c 	.word	0x2000378c
 80010ec:	2000167b 	.word	0x2000167b

080010f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	// user defined __weak callback from stm32l4xx_hal_uart.c
	// uart loaded data
	if (huart == &hlpuart1) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <HAL_UART_RxCpltCallback+0x20>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d102      	bne.n	8001106 <HAL_UART_RxCpltCallback+0x16>
		comms_lpuart_rx_callback(huart);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff49 	bl	8000f98 <comms_lpuart_rx_callback>
	}
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20003874 	.word	0x20003874

08001114 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d10d      	bne.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001124:	2180      	movs	r1, #128	@ 0x80
 8001126:	4809      	ldr	r0, [pc, #36]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001128:	f002 fffc 	bl	8004124 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	4a07      	ldr	r2, [pc, #28]	@ (8001150 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001134:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		comms_append_int32(1, 1, &periodical);
 8001136:	4a06      	ldr	r2, [pc, #24]	@ (8001150 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001138:	2101      	movs	r1, #1
 800113a:	2001      	movs	r0, #1
 800113c:	f7ff fd08 	bl	8000b50 <comms_append_int32>
	}

	if (htim == &htim3) {
			//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		}
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20003828 	.word	0x20003828
 800114c:	48000400 	.word	0x48000400
 8001150:	20001680 	.word	0x20001680

08001154 <myDmaFunction>:

char testdata[10];

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 800115c:	4b07      	ldr	r3, [pc, #28]	@ (800117c <myDmaFunction+0x28>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001162:	4a07      	ldr	r2, [pc, #28]	@ (8001180 <myDmaFunction+0x2c>)
 8001164:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8001166:	4b05      	ldr	r3, [pc, #20]	@ (800117c <myDmaFunction+0x28>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116c:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <myDmaFunction+0x30>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	200037dc 	.word	0x200037dc
 8001180:	2000168c 	.word	0x2000168c
 8001184:	20001690 	.word	0x20001690

08001188 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);
    //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

    ++call_count;
 8001190:	4b58      	ldr	r3, [pc, #352]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	4a57      	ldr	r2, [pc, #348]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001198:	6013      	str	r3, [r2, #0]

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 800119a:	4b57      	ldr	r3, [pc, #348]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 80011a2:	4b56      	ldr	r3, [pc, #344]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 10; i++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	e027      	b.n	8001200 <HAL_ADC_ConvCpltCallback+0x78>
        adcValue += dma_data_buffer[i + 10]; // Použití druhé poloviny DMA bufferu
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	330a      	adds	r3, #10
 80011b4:	4a52      	ldr	r2, [pc, #328]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x178>)
 80011b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c2:	4b4d      	ldr	r3, [pc, #308]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011cc:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 80011ce:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 10];
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	330b      	adds	r3, #11
 80011d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x178>)
 80011d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e4:	4b45      	ldr	r3, [pc, #276]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	4b43      	ldr	r3, [pc, #268]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80011f0:	edc3 7a00 	vstr	s15, [r3]
        i++;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3301      	adds	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 10; i++) {
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2b09      	cmp	r3, #9
 8001204:	ddd4      	ble.n	80011b0 <HAL_ADC_ConvCpltCallback+0x28>
    }
    adcValue /= 50.0f;
 8001206:	4b3c      	ldr	r3, [pc, #240]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 8001208:	ed93 7a00 	vldr	s14, [r3]
 800120c:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001304 <HAL_ADC_ConvCpltCallback+0x17c>
 8001210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001214:	4b38      	ldr	r3, [pc, #224]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 8001216:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 800121a:	4b38      	ldr	r3, [pc, #224]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 800121c:	ed93 7a00 	vldr	s14, [r3]
 8001220:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001304 <HAL_ADC_ConvCpltCallback+0x17c>
 8001224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001228:	4b34      	ldr	r3, [pc, #208]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 800122a:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 800122e:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 8001230:	ed93 7a00 	vldr	s14, [r3]
 8001234:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001308 <HAL_ADC_ConvCpltCallback+0x180>
 8001238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800130c <HAL_ADC_ConvCpltCallback+0x184>
 8001240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001244:	edc7 7a04 	vstr	s15, [r7, #16]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8001248:	4b31      	ldr	r3, [pc, #196]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x188>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001254:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001308 <HAL_ADC_ConvCpltCallback+0x180>
 8001258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800130c <HAL_ADC_ConvCpltCallback+0x184>
 8001260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001264:	edc7 7a03 	vstr	s15, [r7, #12]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8001268:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <HAL_ADC_ConvCpltCallback+0x18c>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001274:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001308 <HAL_ADC_ConvCpltCallback+0x180>
 8001278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800130c <HAL_ADC_ConvCpltCallback+0x184>
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001284:	edc7 7a02 	vstr	s15, [r7, #8]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8001288:	ed97 7a04 	vldr	s14, [r7, #16]
 800128c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001294:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001318 <HAL_ADC_ConvCpltCallback+0x190>
 8001298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80012a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <HAL_ADC_ConvCpltCallback+0x194>)
 80012a6:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <HAL_ADC_ConvCpltCallback+0x198>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001320 <HAL_ADC_ConvCpltCallback+0x198>)
 80012b2:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    temperatureInt = (int)temperature;
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_ADC_ConvCpltCallback+0x194>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012be:	ee17 2a90 	vmov	r2, s15
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <HAL_ADC_ConvCpltCallback+0x19c>)
 80012c4:	601a      	str	r2, [r3, #0]

    adcIn1Int = (int)adcIn1;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d0:	ee17 2a90 	vmov	r2, s15
 80012d4:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80012d6:	601a      	str	r2, [r3, #0]

    full_adc++;
 80012d8:	4b14      	ldr	r3, [pc, #80]	@ (800132c <HAL_ADC_ConvCpltCallback+0x1a4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a13      	ldr	r2, [pc, #76]	@ (800132c <HAL_ADC_ConvCpltCallback+0x1a4>)
 80012e0:	6013      	str	r3, [r2, #0]

    //comms_append_int32(2, 1, &temperatureInt);
    comms_append_int32(23, 1, &adcIn1Int);
 80012e2:	4a11      	ldr	r2, [pc, #68]	@ (8001328 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	2017      	movs	r0, #23
 80012e8:	f7ff fc32 	bl	8000b50 <comms_append_int32>
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000377c 	.word	0x2000377c
 80012f8:	20003764 	.word	0x20003764
 80012fc:	2000376c 	.word	0x2000376c
 8001300:	200035d4 	.word	0x200035d4
 8001304:	42480000 	.word	0x42480000
 8001308:	45800000 	.word	0x45800000
 800130c:	40533333 	.word	0x40533333
 8001310:	1fff75a8 	.word	0x1fff75a8
 8001314:	1fff75ca 	.word	0x1fff75ca
 8001318:	42a00000 	.word	0x42a00000
 800131c:	20003768 	.word	0x20003768
 8001320:	20003770 	.word	0x20003770
 8001324:	20003774 	.word	0x20003774
 8001328:	20003778 	.word	0x20003778
 800132c:	20003780 	.word	0x20003780

08001330 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
//		adcValue = adcValue + dma_data_buffer[i];
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134a:	f000 fc2e 	bl	8001baa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134e:	f000 f885 	bl	800145c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001352:	f7ff fa3d 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001356:	f7ff f9df 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 800135a:	f000 fa29 	bl	80017b0 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 800135e:	f00b fe0d 	bl	800cf7c <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8001362:	f000 f9d7 	bl	8001714 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001366:	f7ff f8c1 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 800136a:	f000 f985 	bl	8001678 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800136e:	f000 faf9 	bl	8001964 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8001372:	f000 faab 	bl	80018cc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2180      	movs	r1, #128	@ 0x80
 800137a:	482b      	ldr	r0, [pc, #172]	@ (8001428 <main+0xe4>)
 800137c:	f002 feba 	bl	80040f4 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 8001380:	482a      	ldr	r0, [pc, #168]	@ (800142c <main+0xe8>)
 8001382:	f005 fe3d 	bl	8007000 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 8001386:	482a      	ldr	r0, [pc, #168]	@ (8001430 <main+0xec>)
 8001388:	f005 fdd2 	bl	8006f30 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	e00d      	b.n	80013ae <main+0x6a>
		dma[i] = i;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139c:	4a25      	ldr	r2, [pc, #148]	@ (8001434 <main+0xf0>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3301      	adds	r3, #1
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013b4:	dbed      	blt.n	8001392 <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 80013b6:	4a20      	ldr	r2, [pc, #128]	@ (8001438 <main+0xf4>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	4820      	ldr	r0, [pc, #128]	@ (800143c <main+0xf8>)
 80013bc:	f002 fc08 	bl	8003bd0 <HAL_DMA_RegisterCallback>
 80013c0:	4603      	mov	r3, r0
 80013c2:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <main+0xec>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001440 <main+0xfc>)
 80013cc:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 80013ce:	4919      	ldr	r1, [pc, #100]	@ (8001434 <main+0xf0>)
 80013d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <main+0x100>)
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	4819      	ldr	r0, [pc, #100]	@ (800143c <main+0xf8>)
 80013d8:	f002 fa14 	bl	8003804 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <main+0xec>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e2:	4a19      	ldr	r2, [pc, #100]	@ (8001448 <main+0x104>)
 80013e4:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <main+0xec>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	4a17      	ldr	r2, [pc, #92]	@ (800144c <main+0x108>)
 80013ee:	6013      	str	r3, [r2, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80013f0:	217f      	movs	r1, #127	@ 0x7f
 80013f2:	4817      	ldr	r0, [pc, #92]	@ (8001450 <main+0x10c>)
 80013f4:	f001 ffba 	bl	800336c <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 80013f8:	2032      	movs	r0, #50	@ 0x32
 80013fa:	f000 fc4b 	bl	8001c94 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 20);
 80013fe:	2214      	movs	r2, #20
 8001400:	4914      	ldr	r1, [pc, #80]	@ (8001454 <main+0x110>)
 8001402:	4813      	ldr	r0, [pc, #76]	@ (8001450 <main+0x10c>)
 8001404:	f000 ffc4 	bl	8002390 <HAL_ADC_Start_DMA>
 8001408:	4603      	mov	r3, r0
 800140a:	70bb      	strb	r3, [r7, #2]

	HAL_TIM_Base_Start_IT(&htim3);
 800140c:	4812      	ldr	r0, [pc, #72]	@ (8001458 <main+0x114>)
 800140e:	f005 fdf7 	bl	8007000 <HAL_TIM_Base_Start_IT>

	comms_init();
 8001412:	f7ff fb29 	bl	8000a68 <comms_init>
	comms_uart_init();
 8001416:	f7ff fb13 	bl	8000a40 <comms_uart_init>
//	    comms_append_int32(2, 1, &temperatureInt);

//	    comms_send();

		//load_CPU();
		comms_send();
 800141a:	f7ff fc11 	bl	8000c40 <comms_send>
		comms_rx_process();
 800141e:	f7ff fd0f 	bl	8000e40 <comms_rx_process>
		comms_send();
 8001422:	bf00      	nop
 8001424:	e7f9      	b.n	800141a <main+0xd6>
 8001426:	bf00      	nop
 8001428:	48000800 	.word	0x48000800
 800142c:	20003828 	.word	0x20003828
 8001430:	200037dc 	.word	0x200037dc
 8001434:	20001694 	.word	0x20001694
 8001438:	08001155 	.word	0x08001155
 800143c:	200001f0 	.word	0x200001f0
 8001440:	20001684 	.word	0x20001684
 8001444:	20002634 	.word	0x20002634
 8001448:	20001690 	.word	0x20001690
 800144c:	20001688 	.word	0x20001688
 8001450:	20000128 	.word	0x20000128
 8001454:	200035d4 	.word	0x200035d4
 8001458:	20003790 	.word	0x20003790

0800145c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b096      	sub	sp, #88	@ 0x58
 8001460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2244      	movs	r2, #68	@ 0x44
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f00c fbea 	bl	800dc44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800147e:	2000      	movs	r0, #0
 8001480:	f004 f84a 	bl	8005518 <HAL_PWREx_ControlVoltageScaling>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800148a:	f000 f83a 	bl	8001502 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800148e:	2322      	movs	r3, #34	@ 0x22
 8001490:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001492:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001496:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001498:	2301      	movs	r3, #1
 800149a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149c:	2340      	movs	r3, #64	@ 0x40
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a4:	2302      	movs	r3, #2
 80014a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80014ac:	231e      	movs	r3, #30
 80014ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 f8ed 	bl	80056a0 <HAL_RCC_OscConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80014cc:	f000 f819 	bl	8001502 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d0:	230f      	movs	r3, #15
 80014d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d4:	2303      	movs	r3, #3
 80014d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	2105      	movs	r1, #5
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 fcf2 	bl	8005ed4 <HAL_RCC_ClockConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014f6:	f000 f804 	bl	8001502 <Error_Handler>
  }
}
 80014fa:	bf00      	nop
 80014fc:	3758      	adds	r7, #88	@ 0x58
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001506:	b672      	cpsid	i
}
 8001508:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800150a:	bf00      	nop
 800150c:	e7fd      	b.n	800150a <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_MspInit+0x44>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151a:	4a0e      	ldr	r2, [pc, #56]	@ (8001554 <HAL_MspInit+0x44>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6613      	str	r3, [r2, #96]	@ 0x60
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_MspInit+0x44>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_MspInit+0x44>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <HAL_MspInit+0x44>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001538:	6593      	str	r3, [r2, #88]	@ 0x58
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_MspInit+0x44>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <NMI_Handler+0x4>

08001560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <HardFault_Handler+0x4>

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <MemManage_Handler+0x4>

08001570 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <UsageFault_Handler+0x4>

08001580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ae:	f000 fb51 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <DMA1_Channel1_IRQHandler+0x10>)
 80015be:	f002 fa57 	bl	8003a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000190 	.word	0x20000190

080015cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <DMA1_Channel2_IRQHandler+0x10>)
 80015d2:	f002 fa4d 	bl	8003a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200001f0 	.word	0x200001f0

080015e0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <ADC1_IRQHandler+0x10>)
 80015e6:	f000 ff57 	bl	8002498 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000128 	.word	0x20000128

080015f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <TIM3_IRQHandler+0x10>)
 80015fa:	f005 fd71 	bl	80070e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20003790 	.word	0x20003790

08001608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800160c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001610:	f002 fda2 	bl	8004158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800161c:	4802      	ldr	r0, [pc, #8]	@ (8001628 <TIM6_DAC_IRQHandler+0x10>)
 800161e:	f005 fd5f 	bl	80070e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20003828 	.word	0x20003828

0800162c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <OTG_FS_IRQHandler+0x10>)
 8001632:	f002 fefc 	bl	800442e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20004e80 	.word	0x20004e80

08001640 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001644:	4802      	ldr	r0, [pc, #8]	@ (8001650 <LPUART1_IRQHandler+0x10>)
 8001646:	f006 fa43 	bl	8007ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20003874 	.word	0x20003874

08001654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <SystemInit+0x20>)
 800165a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <SystemInit+0x20>)
 8001660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <MX_TIM3_Init+0x94>)
 8001698:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <MX_TIM3_Init+0x98>)
 800169a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <MX_TIM3_Init+0x94>)
 800169e:	22c7      	movs	r2, #199	@ 0xc7
 80016a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <MX_TIM3_Init+0x94>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <MX_TIM3_Init+0x94>)
 80016aa:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80016ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <MX_TIM3_Init+0x94>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <MX_TIM3_Init+0x94>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016bc:	4813      	ldr	r0, [pc, #76]	@ (800170c <MX_TIM3_Init+0x94>)
 80016be:	f005 fbdf 	bl	8006e80 <HAL_TIM_Base_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016c8:	f7ff ff1b 	bl	8001502 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	@ (800170c <MX_TIM3_Init+0x94>)
 80016da:	f005 fe03 	bl	80072e4 <HAL_TIM_ConfigClockSource>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016e4:	f7ff ff0d 	bl	8001502 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016e8:	2320      	movs	r3, #32
 80016ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_TIM3_Init+0x94>)
 80016f6:	f006 f81b 	bl	8007730 <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001700:	f7ff feff 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	3720      	adds	r7, #32
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20003790 	.word	0x20003790
 8001710:	40000400 	.word	0x40000400

08001714 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <MX_TIM5_Init+0x94>)
 8001734:	4a1d      	ldr	r2, [pc, #116]	@ (80017ac <MX_TIM5_Init+0x98>)
 8001736:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <MX_TIM5_Init+0x94>)
 800173a:	2200      	movs	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <MX_TIM5_Init+0x94>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001744:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <MX_TIM5_Init+0x94>)
 8001746:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800174a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174c:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_TIM5_Init+0x94>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <MX_TIM5_Init+0x94>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001758:	4813      	ldr	r0, [pc, #76]	@ (80017a8 <MX_TIM5_Init+0x94>)
 800175a:	f005 fb91 	bl	8006e80 <HAL_TIM_Base_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001764:	f7ff fecd 	bl	8001502 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	4619      	mov	r1, r3
 8001774:	480c      	ldr	r0, [pc, #48]	@ (80017a8 <MX_TIM5_Init+0x94>)
 8001776:	f005 fdb5 	bl	80072e4 <HAL_TIM_ConfigClockSource>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001780:	f7ff febf 	bl	8001502 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_TIM5_Init+0x94>)
 8001792:	f005 ffcd 	bl	8007730 <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800179c:	f7ff feb1 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200037dc 	.word	0x200037dc
 80017ac:	40000c00 	.word	0x40000c00

080017b0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017c0:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <MX_TIM6_Init+0x68>)
 80017c2:	4a16      	ldr	r2, [pc, #88]	@ (800181c <MX_TIM6_Init+0x6c>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80017c6:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <MX_TIM6_Init+0x68>)
 80017c8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80017cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ce:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <MX_TIM6_Init+0x68>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 80017d4:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <MX_TIM6_Init+0x68>)
 80017d6:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80017da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_TIM6_Init+0x68>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017e2:	480d      	ldr	r0, [pc, #52]	@ (8001818 <MX_TIM6_Init+0x68>)
 80017e4:	f005 fb4c 	bl	8006e80 <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80017ee:	f7ff fe88 	bl	8001502 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017f2:	2320      	movs	r3, #32
 80017f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	@ (8001818 <MX_TIM6_Init+0x68>)
 8001800:	f005 ff96 	bl	8007730 <HAL_TIMEx_MasterConfigSynchronization>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800180a:	f7ff fe7a 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20003828 	.word	0x20003828
 800181c:	40001000 	.word	0x40001000

08001820 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a23      	ldr	r2, [pc, #140]	@ (80018bc <HAL_TIM_Base_MspInit+0x9c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d114      	bne.n	800185c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001832:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <HAL_TIM_Base_MspInit+0xa0>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	4a22      	ldr	r2, [pc, #136]	@ (80018c0 <HAL_TIM_Base_MspInit+0xa0>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6593      	str	r3, [r2, #88]	@ 0x58
 800183e:	4b20      	ldr	r3, [pc, #128]	@ (80018c0 <HAL_TIM_Base_MspInit+0xa0>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	201d      	movs	r0, #29
 8001850:	f001 fef9 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001854:	201d      	movs	r0, #29
 8001856:	f001 ff12 	bl	800367e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800185a:	e02a      	b.n	80018b2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a18      	ldr	r2, [pc, #96]	@ (80018c4 <HAL_TIM_Base_MspInit+0xa4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d10c      	bne.n	8001880 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001866:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <HAL_TIM_Base_MspInit+0xa0>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186a:	4a15      	ldr	r2, [pc, #84]	@ (80018c0 <HAL_TIM_Base_MspInit+0xa0>)
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	6593      	str	r3, [r2, #88]	@ 0x58
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <HAL_TIM_Base_MspInit+0xa0>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
}
 800187e:	e018      	b.n	80018b2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a10      	ldr	r2, [pc, #64]	@ (80018c8 <HAL_TIM_Base_MspInit+0xa8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d113      	bne.n	80018b2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800188a:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <HAL_TIM_Base_MspInit+0xa0>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <HAL_TIM_Base_MspInit+0xa0>)
 8001890:	f043 0310 	orr.w	r3, r3, #16
 8001894:	6593      	str	r3, [r2, #88]	@ 0x58
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <HAL_TIM_Base_MspInit+0xa0>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2036      	movs	r0, #54	@ 0x36
 80018a8:	f001 fecd 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ac:	2036      	movs	r0, #54	@ 0x36
 80018ae:	f001 fee6 	bl	800367e <HAL_NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40000400 	.word	0x40000400
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40000c00 	.word	0x40000c00
 80018c8:	40001000 	.word	0x40001000

080018cc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018d0:	4b22      	ldr	r3, [pc, #136]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 80018d2:	4a23      	ldr	r2, [pc, #140]	@ (8001960 <MX_LPUART1_UART_Init+0x94>)
 80018d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018d6:	4b21      	ldr	r3, [pc, #132]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 80018d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b19      	ldr	r3, [pc, #100]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 80018fe:	2200      	movs	r2, #0
 8001900:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 800190a:	2200      	movs	r2, #0
 800190c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800190e:	4b13      	ldr	r3, [pc, #76]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001914:	4811      	ldr	r0, [pc, #68]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 8001916:	f005 ffb1 	bl	800787c <HAL_UART_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001920:	f7ff fdef 	bl	8001502 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001924:	2100      	movs	r1, #0
 8001926:	480d      	ldr	r0, [pc, #52]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 8001928:	f008 f80b 	bl	8009942 <HAL_UARTEx_SetTxFifoThreshold>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001932:	f7ff fde6 	bl	8001502 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001936:	2100      	movs	r1, #0
 8001938:	4808      	ldr	r0, [pc, #32]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 800193a:	f008 f840 	bl	80099be <HAL_UARTEx_SetRxFifoThreshold>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001944:	f7ff fddd 	bl	8001502 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <MX_LPUART1_UART_Init+0x90>)
 800194a:	f007 ffc1 	bl	80098d0 <HAL_UARTEx_DisableFifoMode>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001954:	f7ff fdd5 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20003874 	.word	0x20003874
 8001960:	40008000 	.word	0x40008000

08001964 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001968:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 800196a:	4a23      	ldr	r2, [pc, #140]	@ (80019f8 <MX_USART3_UART_Init+0x94>)
 800196c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800196e:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b1d      	ldr	r3, [pc, #116]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001982:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a0:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a6:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019ac:	4811      	ldr	r0, [pc, #68]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 80019ae:	f005 ff65 	bl	800787c <HAL_UART_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019b8:	f7ff fda3 	bl	8001502 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019bc:	2100      	movs	r1, #0
 80019be:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 80019c0:	f007 ffbf 	bl	8009942 <HAL_UARTEx_SetTxFifoThreshold>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019ca:	f7ff fd9a 	bl	8001502 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4808      	ldr	r0, [pc, #32]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 80019d2:	f007 fff4 	bl	80099be <HAL_UARTEx_SetRxFifoThreshold>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019dc:	f7ff fd91 	bl	8001502 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <MX_USART3_UART_Init+0x90>)
 80019e2:	f007 ff75 	bl	80098d0 <HAL_UARTEx_DisableFifoMode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019ec:	f7ff fd89 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20003908 	.word	0x20003908
 80019f8:	40004800 	.word	0x40004800

080019fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0b0      	sub	sp, #192	@ 0xc0
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	2294      	movs	r2, #148	@ 0x94
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00c f911 	bl	800dc44 <memset>
  if(uartHandle->Instance==LPUART1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a47      	ldr	r2, [pc, #284]	@ (8001b44 <HAL_UART_MspInit+0x148>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d146      	bne.n	8001aba <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f004 fd09 	bl	8006450 <HAL_RCCEx_PeriphCLKConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a44:	f7ff fd5d 	bl	8001502 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a48:	4b3f      	ldr	r3, [pc, #252]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	4a3e      	ldr	r2, [pc, #248]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a54:	4b3c      	ldr	r3, [pc, #240]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a60:	4b39      	ldr	r3, [pc, #228]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a64:	4a38      	ldr	r2, [pc, #224]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6c:	4b36      	ldr	r3, [pc, #216]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001a78:	f003 fe02 	bl	8005680 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001a7c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a96:	2308      	movs	r3, #8
 8001a98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a9c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	482a      	ldr	r0, [pc, #168]	@ (8001b4c <HAL_UART_MspInit+0x150>)
 8001aa4:	f002 f97c 	bl	8003da0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2046      	movs	r0, #70	@ 0x46
 8001aae:	f001 fdca 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001ab2:	2046      	movs	r0, #70	@ 0x46
 8001ab4:	f001 fde3 	bl	800367e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ab8:	e040      	b.n	8001b3c <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a24      	ldr	r2, [pc, #144]	@ (8001b50 <HAL_UART_MspInit+0x154>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d13b      	bne.n	8001b3c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001acc:	f107 0318 	add.w	r3, r7, #24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 fcbd 	bl	8006450 <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001adc:	f7ff fd11 	bl	8001502 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ae0:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae4:	4a18      	ldr	r2, [pc, #96]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001ae6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aec:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afc:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b04:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <HAL_UART_MspInit+0x14c>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b34:	4619      	mov	r1, r3
 8001b36:	4807      	ldr	r0, [pc, #28]	@ (8001b54 <HAL_UART_MspInit+0x158>)
 8001b38:	f002 f932 	bl	8003da0 <HAL_GPIO_Init>
}
 8001b3c:	bf00      	nop
 8001b3e:	37c0      	adds	r7, #192	@ 0xc0
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40008000 	.word	0x40008000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	48001800 	.word	0x48001800
 8001b50:	40004800 	.word	0x40004800
 8001b54:	48000c00 	.word	0x48000c00

08001b58 <Reset_Handler>:
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b90 <LoopForever+0x2>
 8001b5c:	f7ff fd7a 	bl	8001654 <SystemInit>
 8001b60:	480c      	ldr	r0, [pc, #48]	@ (8001b94 <LoopForever+0x6>)
 8001b62:	490d      	ldr	r1, [pc, #52]	@ (8001b98 <LoopForever+0xa>)
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <LoopForever+0xe>)
 8001b66:	2300      	movs	r3, #0
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:
 8001b6a:	58d4      	ldr	r4, [r2, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:
 8001b70:	18c4      	adds	r4, r0, r3
 8001b72:	428c      	cmp	r4, r1
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <LoopForever+0x12>)
 8001b78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba4 <LoopForever+0x16>)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:
 8001b82:	42a2      	cmp	r2, r4
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>
 8001b86:	f00c f865 	bl	800dc54 <__libc_init_array>
 8001b8a:	f7ff fbdb 	bl	8001344 <main>

08001b8e <LoopForever>:
 8001b8e:	e7fe      	b.n	8001b8e <LoopForever>
 8001b90:	200a0000 	.word	0x200a0000
 8001b94:	20000000 	.word	0x20000000
 8001b98:	2000010c 	.word	0x2000010c
 8001b9c:	0800dd98 	.word	0x0800dd98
 8001ba0:	2000010c 	.word	0x2000010c
 8001ba4:	200055ac 	.word	0x200055ac

08001ba8 <CAN1_RX0_IRQHandler>:
 8001ba8:	e7fe      	b.n	8001ba8 <CAN1_RX0_IRQHandler>

08001baa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f001 fd3b 	bl	8003630 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f80e 	bl	8001bdc <HAL_InitTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	e001      	b.n	8001bd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bcc:	f7ff fca0 	bl	8001510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001be8:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <HAL_InitTick+0x6c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d023      	beq.n	8001c38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bf0:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <HAL_InitTick+0x70>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <HAL_InitTick+0x6c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 fd47 	bl	800369a <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10f      	bne.n	8001c32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d809      	bhi.n	8001c2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c20:	f001 fd11 	bl	8003646 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c24:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <HAL_InitTick+0x74>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e007      	b.n	8001c3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e004      	b.n	8001c3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	e001      	b.n	8001c3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000008 	.word	0x20000008
 8001c78:	2000399c 	.word	0x2000399c

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	2000399c 	.word	0x2000399c

08001c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff ffee 	bl	8001c7c <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cac:	d005      	beq.n	8001cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_Delay+0x44>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cba:	bf00      	nop
 8001cbc:	f7ff ffde 	bl	8001c7c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d8f7      	bhi.n	8001cbc <HAL_Delay+0x28>
  {
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000008 	.word	0x20000008

08001cdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3360      	adds	r3, #96	@ 0x60
 8001d56:	461a      	mov	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <LL_ADC_SetOffset+0x44>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	03fff000 	.word	0x03fff000

08001d8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3360      	adds	r3, #96	@ 0x60
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3360      	adds	r3, #96	@ 0x60
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	615a      	str	r2, [r3, #20]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b087      	sub	sp, #28
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3330      	adds	r3, #48	@ 0x30
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	4413      	add	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	211f      	movs	r1, #31
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0e9b      	lsrs	r3, r3, #26
 8001e72:	f003 011f 	and.w	r1, r3, #31
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	431a      	orrs	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3314      	adds	r3, #20
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	0e5b      	lsrs	r3, r3, #25
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	4413      	add	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	0d1b      	lsrs	r3, r3, #20
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	2107      	movs	r1, #7
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	401a      	ands	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	0d1b      	lsrs	r3, r3, #20
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	431a      	orrs	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f02:	bf00      	nop
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0318 	and.w	r3, r3, #24
 8001f32:	4908      	ldr	r1, [pc, #32]	@ (8001f54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f34:	40d9      	lsrs	r1, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	400b      	ands	r3, r1
 8001f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	0007ffff 	.word	0x0007ffff

08001f58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6093      	str	r3, [r2, #8]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f90:	d101      	bne.n	8001f96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fe0:	d101      	bne.n	8001fe6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002004:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800202c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002030:	f043 0202 	orr.w	r2, r3, #2
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <LL_ADC_IsEnabled+0x18>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_ADC_IsEnabled+0x1a>
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b02      	cmp	r3, #2
 800207c:	d101      	bne.n	8002082 <LL_ADC_IsDisableOngoing+0x18>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <LL_ADC_IsDisableOngoing+0x1a>
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020a4:	f043 0204 	orr.w	r2, r3, #4
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d101      	bne.n	80020d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d101      	bne.n	80020f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e129      	b.n	8002372 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7fe fa53 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff19 	bl	8001f7c <LL_ADC_IsDeepPowerDownEnabled>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff feff 	bl	8001f58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff34 	bl	8001fcc <LL_ADC_IsInternalRegulatorEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff18 	bl	8001fa4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002174:	4b81      	ldr	r3, [pc, #516]	@ (800237c <HAL_ADC_Init+0x278>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	4a81      	ldr	r2, [pc, #516]	@ (8002380 <HAL_ADC_Init+0x27c>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	3301      	adds	r3, #1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002188:	e002      	b.n	8002190 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3b01      	subs	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f9      	bne.n	800218a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff16 	bl	8001fcc <LL_ADC_IsInternalRegulatorEnabled>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff76 	bl	80020b8 <LL_ADC_REG_IsConversionOngoing>
 80021cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 80c2 	bne.w	8002360 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 80be 	bne.w	8002360 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021ec:	f043 0202 	orr.w	r2, r3, #2
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff23 	bl	8002044 <LL_ADC_IsEnabled>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10b      	bne.n	800221c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002204:	485f      	ldr	r0, [pc, #380]	@ (8002384 <HAL_ADC_Init+0x280>)
 8002206:	f7ff ff1d 	bl	8002044 <LL_ADC_IsEnabled>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4619      	mov	r1, r3
 8002216:	485c      	ldr	r0, [pc, #368]	@ (8002388 <HAL_ADC_Init+0x284>)
 8002218:	f7ff fd60 	bl	8001cdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7e5b      	ldrb	r3, [r3, #25]
 8002220:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002226:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800222c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002232:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d106      	bne.n	8002258 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	3b01      	subs	r3, #1
 8002250:	045b      	lsls	r3, r3, #17
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	4b44      	ldr	r3, [pc, #272]	@ (800238c <HAL_ADC_Init+0x288>)
 800227c:	4013      	ands	r3, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	69b9      	ldr	r1, [r7, #24]
 8002284:	430b      	orrs	r3, r1
 8002286:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff26 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 8002292:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d140      	bne.n	800231c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d13d      	bne.n	800231c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7e1b      	ldrb	r3, [r3, #24]
 80022a8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022aa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022b2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022c2:	f023 0306 	bic.w	r3, r3, #6
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	430b      	orrs	r3, r1
 80022ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d118      	bne.n	800230c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022e4:	f023 0304 	bic.w	r3, r3, #4
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022f0:	4311      	orrs	r1, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022fc:	430a      	orrs	r2, r1
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0201 	orr.w	r2, r2, #1
 8002308:	611a      	str	r2, [r3, #16]
 800230a:	e007      	b.n	800231c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d10c      	bne.n	800233e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f023 010f 	bic.w	r1, r3, #15
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	1e5a      	subs	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	631a      	str	r2, [r3, #48]	@ 0x30
 800233c:	e007      	b.n	800234e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 020f 	bic.w	r2, r2, #15
 800234c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	659a      	str	r2, [r3, #88]	@ 0x58
 800235e:	e007      	b.n	8002370 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002364:	f043 0210 	orr.w	r2, r3, #16
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002370:	7ffb      	ldrb	r3, [r7, #31]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000000 	.word	0x20000000
 8002380:	053e2d63 	.word	0x053e2d63
 8002384:	50040000 	.word	0x50040000
 8002388:	50040300 	.word	0x50040300
 800238c:	fff0c007 	.word	0xfff0c007

08002390 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fe89 	bl	80020b8 <LL_ADC_REG_IsConversionOngoing>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d167      	bne.n	800247c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_Start_DMA+0x2a>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e063      	b.n	8002482 <HAL_ADC_Start_DMA+0xf2>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fe2c 	bl	8003020 <ADC_Enable>
 80023c8:	4603      	mov	r3, r0
 80023ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d14f      	bne.n	8002472 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f6:	f023 0206 	bic.w	r2, r3, #6
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023fe:	e002      	b.n	8002406 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800240a:	4a20      	ldr	r2, [pc, #128]	@ (800248c <HAL_ADC_Start_DMA+0xfc>)
 800240c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002412:	4a1f      	ldr	r2, [pc, #124]	@ (8002490 <HAL_ADC_Start_DMA+0x100>)
 8002414:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241a:	4a1e      	ldr	r2, [pc, #120]	@ (8002494 <HAL_ADC_Start_DMA+0x104>)
 800241c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	221c      	movs	r2, #28
 8002424:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0210 	orr.w	r2, r2, #16
 800243c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0201 	orr.w	r2, r2, #1
 800244c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3340      	adds	r3, #64	@ 0x40
 8002458:	4619      	mov	r1, r3
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f001 f9d1 	bl	8003804 <HAL_DMA_Start_IT>
 8002462:	4603      	mov	r3, r0
 8002464:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fe10 	bl	8002090 <LL_ADC_REG_StartConversion>
 8002470:	e006      	b.n	8002480 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800247a:	e001      	b.n	8002480 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800247c:	2302      	movs	r3, #2
 800247e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002480:	7dfb      	ldrb	r3, [r7, #23]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	080031eb 	.word	0x080031eb
 8002490:	080032c3 	.word	0x080032c3
 8002494:	080032df 	.word	0x080032df

08002498 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d017      	beq.n	80024ee <HAL_ADC_IRQHandler+0x56>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d012      	beq.n	80024ee <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 ffcb 	bl	800347c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2202      	movs	r2, #2
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_ADC_IRQHandler+0x6a>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05e      	beq.n	80025ca <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d059      	beq.n	80025ca <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d105      	bne.n	800252e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fc6e 	bl	8001e14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d03e      	beq.n	80025bc <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d135      	bne.n	80025bc <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b08      	cmp	r3, #8
 800255c:	d12e      	bne.n	80025bc <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fda8 	bl	80020b8 <LL_ADC_REG_IsConversionOngoing>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d11a      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 020c 	bic.w	r2, r2, #12
 800257c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d112      	bne.n	80025bc <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80025a2:	e00b      	b.n	80025bc <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	f043 0210 	orr.w	r2, r3, #16
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fe fde3 	bl	8001188 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	220c      	movs	r2, #12
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <HAL_ADC_IRQHandler+0x146>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d072      	beq.n	80026ce <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d06d      	beq.n	80026ce <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fc3f 	bl	8001e92 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002614:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fbfa 	bl	8001e14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002620:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d047      	beq.n	80026c0 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <HAL_ADC_IRQHandler+0x1b2>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d03f      	beq.n	80026c0 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002646:	2b00      	cmp	r3, #0
 8002648:	d13a      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002654:	2b40      	cmp	r3, #64	@ 0x40
 8002656:	d133      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d12e      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fd39 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d11a      	bne.n	80026a8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002680:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d112      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80026a6:	e00b      	b.n	80026c0 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 feb3 	bl	800342c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2260      	movs	r2, #96	@ 0x60
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d011      	beq.n	80026fc <HAL_ADC_IRQHandler+0x264>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00c      	beq.n	80026fc <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f886 	bl	8002800 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2280      	movs	r2, #128	@ 0x80
 80026fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d012      	beq.n	800272c <HAL_ADC_IRQHandler+0x294>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00d      	beq.n	800272c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fe99 	bl	8003454 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800272a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002732:	2b00      	cmp	r3, #0
 8002734:	d012      	beq.n	800275c <HAL_ADC_IRQHandler+0x2c4>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00d      	beq.n	800275c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fe8b 	bl	8003468 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d02a      	beq.n	80027bc <HAL_ADC_IRQHandler+0x324>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d025      	beq.n	80027bc <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002778:	2301      	movs	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	e008      	b.n	8002790 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800278c:	2301      	movs	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10e      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a6:	f043 0202 	orr.w	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f830 	bl	8002814 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2210      	movs	r2, #16
 80027ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d018      	beq.n	80027f8 <HAL_ADC_IRQHandler+0x360>
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e0:	f043 0208 	orr.w	r2, r3, #8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027f0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fe24 	bl	8003440 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0b6      	sub	sp, #216	@ 0xd8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x22>
 8002846:	2302      	movs	r3, #2
 8002848:	e3d5      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x7ce>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc2e 	bl	80020b8 <LL_ADC_REG_IsConversionOngoing>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 83ba 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d824      	bhi.n	80028be <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	3b02      	subs	r3, #2
 800287a:	2b03      	cmp	r3, #3
 800287c:	d81b      	bhi.n	80028b6 <HAL_ADC_ConfigChannel+0x8e>
 800287e:	a201      	add	r2, pc, #4	@ (adr r2, 8002884 <HAL_ADC_ConfigChannel+0x5c>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	08002895 	.word	0x08002895
 8002888:	0800289d 	.word	0x0800289d
 800288c:	080028a5 	.word	0x080028a5
 8002890:	080028ad 	.word	0x080028ad
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002894:	230c      	movs	r3, #12
 8002896:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800289a:	e010      	b.n	80028be <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800289c:	2312      	movs	r3, #18
 800289e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028a2:	e00c      	b.n	80028be <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80028a4:	2318      	movs	r3, #24
 80028a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028aa:	e008      	b.n	80028be <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80028ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028b4:	e003      	b.n	80028be <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80028b6:	2306      	movs	r3, #6
 80028b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028bc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80028cc:	f7ff fab5 	bl	8001e3a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fbef 	bl	80020b8 <LL_ADC_REG_IsConversionOngoing>
 80028da:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fbfb 	bl	80020de <LL_ADC_INJ_IsConversionOngoing>
 80028e8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f040 81bf 	bne.w	8002c74 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 81ba 	bne.w	8002c74 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002908:	d10f      	bne.n	800292a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2200      	movs	r2, #0
 8002914:	4619      	mov	r1, r3
 8002916:	f7ff facf 	bl	8001eb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fa63 	bl	8001dee <LL_ADC_SetSamplingTimeCommonConfig>
 8002928:	e00e      	b.n	8002948 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6819      	ldr	r1, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	461a      	mov	r2, r3
 8002938:	f7ff fabe 	bl	8001eb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fa53 	bl	8001dee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	08db      	lsrs	r3, r3, #3
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b04      	cmp	r3, #4
 8002968:	d00a      	beq.n	8002980 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6919      	ldr	r1, [r3, #16]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800297a:	f7ff f9e3 	bl	8001d44 <LL_ADC_SetOffset>
 800297e:	e179      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fa00 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 800298c:	4603      	mov	r3, r0
 800298e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10a      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x184>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff f9f5 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	0e9b      	lsrs	r3, r3, #26
 80029a6:	f003 021f 	and.w	r2, r3, #31
 80029aa:	e01e      	b.n	80029ea <HAL_ADC_ConfigChannel+0x1c2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f9ea 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80029da:	2320      	movs	r3, #32
 80029dc:	e004      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80029de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x1da>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	e018      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x20c>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002a1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002a26:	2320      	movs	r3, #32
 8002a28:	e004      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002a2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d106      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff f9b9 	bl	8001db8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff f99d 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x24a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff f992 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	0e9b      	lsrs	r3, r3, #26
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	e01e      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x288>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2101      	movs	r1, #1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff f987 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002a98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e004      	b.n	8002aae <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002aa4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x2a0>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	e018      	b.n	8002afa <HAL_ADC_ConfigChannel+0x2d2>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002adc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002aec:	2320      	movs	r3, #32
 8002aee:	e004      	b.n	8002afa <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d106      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	2101      	movs	r1, #1
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f956 	bl	8001db8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2102      	movs	r1, #2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff f93a 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x310>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2102      	movs	r1, #2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff f92f 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	f003 021f 	and.w	r2, r3, #31
 8002b36:	e01e      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x34e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f924 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002b66:	2320      	movs	r3, #32
 8002b68:	e004      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d105      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x366>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	e014      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x390>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002b9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e004      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002bae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d106      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff f8f7 	bl	8001db8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2103      	movs	r1, #3
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff f8db 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x3ce>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2103      	movs	r1, #3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff f8d0 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002bec:	4603      	mov	r3, r0
 8002bee:	0e9b      	lsrs	r3, r3, #26
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	e017      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x3fe>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff f8c5 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c10:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e003      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002c1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x416>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0e9b      	lsrs	r3, r3, #26
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	e011      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x43a>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c4e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e003      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002c5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d106      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2103      	movs	r1, #3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f8a2 	bl	8001db8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff f9e3 	bl	8002044 <LL_ADC_IsEnabled>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 813f 	bne.w	8002f04 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f7ff f93c 	bl	8001f10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a8e      	ldr	r2, [pc, #568]	@ (8002ed8 <HAL_ADC_ConfigChannel+0x6b0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	f040 8130 	bne.w	8002f04 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x4a4>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2b09      	cmp	r3, #9
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e019      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x4d8>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002cde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e003      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002ce8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	2b09      	cmp	r3, #9
 8002cf8:	bf94      	ite	ls
 8002cfa:	2301      	movls	r3, #1
 8002cfc:	2300      	movhi	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d079      	beq.n	8002df8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x4f8>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	3301      	adds	r3, #1
 8002d18:	069b      	lsls	r3, r3, #26
 8002d1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d1e:	e015      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x524>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d30:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e003      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	069b      	lsls	r3, r3, #26
 8002d48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x544>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0e9b      	lsrs	r3, r3, #26
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	e017      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x574>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002d84:	2320      	movs	r3, #32
 8002d86:	e003      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	ea42 0103 	orr.w	r1, r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x59a>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	3301      	adds	r3, #1
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	051b      	lsls	r3, r3, #20
 8002dc0:	e018      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x5cc>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002dda:	2320      	movs	r3, #32
 8002ddc:	e003      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	f003 021f 	and.w	r2, r3, #31
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df4:	430b      	orrs	r3, r1
 8002df6:	e080      	b.n	8002efa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x5ec>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	069b      	lsls	r3, r3, #26
 8002e0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e12:	e015      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x618>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	e003      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	069b      	lsls	r3, r3, #26
 8002e3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x638>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	3301      	adds	r3, #1
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	e017      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x668>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	61bb      	str	r3, [r7, #24]
  return result;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e003      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	ea42 0103 	orr.w	r1, r2, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x694>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3b1e      	subs	r3, #30
 8002eb4:	051b      	lsls	r3, r3, #20
 8002eb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	e01d      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x6d0>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	60fb      	str	r3, [r7, #12]
  return result;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d103      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	e005      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x6bc>
 8002ed8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f003 021f 	and.w	r2, r3, #31
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	3b1e      	subs	r3, #30
 8002ef2:	051b      	lsls	r3, r3, #20
 8002ef4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002efe:	4619      	mov	r1, r3
 8002f00:	f7fe ffda 	bl	8001eb8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b3d      	ldr	r3, [pc, #244]	@ (8003000 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d06c      	beq.n	8002fea <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f10:	483c      	ldr	r0, [pc, #240]	@ (8003004 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f12:	f7fe ff09 	bl	8001d28 <LL_ADC_GetCommonPathInternalCh>
 8002f16:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a3a      	ldr	r2, [pc, #232]	@ (8003008 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d127      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d121      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a35      	ldr	r2, [pc, #212]	@ (800300c <HAL_ADC_ConfigChannel+0x7e4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d157      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f42:	4619      	mov	r1, r3
 8002f44:	482f      	ldr	r0, [pc, #188]	@ (8003004 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f46:	f7fe fedc 	bl	8001d02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f4a:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <HAL_ADC_ConfigChannel+0x7e8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	099b      	lsrs	r3, r3, #6
 8002f50:	4a30      	ldr	r2, [pc, #192]	@ (8003014 <HAL_ADC_ConfigChannel+0x7ec>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	099b      	lsrs	r3, r3, #6
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f64:	e002      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f9      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f72:	e03a      	b.n	8002fea <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a27      	ldr	r2, [pc, #156]	@ (8003018 <HAL_ADC_ConfigChannel+0x7f0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d113      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10d      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800300c <HAL_ADC_ConfigChannel+0x7e4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d12a      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4819      	ldr	r0, [pc, #100]	@ (8003004 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fa0:	f7fe feaf 	bl	8001d02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fa4:	e021      	b.n	8002fea <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1c      	ldr	r2, [pc, #112]	@ (800301c <HAL_ADC_ConfigChannel+0x7f4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d11c      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d116      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a12      	ldr	r2, [pc, #72]	@ (800300c <HAL_ADC_ConfigChannel+0x7e4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d111      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fce:	4619      	mov	r1, r3
 8002fd0:	480c      	ldr	r0, [pc, #48]	@ (8003004 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fd2:	f7fe fe96 	bl	8001d02 <LL_ADC_SetCommonPathInternalCh>
 8002fd6:	e008      	b.n	8002fea <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ff2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	37d8      	adds	r7, #216	@ 0xd8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	80080000 	.word	0x80080000
 8003004:	50040300 	.word	0x50040300
 8003008:	c7520000 	.word	0xc7520000
 800300c:	50040000 	.word	0x50040000
 8003010:	20000000 	.word	0x20000000
 8003014:	053e2d63 	.word	0x053e2d63
 8003018:	cb840000 	.word	0xcb840000
 800301c:	80000001 	.word	0x80000001

08003020 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff f807 	bl	8002044 <LL_ADC_IsEnabled>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d169      	bne.n	8003110 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	4b36      	ldr	r3, [pc, #216]	@ (800311c <ADC_Enable+0xfc>)
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e055      	b.n	8003112 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe ffc2 	bl	8001ff4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003070:	482b      	ldr	r0, [pc, #172]	@ (8003120 <ADC_Enable+0x100>)
 8003072:	f7fe fe59 	bl	8001d28 <LL_ADC_GetCommonPathInternalCh>
 8003076:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003078:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003080:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <ADC_Enable+0x104>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	4a28      	ldr	r2, [pc, #160]	@ (8003128 <ADC_Enable+0x108>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800309a:	e002      	b.n	80030a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f9      	bne.n	800309c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030a8:	f7fe fde8 	bl	8001c7c <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ae:	e028      	b.n	8003102 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe ffc5 	bl	8002044 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe ff95 	bl	8001ff4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ca:	f7fe fdd7 	bl	8001c7c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d914      	bls.n	8003102 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d00d      	beq.n	8003102 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	f043 0210 	orr.w	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e007      	b.n	8003112 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d1cf      	bne.n	80030b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	8000003f 	.word	0x8000003f
 8003120:	50040300 	.word	0x50040300
 8003124:	20000000 	.word	0x20000000
 8003128:	053e2d63 	.word	0x053e2d63

0800312c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe ff96 	bl	800206a <LL_ADC_IsDisableOngoing>
 800313e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe ff7d 	bl	8002044 <LL_ADC_IsEnabled>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d047      	beq.n	80031e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d144      	bne.n	80031e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030d 	and.w	r3, r3, #13
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10c      	bne.n	800317e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe ff57 	bl	800201c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2203      	movs	r2, #3
 8003174:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003176:	f7fe fd81 	bl	8001c7c <HAL_GetTick>
 800317a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800317c:	e029      	b.n	80031d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	f043 0210 	orr.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e023      	b.n	80031e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800319a:	f7fe fd6f 	bl	8001c7c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d914      	bls.n	80031d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ba:	f043 0210 	orr.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e007      	b.n	80031e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1dc      	bne.n	800319a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003200:	2b00      	cmp	r3, #0
 8003202:	d14b      	bne.n	800329c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d021      	beq.n	8003262 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fdf6 	bl	8001e14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d032      	beq.n	8003294 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d12b      	bne.n	8003294 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d11f      	bne.n	8003294 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003260:	e018      	b.n	8003294 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d111      	bne.n	8003294 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d105      	bne.n	8003294 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328c:	f043 0201 	orr.w	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7fd ff77 	bl	8001188 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800329a:	e00e      	b.n	80032ba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7ff fab3 	bl	8002814 <HAL_ADC_ErrorCallback>
}
 80032ae:	e004      	b.n	80032ba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7fe f82d 	bl	8001330 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fc:	f043 0204 	orr.w	r2, r3, #4
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7ff fa85 	bl	8002814 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <LL_ADC_StartCalibration>:
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003324:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800332e:	4313      	orrs	r3, r2
 8003330:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <LL_ADC_IsCalibrationOnGoing>:
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003358:	d101      	bne.n	800335e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_ADCEx_Calibration_Start+0x1c>
 8003384:	2302      	movs	r3, #2
 8003386:	e04d      	b.n	8003424 <HAL_ADCEx_Calibration_Start+0xb8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff fecb 	bl	800312c <ADC_Disable>
 8003396:	4603      	mov	r3, r0
 8003398:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d136      	bne.n	800340e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033a8:	f023 0302 	bic.w	r3, r3, #2
 80033ac:	f043 0202 	orr.w	r2, r3, #2
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6839      	ldr	r1, [r7, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ffa9 	bl	8003312 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033c0:	e014      	b.n	80033ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	3301      	adds	r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80033ce:	d30d      	bcc.n	80033ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d4:	f023 0312 	bic.w	r3, r3, #18
 80033d8:	f043 0210 	orr.w	r2, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e01b      	b.n	8003424 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ffa7 	bl	8003344 <LL_ADC_IsCalibrationOnGoing>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e2      	bne.n	80033c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003400:	f023 0303 	bic.w	r3, r3, #3
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	659a      	str	r2, [r3, #88]	@ 0x58
 800340c:	e005      	b.n	800341a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003412:	f043 0210 	orr.w	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003422:	7bfb      	ldrb	r3, [r7, #15]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a0:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034ac:	4013      	ands	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c2:	4a04      	ldr	r2, [pc, #16]	@ (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	60d3      	str	r3, [r2, #12]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034dc:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <__NVIC_GetPriorityGrouping+0x18>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	f003 0307 	and.w	r3, r3, #7
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	2b00      	cmp	r3, #0
 8003504:	db0b      	blt.n	800351e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	4907      	ldr	r1, [pc, #28]	@ (800352c <__NVIC_EnableIRQ+0x38>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2001      	movs	r0, #1
 8003516:	fa00 f202 	lsl.w	r2, r0, r2
 800351a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0a      	blt.n	800355a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	490c      	ldr	r1, [pc, #48]	@ (800357c <__NVIC_SetPriority+0x4c>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003558:	e00a      	b.n	8003570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4908      	ldr	r1, [pc, #32]	@ (8003580 <__NVIC_SetPriority+0x50>)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	3b04      	subs	r3, #4
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	440b      	add	r3, r1
 800356e:	761a      	strb	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	@ 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f1c3 0307 	rsb	r3, r3, #7
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf28      	it	cs
 80035a2:	2304      	movcs	r3, #4
 80035a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d902      	bls.n	80035b4 <NVIC_EncodePriority+0x30>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3b03      	subs	r3, #3
 80035b2:	e000      	b.n	80035b6 <NVIC_EncodePriority+0x32>
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	401a      	ands	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43d9      	mvns	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	4313      	orrs	r3, r2
         );
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	@ 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035fc:	d301      	bcc.n	8003602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fe:	2301      	movs	r3, #1
 8003600:	e00f      	b.n	8003622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003602:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <SysTick_Config+0x40>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360a:	210f      	movs	r1, #15
 800360c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003610:	f7ff ff8e 	bl	8003530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003614:	4b05      	ldr	r3, [pc, #20]	@ (800362c <SysTick_Config+0x40>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361a:	4b04      	ldr	r3, [pc, #16]	@ (800362c <SysTick_Config+0x40>)
 800361c:	2207      	movs	r2, #7
 800361e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	e000e010 	.word	0xe000e010

08003630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff ff29 	bl	8003490 <__NVIC_SetPriorityGrouping>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003658:	f7ff ff3e 	bl	80034d8 <__NVIC_GetPriorityGrouping>
 800365c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff8e 	bl	8003584 <NVIC_EncodePriority>
 8003668:	4602      	mov	r2, r0
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff5d 	bl	8003530 <__NVIC_SetPriority>
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff31 	bl	80034f4 <__NVIC_EnableIRQ>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffa2 	bl	80035ec <SysTick_Config>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e08d      	b.n	80037e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	4b47      	ldr	r3, [pc, #284]	@ (80037ec <HAL_DMA_Init+0x138>)
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d80f      	bhi.n	80036f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	4b45      	ldr	r3, [pc, #276]	@ (80037f0 <HAL_DMA_Init+0x13c>)
 80036da:	4413      	add	r3, r2
 80036dc:	4a45      	ldr	r2, [pc, #276]	@ (80037f4 <HAL_DMA_Init+0x140>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	009a      	lsls	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a42      	ldr	r2, [pc, #264]	@ (80037f8 <HAL_DMA_Init+0x144>)
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80036f0:	e00e      	b.n	8003710 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b40      	ldr	r3, [pc, #256]	@ (80037fc <HAL_DMA_Init+0x148>)
 80036fa:	4413      	add	r3, r2
 80036fc:	4a3d      	ldr	r2, [pc, #244]	@ (80037f4 <HAL_DMA_Init+0x140>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	009a      	lsls	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a3c      	ldr	r2, [pc, #240]	@ (8003800 <HAL_DMA_Init+0x14c>)
 800370e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800372a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 faba 	bl	8003cdc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003770:	d102      	bne.n	8003778 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800378c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d010      	beq.n	80037b8 <HAL_DMA_Init+0x104>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b04      	cmp	r3, #4
 800379c:	d80c      	bhi.n	80037b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fada 	bl	8003d58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	e008      	b.n	80037ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40020407 	.word	0x40020407
 80037f0:	bffdfff8 	.word	0xbffdfff8
 80037f4:	cccccccd 	.word	0xcccccccd
 80037f8:	40020000 	.word	0x40020000
 80037fc:	bffdfbf8 	.word	0xbffdfbf8
 8003800:	40020400 	.word	0x40020400

08003804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_DMA_Start_IT+0x20>
 8003820:	2302      	movs	r3, #2
 8003822:	e066      	b.n	80038f2 <HAL_DMA_Start_IT+0xee>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d155      	bne.n	80038e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0201 	bic.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f9ff 	bl	8003c60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 020e 	orr.w	r2, r2, #14
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e00f      	b.n	800389c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0204 	bic.w	r2, r2, #4
 800388a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 020a 	orr.w	r2, r2, #10
 800389a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038d0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e005      	b.n	80038f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
 80038ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d008      	beq.n	8003924 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2204      	movs	r2, #4
 8003916:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e040      	b.n	80039a6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 020e 	bic.w	r2, r2, #14
 8003932:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800393e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003942:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003958:	f003 021c 	and.w	r2, r3, #28
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	2101      	movs	r1, #1
 8003962:	fa01 f202 	lsl.w	r2, r1, r2
 8003966:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003970:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00c      	beq.n	8003994 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003984:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003988:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003992:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d005      	beq.n	80039d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2204      	movs	r2, #4
 80039ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	e047      	b.n	8003a66 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 020e 	bic.w	r2, r2, #14
 80039e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f003 021c 	and.w	r2, r3, #28
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	2101      	movs	r1, #1
 8003a14:	fa01 f202 	lsl.w	r2, r1, r2
 8003a18:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a22:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00c      	beq.n	8003a46 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a44:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
    }
  }
  return status;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8c:	f003 031c 	and.w	r3, r3, #28
 8003a90:	2204      	movs	r2, #4
 8003a92:	409a      	lsls	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d026      	beq.n	8003aea <HAL_DMA_IRQHandler+0x7a>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d021      	beq.n	8003aea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0204 	bic.w	r2, r2, #4
 8003ac2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac8:	f003 021c 	and.w	r2, r3, #28
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	2104      	movs	r1, #4
 8003ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d071      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ae8:	e06c      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	f003 031c 	and.w	r3, r3, #28
 8003af2:	2202      	movs	r2, #2
 8003af4:	409a      	lsls	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d02e      	beq.n	8003b5c <HAL_DMA_IRQHandler+0xec>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d029      	beq.n	8003b5c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 020a 	bic.w	r2, r2, #10
 8003b24:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	f003 021c 	and.w	r2, r3, #28
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b40:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d038      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b5a:	e033      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b60:	f003 031c 	and.w	r3, r3, #28
 8003b64:	2208      	movs	r2, #8
 8003b66:	409a      	lsls	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d02a      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x156>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d025      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 020e 	bic.w	r2, r2, #14
 8003b88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	f003 021c 	and.w	r2, r3, #28
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	2101      	movs	r1, #1
 8003b98:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d004      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
}
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_DMA_RegisterCallback+0x20>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e031      	b.n	8003c54 <HAL_DMA_RegisterCallback+0x84>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d120      	bne.n	8003c46 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003c04:	7afb      	ldrb	r3, [r7, #11]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d81a      	bhi.n	8003c40 <HAL_DMA_RegisterCallback+0x70>
 8003c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c10 <HAL_DMA_RegisterCallback+0x40>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c29 	.word	0x08003c29
 8003c18:	08003c31 	.word	0x08003c31
 8003c1c:	08003c39 	.word	0x08003c39
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003c26:	e010      	b.n	8003c4a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8003c2e:	e00c      	b.n	8003c4a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003c36:	e008      	b.n	8003c4a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003c3e:	e004      	b.n	8003c4a <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
        break;
 8003c44:	e001      	b.n	8003c4a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c76:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d004      	beq.n	8003c8a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c88:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8e:	f003 021c 	and.w	r2, r3, #28
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	2101      	movs	r1, #1
 8003c98:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d108      	bne.n	8003cc0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cbe:	e007      	b.n	8003cd0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	60da      	str	r2, [r3, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b17      	ldr	r3, [pc, #92]	@ (8003d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d80a      	bhi.n	8003d06 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf4:	089b      	lsrs	r3, r3, #2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cfc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6493      	str	r3, [r2, #72]	@ 0x48
 8003d04:	e007      	b.n	8003d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	089b      	lsrs	r3, r3, #2
 8003d0c:	009a      	lsls	r2, r3, #2
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d10:	4413      	add	r3, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	3b08      	subs	r3, #8
 8003d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2201      	movs	r2, #1
 8003d36:	409a      	lsls	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40020407 	.word	0x40020407
 8003d4c:	4002081c 	.word	0x4002081c
 8003d50:	cccccccd 	.word	0xcccccccd
 8003d54:	40020880 	.word	0x40020880

08003d58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	461a      	mov	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a08      	ldr	r2, [pc, #32]	@ (8003d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d7a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2201      	movs	r2, #1
 8003d86:	409a      	lsls	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	1000823f 	.word	0x1000823f
 8003d9c:	40020940 	.word	0x40020940

08003da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dae:	e166      	b.n	800407e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	2101      	movs	r1, #1
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8158 	beq.w	8004078 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d005      	beq.n	8003de0 <HAL_GPIO_Init+0x40>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d130      	bne.n	8003e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2203      	movs	r2, #3
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e16:	2201      	movs	r2, #1
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	f003 0201 	and.w	r2, r3, #1
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d017      	beq.n	8003e7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	2203      	movs	r2, #3
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d123      	bne.n	8003ed2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	08da      	lsrs	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3208      	adds	r2, #8
 8003e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	220f      	movs	r2, #15
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	08da      	lsrs	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3208      	adds	r2, #8
 8003ecc:	6939      	ldr	r1, [r7, #16]
 8003ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2203      	movs	r2, #3
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 0203 	and.w	r2, r3, #3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80b2 	beq.w	8004078 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f14:	4b61      	ldr	r3, [pc, #388]	@ (800409c <HAL_GPIO_Init+0x2fc>)
 8003f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f18:	4a60      	ldr	r2, [pc, #384]	@ (800409c <HAL_GPIO_Init+0x2fc>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f20:	4b5e      	ldr	r3, [pc, #376]	@ (800409c <HAL_GPIO_Init+0x2fc>)
 8003f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f2c:	4a5c      	ldr	r2, [pc, #368]	@ (80040a0 <HAL_GPIO_Init+0x300>)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	089b      	lsrs	r3, r3, #2
 8003f32:	3302      	adds	r3, #2
 8003f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	220f      	movs	r2, #15
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f56:	d02b      	beq.n	8003fb0 <HAL_GPIO_Init+0x210>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a52      	ldr	r2, [pc, #328]	@ (80040a4 <HAL_GPIO_Init+0x304>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d025      	beq.n	8003fac <HAL_GPIO_Init+0x20c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a51      	ldr	r2, [pc, #324]	@ (80040a8 <HAL_GPIO_Init+0x308>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d01f      	beq.n	8003fa8 <HAL_GPIO_Init+0x208>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a50      	ldr	r2, [pc, #320]	@ (80040ac <HAL_GPIO_Init+0x30c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d019      	beq.n	8003fa4 <HAL_GPIO_Init+0x204>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a4f      	ldr	r2, [pc, #316]	@ (80040b0 <HAL_GPIO_Init+0x310>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d013      	beq.n	8003fa0 <HAL_GPIO_Init+0x200>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80040b4 <HAL_GPIO_Init+0x314>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00d      	beq.n	8003f9c <HAL_GPIO_Init+0x1fc>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a4d      	ldr	r2, [pc, #308]	@ (80040b8 <HAL_GPIO_Init+0x318>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <HAL_GPIO_Init+0x1f8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a4c      	ldr	r2, [pc, #304]	@ (80040bc <HAL_GPIO_Init+0x31c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d101      	bne.n	8003f94 <HAL_GPIO_Init+0x1f4>
 8003f90:	2307      	movs	r3, #7
 8003f92:	e00e      	b.n	8003fb2 <HAL_GPIO_Init+0x212>
 8003f94:	2308      	movs	r3, #8
 8003f96:	e00c      	b.n	8003fb2 <HAL_GPIO_Init+0x212>
 8003f98:	2306      	movs	r3, #6
 8003f9a:	e00a      	b.n	8003fb2 <HAL_GPIO_Init+0x212>
 8003f9c:	2305      	movs	r3, #5
 8003f9e:	e008      	b.n	8003fb2 <HAL_GPIO_Init+0x212>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	e006      	b.n	8003fb2 <HAL_GPIO_Init+0x212>
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e004      	b.n	8003fb2 <HAL_GPIO_Init+0x212>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e002      	b.n	8003fb2 <HAL_GPIO_Init+0x212>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <HAL_GPIO_Init+0x212>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	f002 0203 	and.w	r2, r2, #3
 8003fb8:	0092      	lsls	r2, r2, #2
 8003fba:	4093      	lsls	r3, r2
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fc2:	4937      	ldr	r1, [pc, #220]	@ (80040a0 <HAL_GPIO_Init+0x300>)
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	089b      	lsrs	r3, r3, #2
 8003fc8:	3302      	adds	r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80040c0 <HAL_GPIO_Init+0x320>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ff4:	4a32      	ldr	r2, [pc, #200]	@ (80040c0 <HAL_GPIO_Init+0x320>)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ffa:	4b31      	ldr	r3, [pc, #196]	@ (80040c0 <HAL_GPIO_Init+0x320>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800401e:	4a28      	ldr	r2, [pc, #160]	@ (80040c0 <HAL_GPIO_Init+0x320>)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004024:	4b26      	ldr	r3, [pc, #152]	@ (80040c0 <HAL_GPIO_Init+0x320>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	43db      	mvns	r3, r3
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004048:	4a1d      	ldr	r2, [pc, #116]	@ (80040c0 <HAL_GPIO_Init+0x320>)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800404e:	4b1c      	ldr	r3, [pc, #112]	@ (80040c0 <HAL_GPIO_Init+0x320>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004072:	4a13      	ldr	r2, [pc, #76]	@ (80040c0 <HAL_GPIO_Init+0x320>)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	3301      	adds	r3, #1
 800407c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	f47f ae91 	bne.w	8003db0 <HAL_GPIO_Init+0x10>
  }
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40021000 	.word	0x40021000
 80040a0:	40010000 	.word	0x40010000
 80040a4:	48000400 	.word	0x48000400
 80040a8:	48000800 	.word	0x48000800
 80040ac:	48000c00 	.word	0x48000c00
 80040b0:	48001000 	.word	0x48001000
 80040b4:	48001400 	.word	0x48001400
 80040b8:	48001800 	.word	0x48001800
 80040bc:	48001c00 	.word	0x48001c00
 80040c0:	40010400 	.word	0x40010400

080040c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	887b      	ldrh	r3, [r7, #2]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
 80040e0:	e001      	b.n	80040e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
 8004100:	4613      	mov	r3, r2
 8004102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004104:	787b      	ldrb	r3, [r7, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004110:	e002      	b.n	8004118 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	041a      	lsls	r2, r3, #16
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	43d9      	mvns	r1, r3
 8004142:	887b      	ldrh	r3, [r7, #2]
 8004144:	400b      	ands	r3, r1
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	619a      	str	r2, [r3, #24]
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004162:	4b08      	ldr	r3, [pc, #32]	@ (8004184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800416e:	4a05      	ldr	r2, [pc, #20]	@ (8004184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fc fbe8 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40010400 	.word	0x40010400

08004188 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800418a:	b08f      	sub	sp, #60	@ 0x3c
 800418c:	af0a      	add	r7, sp, #40	@ 0x28
 800418e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e116      	b.n	80043c8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f009 f8ff 	bl	800d3b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2203      	movs	r2, #3
 80041be:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f005 fd56 	bl	8009c8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	687e      	ldr	r6, [r7, #4]
 80041e6:	466d      	mov	r5, sp
 80041e8:	f106 0410 	add.w	r4, r6, #16
 80041ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80041fc:	1d33      	adds	r3, r6, #4
 80041fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004200:	6838      	ldr	r0, [r7, #0]
 8004202:	f005 fc69 	bl	8009ad8 <USB_CoreInit>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0d7      	b.n	80043c8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f005 fd44 	bl	8009cac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	e04a      	b.n	80042c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800422a:	7bfa      	ldrb	r2, [r7, #15]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	333d      	adds	r3, #61	@ 0x3d
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800423e:	7bfa      	ldrb	r2, [r7, #15]
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	333c      	adds	r3, #60	@ 0x3c
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	b298      	uxth	r0, r3
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	3356      	adds	r3, #86	@ 0x56
 8004266:	4602      	mov	r2, r0
 8004268:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800426a:	7bfa      	ldrb	r2, [r7, #15]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	3340      	adds	r3, #64	@ 0x40
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800427e:	7bfa      	ldrb	r2, [r7, #15]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3344      	adds	r3, #68	@ 0x44
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	3348      	adds	r3, #72	@ 0x48
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	334c      	adds	r3, #76	@ 0x4c
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	3301      	adds	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d3af      	bcc.n	800422a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	e044      	b.n	800435a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042d0:	7bfa      	ldrb	r2, [r7, #15]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042e6:	7bfa      	ldrb	r2, [r7, #15]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004312:	7bfa      	ldrb	r2, [r7, #15]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004328:	7bfa      	ldrb	r2, [r7, #15]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	3301      	adds	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
 800435a:	7bfa      	ldrb	r2, [r7, #15]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	429a      	cmp	r2, r3
 8004362:	d3b5      	bcc.n	80042d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	687e      	ldr	r6, [r7, #4]
 800436c:	466d      	mov	r5, sp
 800436e:	f106 0410 	add.w	r4, r6, #16
 8004372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800437a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800437e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004382:	1d33      	adds	r3, r6, #4
 8004384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004386:	6838      	ldr	r0, [r7, #0]
 8004388:	f005 fcdc 	bl	8009d44 <USB_DevInit>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e014      	b.n	80043c8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d102      	bne.n	80043bc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f001 f86a 	bl	8005490 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f006 fc8a 	bl	800acda <USB_DevDisconnect>

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_PCD_Start+0x1c>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e01c      	b.n	8004426 <HAL_PCD_Start+0x56>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004400:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f005 fc2b 	bl	8009c68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f006 fc3e 	bl	800ac98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800442e:	b590      	push	{r4, r7, lr}
 8004430:	b08d      	sub	sp, #52	@ 0x34
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f006 fcfc 	bl	800ae42 <USB_GetMode>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	f040 847e 	bne.w	8004d4e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f006 fc60 	bl	800ad1c <USB_ReadInterrupts>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8474 	beq.w	8004d4c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	0a1b      	lsrs	r3, r3, #8
 800446e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f006 fc4d 	bl	800ad1c <USB_ReadInterrupts>
 8004482:	4603      	mov	r3, r0
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b02      	cmp	r3, #2
 800448a:	d107      	bne.n	800449c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f002 0202 	and.w	r2, r2, #2
 800449a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f006 fc3b 	bl	800ad1c <USB_ReadInterrupts>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d161      	bne.n	8004574 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0210 	bic.w	r2, r2, #16
 80044be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f003 020f 	and.w	r2, r3, #15
 80044cc:	4613      	mov	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	4413      	add	r3, r2
 80044dc:	3304      	adds	r3, #4
 80044de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	0c5b      	lsrs	r3, r3, #17
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d124      	bne.n	8004536 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d035      	beq.n	8004564 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004506:	b29b      	uxth	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	6a38      	ldr	r0, [r7, #32]
 800450c:	f006 fa72 	bl	800a9f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800451c:	441a      	add	r2, r3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800452e:	441a      	add	r2, r3
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	615a      	str	r2, [r3, #20]
 8004534:	e016      	b.n	8004564 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	0c5b      	lsrs	r3, r3, #17
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	2b06      	cmp	r3, #6
 8004540:	d110      	bne.n	8004564 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004548:	2208      	movs	r2, #8
 800454a:	4619      	mov	r1, r3
 800454c:	6a38      	ldr	r0, [r7, #32]
 800454e:	f006 fa51 	bl	800a9f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800455e:	441a      	add	r2, r3
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0210 	orr.w	r2, r2, #16
 8004572:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f006 fbcf 	bl	800ad1c <USB_ReadInterrupts>
 800457e:	4603      	mov	r3, r0
 8004580:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004584:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004588:	f040 80a7 	bne.w	80046da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f006 fbd4 	bl	800ad42 <USB_ReadDevAllOutEpInterrupt>
 800459a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800459c:	e099      	b.n	80046d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800459e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 808e 	beq.w	80046c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	4611      	mov	r1, r2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f006 fbf8 	bl	800adaa <USB_ReadDevOutEPInterrupt>
 80045ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d2:	461a      	mov	r2, r3
 80045d4:	2301      	movs	r3, #1
 80045d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fe7e 	bl	80052dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00c      	beq.n	8004604 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f6:	461a      	mov	r2, r3
 80045f8:	2308      	movs	r3, #8
 80045fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 feba 	bl	8005378 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461a:	461a      	mov	r2, r3
 800461c:	2310      	movs	r3, #16
 800461e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d030      	beq.n	800468c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b80      	cmp	r3, #128	@ 0x80
 8004634:	d109      	bne.n	800464a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004644:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004648:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800464a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	3304      	adds	r3, #4
 800465e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	78db      	ldrb	r3, [r3, #3]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d108      	bne.n	800467a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2200      	movs	r2, #0
 800466c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	b2db      	uxtb	r3, r3
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f008 fff5 	bl	800d664 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004686:	461a      	mov	r2, r3
 8004688:	2302      	movs	r3, #2
 800468a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	2320      	movs	r3, #32
 80046a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046be:	461a      	mov	r2, r3
 80046c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	3301      	adds	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80046d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f47f af62 	bne.w	800459e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f006 fb1c 	bl	800ad1c <USB_ReadInterrupts>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046ee:	f040 80a4 	bne.w	800483a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f006 fb3d 	bl	800ad76 <USB_ReadDevAllInEpInterrupt>
 80046fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004702:	e096      	b.n	8004832 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 808b 	beq.w	8004826 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f006 fb63 	bl	800ade6 <USB_ReadDevInEPInterrupt>
 8004720:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d020      	beq.n	800476e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	2201      	movs	r2, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	43db      	mvns	r3, r3
 8004746:	69f9      	ldr	r1, [r7, #28]
 8004748:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800474c:	4013      	ands	r3, r2
 800474e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800475c:	461a      	mov	r2, r3
 800475e:	2301      	movs	r3, #1
 8004760:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	b2db      	uxtb	r3, r3
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f008 fee6 	bl	800d53a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	2308      	movs	r3, #8
 8004788:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a0:	461a      	mov	r2, r3
 80047a2:	2310      	movs	r3, #16
 80047a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047bc:	461a      	mov	r2, r3
 80047be:	2340      	movs	r3, #64	@ 0x40
 80047c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d023      	beq.n	8004814 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80047cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047ce:	6a38      	ldr	r0, [r7, #32]
 80047d0:	f005 fbfa 	bl	8009fc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80047d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	3338      	adds	r3, #56	@ 0x38
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4413      	add	r3, r2
 80047e4:	3304      	adds	r3, #4
 80047e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	78db      	ldrb	r3, [r3, #3]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d108      	bne.n	8004802 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2200      	movs	r2, #0
 80047f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f008 ff43 	bl	800d688 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800480e:	461a      	mov	r2, r3
 8004810:	2302      	movs	r3, #2
 8004812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800481e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fcd2 	bl	80051ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	3301      	adds	r3, #1
 800482a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	2b00      	cmp	r3, #0
 8004836:	f47f af65 	bne.w	8004704 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f006 fa6c 	bl	800ad1c <USB_ReadInterrupts>
 8004844:	4603      	mov	r3, r0
 8004846:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800484a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800484e:	d122      	bne.n	8004896 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800486a:	2b01      	cmp	r3, #1
 800486c:	d108      	bne.n	8004880 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004876:	2100      	movs	r1, #0
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f009 f977 	bl	800db6c <HAL_PCDEx_LPM_Callback>
 800487e:	e002      	b.n	8004886 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f008 fec7 	bl	800d614 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f006 fa3e 	bl	800ad1c <USB_ReadInterrupts>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048aa:	d112      	bne.n	80048d2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d102      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f008 fe83 	bl	800d5c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80048d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f006 fa20 	bl	800ad1c <USB_ReadInterrupts>
 80048dc:	4603      	mov	r3, r0
 80048de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048e6:	d121      	bne.n	800492c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80048f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d111      	bne.n	8004926 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004910:	089b      	lsrs	r3, r3, #2
 8004912:	f003 020f 	and.w	r2, r3, #15
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800491c:	2101      	movs	r1, #1
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f009 f924 	bl	800db6c <HAL_PCDEx_LPM_Callback>
 8004924:	e002      	b.n	800492c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f008 fe4e 	bl	800d5c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f006 f9f3 	bl	800ad1c <USB_ReadInterrupts>
 8004936:	4603      	mov	r3, r0
 8004938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004940:	f040 80b5 	bne.w	8004aae <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2110      	movs	r1, #16
 800495e:	4618      	mov	r0, r3
 8004960:	f005 fb32 	bl	8009fc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004964:	2300      	movs	r3, #0
 8004966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004968:	e046      	b.n	80049f8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800496a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004976:	461a      	mov	r2, r3
 8004978:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800497c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800497e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800498e:	0151      	lsls	r1, r2, #5
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	440a      	add	r2, r1
 8004994:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004998:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800499c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800499e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049aa:	461a      	mov	r2, r3
 80049ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c2:	0151      	lsls	r1, r2, #5
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	440a      	add	r2, r1
 80049c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80049f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f4:	3301      	adds	r3, #1
 80049f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d3b3      	bcc.n	800496a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a10:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004a14:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d016      	beq.n	8004a4c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a2e:	f043 030b 	orr.w	r3, r3, #11
 8004a32:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a44:	f043 030b 	orr.w	r3, r3, #11
 8004a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a4a:	e015      	b.n	8004a78 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a5e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004a62:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a72:	f043 030b 	orr.w	r3, r3, #11
 8004a76:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a86:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a8a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004a96:	4619      	mov	r1, r3
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f006 fa03 	bl	800aea4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f006 f932 	bl	800ad1c <USB_ReadInterrupts>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac2:	d124      	bne.n	8004b0e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f006 f9c8 	bl	800ae5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f005 faf5 	bl	800a0c2 <USB_GetDevSpeed>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	461a      	mov	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681c      	ldr	r4, [r3, #0]
 8004ae4:	f001 fbbc 	bl	8006260 <HAL_RCC_GetHCLKFreq>
 8004ae8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	4620      	mov	r0, r4
 8004af4:	f005 f81c 	bl	8009b30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f008 fd46 	bl	800d58a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f006 f902 	bl	800ad1c <USB_ReadInterrupts>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d10a      	bne.n	8004b38 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f008 fd23 	bl	800d56e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695a      	ldr	r2, [r3, #20]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f002 0208 	and.w	r2, r2, #8
 8004b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f006 f8ed 	bl	800ad1c <USB_ReadInterrupts>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b48:	2b80      	cmp	r3, #128	@ 0x80
 8004b4a:	d122      	bne.n	8004b92 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b58:	2301      	movs	r3, #1
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b5c:	e014      	b.n	8004b88 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d105      	bne.n	8004b82 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 faf3 	bl	8005168 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	3301      	adds	r3, #1
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d3e5      	bcc.n	8004b5e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f006 f8c0 	bl	800ad1c <USB_ReadInterrupts>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ba6:	d13b      	bne.n	8004c20 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ba8:	2301      	movs	r3, #1
 8004baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bac:	e02b      	b.n	8004c06 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	3340      	adds	r3, #64	@ 0x40
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d115      	bne.n	8004c00 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004bd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	da12      	bge.n	8004c00 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bde:	4613      	mov	r3, r2
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	333f      	adds	r3, #63	@ 0x3f
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fab4 	bl	8005168 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	3301      	adds	r3, #1
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d3ce      	bcc.n	8004bae <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f006 f879 	bl	800ad1c <USB_ReadInterrupts>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c34:	d155      	bne.n	8004ce2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c36:	2301      	movs	r3, #1
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c3a:	e045      	b.n	8004cc8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c50:	4613      	mov	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d12e      	bne.n	8004cc2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da2b      	bge.n	8004cc2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004c76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d121      	bne.n	8004cc2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c82:	4613      	mov	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cbe:	6053      	str	r3, [r2, #4]
            break;
 8004cc0:	e007      	b.n	8004cd2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d3b4      	bcc.n	8004c3c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695a      	ldr	r2, [r3, #20]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f006 f818 	bl	800ad1c <USB_ReadInterrupts>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf6:	d10a      	bne.n	8004d0e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f008 fcd7 	bl	800d6ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f006 f802 	bl	800ad1c <USB_ReadInterrupts>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d115      	bne.n	8004d4e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f008 fcc7 	bl	800d6c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	e000      	b.n	8004d4e <HAL_PCD_IRQHandler+0x920>
      return;
 8004d4c:	bf00      	nop
    }
  }
}
 8004d4e:	3734      	adds	r7, #52	@ 0x34
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd90      	pop	{r4, r7, pc}

08004d54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_PCD_SetAddress+0x1a>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e013      	b.n	8004d96 <HAL_PCD_SetAddress+0x42>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f005 ff60 	bl	800ac4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	4608      	mov	r0, r1
 8004da8:	4611      	mov	r1, r2
 8004daa:	461a      	mov	r2, r3
 8004dac:	4603      	mov	r3, r0
 8004dae:	70fb      	strb	r3, [r7, #3]
 8004db0:	460b      	mov	r3, r1
 8004db2:	803b      	strh	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	da0f      	bge.n	8004de4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	f003 020f 	and.w	r2, r3, #15
 8004dca:	4613      	mov	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	3338      	adds	r3, #56	@ 0x38
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3304      	adds	r3, #4
 8004dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	705a      	strb	r2, [r3, #1]
 8004de2:	e00f      	b.n	8004e04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	f003 020f 	and.w	r2, r3, #15
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e10:	883a      	ldrh	r2, [r7, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	78ba      	ldrb	r2, [r7, #2]
 8004e1a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d004      	beq.n	8004e2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e2e:	78bb      	ldrb	r3, [r7, #2]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d102      	bne.n	8004e3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_PCD_EP_Open+0xaa>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e00e      	b.n	8004e66 <HAL_PCD_EP_Open+0xc8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68f9      	ldr	r1, [r7, #12]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f005 f952 	bl	800a100 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004e64:	7afb      	ldrb	r3, [r7, #11]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da0f      	bge.n	8004ea2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	f003 020f 	and.w	r2, r3, #15
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	3338      	adds	r3, #56	@ 0x38
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	3304      	adds	r3, #4
 8004e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	705a      	strb	r2, [r3, #1]
 8004ea0:	e00f      	b.n	8004ec2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	f003 020f 	and.w	r2, r3, #15
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3304      	adds	r3, #4
 8004eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_PCD_EP_Close+0x6e>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e00e      	b.n	8004efa <HAL_PCD_EP_Close+0x8c>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68f9      	ldr	r1, [r7, #12]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f005 f990 	bl	800a210 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b086      	sub	sp, #24
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f12:	7afb      	ldrb	r3, [r7, #11]
 8004f14:	f003 020f 	and.w	r2, r3, #15
 8004f18:	4613      	mov	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	3304      	adds	r3, #4
 8004f2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2200      	movs	r2, #0
 8004f42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f44:	7afb      	ldrb	r3, [r7, #11]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6979      	ldr	r1, [r7, #20]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f005 fa36 	bl	800a3c8 <USB_EPStartXfer>

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	f003 020f 	and.w	r2, r3, #15
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004f88:	681b      	ldr	r3, [r3, #0]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b086      	sub	sp, #24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa6:	7afb      	ldrb	r3, [r7, #11]
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	3338      	adds	r3, #56	@ 0x38
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4413      	add	r3, r2
 8004fba:	3304      	adds	r3, #4
 8004fbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd6:	7afb      	ldrb	r3, [r7, #11]
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6979      	ldr	r1, [r7, #20]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f005 f9ed 	bl	800a3c8 <USB_EPStartXfer>

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	f003 020f 	and.w	r2, r3, #15
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	429a      	cmp	r2, r3
 8005010:	d901      	bls.n	8005016 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e04e      	b.n	80050b4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800501a:	2b00      	cmp	r3, #0
 800501c:	da0f      	bge.n	800503e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	f003 020f 	and.w	r2, r3, #15
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	3338      	adds	r3, #56	@ 0x38
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	3304      	adds	r3, #4
 8005034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	705a      	strb	r2, [r3, #1]
 800503c:	e00d      	b.n	800505a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800503e:	78fa      	ldrb	r2, [r7, #3]
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4413      	add	r3, r2
 8005050:	3304      	adds	r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_PCD_EP_SetStall+0x82>
 8005076:	2302      	movs	r3, #2
 8005078:	e01c      	b.n	80050b4 <HAL_PCD_EP_SetStall+0xbc>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68f9      	ldr	r1, [r7, #12]
 8005088:	4618      	mov	r0, r3
 800508a:	f005 fd0b 	bl	800aaa4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	2b00      	cmp	r3, #0
 8005096:	d108      	bne.n	80050aa <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f005 fefd 	bl	800aea4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	f003 020f 	and.w	r2, r3, #15
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d901      	bls.n	80050da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e042      	b.n	8005160 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	da0f      	bge.n	8005102 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	f003 020f 	and.w	r2, r3, #15
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	3338      	adds	r3, #56	@ 0x38
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	3304      	adds	r3, #4
 80050f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	705a      	strb	r2, [r3, #1]
 8005100:	e00f      	b.n	8005122 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	f003 020f 	and.w	r2, r3, #15
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4413      	add	r3, r2
 8005118:	3304      	adds	r3, #4
 800511a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	b2da      	uxtb	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_PCD_EP_ClrStall+0x86>
 800513e:	2302      	movs	r3, #2
 8005140:	e00e      	b.n	8005160 <HAL_PCD_EP_ClrStall+0xa4>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68f9      	ldr	r1, [r7, #12]
 8005150:	4618      	mov	r0, r3
 8005152:	f005 fd15 	bl	800ab80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005178:	2b00      	cmp	r3, #0
 800517a:	da0c      	bge.n	8005196 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	f003 020f 	and.w	r2, r3, #15
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	3338      	adds	r3, #56	@ 0x38
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	4413      	add	r3, r2
 8005190:	3304      	adds	r3, #4
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e00c      	b.n	80051b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	f003 020f 	and.w	r2, r3, #15
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	4413      	add	r3, r2
 80051ac:	3304      	adds	r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f005 fb38 	bl	800a82c <USB_EPStopXfer>
 80051bc:	4603      	mov	r3, r0
 80051be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80051c0:	7afb      	ldrb	r3, [r7, #11]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b088      	sub	sp, #32
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	3338      	adds	r3, #56	@ 0x38
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	3304      	adds	r3, #4
 80051f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d901      	bls.n	8005202 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e067      	b.n	80052d2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	429a      	cmp	r2, r3
 8005216:	d902      	bls.n	800521e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	3303      	adds	r3, #3
 8005222:	089b      	lsrs	r3, r3, #2
 8005224:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005226:	e026      	b.n	8005276 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	429a      	cmp	r2, r3
 800523c:	d902      	bls.n	8005244 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3303      	adds	r3, #3
 8005248:	089b      	lsrs	r3, r3, #2
 800524a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	68d9      	ldr	r1, [r3, #12]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	b2da      	uxtb	r2, r3
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	b29b      	uxth	r3, r3
 8005258:	6978      	ldr	r0, [r7, #20]
 800525a:	f005 fb91 	bl	800a980 <USB_WritePacket>

    ep->xfer_buff  += len;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	441a      	add	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	695a      	ldr	r2, [r3, #20]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	441a      	add	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	429a      	cmp	r2, r3
 800528a:	d809      	bhi.n	80052a0 <PCD_WriteEmptyTxFifo+0xd6>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005294:	429a      	cmp	r2, r3
 8005296:	d203      	bcs.n	80052a0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1c3      	bne.n	8005228 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d811      	bhi.n	80052d0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	2201      	movs	r2, #1
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	6939      	ldr	r1, [r7, #16]
 80052c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052cc:	4013      	ands	r3, r2
 80052ce:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	333c      	adds	r3, #60	@ 0x3c
 80052f4:	3304      	adds	r3, #4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a19      	ldr	r2, [pc, #100]	@ (8005374 <PCD_EP_OutXfrComplete_int+0x98>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d124      	bne.n	800535c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005328:	461a      	mov	r2, r3
 800532a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800532e:	6093      	str	r3, [r2, #8]
 8005330:	e01a      	b.n	8005368 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005348:	461a      	mov	r2, r3
 800534a:	2320      	movs	r3, #32
 800534c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	b2db      	uxtb	r3, r3
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f008 f8d5 	bl	800d504 <HAL_PCD_DataOutStageCallback>
 800535a:	e005      	b.n	8005368 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f008 f8ce 	bl	800d504 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	4f54310a 	.word	0x4f54310a

08005378 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	333c      	adds	r3, #60	@ 0x3c
 8005390:	3304      	adds	r3, #4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a0c      	ldr	r2, [pc, #48]	@ (80053dc <PCD_EP_OutSetupPacket_int+0x64>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d90e      	bls.n	80053cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d009      	beq.n	80053cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c4:	461a      	mov	r2, r3
 80053c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f008 f887 	bl	800d4e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	4f54300a 	.word	0x4f54300a

080053e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	70fb      	strb	r3, [r7, #3]
 80053ec:	4613      	mov	r3, r2
 80053ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d107      	bne.n	800540e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80053fe:	883b      	ldrh	r3, [r7, #0]
 8005400:	0419      	lsls	r1, r3, #16
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	430a      	orrs	r2, r1
 800540a:	629a      	str	r2, [r3, #40]	@ 0x28
 800540c:	e028      	b.n	8005460 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4413      	add	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800541c:	2300      	movs	r3, #0
 800541e:	73fb      	strb	r3, [r7, #15]
 8005420:	e00d      	b.n	800543e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	3340      	adds	r3, #64	@ 0x40
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	0c1b      	lsrs	r3, r3, #16
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	4413      	add	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	3301      	adds	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
 800543e:	7bfa      	ldrb	r2, [r7, #15]
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	3b01      	subs	r3, #1
 8005444:	429a      	cmp	r2, r3
 8005446:	d3ec      	bcc.n	8005422 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005448:	883b      	ldrh	r3, [r7, #0]
 800544a:	0418      	lsls	r0, r3, #16
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	3b01      	subs	r3, #1
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	4302      	orrs	r2, r0
 8005458:	3340      	adds	r3, #64	@ 0x40
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	887a      	ldrh	r2, [r7, #2]
 8005480:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c2:	f043 0303 	orr.w	r3, r3, #3
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005514 <HAL_PWREx_GetVoltageRange+0x3c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e8:	d102      	bne.n	80054f0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80054ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054ee:	e00b      	b.n	8005508 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80054f0:	4b08      	ldr	r3, [pc, #32]	@ (8005514 <HAL_PWREx_GetVoltageRange+0x3c>)
 80054f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054fe:	d102      	bne.n	8005506 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005500:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005504:	e000      	b.n	8005508 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005506:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005508:	4618      	mov	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40007000 	.word	0x40007000

08005518 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d141      	bne.n	80055aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005526:	4b4b      	ldr	r3, [pc, #300]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800552e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005532:	d131      	bne.n	8005598 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005534:	4b47      	ldr	r3, [pc, #284]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553a:	4a46      	ldr	r2, [pc, #280]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800553c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005540:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005544:	4b43      	ldr	r3, [pc, #268]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800554c:	4a41      	ldr	r2, [pc, #260]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800554e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005552:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005554:	4b40      	ldr	r3, [pc, #256]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2232      	movs	r2, #50	@ 0x32
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	4a3f      	ldr	r2, [pc, #252]	@ (800565c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005560:	fba2 2303 	umull	r2, r3, r2, r3
 8005564:	0c9b      	lsrs	r3, r3, #18
 8005566:	3301      	adds	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800556a:	e002      	b.n	8005572 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3b01      	subs	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005572:	4b38      	ldr	r3, [pc, #224]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800557e:	d102      	bne.n	8005586 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f2      	bne.n	800556c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005586:	4b33      	ldr	r3, [pc, #204]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800558e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005592:	d158      	bne.n	8005646 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e057      	b.n	8005648 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005598:	4b2e      	ldr	r3, [pc, #184]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800559a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800559e:	4a2d      	ldr	r2, [pc, #180]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80055a8:	e04d      	b.n	8005646 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b0:	d141      	bne.n	8005636 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055b2:	4b28      	ldr	r3, [pc, #160]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80055ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055be:	d131      	bne.n	8005624 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055c0:	4b24      	ldr	r3, [pc, #144]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c6:	4a23      	ldr	r2, [pc, #140]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055d0:	4b20      	ldr	r3, [pc, #128]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80055d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80055e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005658 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2232      	movs	r2, #50	@ 0x32
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	4a1c      	ldr	r2, [pc, #112]	@ (800565c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055ec:	fba2 2303 	umull	r2, r3, r2, r3
 80055f0:	0c9b      	lsrs	r3, r3, #18
 80055f2:	3301      	adds	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055f6:	e002      	b.n	80055fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055fe:	4b15      	ldr	r3, [pc, #84]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800560a:	d102      	bne.n	8005612 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f2      	bne.n	80055f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005612:	4b10      	ldr	r3, [pc, #64]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800561a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800561e:	d112      	bne.n	8005646 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e011      	b.n	8005648 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005624:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800562a:	4a0a      	ldr	r2, [pc, #40]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800562c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005630:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005634:	e007      	b.n	8005646 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005636:	4b07      	ldr	r3, [pc, #28]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800563e:	4a05      	ldr	r2, [pc, #20]	@ (8005654 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005640:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005644:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40007000 	.word	0x40007000
 8005658:	20000000 	.word	0x20000000
 800565c:	431bde83 	.word	0x431bde83

08005660 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005664:	4b05      	ldr	r3, [pc, #20]	@ (800567c <HAL_PWREx_EnableVddUSB+0x1c>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a04      	ldr	r2, [pc, #16]	@ (800567c <HAL_PWREx_EnableVddUSB+0x1c>)
 800566a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800566e:	6053      	str	r3, [r2, #4]
}
 8005670:	bf00      	nop
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40007000 	.word	0x40007000

08005680 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005684:	4b05      	ldr	r3, [pc, #20]	@ (800569c <HAL_PWREx_EnableVddIO2+0x1c>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4a04      	ldr	r2, [pc, #16]	@ (800569c <HAL_PWREx_EnableVddIO2+0x1c>)
 800568a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800568e:	6053      	str	r3, [r2, #4]
}
 8005690:	bf00      	nop
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40007000 	.word	0x40007000

080056a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f000 bc08 	b.w	8005ec4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056b4:	4b96      	ldr	r3, [pc, #600]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 030c 	and.w	r3, r3, #12
 80056bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056be:	4b94      	ldr	r3, [pc, #592]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80e4 	beq.w	800589e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <HAL_RCC_OscConfig+0x4c>
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	2b0c      	cmp	r3, #12
 80056e0:	f040 808b 	bne.w	80057fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	f040 8087 	bne.w	80057fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056ec:	4b88      	ldr	r3, [pc, #544]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_OscConfig+0x64>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e3df      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1a      	ldr	r2, [r3, #32]
 8005708:	4b81      	ldr	r3, [pc, #516]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <HAL_RCC_OscConfig+0x7e>
 8005714:	4b7e      	ldr	r3, [pc, #504]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800571c:	e005      	b.n	800572a <HAL_RCC_OscConfig+0x8a>
 800571e:	4b7c      	ldr	r3, [pc, #496]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005724:	091b      	lsrs	r3, r3, #4
 8005726:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800572a:	4293      	cmp	r3, r2
 800572c:	d223      	bcs.n	8005776 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fdcc 	bl	80062d0 <RCC_SetFlashLatencyFromMSIRange>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e3c0      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005742:	4b73      	ldr	r3, [pc, #460]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a72      	ldr	r2, [pc, #456]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005748:	f043 0308 	orr.w	r3, r3, #8
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	4b70      	ldr	r3, [pc, #448]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	496d      	ldr	r1, [pc, #436]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 800575c:	4313      	orrs	r3, r2
 800575e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005760:	4b6b      	ldr	r3, [pc, #428]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	4968      	ldr	r1, [pc, #416]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005770:	4313      	orrs	r3, r2
 8005772:	604b      	str	r3, [r1, #4]
 8005774:	e025      	b.n	80057c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005776:	4b66      	ldr	r3, [pc, #408]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a65      	ldr	r2, [pc, #404]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 800577c:	f043 0308 	orr.w	r3, r3, #8
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	4b63      	ldr	r3, [pc, #396]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	4960      	ldr	r1, [pc, #384]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005790:	4313      	orrs	r3, r2
 8005792:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005794:	4b5e      	ldr	r3, [pc, #376]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	495b      	ldr	r1, [pc, #364]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fd8c 	bl	80062d0 <RCC_SetFlashLatencyFromMSIRange>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e380      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057c2:	f000 fcc1 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 80057c6:	4602      	mov	r2, r0
 80057c8:	4b51      	ldr	r3, [pc, #324]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	4950      	ldr	r1, [pc, #320]	@ (8005914 <HAL_RCC_OscConfig+0x274>)
 80057d4:	5ccb      	ldrb	r3, [r1, r3]
 80057d6:	f003 031f 	and.w	r3, r3, #31
 80057da:	fa22 f303 	lsr.w	r3, r2, r3
 80057de:	4a4e      	ldr	r2, [pc, #312]	@ (8005918 <HAL_RCC_OscConfig+0x278>)
 80057e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80057e2:	4b4e      	ldr	r3, [pc, #312]	@ (800591c <HAL_RCC_OscConfig+0x27c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fc f9f8 	bl	8001bdc <HAL_InitTick>
 80057ec:	4603      	mov	r3, r0
 80057ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d052      	beq.n	800589c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	e364      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d032      	beq.n	8005868 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005802:	4b43      	ldr	r3, [pc, #268]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a42      	ldr	r2, [pc, #264]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800580e:	f7fc fa35 	bl	8001c7c <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005814:	e008      	b.n	8005828 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005816:	f7fc fa31 	bl	8001c7c <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e34d      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005828:	4b39      	ldr	r3, [pc, #228]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0f0      	beq.n	8005816 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005834:	4b36      	ldr	r3, [pc, #216]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a35      	ldr	r2, [pc, #212]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 800583a:	f043 0308 	orr.w	r3, r3, #8
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	4b33      	ldr	r3, [pc, #204]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	4930      	ldr	r1, [pc, #192]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 800584e:	4313      	orrs	r3, r2
 8005850:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005852:	4b2f      	ldr	r3, [pc, #188]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	492b      	ldr	r1, [pc, #172]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005862:	4313      	orrs	r3, r2
 8005864:	604b      	str	r3, [r1, #4]
 8005866:	e01a      	b.n	800589e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005868:	4b29      	ldr	r3, [pc, #164]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a28      	ldr	r2, [pc, #160]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005874:	f7fc fa02 	bl	8001c7c <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800587c:	f7fc f9fe 	bl	8001c7c <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e31a      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800588e:	4b20      	ldr	r3, [pc, #128]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCC_OscConfig+0x1dc>
 800589a:	e000      	b.n	800589e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800589c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d073      	beq.n	8005992 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_OscConfig+0x21c>
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b0c      	cmp	r3, #12
 80058b4:	d10e      	bne.n	80058d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d10b      	bne.n	80058d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058bc:	4b14      	ldr	r3, [pc, #80]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d063      	beq.n	8005990 <HAL_RCC_OscConfig+0x2f0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d15f      	bne.n	8005990 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e2f7      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058dc:	d106      	bne.n	80058ec <HAL_RCC_OscConfig+0x24c>
 80058de:	4b0c      	ldr	r3, [pc, #48]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	e025      	b.n	8005938 <HAL_RCC_OscConfig+0x298>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058f4:	d114      	bne.n	8005920 <HAL_RCC_OscConfig+0x280>
 80058f6:	4b06      	ldr	r3, [pc, #24]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a05      	ldr	r2, [pc, #20]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 80058fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	4b03      	ldr	r3, [pc, #12]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a02      	ldr	r2, [pc, #8]	@ (8005910 <HAL_RCC_OscConfig+0x270>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e013      	b.n	8005938 <HAL_RCC_OscConfig+0x298>
 8005910:	40021000 	.word	0x40021000
 8005914:	0800dd18 	.word	0x0800dd18
 8005918:	20000000 	.word	0x20000000
 800591c:	20000004 	.word	0x20000004
 8005920:	4ba0      	ldr	r3, [pc, #640]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a9f      	ldr	r2, [pc, #636]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a9c      	ldr	r2, [pc, #624]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d013      	beq.n	8005968 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7fc f99c 	bl	8001c7c <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005948:	f7fc f998 	bl	8001c7c <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b64      	cmp	r3, #100	@ 0x64
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e2b4      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800595a:	4b92      	ldr	r3, [pc, #584]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCC_OscConfig+0x2a8>
 8005966:	e014      	b.n	8005992 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005968:	f7fc f988 	bl	8001c7c <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005970:	f7fc f984 	bl	8001c7c <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b64      	cmp	r3, #100	@ 0x64
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e2a0      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005982:	4b88      	ldr	r3, [pc, #544]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f0      	bne.n	8005970 <HAL_RCC_OscConfig+0x2d0>
 800598e:	e000      	b.n	8005992 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d060      	beq.n	8005a60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d005      	beq.n	80059b0 <HAL_RCC_OscConfig+0x310>
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2b0c      	cmp	r3, #12
 80059a8:	d119      	bne.n	80059de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d116      	bne.n	80059de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059b0:	4b7c      	ldr	r3, [pc, #496]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_RCC_OscConfig+0x328>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e27d      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c8:	4b76      	ldr	r3, [pc, #472]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	061b      	lsls	r3, r3, #24
 80059d6:	4973      	ldr	r1, [pc, #460]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059dc:	e040      	b.n	8005a60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d023      	beq.n	8005a2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059e6:	4b6f      	ldr	r3, [pc, #444]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a6e      	ldr	r2, [pc, #440]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 80059ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f2:	f7fc f943 	bl	8001c7c <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059fa:	f7fc f93f 	bl	8001c7c <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e25b      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a0c:	4b65      	ldr	r3, [pc, #404]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a18:	4b62      	ldr	r3, [pc, #392]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	061b      	lsls	r3, r3, #24
 8005a26:	495f      	ldr	r1, [pc, #380]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	604b      	str	r3, [r1, #4]
 8005a2c:	e018      	b.n	8005a60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a5c      	ldr	r2, [pc, #368]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3a:	f7fc f91f 	bl	8001c7c <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a42:	f7fc f91b 	bl	8001c7c <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e237      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a54:	4b53      	ldr	r3, [pc, #332]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1f0      	bne.n	8005a42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d03c      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01c      	beq.n	8005aae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a74:	4b4b      	ldr	r3, [pc, #300]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a7a:	4a4a      	ldr	r2, [pc, #296]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a84:	f7fc f8fa 	bl	8001c7c <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a8c:	f7fc f8f6 	bl	8001c7c <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e212      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a9e:	4b41      	ldr	r3, [pc, #260]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0ef      	beq.n	8005a8c <HAL_RCC_OscConfig+0x3ec>
 8005aac:	e01b      	b.n	8005ae6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aae:	4b3d      	ldr	r3, [pc, #244]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ab4:	4a3b      	ldr	r2, [pc, #236]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005abe:	f7fc f8dd 	bl	8001c7c <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac6:	f7fc f8d9 	bl	8001c7c <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e1f5      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ad8:	4b32      	ldr	r3, [pc, #200]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1ef      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 80a6 	beq.w	8005c40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005af4:	2300      	movs	r3, #0
 8005af6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005af8:	4b2a      	ldr	r3, [pc, #168]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10d      	bne.n	8005b20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b04:	4b27      	ldr	r3, [pc, #156]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b08:	4a26      	ldr	r2, [pc, #152]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b10:	4b24      	ldr	r3, [pc, #144]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b20:	4b21      	ldr	r3, [pc, #132]	@ (8005ba8 <HAL_RCC_OscConfig+0x508>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d118      	bne.n	8005b5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ba8 <HAL_RCC_OscConfig+0x508>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba8 <HAL_RCC_OscConfig+0x508>)
 8005b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b38:	f7fc f8a0 	bl	8001c7c <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b40:	f7fc f89c 	bl	8001c7c <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e1b8      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b52:	4b15      	ldr	r3, [pc, #84]	@ (8005ba8 <HAL_RCC_OscConfig+0x508>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d108      	bne.n	8005b78 <HAL_RCC_OscConfig+0x4d8>
 8005b66:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005b6e:	f043 0301 	orr.w	r3, r3, #1
 8005b72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b76:	e029      	b.n	8005bcc <HAL_RCC_OscConfig+0x52c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	2b05      	cmp	r3, #5
 8005b7e:	d115      	bne.n	8005bac <HAL_RCC_OscConfig+0x50c>
 8005b80:	4b08      	ldr	r3, [pc, #32]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b86:	4a07      	ldr	r2, [pc, #28]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005b88:	f043 0304 	orr.w	r3, r3, #4
 8005b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b90:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b96:	4a03      	ldr	r2, [pc, #12]	@ (8005ba4 <HAL_RCC_OscConfig+0x504>)
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ba0:	e014      	b.n	8005bcc <HAL_RCC_OscConfig+0x52c>
 8005ba2:	bf00      	nop
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	40007000 	.word	0x40007000
 8005bac:	4b9d      	ldr	r3, [pc, #628]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb2:	4a9c      	ldr	r2, [pc, #624]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005bb4:	f023 0301 	bic.w	r3, r3, #1
 8005bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bbc:	4b99      	ldr	r3, [pc, #612]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc2:	4a98      	ldr	r2, [pc, #608]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005bc4:	f023 0304 	bic.w	r3, r3, #4
 8005bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d016      	beq.n	8005c02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd4:	f7fc f852 	bl	8001c7c <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bda:	e00a      	b.n	8005bf2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bdc:	f7fc f84e 	bl	8001c7c <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e168      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bf2:	4b8c      	ldr	r3, [pc, #560]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0ed      	beq.n	8005bdc <HAL_RCC_OscConfig+0x53c>
 8005c00:	e015      	b.n	8005c2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c02:	f7fc f83b 	bl	8001c7c <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c08:	e00a      	b.n	8005c20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c0a:	f7fc f837 	bl	8001c7c <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e151      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c20:	4b80      	ldr	r3, [pc, #512]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1ed      	bne.n	8005c0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c2e:	7ffb      	ldrb	r3, [r7, #31]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d105      	bne.n	8005c40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c34:	4b7b      	ldr	r3, [pc, #492]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c38:	4a7a      	ldr	r2, [pc, #488]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005c3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d03c      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01c      	beq.n	8005c8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c54:	4b73      	ldr	r3, [pc, #460]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c5a:	4a72      	ldr	r2, [pc, #456]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c64:	f7fc f80a 	bl	8001c7c <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c6c:	f7fc f806 	bl	8001c7c <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e122      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c7e:	4b69      	ldr	r3, [pc, #420]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0ef      	beq.n	8005c6c <HAL_RCC_OscConfig+0x5cc>
 8005c8c:	e01b      	b.n	8005cc6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c8e:	4b65      	ldr	r3, [pc, #404]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c94:	4a63      	ldr	r2, [pc, #396]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9e:	f7fb ffed 	bl	8001c7c <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ca6:	f7fb ffe9 	bl	8001c7c <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e105      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1ef      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 80f9 	beq.w	8005ec2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	f040 80cf 	bne.w	8005e78 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005cda:	4b52      	ldr	r3, [pc, #328]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f003 0203 	and.w	r2, r3, #3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d12c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d123      	bne.n	8005d48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d11b      	bne.n	8005d48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d113      	bne.n	8005d48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d109      	bne.n	8005d48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	3b01      	subs	r3, #1
 8005d42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d071      	beq.n	8005e2c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	2b0c      	cmp	r3, #12
 8005d4c:	d068      	beq.n	8005e20 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d4e:	4b35      	ldr	r3, [pc, #212]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d105      	bne.n	8005d66 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005d5a:	4b32      	ldr	r3, [pc, #200]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e0ac      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005d70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d76:	f7fb ff81 	bl	8001c7c <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d7e:	f7fb ff7d 	bl	8001c7c <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e099      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d90:	4b24      	ldr	r3, [pc, #144]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1f0      	bne.n	8005d7e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d9c:	4b21      	ldr	r3, [pc, #132]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	4b21      	ldr	r3, [pc, #132]	@ (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005dac:	3a01      	subs	r2, #1
 8005dae:	0112      	lsls	r2, r2, #4
 8005db0:	4311      	orrs	r1, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005db6:	0212      	lsls	r2, r2, #8
 8005db8:	4311      	orrs	r1, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005dbe:	0852      	lsrs	r2, r2, #1
 8005dc0:	3a01      	subs	r2, #1
 8005dc2:	0552      	lsls	r2, r2, #21
 8005dc4:	4311      	orrs	r1, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005dca:	0852      	lsrs	r2, r2, #1
 8005dcc:	3a01      	subs	r2, #1
 8005dce:	0652      	lsls	r2, r2, #25
 8005dd0:	4311      	orrs	r1, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005dd6:	06d2      	lsls	r2, r2, #27
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	4912      	ldr	r1, [pc, #72]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005de0:	4b10      	ldr	r3, [pc, #64]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a0f      	ldr	r2, [pc, #60]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dec:	4b0d      	ldr	r3, [pc, #52]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a0c      	ldr	r2, [pc, #48]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005df6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005df8:	f7fb ff40 	bl	8001c7c <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e00:	f7fb ff3c 	bl	8001c7c <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e058      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e12:	4b04      	ldr	r3, [pc, #16]	@ (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e1e:	e050      	b.n	8005ec2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e04f      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
 8005e24:	40021000 	.word	0x40021000
 8005e28:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e2c:	4b27      	ldr	r3, [pc, #156]	@ (8005ecc <HAL_RCC_OscConfig+0x82c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d144      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e38:	4b24      	ldr	r3, [pc, #144]	@ (8005ecc <HAL_RCC_OscConfig+0x82c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a23      	ldr	r2, [pc, #140]	@ (8005ecc <HAL_RCC_OscConfig+0x82c>)
 8005e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e44:	4b21      	ldr	r3, [pc, #132]	@ (8005ecc <HAL_RCC_OscConfig+0x82c>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	4a20      	ldr	r2, [pc, #128]	@ (8005ecc <HAL_RCC_OscConfig+0x82c>)
 8005e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e50:	f7fb ff14 	bl	8001c7c <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e58:	f7fb ff10 	bl	8001c7c <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e02c      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e6a:	4b18      	ldr	r3, [pc, #96]	@ (8005ecc <HAL_RCC_OscConfig+0x82c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0x7b8>
 8005e76:	e024      	b.n	8005ec2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b0c      	cmp	r3, #12
 8005e7c:	d01f      	beq.n	8005ebe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7e:	4b13      	ldr	r3, [pc, #76]	@ (8005ecc <HAL_RCC_OscConfig+0x82c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a12      	ldr	r2, [pc, #72]	@ (8005ecc <HAL_RCC_OscConfig+0x82c>)
 8005e84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8a:	f7fb fef7 	bl	8001c7c <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e92:	f7fb fef3 	bl	8001c7c <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e00f      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea4:	4b09      	ldr	r3, [pc, #36]	@ (8005ecc <HAL_RCC_OscConfig+0x82c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f0      	bne.n	8005e92 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005eb0:	4b06      	ldr	r3, [pc, #24]	@ (8005ecc <HAL_RCC_OscConfig+0x82c>)
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	4905      	ldr	r1, [pc, #20]	@ (8005ecc <HAL_RCC_OscConfig+0x82c>)
 8005eb6:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <HAL_RCC_OscConfig+0x830>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	60cb      	str	r3, [r1, #12]
 8005ebc:	e001      	b.n	8005ec2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	feeefffc 	.word	0xfeeefffc

08005ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e11d      	b.n	8006128 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005eec:	4b90      	ldr	r3, [pc, #576]	@ (8006130 <HAL_RCC_ClockConfig+0x25c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d910      	bls.n	8005f1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efa:	4b8d      	ldr	r3, [pc, #564]	@ (8006130 <HAL_RCC_ClockConfig+0x25c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f023 020f 	bic.w	r2, r3, #15
 8005f02:	498b      	ldr	r1, [pc, #556]	@ (8006130 <HAL_RCC_ClockConfig+0x25c>)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0a:	4b89      	ldr	r3, [pc, #548]	@ (8006130 <HAL_RCC_ClockConfig+0x25c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d001      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e105      	b.n	8006128 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d010      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	4b81      	ldr	r3, [pc, #516]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d908      	bls.n	8005f4a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f38:	4b7e      	ldr	r3, [pc, #504]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	497b      	ldr	r1, [pc, #492]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d079      	beq.n	800604a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d11e      	bne.n	8005f9c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f5e:	4b75      	ldr	r3, [pc, #468]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e0dc      	b.n	8006128 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005f6e:	f000 fa09 	bl	8006384 <RCC_GetSysClockFreqFromPLLSource>
 8005f72:	4603      	mov	r3, r0
 8005f74:	4a70      	ldr	r2, [pc, #448]	@ (8006138 <HAL_RCC_ClockConfig+0x264>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d946      	bls.n	8006008 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d140      	bne.n	8006008 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f86:	4b6b      	ldr	r3, [pc, #428]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f8e:	4a69      	ldr	r2, [pc, #420]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f96:	2380      	movs	r3, #128	@ 0x80
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e035      	b.n	8006008 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d107      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fa4:	4b63      	ldr	r3, [pc, #396]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d115      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0b9      	b.n	8006128 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d107      	bne.n	8005fcc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fbc:	4b5d      	ldr	r3, [pc, #372]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d109      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0ad      	b.n	8006128 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fcc:	4b59      	ldr	r3, [pc, #356]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0a5      	b.n	8006128 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005fdc:	f000 f8b4 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	4a55      	ldr	r2, [pc, #340]	@ (8006138 <HAL_RCC_ClockConfig+0x264>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d90f      	bls.n	8006008 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005fe8:	4b52      	ldr	r3, [pc, #328]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ffc:	4a4d      	ldr	r2, [pc, #308]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8005ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006002:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006004:	2380      	movs	r3, #128	@ 0x80
 8006006:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006008:	4b4a      	ldr	r3, [pc, #296]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f023 0203 	bic.w	r2, r3, #3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4947      	ldr	r1, [pc, #284]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8006016:	4313      	orrs	r3, r2
 8006018:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800601a:	f7fb fe2f 	bl	8001c7c <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006020:	e00a      	b.n	8006038 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006022:	f7fb fe2b 	bl	8001c7c <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006030:	4293      	cmp	r3, r2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e077      	b.n	8006128 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006038:	4b3e      	ldr	r3, [pc, #248]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 020c 	and.w	r2, r3, #12
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	429a      	cmp	r2, r3
 8006048:	d1eb      	bne.n	8006022 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b80      	cmp	r3, #128	@ 0x80
 800604e:	d105      	bne.n	800605c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006050:	4b38      	ldr	r3, [pc, #224]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4a37      	ldr	r2, [pc, #220]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8006056:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800605a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d010      	beq.n	800608a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	4b31      	ldr	r3, [pc, #196]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006074:	429a      	cmp	r2, r3
 8006076:	d208      	bcs.n	800608a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006078:	4b2e      	ldr	r3, [pc, #184]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	492b      	ldr	r1, [pc, #172]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8006086:	4313      	orrs	r3, r2
 8006088:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800608a:	4b29      	ldr	r3, [pc, #164]	@ (8006130 <HAL_RCC_ClockConfig+0x25c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d210      	bcs.n	80060ba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006098:	4b25      	ldr	r3, [pc, #148]	@ (8006130 <HAL_RCC_ClockConfig+0x25c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f023 020f 	bic.w	r2, r3, #15
 80060a0:	4923      	ldr	r1, [pc, #140]	@ (8006130 <HAL_RCC_ClockConfig+0x25c>)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a8:	4b21      	ldr	r3, [pc, #132]	@ (8006130 <HAL_RCC_ClockConfig+0x25c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 030f 	and.w	r3, r3, #15
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d001      	beq.n	80060ba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e036      	b.n	8006128 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	4918      	ldr	r1, [pc, #96]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060e4:	4b13      	ldr	r3, [pc, #76]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4910      	ldr	r1, [pc, #64]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060f8:	f000 f826 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006134 <HAL_RCC_ClockConfig+0x260>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	091b      	lsrs	r3, r3, #4
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	490c      	ldr	r1, [pc, #48]	@ (800613c <HAL_RCC_ClockConfig+0x268>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	fa22 f303 	lsr.w	r3, r2, r3
 8006114:	4a0a      	ldr	r2, [pc, #40]	@ (8006140 <HAL_RCC_ClockConfig+0x26c>)
 8006116:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006118:	4b0a      	ldr	r3, [pc, #40]	@ (8006144 <HAL_RCC_ClockConfig+0x270>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f7fb fd5d 	bl	8001bdc <HAL_InitTick>
 8006122:	4603      	mov	r3, r0
 8006124:	73fb      	strb	r3, [r7, #15]

  return status;
 8006126:	7bfb      	ldrb	r3, [r7, #15]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40022000 	.word	0x40022000
 8006134:	40021000 	.word	0x40021000
 8006138:	04c4b400 	.word	0x04c4b400
 800613c:	0800dd18 	.word	0x0800dd18
 8006140:	20000000 	.word	0x20000000
 8006144:	20000004 	.word	0x20000004

08006148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	@ 0x24
 800614c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	2300      	movs	r3, #0
 8006154:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006156:	4b3e      	ldr	r3, [pc, #248]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006160:	4b3b      	ldr	r3, [pc, #236]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <HAL_RCC_GetSysClockFreq+0x34>
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d121      	bne.n	80061ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d11e      	bne.n	80061ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800617c:	4b34      	ldr	r3, [pc, #208]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0308 	and.w	r3, r3, #8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d107      	bne.n	8006198 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006188:	4b31      	ldr	r3, [pc, #196]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 800618a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800618e:	0a1b      	lsrs	r3, r3, #8
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	e005      	b.n	80061a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006198:	4b2d      	ldr	r3, [pc, #180]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006254 <HAL_RCC_GetSysClockFreq+0x10c>)
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10d      	bne.n	80061d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061b8:	e00a      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d102      	bne.n	80061c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061c0:	4b25      	ldr	r3, [pc, #148]	@ (8006258 <HAL_RCC_GetSysClockFreq+0x110>)
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	e004      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d101      	bne.n	80061d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061cc:	4b23      	ldr	r3, [pc, #140]	@ (800625c <HAL_RCC_GetSysClockFreq+0x114>)
 80061ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b0c      	cmp	r3, #12
 80061d4:	d134      	bne.n	8006240 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d003      	beq.n	80061ee <HAL_RCC_GetSysClockFreq+0xa6>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d003      	beq.n	80061f4 <HAL_RCC_GetSysClockFreq+0xac>
 80061ec:	e005      	b.n	80061fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80061ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <HAL_RCC_GetSysClockFreq+0x110>)
 80061f0:	617b      	str	r3, [r7, #20]
      break;
 80061f2:	e005      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80061f4:	4b19      	ldr	r3, [pc, #100]	@ (800625c <HAL_RCC_GetSysClockFreq+0x114>)
 80061f6:	617b      	str	r3, [r7, #20]
      break;
 80061f8:	e002      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	617b      	str	r3, [r7, #20]
      break;
 80061fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006200:	4b13      	ldr	r3, [pc, #76]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	091b      	lsrs	r3, r3, #4
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	3301      	adds	r3, #1
 800620c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800620e:	4b10      	ldr	r3, [pc, #64]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	0a1b      	lsrs	r3, r3, #8
 8006214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	fb03 f202 	mul.w	r2, r3, r2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006226:	4b0a      	ldr	r3, [pc, #40]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	0e5b      	lsrs	r3, r3, #25
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	3301      	adds	r3, #1
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	fbb2 f3f3 	udiv	r3, r2, r3
 800623e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006240:	69bb      	ldr	r3, [r7, #24]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3724      	adds	r7, #36	@ 0x24
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40021000 	.word	0x40021000
 8006254:	0800dd30 	.word	0x0800dd30
 8006258:	00f42400 	.word	0x00f42400
 800625c:	007a1200 	.word	0x007a1200

08006260 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006264:	4b03      	ldr	r3, [pc, #12]	@ (8006274 <HAL_RCC_GetHCLKFreq+0x14>)
 8006266:	681b      	ldr	r3, [r3, #0]
}
 8006268:	4618      	mov	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000000 	.word	0x20000000

08006278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800627c:	f7ff fff0 	bl	8006260 <HAL_RCC_GetHCLKFreq>
 8006280:	4602      	mov	r2, r0
 8006282:	4b06      	ldr	r3, [pc, #24]	@ (800629c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	4904      	ldr	r1, [pc, #16]	@ (80062a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800628e:	5ccb      	ldrb	r3, [r1, r3]
 8006290:	f003 031f 	and.w	r3, r3, #31
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006298:	4618      	mov	r0, r3
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40021000 	.word	0x40021000
 80062a0:	0800dd28 	.word	0x0800dd28

080062a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062a8:	f7ff ffda 	bl	8006260 <HAL_RCC_GetHCLKFreq>
 80062ac:	4602      	mov	r2, r0
 80062ae:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	0adb      	lsrs	r3, r3, #11
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	4904      	ldr	r1, [pc, #16]	@ (80062cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80062ba:	5ccb      	ldrb	r3, [r1, r3]
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40021000 	.word	0x40021000
 80062cc:	0800dd28 	.word	0x0800dd28

080062d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80062d8:	2300      	movs	r3, #0
 80062da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80062dc:	4b27      	ldr	r3, [pc, #156]	@ (800637c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80062e8:	f7ff f8f6 	bl	80054d8 <HAL_PWREx_GetVoltageRange>
 80062ec:	6178      	str	r0, [r7, #20]
 80062ee:	e014      	b.n	800631a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80062f0:	4b22      	ldr	r3, [pc, #136]	@ (800637c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f4:	4a21      	ldr	r2, [pc, #132]	@ (800637c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80062fc:	4b1f      	ldr	r3, [pc, #124]	@ (800637c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006308:	f7ff f8e6 	bl	80054d8 <HAL_PWREx_GetVoltageRange>
 800630c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800630e:	4b1b      	ldr	r3, [pc, #108]	@ (800637c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006312:	4a1a      	ldr	r2, [pc, #104]	@ (800637c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006318:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006320:	d10b      	bne.n	800633a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b80      	cmp	r3, #128	@ 0x80
 8006326:	d913      	bls.n	8006350 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2ba0      	cmp	r3, #160	@ 0xa0
 800632c:	d902      	bls.n	8006334 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800632e:	2302      	movs	r3, #2
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e00d      	b.n	8006350 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006334:	2301      	movs	r3, #1
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	e00a      	b.n	8006350 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b7f      	cmp	r3, #127	@ 0x7f
 800633e:	d902      	bls.n	8006346 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006340:	2302      	movs	r3, #2
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	e004      	b.n	8006350 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b70      	cmp	r3, #112	@ 0x70
 800634a:	d101      	bne.n	8006350 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800634c:	2301      	movs	r3, #1
 800634e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006350:	4b0b      	ldr	r3, [pc, #44]	@ (8006380 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f023 020f 	bic.w	r2, r3, #15
 8006358:	4909      	ldr	r1, [pc, #36]	@ (8006380 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006360:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 030f 	and.w	r3, r3, #15
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	429a      	cmp	r2, r3
 800636c:	d001      	beq.n	8006372 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e000      	b.n	8006374 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	40021000 	.word	0x40021000
 8006380:	40022000 	.word	0x40022000

08006384 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800638a:	4b2d      	ldr	r3, [pc, #180]	@ (8006440 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b03      	cmp	r3, #3
 8006398:	d00b      	beq.n	80063b2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b03      	cmp	r3, #3
 800639e:	d825      	bhi.n	80063ec <RCC_GetSysClockFreqFromPLLSource+0x68>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d008      	beq.n	80063b8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d11f      	bne.n	80063ec <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80063ac:	4b25      	ldr	r3, [pc, #148]	@ (8006444 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80063ae:	613b      	str	r3, [r7, #16]
    break;
 80063b0:	e01f      	b.n	80063f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80063b2:	4b25      	ldr	r3, [pc, #148]	@ (8006448 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80063b4:	613b      	str	r3, [r7, #16]
    break;
 80063b6:	e01c      	b.n	80063f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80063b8:	4b21      	ldr	r3, [pc, #132]	@ (8006440 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d107      	bne.n	80063d4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80063c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006440 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	e005      	b.n	80063e0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80063d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006440 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	091b      	lsrs	r3, r3, #4
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80063e0:	4a1a      	ldr	r2, [pc, #104]	@ (800644c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e8:	613b      	str	r3, [r7, #16]
    break;
 80063ea:	e002      	b.n	80063f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	613b      	str	r3, [r7, #16]
    break;
 80063f0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063f2:	4b13      	ldr	r3, [pc, #76]	@ (8006440 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	091b      	lsrs	r3, r3, #4
 80063f8:	f003 030f 	and.w	r3, r3, #15
 80063fc:	3301      	adds	r3, #1
 80063fe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006400:	4b0f      	ldr	r3, [pc, #60]	@ (8006440 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	0a1b      	lsrs	r3, r3, #8
 8006406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	fb03 f202 	mul.w	r2, r3, r2
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	fbb2 f3f3 	udiv	r3, r2, r3
 8006416:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006418:	4b09      	ldr	r3, [pc, #36]	@ (8006440 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	0e5b      	lsrs	r3, r3, #25
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	3301      	adds	r3, #1
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006430:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006432:	683b      	ldr	r3, [r7, #0]
}
 8006434:	4618      	mov	r0, r3
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	40021000 	.word	0x40021000
 8006444:	00f42400 	.word	0x00f42400
 8006448:	007a1200 	.word	0x007a1200
 800644c:	0800dd30 	.word	0x0800dd30

08006450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006458:	2300      	movs	r3, #0
 800645a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800645c:	2300      	movs	r3, #0
 800645e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006468:	2b00      	cmp	r3, #0
 800646a:	d040      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006470:	2b80      	cmp	r3, #128	@ 0x80
 8006472:	d02a      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006474:	2b80      	cmp	r3, #128	@ 0x80
 8006476:	d825      	bhi.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006478:	2b60      	cmp	r3, #96	@ 0x60
 800647a:	d026      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800647c:	2b60      	cmp	r3, #96	@ 0x60
 800647e:	d821      	bhi.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006480:	2b40      	cmp	r3, #64	@ 0x40
 8006482:	d006      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006484:	2b40      	cmp	r3, #64	@ 0x40
 8006486:	d81d      	bhi.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800648c:	2b20      	cmp	r3, #32
 800648e:	d010      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006490:	e018      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006492:	4b89      	ldr	r3, [pc, #548]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	4a88      	ldr	r2, [pc, #544]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800649c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800649e:	e015      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3304      	adds	r3, #4
 80064a4:	2100      	movs	r1, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fb02 	bl	8006ab0 <RCCEx_PLLSAI1_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064b0:	e00c      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3320      	adds	r3, #32
 80064b6:	2100      	movs	r1, #0
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fbed 	bl	8006c98 <RCCEx_PLLSAI2_Config>
 80064be:	4603      	mov	r3, r0
 80064c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064c2:	e003      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	74fb      	strb	r3, [r7, #19]
      break;
 80064c8:	e000      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80064ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064cc:	7cfb      	ldrb	r3, [r7, #19]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064d2:	4b79      	ldr	r3, [pc, #484]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064d8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064e0:	4975      	ldr	r1, [pc, #468]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80064e8:	e001      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d047      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006502:	d030      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006508:	d82a      	bhi.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800650a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800650e:	d02a      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006514:	d824      	bhi.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800651a:	d008      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800651c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006520:	d81e      	bhi.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800652a:	d010      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800652c:	e018      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800652e:	4b62      	ldr	r3, [pc, #392]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	4a61      	ldr	r2, [pc, #388]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006538:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800653a:	e015      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3304      	adds	r3, #4
 8006540:	2100      	movs	r1, #0
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fab4 	bl	8006ab0 <RCCEx_PLLSAI1_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800654c:	e00c      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3320      	adds	r3, #32
 8006552:	2100      	movs	r1, #0
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fb9f 	bl	8006c98 <RCCEx_PLLSAI2_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800655e:	e003      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	74fb      	strb	r3, [r7, #19]
      break;
 8006564:	e000      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006568:	7cfb      	ldrb	r3, [r7, #19]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10b      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800656e:	4b52      	ldr	r3, [pc, #328]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006570:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006574:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657c:	494e      	ldr	r1, [pc, #312]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006584:	e001      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006586:	7cfb      	ldrb	r3, [r7, #19]
 8006588:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 809f 	beq.w	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006598:	2300      	movs	r3, #0
 800659a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800659c:	4b46      	ldr	r3, [pc, #280]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800659e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80065a8:	2301      	movs	r3, #1
 80065aa:	e000      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80065ac:	2300      	movs	r3, #0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00d      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b2:	4b41      	ldr	r3, [pc, #260]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b6:	4a40      	ldr	r2, [pc, #256]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80065be:	4b3e      	ldr	r3, [pc, #248]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065c6:	60bb      	str	r3, [r7, #8]
 80065c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ca:	2301      	movs	r3, #1
 80065cc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065ce:	4b3b      	ldr	r3, [pc, #236]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a3a      	ldr	r2, [pc, #232]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80065d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065da:	f7fb fb4f 	bl	8001c7c <HAL_GetTick>
 80065de:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065e0:	e009      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065e2:	f7fb fb4b 	bl	8001c7c <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d902      	bls.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	74fb      	strb	r3, [r7, #19]
        break;
 80065f4:	e005      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065f6:	4b31      	ldr	r3, [pc, #196]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0ef      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006602:	7cfb      	ldrb	r3, [r7, #19]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d15b      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006608:	4b2b      	ldr	r3, [pc, #172]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006612:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d01f      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	429a      	cmp	r2, r3
 8006624:	d019      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006626:	4b24      	ldr	r3, [pc, #144]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800662c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006630:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006632:	4b21      	ldr	r3, [pc, #132]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006638:	4a1f      	ldr	r2, [pc, #124]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800663a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800663e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006642:	4b1d      	ldr	r3, [pc, #116]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006648:	4a1b      	ldr	r2, [pc, #108]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800664a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800664e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006652:	4a19      	ldr	r2, [pc, #100]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d016      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006664:	f7fb fb0a 	bl	8001c7c <HAL_GetTick>
 8006668:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800666a:	e00b      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800666c:	f7fb fb06 	bl	8001c7c <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800667a:	4293      	cmp	r3, r2
 800667c:	d902      	bls.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	74fb      	strb	r3, [r7, #19]
            break;
 8006682:	e006      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006684:	4b0c      	ldr	r3, [pc, #48]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0ec      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006692:	7cfb      	ldrb	r3, [r7, #19]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10c      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006698:	4b07      	ldr	r3, [pc, #28]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800669a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800669e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a8:	4903      	ldr	r1, [pc, #12]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80066b0:	e008      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066b2:	7cfb      	ldrb	r3, [r7, #19]
 80066b4:	74bb      	strb	r3, [r7, #18]
 80066b6:	e005      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80066b8:	40021000 	.word	0x40021000
 80066bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	7cfb      	ldrb	r3, [r7, #19]
 80066c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066c4:	7c7b      	ldrb	r3, [r7, #17]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d105      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066ca:	4ba0      	ldr	r3, [pc, #640]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ce:	4a9f      	ldr	r2, [pc, #636]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066e2:	4b9a      	ldr	r3, [pc, #616]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e8:	f023 0203 	bic.w	r2, r3, #3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f0:	4996      	ldr	r1, [pc, #600]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006704:	4b91      	ldr	r3, [pc, #580]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670a:	f023 020c 	bic.w	r2, r3, #12
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006712:	498e      	ldr	r1, [pc, #568]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006726:	4b89      	ldr	r3, [pc, #548]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800672c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006734:	4985      	ldr	r1, [pc, #532]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006748:	4b80      	ldr	r3, [pc, #512]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800674a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006756:	497d      	ldr	r1, [pc, #500]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800676a:	4b78      	ldr	r3, [pc, #480]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800676c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006770:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006778:	4974      	ldr	r1, [pc, #464]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800678c:	4b6f      	ldr	r3, [pc, #444]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006792:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679a:	496c      	ldr	r1, [pc, #432]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067ae:	4b67      	ldr	r3, [pc, #412]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067bc:	4963      	ldr	r1, [pc, #396]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067d0:	4b5e      	ldr	r3, [pc, #376]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067de:	495b      	ldr	r1, [pc, #364]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067f2:	4b56      	ldr	r3, [pc, #344]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006800:	4952      	ldr	r1, [pc, #328]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006814:	4b4d      	ldr	r3, [pc, #308]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006822:	494a      	ldr	r1, [pc, #296]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006836:	4b45      	ldr	r3, [pc, #276]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006844:	4941      	ldr	r1, [pc, #260]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006858:	4b3c      	ldr	r3, [pc, #240]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800685a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800685e:	f023 0203 	bic.w	r2, r3, #3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006866:	4939      	ldr	r1, [pc, #228]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d028      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800687a:	4b34      	ldr	r3, [pc, #208]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006880:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006888:	4930      	ldr	r1, [pc, #192]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006898:	d106      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800689a:	4b2c      	ldr	r3, [pc, #176]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	4a2b      	ldr	r2, [pc, #172]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068a4:	60d3      	str	r3, [r2, #12]
 80068a6:	e011      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068b0:	d10c      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3304      	adds	r3, #4
 80068b6:	2101      	movs	r1, #1
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 f8f9 	bl	8006ab0 <RCCEx_PLLSAI1_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80068c2:	7cfb      	ldrb	r3, [r7, #19]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80068c8:	7cfb      	ldrb	r3, [r7, #19]
 80068ca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d04d      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068e0:	d108      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80068e2:	4b1a      	ldr	r3, [pc, #104]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068e8:	4a18      	ldr	r2, [pc, #96]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068ee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80068f2:	e012      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80068f4:	4b15      	ldr	r3, [pc, #84]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068fa:	4a14      	ldr	r2, [pc, #80]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006900:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006904:	4b11      	ldr	r3, [pc, #68]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800690a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006912:	490e      	ldr	r1, [pc, #56]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006914:	4313      	orrs	r3, r2
 8006916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800691e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006922:	d106      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006924:	4b09      	ldr	r3, [pc, #36]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4a08      	ldr	r2, [pc, #32]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800692a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800692e:	60d3      	str	r3, [r2, #12]
 8006930:	e020      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006936:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800693a:	d109      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800693c:	4b03      	ldr	r3, [pc, #12]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	4a02      	ldr	r2, [pc, #8]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006946:	60d3      	str	r3, [r2, #12]
 8006948:	e014      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800694a:	bf00      	nop
 800694c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006954:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006958:	d10c      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3304      	adds	r3, #4
 800695e:	2101      	movs	r1, #1
 8006960:	4618      	mov	r0, r3
 8006962:	f000 f8a5 	bl	8006ab0 <RCCEx_PLLSAI1_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800696a:	7cfb      	ldrb	r3, [r7, #19]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006970:	7cfb      	ldrb	r3, [r7, #19]
 8006972:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d028      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006980:	4b4a      	ldr	r3, [pc, #296]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006986:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800698e:	4947      	ldr	r1, [pc, #284]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006990:	4313      	orrs	r3, r2
 8006992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800699a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800699e:	d106      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069a0:	4b42      	ldr	r3, [pc, #264]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	4a41      	ldr	r2, [pc, #260]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069aa:	60d3      	str	r3, [r2, #12]
 80069ac:	e011      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069b6:	d10c      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	2101      	movs	r1, #1
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 f876 	bl	8006ab0 <RCCEx_PLLSAI1_Config>
 80069c4:	4603      	mov	r3, r0
 80069c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069c8:	7cfb      	ldrb	r3, [r7, #19]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80069ce:	7cfb      	ldrb	r3, [r7, #19]
 80069d0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01e      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069de:	4b33      	ldr	r3, [pc, #204]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ee:	492f      	ldr	r1, [pc, #188]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a00:	d10c      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3304      	adds	r3, #4
 8006a06:	2102      	movs	r1, #2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 f851 	bl	8006ab0 <RCCEx_PLLSAI1_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a12:	7cfb      	ldrb	r3, [r7, #19]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006a18:	7cfb      	ldrb	r3, [r7, #19]
 8006a1a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00b      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a28:	4b20      	ldr	r3, [pc, #128]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a2e:	f023 0204 	bic.w	r2, r3, #4
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a38:	491c      	ldr	r1, [pc, #112]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006a4c:	4b17      	ldr	r3, [pc, #92]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a52:	f023 0218 	bic.w	r2, r3, #24
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5c:	4913      	ldr	r1, [pc, #76]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d017      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006a70:	4b0e      	ldr	r3, [pc, #56]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a80:	490a      	ldr	r1, [pc, #40]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a92:	d105      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a94:	4b05      	ldr	r3, [pc, #20]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	4a04      	ldr	r2, [pc, #16]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006aa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	40021000 	.word	0x40021000

08006ab0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006abe:	4b72      	ldr	r3, [pc, #456]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00e      	beq.n	8006ae8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006aca:	4b6f      	ldr	r3, [pc, #444]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f003 0203 	and.w	r2, r3, #3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d103      	bne.n	8006ae2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
       ||
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d142      	bne.n	8006b68 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	73fb      	strb	r3, [r7, #15]
 8006ae6:	e03f      	b.n	8006b68 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d018      	beq.n	8006b22 <RCCEx_PLLSAI1_Config+0x72>
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d825      	bhi.n	8006b40 <RCCEx_PLLSAI1_Config+0x90>
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d002      	beq.n	8006afe <RCCEx_PLLSAI1_Config+0x4e>
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d009      	beq.n	8006b10 <RCCEx_PLLSAI1_Config+0x60>
 8006afc:	e020      	b.n	8006b40 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006afe:	4b62      	ldr	r3, [pc, #392]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d11d      	bne.n	8006b46 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b0e:	e01a      	b.n	8006b46 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b10:	4b5d      	ldr	r3, [pc, #372]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d116      	bne.n	8006b4a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b20:	e013      	b.n	8006b4a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b22:	4b59      	ldr	r3, [pc, #356]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10f      	bne.n	8006b4e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b2e:	4b56      	ldr	r3, [pc, #344]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b3e:	e006      	b.n	8006b4e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	73fb      	strb	r3, [r7, #15]
      break;
 8006b44:	e004      	b.n	8006b50 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b46:	bf00      	nop
 8006b48:	e002      	b.n	8006b50 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b4a:	bf00      	nop
 8006b4c:	e000      	b.n	8006b50 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d108      	bne.n	8006b68 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006b56:	4b4c      	ldr	r3, [pc, #304]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f023 0203 	bic.w	r2, r3, #3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4949      	ldr	r1, [pc, #292]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f040 8086 	bne.w	8006c7c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b70:	4b45      	ldr	r3, [pc, #276]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a44      	ldr	r2, [pc, #272]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b7c:	f7fb f87e 	bl	8001c7c <HAL_GetTick>
 8006b80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b82:	e009      	b.n	8006b98 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b84:	f7fb f87a 	bl	8001c7c <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d902      	bls.n	8006b98 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	73fb      	strb	r3, [r7, #15]
        break;
 8006b96:	e005      	b.n	8006ba4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b98:	4b3b      	ldr	r3, [pc, #236]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1ef      	bne.n	8006b84 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d168      	bne.n	8006c7c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d113      	bne.n	8006bd8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bb0:	4b35      	ldr	r3, [pc, #212]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	4b35      	ldr	r3, [pc, #212]	@ (8006c8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6892      	ldr	r2, [r2, #8]
 8006bbc:	0211      	lsls	r1, r2, #8
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	68d2      	ldr	r2, [r2, #12]
 8006bc2:	06d2      	lsls	r2, r2, #27
 8006bc4:	4311      	orrs	r1, r2
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6852      	ldr	r2, [r2, #4]
 8006bca:	3a01      	subs	r2, #1
 8006bcc:	0112      	lsls	r2, r2, #4
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	492d      	ldr	r1, [pc, #180]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	610b      	str	r3, [r1, #16]
 8006bd6:	e02d      	b.n	8006c34 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d115      	bne.n	8006c0a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bde:	4b2a      	ldr	r3, [pc, #168]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	4b2b      	ldr	r3, [pc, #172]	@ (8006c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6892      	ldr	r2, [r2, #8]
 8006bea:	0211      	lsls	r1, r2, #8
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6912      	ldr	r2, [r2, #16]
 8006bf0:	0852      	lsrs	r2, r2, #1
 8006bf2:	3a01      	subs	r2, #1
 8006bf4:	0552      	lsls	r2, r2, #21
 8006bf6:	4311      	orrs	r1, r2
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6852      	ldr	r2, [r2, #4]
 8006bfc:	3a01      	subs	r2, #1
 8006bfe:	0112      	lsls	r2, r2, #4
 8006c00:	430a      	orrs	r2, r1
 8006c02:	4921      	ldr	r1, [pc, #132]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	610b      	str	r3, [r1, #16]
 8006c08:	e014      	b.n	8006c34 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	4b21      	ldr	r3, [pc, #132]	@ (8006c94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6892      	ldr	r2, [r2, #8]
 8006c16:	0211      	lsls	r1, r2, #8
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6952      	ldr	r2, [r2, #20]
 8006c1c:	0852      	lsrs	r2, r2, #1
 8006c1e:	3a01      	subs	r2, #1
 8006c20:	0652      	lsls	r2, r2, #25
 8006c22:	4311      	orrs	r1, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6852      	ldr	r2, [r2, #4]
 8006c28:	3a01      	subs	r2, #1
 8006c2a:	0112      	lsls	r2, r2, #4
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	4916      	ldr	r1, [pc, #88]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c34:	4b14      	ldr	r3, [pc, #80]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a13      	ldr	r2, [pc, #76]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c40:	f7fb f81c 	bl	8001c7c <HAL_GetTick>
 8006c44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c46:	e009      	b.n	8006c5c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c48:	f7fb f818 	bl	8001c7c <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d902      	bls.n	8006c5c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	73fb      	strb	r3, [r7, #15]
          break;
 8006c5a:	e005      	b.n	8006c68 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0ef      	beq.n	8006c48 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c6e:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	4904      	ldr	r1, [pc, #16]	@ (8006c88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	07ff800f 	.word	0x07ff800f
 8006c90:	ff9f800f 	.word	0xff9f800f
 8006c94:	f9ff800f 	.word	0xf9ff800f

08006c98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ca6:	4b72      	ldr	r3, [pc, #456]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00e      	beq.n	8006cd0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006cb2:	4b6f      	ldr	r3, [pc, #444]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f003 0203 	and.w	r2, r3, #3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d103      	bne.n	8006cca <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
       ||
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d142      	bne.n	8006d50 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	73fb      	strb	r3, [r7, #15]
 8006cce:	e03f      	b.n	8006d50 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d018      	beq.n	8006d0a <RCCEx_PLLSAI2_Config+0x72>
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d825      	bhi.n	8006d28 <RCCEx_PLLSAI2_Config+0x90>
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d002      	beq.n	8006ce6 <RCCEx_PLLSAI2_Config+0x4e>
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d009      	beq.n	8006cf8 <RCCEx_PLLSAI2_Config+0x60>
 8006ce4:	e020      	b.n	8006d28 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ce6:	4b62      	ldr	r3, [pc, #392]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d11d      	bne.n	8006d2e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cf6:	e01a      	b.n	8006d2e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cf8:	4b5d      	ldr	r3, [pc, #372]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d116      	bne.n	8006d32 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d08:	e013      	b.n	8006d32 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d0a:	4b59      	ldr	r3, [pc, #356]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10f      	bne.n	8006d36 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d16:	4b56      	ldr	r3, [pc, #344]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d26:	e006      	b.n	8006d36 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2c:	e004      	b.n	8006d38 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d2e:	bf00      	nop
 8006d30:	e002      	b.n	8006d38 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d32:	bf00      	nop
 8006d34:	e000      	b.n	8006d38 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d36:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d108      	bne.n	8006d50 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f023 0203 	bic.w	r2, r3, #3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4949      	ldr	r1, [pc, #292]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f040 8086 	bne.w	8006e64 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d58:	4b45      	ldr	r3, [pc, #276]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a44      	ldr	r2, [pc, #272]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d64:	f7fa ff8a 	bl	8001c7c <HAL_GetTick>
 8006d68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d6a:	e009      	b.n	8006d80 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d6c:	f7fa ff86 	bl	8001c7c <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d902      	bls.n	8006d80 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	73fb      	strb	r3, [r7, #15]
        break;
 8006d7e:	e005      	b.n	8006d8c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d80:	4b3b      	ldr	r3, [pc, #236]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1ef      	bne.n	8006d6c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d168      	bne.n	8006e64 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d113      	bne.n	8006dc0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d98:	4b35      	ldr	r3, [pc, #212]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d9a:	695a      	ldr	r2, [r3, #20]
 8006d9c:	4b35      	ldr	r3, [pc, #212]	@ (8006e74 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006d9e:	4013      	ands	r3, r2
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6892      	ldr	r2, [r2, #8]
 8006da4:	0211      	lsls	r1, r2, #8
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	68d2      	ldr	r2, [r2, #12]
 8006daa:	06d2      	lsls	r2, r2, #27
 8006dac:	4311      	orrs	r1, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6852      	ldr	r2, [r2, #4]
 8006db2:	3a01      	subs	r2, #1
 8006db4:	0112      	lsls	r2, r2, #4
 8006db6:	430a      	orrs	r2, r1
 8006db8:	492d      	ldr	r1, [pc, #180]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	614b      	str	r3, [r1, #20]
 8006dbe:	e02d      	b.n	8006e1c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d115      	bne.n	8006df2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dc8:	695a      	ldr	r2, [r3, #20]
 8006dca:	4b2b      	ldr	r3, [pc, #172]	@ (8006e78 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6892      	ldr	r2, [r2, #8]
 8006dd2:	0211      	lsls	r1, r2, #8
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6912      	ldr	r2, [r2, #16]
 8006dd8:	0852      	lsrs	r2, r2, #1
 8006dda:	3a01      	subs	r2, #1
 8006ddc:	0552      	lsls	r2, r2, #21
 8006dde:	4311      	orrs	r1, r2
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6852      	ldr	r2, [r2, #4]
 8006de4:	3a01      	subs	r2, #1
 8006de6:	0112      	lsls	r2, r2, #4
 8006de8:	430a      	orrs	r2, r1
 8006dea:	4921      	ldr	r1, [pc, #132]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	614b      	str	r3, [r1, #20]
 8006df0:	e014      	b.n	8006e1c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006df2:	4b1f      	ldr	r3, [pc, #124]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006df4:	695a      	ldr	r2, [r3, #20]
 8006df6:	4b21      	ldr	r3, [pc, #132]	@ (8006e7c <RCCEx_PLLSAI2_Config+0x1e4>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6892      	ldr	r2, [r2, #8]
 8006dfe:	0211      	lsls	r1, r2, #8
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6952      	ldr	r2, [r2, #20]
 8006e04:	0852      	lsrs	r2, r2, #1
 8006e06:	3a01      	subs	r2, #1
 8006e08:	0652      	lsls	r2, r2, #25
 8006e0a:	4311      	orrs	r1, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6852      	ldr	r2, [r2, #4]
 8006e10:	3a01      	subs	r2, #1
 8006e12:	0112      	lsls	r2, r2, #4
 8006e14:	430a      	orrs	r2, r1
 8006e16:	4916      	ldr	r1, [pc, #88]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e1c:	4b14      	ldr	r3, [pc, #80]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a13      	ldr	r2, [pc, #76]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e28:	f7fa ff28 	bl	8001c7c <HAL_GetTick>
 8006e2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e2e:	e009      	b.n	8006e44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e30:	f7fa ff24 	bl	8001c7c <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d902      	bls.n	8006e44 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	73fb      	strb	r3, [r7, #15]
          break;
 8006e42:	e005      	b.n	8006e50 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e44:	4b0a      	ldr	r3, [pc, #40]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0ef      	beq.n	8006e30 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d106      	bne.n	8006e64 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e56:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e58:	695a      	ldr	r2, [r3, #20]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	4904      	ldr	r1, [pc, #16]	@ (8006e70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40021000 	.word	0x40021000
 8006e74:	07ff800f 	.word	0x07ff800f
 8006e78:	ff9f800f 	.word	0xff9f800f
 8006e7c:	f9ff800f 	.word	0xf9ff800f

08006e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e049      	b.n	8006f26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fa fcba 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f000 fb02 	bl	80074c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d001      	beq.n	8006f48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e047      	b.n	8006fd8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a23      	ldr	r2, [pc, #140]	@ (8006fe4 <HAL_TIM_Base_Start+0xb4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d01d      	beq.n	8006f96 <HAL_TIM_Base_Start+0x66>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f62:	d018      	beq.n	8006f96 <HAL_TIM_Base_Start+0x66>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a1f      	ldr	r2, [pc, #124]	@ (8006fe8 <HAL_TIM_Base_Start+0xb8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d013      	beq.n	8006f96 <HAL_TIM_Base_Start+0x66>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a1e      	ldr	r2, [pc, #120]	@ (8006fec <HAL_TIM_Base_Start+0xbc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00e      	beq.n	8006f96 <HAL_TIM_Base_Start+0x66>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff0 <HAL_TIM_Base_Start+0xc0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d009      	beq.n	8006f96 <HAL_TIM_Base_Start+0x66>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff4 <HAL_TIM_Base_Start+0xc4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d004      	beq.n	8006f96 <HAL_TIM_Base_Start+0x66>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a19      	ldr	r2, [pc, #100]	@ (8006ff8 <HAL_TIM_Base_Start+0xc8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d115      	bne.n	8006fc2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	4b17      	ldr	r3, [pc, #92]	@ (8006ffc <HAL_TIM_Base_Start+0xcc>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b06      	cmp	r3, #6
 8006fa6:	d015      	beq.n	8006fd4 <HAL_TIM_Base_Start+0xa4>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fae:	d011      	beq.n	8006fd4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc0:	e008      	b.n	8006fd4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e000      	b.n	8006fd6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40000400 	.word	0x40000400
 8006fec:	40000800 	.word	0x40000800
 8006ff0:	40000c00 	.word	0x40000c00
 8006ff4:	40013400 	.word	0x40013400
 8006ff8:	40014000 	.word	0x40014000
 8006ffc:	00010007 	.word	0x00010007

08007000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d001      	beq.n	8007018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e04f      	b.n	80070b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0201 	orr.w	r2, r2, #1
 800702e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a23      	ldr	r2, [pc, #140]	@ (80070c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01d      	beq.n	8007076 <HAL_TIM_Base_Start_IT+0x76>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007042:	d018      	beq.n	8007076 <HAL_TIM_Base_Start_IT+0x76>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a1f      	ldr	r2, [pc, #124]	@ (80070c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <HAL_TIM_Base_Start_IT+0x76>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1e      	ldr	r2, [pc, #120]	@ (80070cc <HAL_TIM_Base_Start_IT+0xcc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_TIM_Base_Start_IT+0x76>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1c      	ldr	r2, [pc, #112]	@ (80070d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <HAL_TIM_Base_Start_IT+0x76>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1b      	ldr	r2, [pc, #108]	@ (80070d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_TIM_Base_Start_IT+0x76>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a19      	ldr	r2, [pc, #100]	@ (80070d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d115      	bne.n	80070a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	4b17      	ldr	r3, [pc, #92]	@ (80070dc <HAL_TIM_Base_Start_IT+0xdc>)
 800707e:	4013      	ands	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b06      	cmp	r3, #6
 8007086:	d015      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0xb4>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800708e:	d011      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a0:	e008      	b.n	80070b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0201 	orr.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	e000      	b.n	80070b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	40012c00 	.word	0x40012c00
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40000c00 	.word	0x40000c00
 80070d4:	40013400 	.word	0x40013400
 80070d8:	40014000 	.word	0x40014000
 80070dc:	00010007 	.word	0x00010007

080070e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d020      	beq.n	8007144 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01b      	beq.n	8007144 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0202 	mvn.w	r2, #2
 8007114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f9ad 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 8007130:	e005      	b.n	800713e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f99f 	bl	8007476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f9b0 	bl	800749e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d020      	beq.n	8007190 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01b      	beq.n	8007190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0204 	mvn.w	r2, #4
 8007160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2202      	movs	r2, #2
 8007166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f987 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f979 	bl	8007476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f98a 	bl	800749e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d020      	beq.n	80071dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01b      	beq.n	80071dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0208 	mvn.w	r2, #8
 80071ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2204      	movs	r2, #4
 80071b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f961 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 80071c8:	e005      	b.n	80071d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f953 	bl	8007476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f964 	bl	800749e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d020      	beq.n	8007228 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01b      	beq.n	8007228 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0210 	mvn.w	r2, #16
 80071f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2208      	movs	r2, #8
 80071fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f93b 	bl	800748a <HAL_TIM_IC_CaptureCallback>
 8007214:	e005      	b.n	8007222 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f92d 	bl	8007476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f93e 	bl	800749e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00c      	beq.n	800724c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d007      	beq.n	800724c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0201 	mvn.w	r2, #1
 8007244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7f9 ff64 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00c      	beq.n	8007270 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 faf2 	bl	8007854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00c      	beq.n	8007294 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007280:	2b00      	cmp	r3, #0
 8007282:	d007      	beq.n	8007294 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800728c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 faea 	bl	8007868 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00c      	beq.n	80072b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d007      	beq.n	80072b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f8fd 	bl	80074b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00c      	beq.n	80072dc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d007      	beq.n	80072dc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f06f 0220 	mvn.w	r2, #32
 80072d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fab2 	bl	8007840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072dc:	bf00      	nop
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_TIM_ConfigClockSource+0x1c>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e0b6      	b.n	800746e <HAL_TIM_ConfigClockSource+0x18a>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800731e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800732a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800733c:	d03e      	beq.n	80073bc <HAL_TIM_ConfigClockSource+0xd8>
 800733e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007342:	f200 8087 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x170>
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800734a:	f000 8086 	beq.w	800745a <HAL_TIM_ConfigClockSource+0x176>
 800734e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007352:	d87f      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x170>
 8007354:	2b70      	cmp	r3, #112	@ 0x70
 8007356:	d01a      	beq.n	800738e <HAL_TIM_ConfigClockSource+0xaa>
 8007358:	2b70      	cmp	r3, #112	@ 0x70
 800735a:	d87b      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x170>
 800735c:	2b60      	cmp	r3, #96	@ 0x60
 800735e:	d050      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x11e>
 8007360:	2b60      	cmp	r3, #96	@ 0x60
 8007362:	d877      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x170>
 8007364:	2b50      	cmp	r3, #80	@ 0x50
 8007366:	d03c      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0xfe>
 8007368:	2b50      	cmp	r3, #80	@ 0x50
 800736a:	d873      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x170>
 800736c:	2b40      	cmp	r3, #64	@ 0x40
 800736e:	d058      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0x13e>
 8007370:	2b40      	cmp	r3, #64	@ 0x40
 8007372:	d86f      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x170>
 8007374:	2b30      	cmp	r3, #48	@ 0x30
 8007376:	d064      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x15e>
 8007378:	2b30      	cmp	r3, #48	@ 0x30
 800737a:	d86b      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x170>
 800737c:	2b20      	cmp	r3, #32
 800737e:	d060      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x15e>
 8007380:	2b20      	cmp	r3, #32
 8007382:	d867      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x170>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d05c      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x15e>
 8007388:	2b10      	cmp	r3, #16
 800738a:	d05a      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x15e>
 800738c:	e062      	b.n	8007454 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800739e:	f000 f9a7 	bl	80076f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	609a      	str	r2, [r3, #8]
      break;
 80073ba:	e04f      	b.n	800745c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073cc:	f000 f990 	bl	80076f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073de:	609a      	str	r2, [r3, #8]
      break;
 80073e0:	e03c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ee:	461a      	mov	r2, r3
 80073f0:	f000 f904 	bl	80075fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2150      	movs	r1, #80	@ 0x50
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 f95d 	bl	80076ba <TIM_ITRx_SetConfig>
      break;
 8007400:	e02c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800740e:	461a      	mov	r2, r3
 8007410:	f000 f923 	bl	800765a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2160      	movs	r1, #96	@ 0x60
 800741a:	4618      	mov	r0, r3
 800741c:	f000 f94d 	bl	80076ba <TIM_ITRx_SetConfig>
      break;
 8007420:	e01c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800742e:	461a      	mov	r2, r3
 8007430:	f000 f8e4 	bl	80075fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2140      	movs	r1, #64	@ 0x40
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f93d 	bl	80076ba <TIM_ITRx_SetConfig>
      break;
 8007440:	e00c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f000 f934 	bl	80076ba <TIM_ITRx_SetConfig>
      break;
 8007452:	e003      	b.n	800745c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]
      break;
 8007458:	e000      	b.n	800745c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800745a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074ba:	bf00      	nop
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
	...

080074c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a40      	ldr	r2, [pc, #256]	@ (80075dc <TIM_Base_SetConfig+0x114>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d013      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e6:	d00f      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a3d      	ldr	r2, [pc, #244]	@ (80075e0 <TIM_Base_SetConfig+0x118>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00b      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a3c      	ldr	r2, [pc, #240]	@ (80075e4 <TIM_Base_SetConfig+0x11c>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d007      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a3b      	ldr	r2, [pc, #236]	@ (80075e8 <TIM_Base_SetConfig+0x120>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a3a      	ldr	r2, [pc, #232]	@ (80075ec <TIM_Base_SetConfig+0x124>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d108      	bne.n	800751a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800750e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2f      	ldr	r2, [pc, #188]	@ (80075dc <TIM_Base_SetConfig+0x114>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d01f      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007528:	d01b      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a2c      	ldr	r2, [pc, #176]	@ (80075e0 <TIM_Base_SetConfig+0x118>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d017      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a2b      	ldr	r2, [pc, #172]	@ (80075e4 <TIM_Base_SetConfig+0x11c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d013      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a2a      	ldr	r2, [pc, #168]	@ (80075e8 <TIM_Base_SetConfig+0x120>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00f      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a29      	ldr	r2, [pc, #164]	@ (80075ec <TIM_Base_SetConfig+0x124>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00b      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a28      	ldr	r2, [pc, #160]	@ (80075f0 <TIM_Base_SetConfig+0x128>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d007      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a27      	ldr	r2, [pc, #156]	@ (80075f4 <TIM_Base_SetConfig+0x12c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d003      	beq.n	8007562 <TIM_Base_SetConfig+0x9a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a26      	ldr	r2, [pc, #152]	@ (80075f8 <TIM_Base_SetConfig+0x130>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d108      	bne.n	8007574 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a10      	ldr	r2, [pc, #64]	@ (80075dc <TIM_Base_SetConfig+0x114>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00f      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a12      	ldr	r2, [pc, #72]	@ (80075ec <TIM_Base_SetConfig+0x124>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00b      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a11      	ldr	r2, [pc, #68]	@ (80075f0 <TIM_Base_SetConfig+0x128>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d007      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a10      	ldr	r2, [pc, #64]	@ (80075f4 <TIM_Base_SetConfig+0x12c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d003      	beq.n	80075c0 <TIM_Base_SetConfig+0xf8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a0f      	ldr	r2, [pc, #60]	@ (80075f8 <TIM_Base_SetConfig+0x130>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d103      	bne.n	80075c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	691a      	ldr	r2, [r3, #16]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	615a      	str	r2, [r3, #20]
}
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40000c00 	.word	0x40000c00
 80075ec:	40013400 	.word	0x40013400
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40014400 	.word	0x40014400
 80075f8:	40014800 	.word	0x40014800

080075fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	f023 0201 	bic.w	r2, r3, #1
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	4313      	orrs	r3, r2
 8007630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f023 030a 	bic.w	r3, r3, #10
 8007638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4313      	orrs	r3, r2
 8007640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	621a      	str	r2, [r3, #32]
}
 800764e:	bf00      	nop
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800765a:	b480      	push	{r7}
 800765c:	b087      	sub	sp, #28
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	f023 0210 	bic.w	r2, r3, #16
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	031b      	lsls	r3, r3, #12
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	4313      	orrs	r3, r2
 800768e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007696:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	621a      	str	r2, [r3, #32]
}
 80076ae:	bf00      	nop
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	f043 0307 	orr.w	r3, r3, #7
 80076dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	609a      	str	r2, [r3, #8]
}
 80076e4:	bf00      	nop
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800770a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	021a      	lsls	r2, r3, #8
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	431a      	orrs	r2, r3
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	4313      	orrs	r3, r2
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	609a      	str	r2, [r3, #8]
}
 8007724:	bf00      	nop
 8007726:	371c      	adds	r7, #28
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007740:	2b01      	cmp	r3, #1
 8007742:	d101      	bne.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007744:	2302      	movs	r3, #2
 8007746:	e068      	b.n	800781a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a2e      	ldr	r2, [pc, #184]	@ (8007828 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d004      	beq.n	800777c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a2d      	ldr	r2, [pc, #180]	@ (800782c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d108      	bne.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007782:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007794:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4313      	orrs	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007828 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d01d      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ba:	d018      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d013      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00e      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a18      	ldr	r2, [pc, #96]	@ (8007838 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d009      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a13      	ldr	r2, [pc, #76]	@ (800782c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d004      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a14      	ldr	r2, [pc, #80]	@ (800783c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d10c      	bne.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	40012c00 	.word	0x40012c00
 800782c:	40013400 	.word	0x40013400
 8007830:	40000400 	.word	0x40000400
 8007834:	40000800 	.word	0x40000800
 8007838:	40000c00 	.word	0x40000c00
 800783c:	40014000 	.word	0x40014000

08007840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e042      	b.n	8007914 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007894:	2b00      	cmp	r3, #0
 8007896:	d106      	bne.n	80078a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7fa f8ab 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2224      	movs	r2, #36	@ 0x24
 80078aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 0201 	bic.w	r2, r2, #1
 80078bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 ff42 	bl	8008750 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fc43 	bl	8008158 <UART_SetConfig>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d101      	bne.n	80078dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e01b      	b.n	8007914 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0201 	orr.w	r2, r2, #1
 800790a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 ffc1 	bl	8008894 <UART_CheckIdleState>
 8007912:	4603      	mov	r3, r0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08a      	sub	sp, #40	@ 0x28
 8007920:	af02      	add	r7, sp, #8
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	4613      	mov	r3, r2
 800792a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007932:	2b20      	cmp	r3, #32
 8007934:	d17b      	bne.n	8007a2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <HAL_UART_Transmit+0x26>
 800793c:	88fb      	ldrh	r3, [r7, #6]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e074      	b.n	8007a30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2221      	movs	r2, #33	@ 0x21
 8007952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007956:	f7fa f991 	bl	8001c7c <HAL_GetTick>
 800795a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	88fa      	ldrh	r2, [r7, #6]
 8007960:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	88fa      	ldrh	r2, [r7, #6]
 8007968:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007974:	d108      	bne.n	8007988 <HAL_UART_Transmit+0x6c>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d104      	bne.n	8007988 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800797e:	2300      	movs	r3, #0
 8007980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	61bb      	str	r3, [r7, #24]
 8007986:	e003      	b.n	8007990 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800798c:	2300      	movs	r3, #0
 800798e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007990:	e030      	b.n	80079f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	2200      	movs	r2, #0
 800799a:	2180      	movs	r1, #128	@ 0x80
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f001 f823 	bl	80089e8 <UART_WaitOnFlagUntilTimeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e03d      	b.n	8007a30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10b      	bne.n	80079d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	881a      	ldrh	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079c6:	b292      	uxth	r2, r2
 80079c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	3302      	adds	r3, #2
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	e007      	b.n	80079e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	781a      	ldrb	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	3301      	adds	r3, #1
 80079e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1c8      	bne.n	8007992 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2200      	movs	r2, #0
 8007a08:	2140      	movs	r1, #64	@ 0x40
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 ffec 	bl	80089e8 <UART_WaitOnFlagUntilTimeout>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d005      	beq.n	8007a22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e006      	b.n	8007a30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e000      	b.n	8007a30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007a2e:	2302      	movs	r3, #2
  }
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3720      	adds	r7, #32
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	@ 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d137      	bne.n	8007ac0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_UART_Receive_IT+0x24>
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e030      	b.n	8007ac2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <HAL_UART_Receive_IT+0x94>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d01f      	beq.n	8007ab0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d018      	beq.n	8007ab0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	623b      	str	r3, [r7, #32]
 8007a9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	69f9      	ldr	r1, [r7, #28]
 8007aa2:	6a3a      	ldr	r2, [r7, #32]
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e6      	bne.n	8007a7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fffe 	bl	8008ab8 <UART_Start_Receive_IT>
 8007abc:	4603      	mov	r3, r0
 8007abe:	e000      	b.n	8007ac2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ac0:	2302      	movs	r3, #2
  }
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3728      	adds	r7, #40	@ 0x28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40008000 	.word	0x40008000

08007ad0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b0ba      	sub	sp, #232	@ 0xe8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007af6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007afa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007afe:	4013      	ands	r3, r2
 8007b00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007b04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d11b      	bne.n	8007b44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d015      	beq.n	8007b44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d105      	bne.n	8007b30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d009      	beq.n	8007b44 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 82e3 	beq.w	8008100 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
      }
      return;
 8007b42:	e2dd      	b.n	8008100 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007b44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 8123 	beq.w	8007d94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b52:	4b8d      	ldr	r3, [pc, #564]	@ (8007d88 <HAL_UART_IRQHandler+0x2b8>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b5e:	4b8b      	ldr	r3, [pc, #556]	@ (8007d8c <HAL_UART_IRQHandler+0x2bc>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 8116 	beq.w	8007d94 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d011      	beq.n	8007b98 <HAL_UART_IRQHandler+0xc8>
 8007b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2201      	movs	r2, #1
 8007b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8e:	f043 0201 	orr.w	r2, r3, #1
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d011      	beq.n	8007bc8 <HAL_UART_IRQHandler+0xf8>
 8007ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00b      	beq.n	8007bc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bbe:	f043 0204 	orr.w	r2, r3, #4
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d011      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x128>
 8007bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2204      	movs	r2, #4
 8007be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bee:	f043 0202 	orr.w	r2, r3, #2
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d017      	beq.n	8007c34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c08:	f003 0320 	and.w	r3, r3, #32
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d105      	bne.n	8007c1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c14:	4b5c      	ldr	r3, [pc, #368]	@ (8007d88 <HAL_UART_IRQHandler+0x2b8>)
 8007c16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00b      	beq.n	8007c34 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2208      	movs	r2, #8
 8007c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2a:	f043 0208 	orr.w	r2, r3, #8
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d012      	beq.n	8007c66 <HAL_UART_IRQHandler+0x196>
 8007c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00c      	beq.n	8007c66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c5c:	f043 0220 	orr.w	r2, r3, #32
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8249 	beq.w	8008104 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d013      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c82:	f003 0320 	and.w	r3, r3, #32
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d007      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cba:	2b40      	cmp	r3, #64	@ 0x40
 8007cbc:	d005      	beq.n	8007cca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d054      	beq.n	8007d74 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 f816 	bl	8008cfc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cda:	2b40      	cmp	r3, #64	@ 0x40
 8007cdc:	d146      	bne.n	8007d6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1d9      	bne.n	8007cde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d017      	beq.n	8007d64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d3a:	4a15      	ldr	r2, [pc, #84]	@ (8007d90 <HAL_UART_IRQHandler+0x2c0>)
 8007d3c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fb fe34 	bl	80039b2 <HAL_DMA_Abort_IT>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d019      	beq.n	8007d84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007d5e:	4610      	mov	r0, r2
 8007d60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d62:	e00f      	b.n	8007d84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f9e1 	bl	800812c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6a:	e00b      	b.n	8007d84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f9dd 	bl	800812c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d72:	e007      	b.n	8007d84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f9d9 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007d82:	e1bf      	b.n	8008104 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d84:	bf00      	nop
    return;
 8007d86:	e1bd      	b.n	8008104 <HAL_UART_IRQHandler+0x634>
 8007d88:	10000001 	.word	0x10000001
 8007d8c:	04000120 	.word	0x04000120
 8007d90:	08008dc9 	.word	0x08008dc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	f040 8153 	bne.w	8008044 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da2:	f003 0310 	and.w	r3, r3, #16
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 814c 	beq.w	8008044 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db0:	f003 0310 	and.w	r3, r3, #16
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8145 	beq.w	8008044 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2210      	movs	r2, #16
 8007dc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dcc:	2b40      	cmp	r3, #64	@ 0x40
 8007dce:	f040 80bb 	bne.w	8007f48 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007de0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 818f 	beq.w	8008108 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007df0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007df4:	429a      	cmp	r2, r3
 8007df6:	f080 8187 	bcs.w	8008108 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f040 8087 	bne.w	8007f26 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1da      	bne.n	8007e18 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3308      	adds	r3, #8
 8007e68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e74:	f023 0301 	bic.w	r3, r3, #1
 8007e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3308      	adds	r3, #8
 8007e82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e1      	bne.n	8007e62 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	3308      	adds	r3, #8
 8007ea4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ec2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ec8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e3      	bne.n	8007e9e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ef4:	f023 0310 	bic.w	r3, r3, #16
 8007ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e4      	bne.n	8007ee4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fb fcea 	bl	80038fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2202      	movs	r2, #2
 8007f2a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f8fd 	bl	8008140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f46:	e0df      	b.n	8008108 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 80d1 	beq.w	800810c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007f6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 80cc 	beq.w	800810c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f96:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f98:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e4      	bne.n	8007f74 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3308      	adds	r3, #8
 8007fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3308      	adds	r3, #8
 8007fce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007fd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e1      	bne.n	8007faa <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	60fb      	str	r3, [r7, #12]
   return(result);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0310 	bic.w	r3, r3, #16
 800800e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800801c:	61fb      	str	r3, [r7, #28]
 800801e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	69b9      	ldr	r1, [r7, #24]
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	617b      	str	r3, [r7, #20]
   return(result);
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e4      	bne.n	8007ffa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008036:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f87f 	bl	8008140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008042:	e063      	b.n	800810c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008048:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00e      	beq.n	800806e <HAL_UART_IRQHandler+0x59e>
 8008050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d008      	beq.n	800806e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008064:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f001 fc14 	bl	8009894 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800806c:	e051      	b.n	8008112 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800806e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008076:	2b00      	cmp	r3, #0
 8008078:	d014      	beq.n	80080a4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800807a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800807e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008082:	2b00      	cmp	r3, #0
 8008084:	d105      	bne.n	8008092 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800808a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d008      	beq.n	80080a4 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008096:	2b00      	cmp	r3, #0
 8008098:	d03a      	beq.n	8008110 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
    }
    return;
 80080a2:	e035      	b.n	8008110 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d009      	beq.n	80080c4 <HAL_UART_IRQHandler+0x5f4>
 80080b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fe99 	bl	8008df4 <UART_EndTransmit_IT>
    return;
 80080c2:	e026      	b.n	8008112 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d009      	beq.n	80080e4 <HAL_UART_IRQHandler+0x614>
 80080d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 fbed 	bl	80098bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080e2:	e016      	b.n	8008112 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d010      	beq.n	8008112 <HAL_UART_IRQHandler+0x642>
 80080f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	da0c      	bge.n	8008112 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 fbd5 	bl	80098a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080fe:	e008      	b.n	8008112 <HAL_UART_IRQHandler+0x642>
      return;
 8008100:	bf00      	nop
 8008102:	e006      	b.n	8008112 <HAL_UART_IRQHandler+0x642>
    return;
 8008104:	bf00      	nop
 8008106:	e004      	b.n	8008112 <HAL_UART_IRQHandler+0x642>
      return;
 8008108:	bf00      	nop
 800810a:	e002      	b.n	8008112 <HAL_UART_IRQHandler+0x642>
      return;
 800810c:	bf00      	nop
 800810e:	e000      	b.n	8008112 <HAL_UART_IRQHandler+0x642>
    return;
 8008110:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8008112:	37e8      	adds	r7, #232	@ 0xe8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800815c:	b08c      	sub	sp, #48	@ 0x30
 800815e:	af00      	add	r7, sp, #0
 8008160:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	431a      	orrs	r2, r3
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	431a      	orrs	r2, r3
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	4313      	orrs	r3, r2
 800817e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4baa      	ldr	r3, [pc, #680]	@ (8008430 <UART_SetConfig+0x2d8>)
 8008188:	4013      	ands	r3, r2
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	6812      	ldr	r2, [r2, #0]
 800818e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008190:	430b      	orrs	r3, r1
 8008192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a9f      	ldr	r2, [pc, #636]	@ (8008434 <UART_SetConfig+0x2dc>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d004      	beq.n	80081c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081c0:	4313      	orrs	r3, r2
 80081c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80081ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081d8:	430b      	orrs	r3, r1
 80081da:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e2:	f023 010f 	bic.w	r1, r3, #15
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a90      	ldr	r2, [pc, #576]	@ (8008438 <UART_SetConfig+0x2e0>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d125      	bne.n	8008248 <UART_SetConfig+0xf0>
 80081fc:	4b8f      	ldr	r3, [pc, #572]	@ (800843c <UART_SetConfig+0x2e4>)
 80081fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	2b03      	cmp	r3, #3
 8008208:	d81a      	bhi.n	8008240 <UART_SetConfig+0xe8>
 800820a:	a201      	add	r2, pc, #4	@ (adr r2, 8008210 <UART_SetConfig+0xb8>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008221 	.word	0x08008221
 8008214:	08008231 	.word	0x08008231
 8008218:	08008229 	.word	0x08008229
 800821c:	08008239 	.word	0x08008239
 8008220:	2301      	movs	r3, #1
 8008222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008226:	e116      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008228:	2302      	movs	r3, #2
 800822a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800822e:	e112      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008230:	2304      	movs	r3, #4
 8008232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008236:	e10e      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008238:	2308      	movs	r3, #8
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800823e:	e10a      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008240:	2310      	movs	r3, #16
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008246:	e106      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a7c      	ldr	r2, [pc, #496]	@ (8008440 <UART_SetConfig+0x2e8>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d138      	bne.n	80082c4 <UART_SetConfig+0x16c>
 8008252:	4b7a      	ldr	r3, [pc, #488]	@ (800843c <UART_SetConfig+0x2e4>)
 8008254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008258:	f003 030c 	and.w	r3, r3, #12
 800825c:	2b0c      	cmp	r3, #12
 800825e:	d82d      	bhi.n	80082bc <UART_SetConfig+0x164>
 8008260:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <UART_SetConfig+0x110>)
 8008262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008266:	bf00      	nop
 8008268:	0800829d 	.word	0x0800829d
 800826c:	080082bd 	.word	0x080082bd
 8008270:	080082bd 	.word	0x080082bd
 8008274:	080082bd 	.word	0x080082bd
 8008278:	080082ad 	.word	0x080082ad
 800827c:	080082bd 	.word	0x080082bd
 8008280:	080082bd 	.word	0x080082bd
 8008284:	080082bd 	.word	0x080082bd
 8008288:	080082a5 	.word	0x080082a5
 800828c:	080082bd 	.word	0x080082bd
 8008290:	080082bd 	.word	0x080082bd
 8008294:	080082bd 	.word	0x080082bd
 8008298:	080082b5 	.word	0x080082b5
 800829c:	2300      	movs	r3, #0
 800829e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a2:	e0d8      	b.n	8008456 <UART_SetConfig+0x2fe>
 80082a4:	2302      	movs	r3, #2
 80082a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082aa:	e0d4      	b.n	8008456 <UART_SetConfig+0x2fe>
 80082ac:	2304      	movs	r3, #4
 80082ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b2:	e0d0      	b.n	8008456 <UART_SetConfig+0x2fe>
 80082b4:	2308      	movs	r3, #8
 80082b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ba:	e0cc      	b.n	8008456 <UART_SetConfig+0x2fe>
 80082bc:	2310      	movs	r3, #16
 80082be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082c2:	e0c8      	b.n	8008456 <UART_SetConfig+0x2fe>
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a5e      	ldr	r2, [pc, #376]	@ (8008444 <UART_SetConfig+0x2ec>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d125      	bne.n	800831a <UART_SetConfig+0x1c2>
 80082ce:	4b5b      	ldr	r3, [pc, #364]	@ (800843c <UART_SetConfig+0x2e4>)
 80082d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80082d8:	2b30      	cmp	r3, #48	@ 0x30
 80082da:	d016      	beq.n	800830a <UART_SetConfig+0x1b2>
 80082dc:	2b30      	cmp	r3, #48	@ 0x30
 80082de:	d818      	bhi.n	8008312 <UART_SetConfig+0x1ba>
 80082e0:	2b20      	cmp	r3, #32
 80082e2:	d00a      	beq.n	80082fa <UART_SetConfig+0x1a2>
 80082e4:	2b20      	cmp	r3, #32
 80082e6:	d814      	bhi.n	8008312 <UART_SetConfig+0x1ba>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <UART_SetConfig+0x19a>
 80082ec:	2b10      	cmp	r3, #16
 80082ee:	d008      	beq.n	8008302 <UART_SetConfig+0x1aa>
 80082f0:	e00f      	b.n	8008312 <UART_SetConfig+0x1ba>
 80082f2:	2300      	movs	r3, #0
 80082f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082f8:	e0ad      	b.n	8008456 <UART_SetConfig+0x2fe>
 80082fa:	2302      	movs	r3, #2
 80082fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008300:	e0a9      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008302:	2304      	movs	r3, #4
 8008304:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008308:	e0a5      	b.n	8008456 <UART_SetConfig+0x2fe>
 800830a:	2308      	movs	r3, #8
 800830c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008310:	e0a1      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008312:	2310      	movs	r3, #16
 8008314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008318:	e09d      	b.n	8008456 <UART_SetConfig+0x2fe>
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a4a      	ldr	r2, [pc, #296]	@ (8008448 <UART_SetConfig+0x2f0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d125      	bne.n	8008370 <UART_SetConfig+0x218>
 8008324:	4b45      	ldr	r3, [pc, #276]	@ (800843c <UART_SetConfig+0x2e4>)
 8008326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800832a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800832e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008330:	d016      	beq.n	8008360 <UART_SetConfig+0x208>
 8008332:	2bc0      	cmp	r3, #192	@ 0xc0
 8008334:	d818      	bhi.n	8008368 <UART_SetConfig+0x210>
 8008336:	2b80      	cmp	r3, #128	@ 0x80
 8008338:	d00a      	beq.n	8008350 <UART_SetConfig+0x1f8>
 800833a:	2b80      	cmp	r3, #128	@ 0x80
 800833c:	d814      	bhi.n	8008368 <UART_SetConfig+0x210>
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <UART_SetConfig+0x1f0>
 8008342:	2b40      	cmp	r3, #64	@ 0x40
 8008344:	d008      	beq.n	8008358 <UART_SetConfig+0x200>
 8008346:	e00f      	b.n	8008368 <UART_SetConfig+0x210>
 8008348:	2300      	movs	r3, #0
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800834e:	e082      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008350:	2302      	movs	r3, #2
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008356:	e07e      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008358:	2304      	movs	r3, #4
 800835a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800835e:	e07a      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008360:	2308      	movs	r3, #8
 8008362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008366:	e076      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008368:	2310      	movs	r3, #16
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800836e:	e072      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a35      	ldr	r2, [pc, #212]	@ (800844c <UART_SetConfig+0x2f4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d12a      	bne.n	80083d0 <UART_SetConfig+0x278>
 800837a:	4b30      	ldr	r3, [pc, #192]	@ (800843c <UART_SetConfig+0x2e4>)
 800837c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008384:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008388:	d01a      	beq.n	80083c0 <UART_SetConfig+0x268>
 800838a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800838e:	d81b      	bhi.n	80083c8 <UART_SetConfig+0x270>
 8008390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008394:	d00c      	beq.n	80083b0 <UART_SetConfig+0x258>
 8008396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800839a:	d815      	bhi.n	80083c8 <UART_SetConfig+0x270>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <UART_SetConfig+0x250>
 80083a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083a4:	d008      	beq.n	80083b8 <UART_SetConfig+0x260>
 80083a6:	e00f      	b.n	80083c8 <UART_SetConfig+0x270>
 80083a8:	2300      	movs	r3, #0
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ae:	e052      	b.n	8008456 <UART_SetConfig+0x2fe>
 80083b0:	2302      	movs	r3, #2
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083b6:	e04e      	b.n	8008456 <UART_SetConfig+0x2fe>
 80083b8:	2304      	movs	r3, #4
 80083ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083be:	e04a      	b.n	8008456 <UART_SetConfig+0x2fe>
 80083c0:	2308      	movs	r3, #8
 80083c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083c6:	e046      	b.n	8008456 <UART_SetConfig+0x2fe>
 80083c8:	2310      	movs	r3, #16
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ce:	e042      	b.n	8008456 <UART_SetConfig+0x2fe>
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a17      	ldr	r2, [pc, #92]	@ (8008434 <UART_SetConfig+0x2dc>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d13a      	bne.n	8008450 <UART_SetConfig+0x2f8>
 80083da:	4b18      	ldr	r3, [pc, #96]	@ (800843c <UART_SetConfig+0x2e4>)
 80083dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80083e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083e8:	d01a      	beq.n	8008420 <UART_SetConfig+0x2c8>
 80083ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083ee:	d81b      	bhi.n	8008428 <UART_SetConfig+0x2d0>
 80083f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083f4:	d00c      	beq.n	8008410 <UART_SetConfig+0x2b8>
 80083f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083fa:	d815      	bhi.n	8008428 <UART_SetConfig+0x2d0>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d003      	beq.n	8008408 <UART_SetConfig+0x2b0>
 8008400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008404:	d008      	beq.n	8008418 <UART_SetConfig+0x2c0>
 8008406:	e00f      	b.n	8008428 <UART_SetConfig+0x2d0>
 8008408:	2300      	movs	r3, #0
 800840a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800840e:	e022      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008410:	2302      	movs	r3, #2
 8008412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008416:	e01e      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008418:	2304      	movs	r3, #4
 800841a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800841e:	e01a      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008420:	2308      	movs	r3, #8
 8008422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008426:	e016      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008428:	2310      	movs	r3, #16
 800842a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800842e:	e012      	b.n	8008456 <UART_SetConfig+0x2fe>
 8008430:	cfff69f3 	.word	0xcfff69f3
 8008434:	40008000 	.word	0x40008000
 8008438:	40013800 	.word	0x40013800
 800843c:	40021000 	.word	0x40021000
 8008440:	40004400 	.word	0x40004400
 8008444:	40004800 	.word	0x40004800
 8008448:	40004c00 	.word	0x40004c00
 800844c:	40005000 	.word	0x40005000
 8008450:	2310      	movs	r3, #16
 8008452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4aae      	ldr	r2, [pc, #696]	@ (8008714 <UART_SetConfig+0x5bc>)
 800845c:	4293      	cmp	r3, r2
 800845e:	f040 8097 	bne.w	8008590 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008462:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008466:	2b08      	cmp	r3, #8
 8008468:	d823      	bhi.n	80084b2 <UART_SetConfig+0x35a>
 800846a:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <UART_SetConfig+0x318>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	08008495 	.word	0x08008495
 8008474:	080084b3 	.word	0x080084b3
 8008478:	0800849d 	.word	0x0800849d
 800847c:	080084b3 	.word	0x080084b3
 8008480:	080084a3 	.word	0x080084a3
 8008484:	080084b3 	.word	0x080084b3
 8008488:	080084b3 	.word	0x080084b3
 800848c:	080084b3 	.word	0x080084b3
 8008490:	080084ab 	.word	0x080084ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008494:	f7fd fef0 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
 8008498:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800849a:	e010      	b.n	80084be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800849c:	4b9e      	ldr	r3, [pc, #632]	@ (8008718 <UART_SetConfig+0x5c0>)
 800849e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084a0:	e00d      	b.n	80084be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084a2:	f7fd fe51 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 80084a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084a8:	e009      	b.n	80084be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084b0:	e005      	b.n	80084be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 8130 	beq.w	8008726 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ca:	4a94      	ldr	r2, [pc, #592]	@ (800871c <UART_SetConfig+0x5c4>)
 80084cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80084d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	4613      	mov	r3, r2
 80084e0:	005b      	lsls	r3, r3, #1
 80084e2:	4413      	add	r3, r2
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d305      	bcc.n	80084f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d903      	bls.n	80084fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084fc:	e113      	b.n	8008726 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	2200      	movs	r2, #0
 8008502:	60bb      	str	r3, [r7, #8]
 8008504:	60fa      	str	r2, [r7, #12]
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850a:	4a84      	ldr	r2, [pc, #528]	@ (800871c <UART_SetConfig+0x5c4>)
 800850c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008510:	b29b      	uxth	r3, r3
 8008512:	2200      	movs	r2, #0
 8008514:	603b      	str	r3, [r7, #0]
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800851c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008520:	f7f7 fe6c 	bl	80001fc <__aeabi_uldivmod>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4610      	mov	r0, r2
 800852a:	4619      	mov	r1, r3
 800852c:	f04f 0200 	mov.w	r2, #0
 8008530:	f04f 0300 	mov.w	r3, #0
 8008534:	020b      	lsls	r3, r1, #8
 8008536:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800853a:	0202      	lsls	r2, r0, #8
 800853c:	6979      	ldr	r1, [r7, #20]
 800853e:	6849      	ldr	r1, [r1, #4]
 8008540:	0849      	lsrs	r1, r1, #1
 8008542:	2000      	movs	r0, #0
 8008544:	460c      	mov	r4, r1
 8008546:	4605      	mov	r5, r0
 8008548:	eb12 0804 	adds.w	r8, r2, r4
 800854c:	eb43 0905 	adc.w	r9, r3, r5
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	469a      	mov	sl, r3
 8008558:	4693      	mov	fp, r2
 800855a:	4652      	mov	r2, sl
 800855c:	465b      	mov	r3, fp
 800855e:	4640      	mov	r0, r8
 8008560:	4649      	mov	r1, r9
 8008562:	f7f7 fe4b 	bl	80001fc <__aeabi_uldivmod>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	4613      	mov	r3, r2
 800856c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008574:	d308      	bcc.n	8008588 <UART_SetConfig+0x430>
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800857c:	d204      	bcs.n	8008588 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6a3a      	ldr	r2, [r7, #32]
 8008584:	60da      	str	r2, [r3, #12]
 8008586:	e0ce      	b.n	8008726 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800858e:	e0ca      	b.n	8008726 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008598:	d166      	bne.n	8008668 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800859a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800859e:	2b08      	cmp	r3, #8
 80085a0:	d827      	bhi.n	80085f2 <UART_SetConfig+0x49a>
 80085a2:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <UART_SetConfig+0x450>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	080085cd 	.word	0x080085cd
 80085ac:	080085d5 	.word	0x080085d5
 80085b0:	080085dd 	.word	0x080085dd
 80085b4:	080085f3 	.word	0x080085f3
 80085b8:	080085e3 	.word	0x080085e3
 80085bc:	080085f3 	.word	0x080085f3
 80085c0:	080085f3 	.word	0x080085f3
 80085c4:	080085f3 	.word	0x080085f3
 80085c8:	080085eb 	.word	0x080085eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085cc:	f7fd fe54 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
 80085d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085d2:	e014      	b.n	80085fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085d4:	f7fd fe66 	bl	80062a4 <HAL_RCC_GetPCLK2Freq>
 80085d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085da:	e010      	b.n	80085fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085dc:	4b4e      	ldr	r3, [pc, #312]	@ (8008718 <UART_SetConfig+0x5c0>)
 80085de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085e0:	e00d      	b.n	80085fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085e2:	f7fd fdb1 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 80085e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085e8:	e009      	b.n	80085fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085f0:	e005      	b.n	80085fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 8090 	beq.w	8008726 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860a:	4a44      	ldr	r2, [pc, #272]	@ (800871c <UART_SetConfig+0x5c4>)
 800860c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008610:	461a      	mov	r2, r3
 8008612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008614:	fbb3 f3f2 	udiv	r3, r3, r2
 8008618:	005a      	lsls	r2, r3, #1
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	085b      	lsrs	r3, r3, #1
 8008620:	441a      	add	r2, r3
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	fbb2 f3f3 	udiv	r3, r2, r3
 800862a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	2b0f      	cmp	r3, #15
 8008630:	d916      	bls.n	8008660 <UART_SetConfig+0x508>
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008638:	d212      	bcs.n	8008660 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	b29b      	uxth	r3, r3
 800863e:	f023 030f 	bic.w	r3, r3, #15
 8008642:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	085b      	lsrs	r3, r3, #1
 8008648:	b29b      	uxth	r3, r3
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	b29a      	uxth	r2, r3
 8008650:	8bfb      	ldrh	r3, [r7, #30]
 8008652:	4313      	orrs	r3, r2
 8008654:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	8bfa      	ldrh	r2, [r7, #30]
 800865c:	60da      	str	r2, [r3, #12]
 800865e:	e062      	b.n	8008726 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008666:	e05e      	b.n	8008726 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008668:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800866c:	2b08      	cmp	r3, #8
 800866e:	d828      	bhi.n	80086c2 <UART_SetConfig+0x56a>
 8008670:	a201      	add	r2, pc, #4	@ (adr r2, 8008678 <UART_SetConfig+0x520>)
 8008672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008676:	bf00      	nop
 8008678:	0800869d 	.word	0x0800869d
 800867c:	080086a5 	.word	0x080086a5
 8008680:	080086ad 	.word	0x080086ad
 8008684:	080086c3 	.word	0x080086c3
 8008688:	080086b3 	.word	0x080086b3
 800868c:	080086c3 	.word	0x080086c3
 8008690:	080086c3 	.word	0x080086c3
 8008694:	080086c3 	.word	0x080086c3
 8008698:	080086bb 	.word	0x080086bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800869c:	f7fd fdec 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
 80086a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086a2:	e014      	b.n	80086ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086a4:	f7fd fdfe 	bl	80062a4 <HAL_RCC_GetPCLK2Freq>
 80086a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086aa:	e010      	b.n	80086ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008718 <UART_SetConfig+0x5c0>)
 80086ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086b0:	e00d      	b.n	80086ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086b2:	f7fd fd49 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 80086b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086b8:	e009      	b.n	80086ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086c0:	e005      	b.n	80086ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80086cc:	bf00      	nop
    }

    if (pclk != 0U)
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d028      	beq.n	8008726 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d8:	4a10      	ldr	r2, [pc, #64]	@ (800871c <UART_SetConfig+0x5c4>)
 80086da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086de:	461a      	mov	r2, r3
 80086e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	085b      	lsrs	r3, r3, #1
 80086ec:	441a      	add	r2, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	2b0f      	cmp	r3, #15
 80086fc:	d910      	bls.n	8008720 <UART_SetConfig+0x5c8>
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008704:	d20c      	bcs.n	8008720 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	b29a      	uxth	r2, r3
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	60da      	str	r2, [r3, #12]
 8008710:	e009      	b.n	8008726 <UART_SetConfig+0x5ce>
 8008712:	bf00      	nop
 8008714:	40008000 	.word	0x40008000
 8008718:	00f42400 	.word	0x00f42400
 800871c:	0800dd60 	.word	0x0800dd60
      }
      else
      {
        ret = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2201      	movs	r2, #1
 800872a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2201      	movs	r2, #1
 8008732:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2200      	movs	r2, #0
 800873a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2200      	movs	r2, #0
 8008740:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008742:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008746:	4618      	mov	r0, r3
 8008748:	3730      	adds	r7, #48	@ 0x30
 800874a:	46bd      	mov	sp, r7
 800874c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800875c:	f003 0308 	and.w	r3, r3, #8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00a      	beq.n	800877a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	430a      	orrs	r2, r1
 800879a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00a      	beq.n	80087be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c2:	f003 0304 	and.w	r3, r3, #4
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e4:	f003 0310 	and.w	r3, r3, #16
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00a      	beq.n	8008802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008806:	f003 0320 	and.w	r3, r3, #32
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800882c:	2b00      	cmp	r3, #0
 800882e:	d01a      	beq.n	8008866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800884a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800884e:	d10a      	bne.n	8008866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00a      	beq.n	8008888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	605a      	str	r2, [r3, #4]
  }
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b098      	sub	sp, #96	@ 0x60
 8008898:	af02      	add	r7, sp, #8
 800889a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088a4:	f7f9 f9ea 	bl	8001c7c <HAL_GetTick>
 80088a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0308 	and.w	r3, r3, #8
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d12f      	bne.n	8008918 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088c0:	2200      	movs	r2, #0
 80088c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f88e 	bl	80089e8 <UART_WaitOnFlagUntilTimeout>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d022      	beq.n	8008918 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80088f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e6      	bne.n	80088d2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2220      	movs	r2, #32
 8008908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e063      	b.n	80089e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b04      	cmp	r3, #4
 8008924:	d149      	bne.n	80089ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008926:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800892e:	2200      	movs	r2, #0
 8008930:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f857 	bl	80089e8 <UART_WaitOnFlagUntilTimeout>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d03c      	beq.n	80089ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	623b      	str	r3, [r7, #32]
   return(result);
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008954:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800895e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008960:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800896c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e6      	bne.n	8008940 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3308      	adds	r3, #8
 8008978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	60fb      	str	r3, [r7, #12]
   return(result);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f023 0301 	bic.w	r3, r3, #1
 8008988:	64bb      	str	r3, [r7, #72]	@ 0x48
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3308      	adds	r3, #8
 8008990:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008992:	61fa      	str	r2, [r7, #28]
 8008994:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	69b9      	ldr	r1, [r7, #24]
 8008998:	69fa      	ldr	r2, [r7, #28]
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	617b      	str	r3, [r7, #20]
   return(result);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e5      	bne.n	8008972 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e012      	b.n	80089e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2220      	movs	r2, #32
 80089be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3758      	adds	r7, #88	@ 0x58
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	4613      	mov	r3, r2
 80089f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089f8:	e049      	b.n	8008a8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a00:	d045      	beq.n	8008a8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a02:	f7f9 f93b 	bl	8001c7c <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	69ba      	ldr	r2, [r7, #24]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d302      	bcc.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e048      	b.n	8008aae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0304 	and.w	r3, r3, #4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d031      	beq.n	8008a8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	f003 0308 	and.w	r3, r3, #8
 8008a34:	2b08      	cmp	r3, #8
 8008a36:	d110      	bne.n	8008a5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2208      	movs	r2, #8
 8008a3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 f95b 	bl	8008cfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2208      	movs	r2, #8
 8008a4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e029      	b.n	8008aae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a68:	d111      	bne.n	8008a8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 f941 	bl	8008cfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e00f      	b.n	8008aae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	69da      	ldr	r2, [r3, #28]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4013      	ands	r3, r2
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	bf0c      	ite	eq
 8008a9e:	2301      	moveq	r3, #1
 8008aa0:	2300      	movne	r3, #0
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d0a6      	beq.n	80089fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b0a3      	sub	sp, #140	@ 0x8c
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	88fa      	ldrh	r2, [r7, #6]
 8008ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	88fa      	ldrh	r2, [r7, #6]
 8008ad8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aea:	d10e      	bne.n	8008b0a <UART_Start_Receive_IT+0x52>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d105      	bne.n	8008b00 <UART_Start_Receive_IT+0x48>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008afa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008afe:	e02d      	b.n	8008b5c <UART_Start_Receive_IT+0xa4>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	22ff      	movs	r2, #255	@ 0xff
 8008b04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b08:	e028      	b.n	8008b5c <UART_Start_Receive_IT+0xa4>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10d      	bne.n	8008b2e <UART_Start_Receive_IT+0x76>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d104      	bne.n	8008b24 <UART_Start_Receive_IT+0x6c>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	22ff      	movs	r2, #255	@ 0xff
 8008b1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b22:	e01b      	b.n	8008b5c <UART_Start_Receive_IT+0xa4>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	227f      	movs	r2, #127	@ 0x7f
 8008b28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b2c:	e016      	b.n	8008b5c <UART_Start_Receive_IT+0xa4>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b36:	d10d      	bne.n	8008b54 <UART_Start_Receive_IT+0x9c>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d104      	bne.n	8008b4a <UART_Start_Receive_IT+0x92>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	227f      	movs	r2, #127	@ 0x7f
 8008b44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b48:	e008      	b.n	8008b5c <UART_Start_Receive_IT+0xa4>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	223f      	movs	r2, #63	@ 0x3f
 8008b4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b52:	e003      	b.n	8008b5c <UART_Start_Receive_IT+0xa4>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2222      	movs	r2, #34	@ 0x22
 8008b68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3308      	adds	r3, #8
 8008b72:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b76:	e853 3f00 	ldrex	r3, [r3]
 8008b7a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008b7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b7e:	f043 0301 	orr.w	r3, r3, #1
 8008b82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008b90:	673a      	str	r2, [r7, #112]	@ 0x70
 8008b92:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008b96:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008b98:	e841 2300 	strex	r3, r2, [r1]
 8008b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008b9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e3      	bne.n	8008b6c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bac:	d14f      	bne.n	8008c4e <UART_Start_Receive_IT+0x196>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bb4:	88fa      	ldrh	r2, [r7, #6]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d349      	bcc.n	8008c4e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bc2:	d107      	bne.n	8008bd4 <UART_Start_Receive_IT+0x11c>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d103      	bne.n	8008bd4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4a47      	ldr	r2, [pc, #284]	@ (8008cec <UART_Start_Receive_IT+0x234>)
 8008bd0:	675a      	str	r2, [r3, #116]	@ 0x74
 8008bd2:	e002      	b.n	8008bda <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4a46      	ldr	r2, [pc, #280]	@ (8008cf0 <UART_Start_Receive_IT+0x238>)
 8008bd8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01a      	beq.n	8008c18 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c06:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008c0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008c0c:	e841 2300 	strex	r3, r2, [r1]
 8008c10:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e4      	bne.n	8008be2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3308      	adds	r3, #8
 8008c36:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008c38:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008c3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c40:	e841 2300 	strex	r3, r2, [r1]
 8008c44:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e5      	bne.n	8008c18 <UART_Start_Receive_IT+0x160>
 8008c4c:	e046      	b.n	8008cdc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c56:	d107      	bne.n	8008c68 <UART_Start_Receive_IT+0x1b0>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d103      	bne.n	8008c68 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4a24      	ldr	r2, [pc, #144]	@ (8008cf4 <UART_Start_Receive_IT+0x23c>)
 8008c64:	675a      	str	r2, [r3, #116]	@ 0x74
 8008c66:	e002      	b.n	8008c6e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4a23      	ldr	r2, [pc, #140]	@ (8008cf8 <UART_Start_Receive_IT+0x240>)
 8008c6c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d019      	beq.n	8008caa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c86:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008c8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	461a      	mov	r2, r3
 8008c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c96:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c9c:	e841 2300 	strex	r3, r2, [r1]
 8008ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1e6      	bne.n	8008c76 <UART_Start_Receive_IT+0x1be>
 8008ca8:	e018      	b.n	8008cdc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	e853 3f00 	ldrex	r3, [r3]
 8008cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f043 0320 	orr.w	r3, r3, #32
 8008cbe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008cc8:	623b      	str	r3, [r7, #32]
 8008cca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	69f9      	ldr	r1, [r7, #28]
 8008cce:	6a3a      	ldr	r2, [r7, #32]
 8008cd0:	e841 2300 	strex	r3, r2, [r1]
 8008cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e6      	bne.n	8008caa <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	378c      	adds	r7, #140	@ 0x8c
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	08009529 	.word	0x08009529
 8008cf0:	080091c5 	.word	0x080091c5
 8008cf4:	08009009 	.word	0x08009009
 8008cf8:	08008e4d 	.word	0x08008e4d

08008cfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b095      	sub	sp, #84	@ 0x54
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0c:	e853 3f00 	ldrex	r3, [r3]
 8008d10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d22:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d2a:	e841 2300 	strex	r3, r2, [r1]
 8008d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e6      	bne.n	8008d04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	e853 3f00 	ldrex	r3, [r3]
 8008d44:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3308      	adds	r3, #8
 8008d58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e3      	bne.n	8008d36 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d118      	bne.n	8008da8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	e853 3f00 	ldrex	r3, [r3]
 8008d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f023 0310 	bic.w	r3, r3, #16
 8008d8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	461a      	mov	r2, r3
 8008d92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d94:	61bb      	str	r3, [r7, #24]
 8008d96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d98:	6979      	ldr	r1, [r7, #20]
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	e841 2300 	strex	r3, r2, [r1]
 8008da0:	613b      	str	r3, [r7, #16]
   return(result);
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1e6      	bne.n	8008d76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2220      	movs	r2, #32
 8008dac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008dbc:	bf00      	nop
 8008dbe:	3754      	adds	r7, #84	@ 0x54
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f7ff f9a0 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dec:	bf00      	nop
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e10:	61fb      	str	r3, [r7, #28]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	61bb      	str	r3, [r7, #24]
 8008e1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1e:	6979      	ldr	r1, [r7, #20]
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	e841 2300 	strex	r3, r2, [r1]
 8008e26:	613b      	str	r3, [r7, #16]
   return(result);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e6      	bne.n	8008dfc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2220      	movs	r2, #32
 8008e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff f96b 	bl	8008118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e42:	bf00      	nop
 8008e44:	3720      	adds	r7, #32
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
	...

08008e4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b09c      	sub	sp, #112	@ 0x70
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e64:	2b22      	cmp	r3, #34	@ 0x22
 8008e66:	f040 80be 	bne.w	8008fe6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008e70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008e78:	b2d9      	uxtb	r1, r3
 8008e7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e84:	400a      	ands	r2, r1
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f040 80a3 	bne.w	8008ffa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ed2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ed4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ed8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e6      	bne.n	8008eb4 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3308      	adds	r3, #8
 8008eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef8:	f023 0301 	bic.w	r3, r3, #1
 8008efc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3308      	adds	r3, #8
 8008f04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008f06:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e5      	bne.n	8008ee6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a34      	ldr	r2, [pc, #208]	@ (8009004 <UART_RxISR_8BIT+0x1b8>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d01f      	beq.n	8008f78 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d018      	beq.n	8008f78 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4e:	e853 3f00 	ldrex	r3, [r3]
 8008f52:	623b      	str	r3, [r7, #32]
   return(result);
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	461a      	mov	r2, r3
 8008f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f6c:	e841 2300 	strex	r3, r2, [r1]
 8008f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e6      	bne.n	8008f46 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d12e      	bne.n	8008fde <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	e853 3f00 	ldrex	r3, [r3]
 8008f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f023 0310 	bic.w	r3, r3, #16
 8008f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fa4:	61fb      	str	r3, [r7, #28]
 8008fa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa8:	69b9      	ldr	r1, [r7, #24]
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	e841 2300 	strex	r3, r2, [r1]
 8008fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e6      	bne.n	8008f86 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	f003 0310 	and.w	r3, r3, #16
 8008fc2:	2b10      	cmp	r3, #16
 8008fc4:	d103      	bne.n	8008fce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2210      	movs	r2, #16
 8008fcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff f8b2 	bl	8008140 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fdc:	e00d      	b.n	8008ffa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7f8 f886 	bl	80010f0 <HAL_UART_RxCpltCallback>
}
 8008fe4:	e009      	b.n	8008ffa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	8b1b      	ldrh	r3, [r3, #24]
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0208 	orr.w	r2, r2, #8
 8008ff6:	b292      	uxth	r2, r2
 8008ff8:	831a      	strh	r2, [r3, #24]
}
 8008ffa:	bf00      	nop
 8008ffc:	3770      	adds	r7, #112	@ 0x70
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	40008000 	.word	0x40008000

08009008 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b09c      	sub	sp, #112	@ 0x70
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009016:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009020:	2b22      	cmp	r3, #34	@ 0x22
 8009022:	f040 80be 	bne.w	80091a2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800902c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009034:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009036:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800903a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800903e:	4013      	ands	r3, r2
 8009040:	b29a      	uxth	r2, r3
 8009042:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009044:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800904a:	1c9a      	adds	r2, r3, #2
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009056:	b29b      	uxth	r3, r3
 8009058:	3b01      	subs	r3, #1
 800905a:	b29a      	uxth	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009068:	b29b      	uxth	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	f040 80a3 	bne.w	80091b6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800907e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009084:	667b      	str	r3, [r7, #100]	@ 0x64
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800908e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009090:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009094:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800909c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e6      	bne.n	8009070 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3308      	adds	r3, #8
 80090a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	f023 0301 	bic.w	r3, r3, #1
 80090b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3308      	adds	r3, #8
 80090c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80090c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80090c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e5      	bne.n	80090a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2220      	movs	r2, #32
 80090da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a34      	ldr	r2, [pc, #208]	@ (80091c0 <UART_RxISR_16BIT+0x1b8>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d01f      	beq.n	8009134 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d018      	beq.n	8009134 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009116:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009122:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e6      	bne.n	8009102 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009138:	2b01      	cmp	r3, #1
 800913a:	d12e      	bne.n	800919a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f023 0310 	bic.w	r3, r3, #16
 8009156:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009160:	61bb      	str	r3, [r7, #24]
 8009162:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	6979      	ldr	r1, [r7, #20]
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	613b      	str	r3, [r7, #16]
   return(result);
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e6      	bne.n	8009142 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	f003 0310 	and.w	r3, r3, #16
 800917e:	2b10      	cmp	r3, #16
 8009180:	d103      	bne.n	800918a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2210      	movs	r2, #16
 8009188:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009190:	4619      	mov	r1, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7fe ffd4 	bl	8008140 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009198:	e00d      	b.n	80091b6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7f7 ffa8 	bl	80010f0 <HAL_UART_RxCpltCallback>
}
 80091a0:	e009      	b.n	80091b6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	8b1b      	ldrh	r3, [r3, #24]
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f042 0208 	orr.w	r2, r2, #8
 80091b2:	b292      	uxth	r2, r2
 80091b4:	831a      	strh	r2, [r3, #24]
}
 80091b6:	bf00      	nop
 80091b8:	3770      	adds	r7, #112	@ 0x70
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	40008000 	.word	0x40008000

080091c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b0ac      	sub	sp, #176	@ 0xb0
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80091d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091fa:	2b22      	cmp	r3, #34	@ 0x22
 80091fc:	f040 8182 	bne.w	8009504 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009206:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800920a:	e125      	b.n	8009458 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009212:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009216:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800921a:	b2d9      	uxtb	r1, r3
 800921c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009220:	b2da      	uxtb	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009226:	400a      	ands	r2, r1
 8009228:	b2d2      	uxtb	r2, r2
 800922a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009230:	1c5a      	adds	r2, r3, #1
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800923c:	b29b      	uxth	r3, r3
 800923e:	3b01      	subs	r3, #1
 8009240:	b29a      	uxth	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009256:	f003 0307 	and.w	r3, r3, #7
 800925a:	2b00      	cmp	r3, #0
 800925c:	d053      	beq.n	8009306 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800925e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d011      	beq.n	800928e <UART_RxISR_8BIT_FIFOEN+0xca>
 800926a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800926e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00b      	beq.n	800928e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2201      	movs	r2, #1
 800927c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009284:	f043 0201 	orr.w	r2, r3, #1
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800928e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d011      	beq.n	80092be <UART_RxISR_8BIT_FIFOEN+0xfa>
 800929a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00b      	beq.n	80092be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2202      	movs	r2, #2
 80092ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b4:	f043 0204 	orr.w	r2, r3, #4
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092c2:	f003 0304 	and.w	r3, r3, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d011      	beq.n	80092ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 80092ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00b      	beq.n	80092ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2204      	movs	r2, #4
 80092dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092e4:	f043 0202 	orr.w	r2, r3, #2
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d006      	beq.n	8009306 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7fe ff17 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800930c:	b29b      	uxth	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	f040 80a2 	bne.w	8009458 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009336:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009338:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800933c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009344:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e4      	bne.n	8009314 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800935a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800935c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009360:	f023 0301 	bic.w	r3, r3, #1
 8009364:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3308      	adds	r3, #8
 800936e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009372:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009374:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009376:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009378:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800937a:	e841 2300 	strex	r3, r2, [r1]
 800937e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009380:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1e1      	bne.n	800934a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2220      	movs	r2, #32
 800938a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a60      	ldr	r2, [pc, #384]	@ (8009520 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d021      	beq.n	80093e8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d01a      	beq.n	80093e8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093ba:	e853 3f00 	ldrex	r3, [r3]
 80093be:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80093c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	461a      	mov	r2, r3
 80093d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80093d6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80093da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80093e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e4      	bne.n	80093b2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d130      	bne.n	8009452 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093fe:	e853 3f00 	ldrex	r3, [r3]
 8009402:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009406:	f023 0310 	bic.w	r3, r3, #16
 800940a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009418:	643b      	str	r3, [r7, #64]	@ 0x40
 800941a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800941e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009420:	e841 2300 	strex	r3, r2, [r1]
 8009424:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e4      	bne.n	80093f6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	f003 0310 	and.w	r3, r3, #16
 8009436:	2b10      	cmp	r3, #16
 8009438:	d103      	bne.n	8009442 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2210      	movs	r2, #16
 8009440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7fe fe78 	bl	8008140 <HAL_UARTEx_RxEventCallback>
 8009450:	e002      	b.n	8009458 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7f7 fe4c 	bl	80010f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009458:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800945c:	2b00      	cmp	r3, #0
 800945e:	d006      	beq.n	800946e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009464:	f003 0320 	and.w	r3, r3, #32
 8009468:	2b00      	cmp	r3, #0
 800946a:	f47f aecf 	bne.w	800920c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009474:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009478:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800947c:	2b00      	cmp	r3, #0
 800947e:	d04b      	beq.n	8009518 <UART_RxISR_8BIT_FIFOEN+0x354>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009486:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800948a:	429a      	cmp	r2, r3
 800948c:	d244      	bcs.n	8009518 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3308      	adds	r3, #8
 8009494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	e853 3f00 	ldrex	r3, [r3]
 800949c:	61fb      	str	r3, [r7, #28]
   return(result);
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3308      	adds	r3, #8
 80094ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80094b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e3      	bne.n	800948e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a16      	ldr	r2, [pc, #88]	@ (8009524 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80094ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f043 0320 	orr.w	r3, r3, #32
 80094e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	461a      	mov	r2, r3
 80094ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80094ee:	61bb      	str	r3, [r7, #24]
 80094f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f2:	6979      	ldr	r1, [r7, #20]
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	613b      	str	r3, [r7, #16]
   return(result);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1e4      	bne.n	80094cc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009502:	e009      	b.n	8009518 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	8b1b      	ldrh	r3, [r3, #24]
 800950a:	b29a      	uxth	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f042 0208 	orr.w	r2, r2, #8
 8009514:	b292      	uxth	r2, r2
 8009516:	831a      	strh	r2, [r3, #24]
}
 8009518:	bf00      	nop
 800951a:	37b0      	adds	r7, #176	@ 0xb0
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	40008000 	.word	0x40008000
 8009524:	08008e4d 	.word	0x08008e4d

08009528 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b0ae      	sub	sp, #184	@ 0xb8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009536:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800955e:	2b22      	cmp	r3, #34	@ 0x22
 8009560:	f040 8186 	bne.w	8009870 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800956a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800956e:	e129      	b.n	80097c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009576:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800957e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009582:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009586:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800958a:	4013      	ands	r3, r2
 800958c:	b29a      	uxth	r2, r3
 800958e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009592:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009598:	1c9a      	adds	r2, r3, #2
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80095ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095be:	f003 0307 	and.w	r3, r3, #7
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d053      	beq.n	800966e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d011      	beq.n	80095f6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80095d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00b      	beq.n	80095f6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2201      	movs	r2, #1
 80095e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ec:	f043 0201 	orr.w	r2, r3, #1
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095fa:	f003 0302 	and.w	r3, r3, #2
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d011      	beq.n	8009626 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009606:	f003 0301 	and.w	r3, r3, #1
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00b      	beq.n	8009626 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2202      	movs	r2, #2
 8009614:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800961c:	f043 0204 	orr.w	r2, r3, #4
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800962a:	f003 0304 	and.w	r3, r3, #4
 800962e:	2b00      	cmp	r3, #0
 8009630:	d011      	beq.n	8009656 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00b      	beq.n	8009656 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2204      	movs	r2, #4
 8009644:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800964c:	f043 0202 	orr.w	r2, r3, #2
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800965c:	2b00      	cmp	r3, #0
 800965e:	d006      	beq.n	800966e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7fe fd63 	bl	800812c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	f040 80a4 	bne.w	80097c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800968a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800968c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009690:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	461a      	mov	r2, r3
 800969a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800969e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80096a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80096a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80096aa:	e841 2300 	strex	r3, r2, [r1]
 80096ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80096b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e2      	bne.n	800967c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3308      	adds	r3, #8
 80096bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80096c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096cc:	f023 0301 	bic.w	r3, r3, #1
 80096d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3308      	adds	r3, #8
 80096da:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80096de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80096e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80096e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80096ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e1      	bne.n	80096b6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a60      	ldr	r2, [pc, #384]	@ (800988c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d021      	beq.n	8009754 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d01a      	beq.n	8009754 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800972c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800972e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009732:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009740:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009742:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009746:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800974e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e4      	bne.n	800971e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009758:	2b01      	cmp	r3, #1
 800975a:	d130      	bne.n	80097be <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976a:	e853 3f00 	ldrex	r3, [r3]
 800976e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009772:	f023 0310 	bic.w	r3, r3, #16
 8009776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	461a      	mov	r2, r3
 8009780:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009784:	647b      	str	r3, [r7, #68]	@ 0x44
 8009786:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800978a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800978c:	e841 2300 	strex	r3, r2, [r1]
 8009790:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e4      	bne.n	8009762 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	69db      	ldr	r3, [r3, #28]
 800979e:	f003 0310 	and.w	r3, r3, #16
 80097a2:	2b10      	cmp	r3, #16
 80097a4:	d103      	bne.n	80097ae <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2210      	movs	r2, #16
 80097ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7fe fcc2 	bl	8008140 <HAL_UARTEx_RxEventCallback>
 80097bc:	e002      	b.n	80097c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f7f7 fc96 	bl	80010f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d006      	beq.n	80097da <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80097cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80097d0:	f003 0320 	and.w	r3, r3, #32
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f47f aecb 	bne.w	8009570 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097e0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80097e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d04b      	beq.n	8009884 <UART_RxISR_16BIT_FIFOEN+0x35c>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80097f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d244      	bcs.n	8009884 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3308      	adds	r3, #8
 8009800:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009804:	e853 3f00 	ldrex	r3, [r3]
 8009808:	623b      	str	r3, [r7, #32]
   return(result);
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009810:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3308      	adds	r3, #8
 800981a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800981e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009820:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800982c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e3      	bne.n	80097fa <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a16      	ldr	r2, [pc, #88]	@ (8009890 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009836:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	60fb      	str	r3, [r7, #12]
   return(result);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f043 0320 	orr.w	r3, r3, #32
 800984c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	461a      	mov	r2, r3
 8009856:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800985a:	61fb      	str	r3, [r7, #28]
 800985c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	69b9      	ldr	r1, [r7, #24]
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	617b      	str	r3, [r7, #20]
   return(result);
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e4      	bne.n	8009838 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800986e:	e009      	b.n	8009884 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	8b1b      	ldrh	r3, [r3, #24]
 8009876:	b29a      	uxth	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f042 0208 	orr.w	r2, r2, #8
 8009880:	b292      	uxth	r2, r2
 8009882:	831a      	strh	r2, [r3, #24]
}
 8009884:	bf00      	nop
 8009886:	37b8      	adds	r7, #184	@ 0xb8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	40008000 	.word	0x40008000
 8009890:	08009009 	.word	0x08009009

08009894 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d101      	bne.n	80098e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80098e2:	2302      	movs	r3, #2
 80098e4:	e027      	b.n	8009936 <HAL_UARTEx_DisableFifoMode+0x66>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2224      	movs	r2, #36	@ 0x24
 80098f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f022 0201 	bic.w	r2, r2, #1
 800990c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009914:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2220      	movs	r2, #32
 8009928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009952:	2b01      	cmp	r3, #1
 8009954:	d101      	bne.n	800995a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009956:	2302      	movs	r3, #2
 8009958:	e02d      	b.n	80099b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2224      	movs	r2, #36	@ 0x24
 8009966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0201 	bic.w	r2, r2, #1
 8009980:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	430a      	orrs	r2, r1
 8009994:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f850 	bl	8009a3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2220      	movs	r2, #32
 80099a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d101      	bne.n	80099d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80099d2:	2302      	movs	r3, #2
 80099d4:	e02d      	b.n	8009a32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2224      	movs	r2, #36	@ 0x24
 80099e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f022 0201 	bic.w	r2, r2, #1
 80099fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f812 	bl	8009a3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d108      	bne.n	8009a5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a5c:	e031      	b.n	8009ac2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a5e:	2308      	movs	r3, #8
 8009a60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a62:	2308      	movs	r3, #8
 8009a64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	0e5b      	lsrs	r3, r3, #25
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	f003 0307 	and.w	r3, r3, #7
 8009a74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	0f5b      	lsrs	r3, r3, #29
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	f003 0307 	and.w	r3, r3, #7
 8009a84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	7b3a      	ldrb	r2, [r7, #12]
 8009a8a:	4911      	ldr	r1, [pc, #68]	@ (8009ad0 <UARTEx_SetNbDataToProcess+0x94>)
 8009a8c:	5c8a      	ldrb	r2, [r1, r2]
 8009a8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a92:	7b3a      	ldrb	r2, [r7, #12]
 8009a94:	490f      	ldr	r1, [pc, #60]	@ (8009ad4 <UARTEx_SetNbDataToProcess+0x98>)
 8009a96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
 8009aa6:	7b7a      	ldrb	r2, [r7, #13]
 8009aa8:	4909      	ldr	r1, [pc, #36]	@ (8009ad0 <UARTEx_SetNbDataToProcess+0x94>)
 8009aaa:	5c8a      	ldrb	r2, [r1, r2]
 8009aac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ab0:	7b7a      	ldrb	r2, [r7, #13]
 8009ab2:	4908      	ldr	r1, [pc, #32]	@ (8009ad4 <UARTEx_SetNbDataToProcess+0x98>)
 8009ab4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ab6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009ac2:	bf00      	nop
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	0800dd78 	.word	0x0800dd78
 8009ad4:	0800dd80 	.word	0x0800dd80

08009ad8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ad8:	b084      	sub	sp, #16
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	f107 001c 	add.w	r0, r7, #28
 8009ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 fa1c 	bl	800af34 <USB_CoreReset>
 8009afc:	4603      	mov	r3, r0
 8009afe:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d106      	bne.n	8009b14 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b0a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	639a      	str	r2, [r3, #56]	@ 0x38
 8009b12:	e005      	b.n	8009b20 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b2c:	b004      	add	sp, #16
 8009b2e:	4770      	bx	lr

08009b30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d165      	bne.n	8009c10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	4a3e      	ldr	r2, [pc, #248]	@ (8009c40 <USB_SetTurnaroundTime+0x110>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d906      	bls.n	8009b5a <USB_SetTurnaroundTime+0x2a>
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	4a3d      	ldr	r2, [pc, #244]	@ (8009c44 <USB_SetTurnaroundTime+0x114>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d202      	bcs.n	8009b5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009b54:	230f      	movs	r3, #15
 8009b56:	617b      	str	r3, [r7, #20]
 8009b58:	e05c      	b.n	8009c14 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	4a39      	ldr	r2, [pc, #228]	@ (8009c44 <USB_SetTurnaroundTime+0x114>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d306      	bcc.n	8009b70 <USB_SetTurnaroundTime+0x40>
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	4a38      	ldr	r2, [pc, #224]	@ (8009c48 <USB_SetTurnaroundTime+0x118>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d202      	bcs.n	8009b70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009b6a:	230e      	movs	r3, #14
 8009b6c:	617b      	str	r3, [r7, #20]
 8009b6e:	e051      	b.n	8009c14 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	4a35      	ldr	r2, [pc, #212]	@ (8009c48 <USB_SetTurnaroundTime+0x118>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d306      	bcc.n	8009b86 <USB_SetTurnaroundTime+0x56>
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	4a34      	ldr	r2, [pc, #208]	@ (8009c4c <USB_SetTurnaroundTime+0x11c>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d202      	bcs.n	8009b86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009b80:	230d      	movs	r3, #13
 8009b82:	617b      	str	r3, [r7, #20]
 8009b84:	e046      	b.n	8009c14 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	4a30      	ldr	r2, [pc, #192]	@ (8009c4c <USB_SetTurnaroundTime+0x11c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d306      	bcc.n	8009b9c <USB_SetTurnaroundTime+0x6c>
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	4a2f      	ldr	r2, [pc, #188]	@ (8009c50 <USB_SetTurnaroundTime+0x120>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d802      	bhi.n	8009b9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009b96:	230c      	movs	r3, #12
 8009b98:	617b      	str	r3, [r7, #20]
 8009b9a:	e03b      	b.n	8009c14 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8009c50 <USB_SetTurnaroundTime+0x120>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d906      	bls.n	8009bb2 <USB_SetTurnaroundTime+0x82>
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8009c54 <USB_SetTurnaroundTime+0x124>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d802      	bhi.n	8009bb2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009bac:	230b      	movs	r3, #11
 8009bae:	617b      	str	r3, [r7, #20]
 8009bb0:	e030      	b.n	8009c14 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	4a27      	ldr	r2, [pc, #156]	@ (8009c54 <USB_SetTurnaroundTime+0x124>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d906      	bls.n	8009bc8 <USB_SetTurnaroundTime+0x98>
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	4a26      	ldr	r2, [pc, #152]	@ (8009c58 <USB_SetTurnaroundTime+0x128>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d802      	bhi.n	8009bc8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009bc2:	230a      	movs	r3, #10
 8009bc4:	617b      	str	r3, [r7, #20]
 8009bc6:	e025      	b.n	8009c14 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	4a23      	ldr	r2, [pc, #140]	@ (8009c58 <USB_SetTurnaroundTime+0x128>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d906      	bls.n	8009bde <USB_SetTurnaroundTime+0xae>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4a22      	ldr	r2, [pc, #136]	@ (8009c5c <USB_SetTurnaroundTime+0x12c>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d202      	bcs.n	8009bde <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009bd8:	2309      	movs	r3, #9
 8009bda:	617b      	str	r3, [r7, #20]
 8009bdc:	e01a      	b.n	8009c14 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	4a1e      	ldr	r2, [pc, #120]	@ (8009c5c <USB_SetTurnaroundTime+0x12c>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d306      	bcc.n	8009bf4 <USB_SetTurnaroundTime+0xc4>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c60 <USB_SetTurnaroundTime+0x130>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d802      	bhi.n	8009bf4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009bee:	2308      	movs	r3, #8
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	e00f      	b.n	8009c14 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8009c60 <USB_SetTurnaroundTime+0x130>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d906      	bls.n	8009c0a <USB_SetTurnaroundTime+0xda>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	4a19      	ldr	r2, [pc, #100]	@ (8009c64 <USB_SetTurnaroundTime+0x134>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d202      	bcs.n	8009c0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009c04:	2307      	movs	r3, #7
 8009c06:	617b      	str	r3, [r7, #20]
 8009c08:	e004      	b.n	8009c14 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009c0a:	2306      	movs	r3, #6
 8009c0c:	617b      	str	r3, [r7, #20]
 8009c0e:	e001      	b.n	8009c14 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009c10:	2309      	movs	r3, #9
 8009c12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	68da      	ldr	r2, [r3, #12]
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	029b      	lsls	r3, r3, #10
 8009c28:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009c2c:	431a      	orrs	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	371c      	adds	r7, #28
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	00d8acbf 	.word	0x00d8acbf
 8009c44:	00e4e1c0 	.word	0x00e4e1c0
 8009c48:	00f42400 	.word	0x00f42400
 8009c4c:	01067380 	.word	0x01067380
 8009c50:	011a499f 	.word	0x011a499f
 8009c54:	01312cff 	.word	0x01312cff
 8009c58:	014ca43f 	.word	0x014ca43f
 8009c5c:	016e3600 	.word	0x016e3600
 8009c60:	01a6ab1f 	.word	0x01a6ab1f
 8009c64:	01e84800 	.word	0x01e84800

08009c68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f043 0201 	orr.w	r2, r3, #1
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	370c      	adds	r7, #12
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b083      	sub	sp, #12
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f023 0201 	bic.w	r2, r3, #1
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009cc8:	78fb      	ldrb	r3, [r7, #3]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d115      	bne.n	8009cfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009cda:	2001      	movs	r0, #1
 8009cdc:	f7f7 ffda 	bl	8001c94 <HAL_Delay>
      ms++;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 f8ab 	bl	800ae42 <USB_GetMode>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d01e      	beq.n	8009d30 <USB_SetCurrentMode+0x84>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2b31      	cmp	r3, #49	@ 0x31
 8009cf6:	d9f0      	bls.n	8009cda <USB_SetCurrentMode+0x2e>
 8009cf8:	e01a      	b.n	8009d30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009cfa:	78fb      	ldrb	r3, [r7, #3]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d115      	bne.n	8009d2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	f7f7 ffc1 	bl	8001c94 <HAL_Delay>
      ms++;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3301      	adds	r3, #1
 8009d16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 f892 	bl	800ae42 <USB_GetMode>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d005      	beq.n	8009d30 <USB_SetCurrentMode+0x84>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b31      	cmp	r3, #49	@ 0x31
 8009d28:	d9f0      	bls.n	8009d0c <USB_SetCurrentMode+0x60>
 8009d2a:	e001      	b.n	8009d30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e005      	b.n	8009d3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b32      	cmp	r3, #50	@ 0x32
 8009d34:	d101      	bne.n	8009d3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e000      	b.n	8009d3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d44:	b084      	sub	sp, #16
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b086      	sub	sp, #24
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d5e:	2300      	movs	r3, #0
 8009d60:	613b      	str	r3, [r7, #16]
 8009d62:	e009      	b.n	8009d78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	3340      	adds	r3, #64	@ 0x40
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	2200      	movs	r2, #0
 8009d70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	3301      	adds	r3, #1
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	2b0e      	cmp	r3, #14
 8009d7c:	d9f2      	bls.n	8009d64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d11c      	bne.n	8009dbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d92:	f043 0302 	orr.w	r3, r3, #2
 8009d96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d9c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	601a      	str	r2, [r3, #0]
 8009dbc:	e005      	b.n	8009dca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009dd6:	2103      	movs	r1, #3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f959 	bl	800a090 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009dde:	2110      	movs	r1, #16
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f8f1 	bl	8009fc8 <USB_FlushTxFifo>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f91d 	bl	800a030 <USB_FlushRxFifo>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e06:	461a      	mov	r2, r3
 8009e08:	2300      	movs	r3, #0
 8009e0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e12:	461a      	mov	r2, r3
 8009e14:	2300      	movs	r3, #0
 8009e16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e1e:	461a      	mov	r2, r3
 8009e20:	2300      	movs	r3, #0
 8009e22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e24:	2300      	movs	r3, #0
 8009e26:	613b      	str	r3, [r7, #16]
 8009e28:	e043      	b.n	8009eb2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e40:	d118      	bne.n	8009e74 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e54:	461a      	mov	r2, r3
 8009e56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	e013      	b.n	8009e86 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	e008      	b.n	8009e86 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e80:	461a      	mov	r2, r3
 8009e82:	2300      	movs	r3, #0
 8009e84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	015a      	lsls	r2, r3, #5
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e92:	461a      	mov	r2, r3
 8009e94:	2300      	movs	r3, #0
 8009e96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	015a      	lsls	r2, r3, #5
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009eaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	613b      	str	r3, [r7, #16]
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d3b7      	bcc.n	8009e2a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009eba:	2300      	movs	r3, #0
 8009ebc:	613b      	str	r3, [r7, #16]
 8009ebe:	e043      	b.n	8009f48 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	015a      	lsls	r2, r3, #5
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ed6:	d118      	bne.n	8009f0a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10a      	bne.n	8009ef4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eea:	461a      	mov	r2, r3
 8009eec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ef0:	6013      	str	r3, [r2, #0]
 8009ef2:	e013      	b.n	8009f1c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f00:	461a      	mov	r2, r3
 8009f02:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	e008      	b.n	8009f1c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f16:	461a      	mov	r2, r3
 8009f18:	2300      	movs	r3, #0
 8009f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f28:	461a      	mov	r2, r3
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009f40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	3301      	adds	r3, #1
 8009f46:	613b      	str	r3, [r7, #16]
 8009f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d3b7      	bcc.n	8009ec0 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009f70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	f043 0210 	orr.w	r2, r3, #16
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	699a      	ldr	r2, [r3, #24]
 8009f82:	4b10      	ldr	r3, [pc, #64]	@ (8009fc4 <USB_DevInit+0x280>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d005      	beq.n	8009f9c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	f043 0208 	orr.w	r2, r3, #8
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d107      	bne.n	8009fb2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	699b      	ldr	r3, [r3, #24]
 8009fa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009faa:	f043 0304 	orr.w	r3, r3, #4
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fbe:	b004      	add	sp, #16
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	803c3800 	.word	0x803c3800

08009fc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	4a13      	ldr	r2, [pc, #76]	@ (800a02c <USB_FlushTxFifo+0x64>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d901      	bls.n	8009fe8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e01b      	b.n	800a020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	daf2      	bge.n	8009fd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	019b      	lsls	r3, r3, #6
 8009ff8:	f043 0220 	orr.w	r2, r3, #32
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	3301      	adds	r3, #1
 800a004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	4a08      	ldr	r2, [pc, #32]	@ (800a02c <USB_FlushTxFifo+0x64>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d901      	bls.n	800a012 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e006      	b.n	800a020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	f003 0320 	and.w	r3, r3, #32
 800a01a:	2b20      	cmp	r3, #32
 800a01c:	d0f0      	beq.n	800a000 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	00030d40 	.word	0x00030d40

0800a030 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	4a11      	ldr	r2, [pc, #68]	@ (800a08c <USB_FlushRxFifo+0x5c>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d901      	bls.n	800a04e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e018      	b.n	800a080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	daf2      	bge.n	800a03c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a056:	2300      	movs	r3, #0
 800a058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2210      	movs	r2, #16
 800a05e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3301      	adds	r3, #1
 800a064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	4a08      	ldr	r2, [pc, #32]	@ (800a08c <USB_FlushRxFifo+0x5c>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d901      	bls.n	800a072 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e006      	b.n	800a080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	f003 0310 	and.w	r3, r3, #16
 800a07a:	2b10      	cmp	r3, #16
 800a07c:	d0f0      	beq.n	800a060 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	00030d40 	.word	0x00030d40

0800a090 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	78fb      	ldrb	r3, [r7, #3]
 800a0aa:	68f9      	ldr	r1, [r7, #12]
 800a0ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b087      	sub	sp, #28
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f003 0306 	and.w	r3, r3, #6
 800a0da:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d002      	beq.n	800a0e8 <USB_GetDevSpeed+0x26>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b06      	cmp	r3, #6
 800a0e6:	d102      	bne.n	800a0ee <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	75fb      	strb	r3, [r7, #23]
 800a0ec:	e001      	b.n	800a0f2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a0ee:	230f      	movs	r3, #15
 800a0f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	371c      	adds	r7, #28
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	785b      	ldrb	r3, [r3, #1]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d13a      	bne.n	800a192 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a122:	69da      	ldr	r2, [r3, #28]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	f003 030f 	and.w	r3, r3, #15
 800a12c:	2101      	movs	r1, #1
 800a12e:	fa01 f303 	lsl.w	r3, r1, r3
 800a132:	b29b      	uxth	r3, r3
 800a134:	68f9      	ldr	r1, [r7, #12]
 800a136:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a13a:	4313      	orrs	r3, r2
 800a13c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d155      	bne.n	800a200 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	015a      	lsls	r2, r3, #5
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	4413      	add	r3, r2
 800a15c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	791b      	ldrb	r3, [r3, #4]
 800a16e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a170:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	059b      	lsls	r3, r3, #22
 800a176:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a178:	4313      	orrs	r3, r2
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	0151      	lsls	r1, r2, #5
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	440a      	add	r2, r1
 800a182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a18a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	e036      	b.n	800a200 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a198:	69da      	ldr	r2, [r3, #28]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	f003 030f 	and.w	r3, r3, #15
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a8:	041b      	lsls	r3, r3, #16
 800a1aa:	68f9      	ldr	r1, [r7, #12]
 800a1ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	015a      	lsls	r2, r3, #5
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d11a      	bne.n	800a200 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	015a      	lsls	r2, r3, #5
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	791b      	ldrb	r3, [r3, #4]
 800a1e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a1e6:	430b      	orrs	r3, r1
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	0151      	lsls	r1, r2, #5
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	440a      	add	r2, r1
 800a1f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
	...

0800a210 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	785b      	ldrb	r3, [r3, #1]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d161      	bne.n	800a2f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a23e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a242:	d11f      	bne.n	800a284 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	0151      	lsls	r1, r2, #5
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	440a      	add	r2, r1
 800a25a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a25e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a262:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	0151      	lsls	r1, r2, #5
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	440a      	add	r2, r1
 800a27a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a27e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a282:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a28a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	f003 030f 	and.w	r3, r3, #15
 800a294:	2101      	movs	r1, #1
 800a296:	fa01 f303 	lsl.w	r3, r1, r3
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	43db      	mvns	r3, r3
 800a29e:	68f9      	ldr	r1, [r7, #12]
 800a2a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ae:	69da      	ldr	r2, [r3, #28]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	f003 030f 	and.w	r3, r3, #15
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	fa01 f303 	lsl.w	r3, r1, r3
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	43db      	mvns	r3, r3
 800a2c2:	68f9      	ldr	r1, [r7, #12]
 800a2c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	0159      	lsls	r1, r3, #5
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	440b      	add	r3, r1
 800a2e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	4b35      	ldr	r3, [pc, #212]	@ (800a3c0 <USB_DeactivateEndpoint+0x1b0>)
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	600b      	str	r3, [r1, #0]
 800a2ee:	e060      	b.n	800a3b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a302:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a306:	d11f      	bne.n	800a348 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	0151      	lsls	r1, r2, #5
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	440a      	add	r2, r1
 800a31e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a322:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a326:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	0151      	lsls	r1, r2, #5
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	440a      	add	r2, r1
 800a33e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a342:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a346:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a34e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	f003 030f 	and.w	r3, r3, #15
 800a358:	2101      	movs	r1, #1
 800a35a:	fa01 f303 	lsl.w	r3, r1, r3
 800a35e:	041b      	lsls	r3, r3, #16
 800a360:	43db      	mvns	r3, r3
 800a362:	68f9      	ldr	r1, [r7, #12]
 800a364:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a368:	4013      	ands	r3, r2
 800a36a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a372:	69da      	ldr	r2, [r3, #28]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	f003 030f 	and.w	r3, r3, #15
 800a37c:	2101      	movs	r1, #1
 800a37e:	fa01 f303 	lsl.w	r3, r1, r3
 800a382:	041b      	lsls	r3, r3, #16
 800a384:	43db      	mvns	r3, r3
 800a386:	68f9      	ldr	r1, [r7, #12]
 800a388:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a38c:	4013      	ands	r3, r2
 800a38e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	0159      	lsls	r1, r3, #5
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	440b      	add	r3, r1
 800a3a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	4b05      	ldr	r3, [pc, #20]	@ (800a3c4 <USB_DeactivateEndpoint+0x1b4>)
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	ec337800 	.word	0xec337800
 800a3c4:	eff37800 	.word	0xeff37800

0800a3c8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	785b      	ldrb	r3, [r3, #1]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	f040 8128 	bne.w	800a636 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d132      	bne.n	800a454 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	015a      	lsls	r2, r3, #5
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	0151      	lsls	r1, r2, #5
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	440a      	add	r2, r1
 800a404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a408:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a40c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a410:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	015a      	lsls	r2, r3, #5
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	4413      	add	r3, r2
 800a41a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	0151      	lsls	r1, r2, #5
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	440a      	add	r2, r1
 800a428:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a42c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	0151      	lsls	r1, r2, #5
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	440a      	add	r2, r1
 800a448:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a44c:	0cdb      	lsrs	r3, r3, #19
 800a44e:	04db      	lsls	r3, r3, #19
 800a450:	6113      	str	r3, [r2, #16]
 800a452:	e092      	b.n	800a57a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	0151      	lsls	r1, r2, #5
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	440a      	add	r2, r1
 800a46a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a46e:	0cdb      	lsrs	r3, r3, #19
 800a470:	04db      	lsls	r3, r3, #19
 800a472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	0151      	lsls	r1, r2, #5
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	440a      	add	r2, r1
 800a48a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a48e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a492:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a496:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d11a      	bne.n	800a4d4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	691a      	ldr	r2, [r3, #16]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d903      	bls.n	800a4b2 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	689a      	ldr	r2, [r3, #8]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	015a      	lsls	r2, r3, #5
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	0151      	lsls	r1, r2, #5
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	440a      	add	r2, r1
 800a4c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4d0:	6113      	str	r3, [r2, #16]
 800a4d2:	e01b      	b.n	800a50c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	015a      	lsls	r2, r3, #5
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4e0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	6919      	ldr	r1, [r3, #16]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	440b      	add	r3, r1
 800a4ec:	1e59      	subs	r1, r3, #1
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4f6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a4f8:	4b8d      	ldr	r3, [pc, #564]	@ (800a730 <USB_EPStartXfer+0x368>)
 800a4fa:	400b      	ands	r3, r1
 800a4fc:	6939      	ldr	r1, [r7, #16]
 800a4fe:	0148      	lsls	r0, r1, #5
 800a500:	6979      	ldr	r1, [r7, #20]
 800a502:	4401      	add	r1, r0
 800a504:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a508:	4313      	orrs	r3, r2
 800a50a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a518:	691a      	ldr	r2, [r3, #16]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a522:	6939      	ldr	r1, [r7, #16]
 800a524:	0148      	lsls	r0, r1, #5
 800a526:	6979      	ldr	r1, [r7, #20]
 800a528:	4401      	add	r1, r0
 800a52a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a52e:	4313      	orrs	r3, r2
 800a530:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	791b      	ldrb	r3, [r3, #4]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d11f      	bne.n	800a57a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	4413      	add	r3, r2
 800a542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	0151      	lsls	r1, r2, #5
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	440a      	add	r2, r1
 800a550:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a554:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a558:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	4413      	add	r3, r2
 800a562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	0151      	lsls	r1, r2, #5
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	440a      	add	r2, r1
 800a570:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a574:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a578:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	4413      	add	r3, r2
 800a582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	0151      	lsls	r1, r2, #5
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	440a      	add	r2, r1
 800a590:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a594:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a598:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	791b      	ldrb	r3, [r3, #4]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d015      	beq.n	800a5ce <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 8139 	beq.w	800a81e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	f003 030f 	and.w	r3, r3, #15
 800a5bc:	2101      	movs	r1, #1
 800a5be:	fa01 f303 	lsl.w	r3, r1, r3
 800a5c2:	6979      	ldr	r1, [r7, #20]
 800a5c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	634b      	str	r3, [r1, #52]	@ 0x34
 800a5cc:	e127      	b.n	800a81e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d110      	bne.n	800a600 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	0151      	lsls	r1, r2, #5
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	440a      	add	r2, r1
 800a5f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	e00f      	b.n	800a620 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	4413      	add	r3, r2
 800a608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	0151      	lsls	r1, r2, #5
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	440a      	add	r2, r1
 800a616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a61a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a61e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	68d9      	ldr	r1, [r3, #12]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781a      	ldrb	r2, [r3, #0]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f9a6 	bl	800a980 <USB_WritePacket>
 800a634:	e0f3      	b.n	800a81e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	015a      	lsls	r2, r3, #5
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	4413      	add	r3, r2
 800a63e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	693a      	ldr	r2, [r7, #16]
 800a646:	0151      	lsls	r1, r2, #5
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	440a      	add	r2, r1
 800a64c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a650:	0cdb      	lsrs	r3, r3, #19
 800a652:	04db      	lsls	r3, r3, #19
 800a654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	015a      	lsls	r2, r3, #5
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	0151      	lsls	r1, r2, #5
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	440a      	add	r2, r1
 800a66c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a670:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a674:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a678:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d12f      	bne.n	800a6e0 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	689a      	ldr	r2, [r3, #8]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	689a      	ldr	r2, [r3, #8]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a4:	691a      	ldr	r2, [r3, #16]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ae:	6939      	ldr	r1, [r7, #16]
 800a6b0:	0148      	lsls	r0, r1, #5
 800a6b2:	6979      	ldr	r1, [r7, #20]
 800a6b4:	4401      	add	r1, r0
 800a6b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	0151      	lsls	r1, r2, #5
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	440a      	add	r2, r1
 800a6d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6dc:	6113      	str	r3, [r2, #16]
 800a6de:	e061      	b.n	800a7a4 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d125      	bne.n	800a734 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f4:	691a      	ldr	r2, [r3, #16]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6fe:	6939      	ldr	r1, [r7, #16]
 800a700:	0148      	lsls	r0, r1, #5
 800a702:	6979      	ldr	r1, [r7, #20]
 800a704:	4401      	add	r1, r0
 800a706:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a70a:	4313      	orrs	r3, r2
 800a70c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	4413      	add	r3, r2
 800a716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	0151      	lsls	r1, r2, #5
 800a720:	697a      	ldr	r2, [r7, #20]
 800a722:	440a      	add	r2, r1
 800a724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a728:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a72c:	6113      	str	r3, [r2, #16]
 800a72e:	e039      	b.n	800a7a4 <USB_EPStartXfer+0x3dc>
 800a730:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	4413      	add	r3, r2
 800a73e:	1e5a      	subs	r2, r3, #1
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	fbb2 f3f3 	udiv	r3, r2, r3
 800a748:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	89fa      	ldrh	r2, [r7, #14]
 800a750:	fb03 f202 	mul.w	r2, r3, r2
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a764:	691a      	ldr	r2, [r3, #16]
 800a766:	89fb      	ldrh	r3, [r7, #14]
 800a768:	04d9      	lsls	r1, r3, #19
 800a76a:	4b2f      	ldr	r3, [pc, #188]	@ (800a828 <USB_EPStartXfer+0x460>)
 800a76c:	400b      	ands	r3, r1
 800a76e:	6939      	ldr	r1, [r7, #16]
 800a770:	0148      	lsls	r0, r1, #5
 800a772:	6979      	ldr	r1, [r7, #20]
 800a774:	4401      	add	r1, r0
 800a776:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a77a:	4313      	orrs	r3, r2
 800a77c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a78a:	691a      	ldr	r2, [r3, #16]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a794:	6939      	ldr	r1, [r7, #16]
 800a796:	0148      	lsls	r0, r1, #5
 800a798:	6979      	ldr	r1, [r7, #20]
 800a79a:	4401      	add	r1, r0
 800a79c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	791b      	ldrb	r3, [r3, #4]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d128      	bne.n	800a7fe <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d110      	bne.n	800a7de <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	0151      	lsls	r1, r2, #5
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	440a      	add	r2, r1
 800a7d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	e00f      	b.n	800a7fe <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	0151      	lsls	r1, r2, #5
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	440a      	add	r2, r1
 800a7f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7fc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	4413      	add	r3, r2
 800a806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	0151      	lsls	r1, r2, #5
 800a810:	697a      	ldr	r2, [r7, #20]
 800a812:	440a      	add	r2, r1
 800a814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a818:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a81c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	1ff80000 	.word	0x1ff80000

0800a82c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a836:	2300      	movs	r3, #0
 800a838:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	785b      	ldrb	r3, [r3, #1]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d14a      	bne.n	800a8e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	015a      	lsls	r2, r3, #5
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	4413      	add	r3, r2
 800a854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a85e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a862:	f040 8086 	bne.w	800a972 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	015a      	lsls	r2, r3, #5
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	4413      	add	r3, r2
 800a870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	7812      	ldrb	r2, [r2, #0]
 800a87a:	0151      	lsls	r1, r2, #5
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	440a      	add	r2, r1
 800a880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a884:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a888:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	4413      	add	r3, r2
 800a894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	7812      	ldrb	r2, [r2, #0]
 800a89e:	0151      	lsls	r1, r2, #5
 800a8a0:	693a      	ldr	r2, [r7, #16]
 800a8a2:	440a      	add	r2, r1
 800a8a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d902      	bls.n	800a8c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a8c2:	e056      	b.n	800a972 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8dc:	d0e7      	beq.n	800a8ae <USB_EPStopXfer+0x82>
 800a8de:	e048      	b.n	800a972 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8f8:	d13b      	bne.n	800a972 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	015a      	lsls	r2, r3, #5
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	4413      	add	r3, r2
 800a904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	7812      	ldrb	r2, [r2, #0]
 800a90e:	0151      	lsls	r1, r2, #5
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	440a      	add	r2, r1
 800a914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a918:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a91c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	015a      	lsls	r2, r3, #5
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	4413      	add	r3, r2
 800a928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	7812      	ldrb	r2, [r2, #0]
 800a932:	0151      	lsls	r1, r2, #5
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	440a      	add	r2, r1
 800a938:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a93c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a940:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	3301      	adds	r3, #1
 800a946:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a94e:	4293      	cmp	r3, r2
 800a950:	d902      	bls.n	800a958 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	75fb      	strb	r3, [r7, #23]
          break;
 800a956:	e00c      	b.n	800a972 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	4413      	add	r3, r2
 800a962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a96c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a970:	d0e7      	beq.n	800a942 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a972:	7dfb      	ldrb	r3, [r7, #23]
}
 800a974:	4618      	mov	r0, r3
 800a976:	371c      	adds	r7, #28
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a980:	b480      	push	{r7}
 800a982:	b089      	sub	sp, #36	@ 0x24
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	4611      	mov	r1, r2
 800a98c:	461a      	mov	r2, r3
 800a98e:	460b      	mov	r3, r1
 800a990:	71fb      	strb	r3, [r7, #7]
 800a992:	4613      	mov	r3, r2
 800a994:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a99e:	88bb      	ldrh	r3, [r7, #4]
 800a9a0:	3303      	adds	r3, #3
 800a9a2:	089b      	lsrs	r3, r3, #2
 800a9a4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	61bb      	str	r3, [r7, #24]
 800a9aa:	e018      	b.n	800a9de <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9ac:	79fb      	ldrb	r3, [r7, #7]
 800a9ae:	031a      	lsls	r2, r3, #12
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	61bb      	str	r3, [r7, #24]
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d3e2      	bcc.n	800a9ac <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3724      	adds	r7, #36	@ 0x24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b08b      	sub	sp, #44	@ 0x2c
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa0a:	88fb      	ldrh	r3, [r7, #6]
 800aa0c:	089b      	lsrs	r3, r3, #2
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa12:	88fb      	ldrh	r3, [r7, #6]
 800aa14:	f003 0303 	and.w	r3, r3, #3
 800aa18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	623b      	str	r3, [r7, #32]
 800aa1e:	e014      	b.n	800aa4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2e:	3301      	adds	r3, #1
 800aa30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa34:	3301      	adds	r3, #1
 800aa36:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa40:	3301      	adds	r3, #1
 800aa42:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	3301      	adds	r3, #1
 800aa48:	623b      	str	r3, [r7, #32]
 800aa4a:	6a3a      	ldr	r2, [r7, #32]
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d3e6      	bcc.n	800aa20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa52:	8bfb      	ldrh	r3, [r7, #30]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d01e      	beq.n	800aa96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa62:	461a      	mov	r2, r3
 800aa64:	f107 0310 	add.w	r3, r7, #16
 800aa68:	6812      	ldr	r2, [r2, #0]
 800aa6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	6a3b      	ldr	r3, [r7, #32]
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	fa22 f303 	lsr.w	r3, r2, r3
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7c:	701a      	strb	r2, [r3, #0]
      i++;
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	3301      	adds	r3, #1
 800aa82:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa86:	3301      	adds	r3, #1
 800aa88:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aa8a:	8bfb      	ldrh	r3, [r7, #30]
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa90:	8bfb      	ldrh	r3, [r7, #30]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1ea      	bne.n	800aa6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	372c      	adds	r7, #44	@ 0x2c
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	785b      	ldrb	r3, [r3, #1]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d12c      	bne.n	800ab1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	015a      	lsls	r2, r3, #5
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	db12      	blt.n	800aaf8 <USB_EPSetStall+0x54>
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00f      	beq.n	800aaf8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	0151      	lsls	r1, r2, #5
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	440a      	add	r2, r1
 800aaee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaf2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aaf6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	015a      	lsls	r2, r3, #5
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4413      	add	r3, r2
 800ab00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	0151      	lsls	r1, r2, #5
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	440a      	add	r2, r1
 800ab0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab16:	6013      	str	r3, [r2, #0]
 800ab18:	e02b      	b.n	800ab72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	015a      	lsls	r2, r3, #5
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	db12      	blt.n	800ab52 <USB_EPSetStall+0xae>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00f      	beq.n	800ab52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	015a      	lsls	r2, r3, #5
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	4413      	add	r3, r2
 800ab3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	0151      	lsls	r1, r2, #5
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	440a      	add	r2, r1
 800ab48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	0151      	lsls	r1, r2, #5
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	440a      	add	r2, r1
 800ab68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3714      	adds	r7, #20
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	785b      	ldrb	r3, [r3, #1]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d128      	bne.n	800abee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	0151      	lsls	r1, r2, #5
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	440a      	add	r2, r1
 800abb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	791b      	ldrb	r3, [r3, #4]
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d003      	beq.n	800abcc <USB_EPClearStall+0x4c>
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	791b      	ldrb	r3, [r3, #4]
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d138      	bne.n	800ac3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68ba      	ldr	r2, [r7, #8]
 800abdc:	0151      	lsls	r1, r2, #5
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	440a      	add	r2, r1
 800abe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	e027      	b.n	800ac3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	015a      	lsls	r2, r3, #5
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	4413      	add	r3, r2
 800abf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	0151      	lsls	r1, r2, #5
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	440a      	add	r2, r1
 800ac04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	791b      	ldrb	r3, [r3, #4]
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d003      	beq.n	800ac1e <USB_EPClearStall+0x9e>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	791b      	ldrb	r3, [r3, #4]
 800ac1a:	2b02      	cmp	r3, #2
 800ac1c:	d10f      	bne.n	800ac3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	015a      	lsls	r2, r3, #5
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	4413      	add	r3, r2
 800ac26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	0151      	lsls	r1, r2, #5
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	440a      	add	r2, r1
 800ac34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac6a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ac6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	78fb      	ldrb	r3, [r7, #3]
 800ac7a:	011b      	lsls	r3, r3, #4
 800ac7c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ac80:	68f9      	ldr	r1, [r7, #12]
 800ac82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac86:	4313      	orrs	r3, r2
 800ac88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acb2:	f023 0303 	bic.w	r3, r3, #3
 800acb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acc6:	f023 0302 	bic.w	r3, r3, #2
 800acca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800acda:	b480      	push	{r7}
 800acdc:	b085      	sub	sp, #20
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acf4:	f023 0303 	bic.w	r3, r3, #3
 800acf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad08:	f043 0302 	orr.w	r3, r3, #2
 800ad0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	695b      	ldr	r3, [r3, #20]
 800ad28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	699b      	ldr	r3, [r3, #24]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	4013      	ands	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad34:	68fb      	ldr	r3, [r7, #12]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b085      	sub	sp, #20
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad5e:	69db      	ldr	r3, [r3, #28]
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	4013      	ands	r3, r2
 800ad64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	0c1b      	lsrs	r3, r3, #16
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad76:	b480      	push	{r7}
 800ad78:	b085      	sub	sp, #20
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	4013      	ands	r3, r2
 800ad98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	b29b      	uxth	r3, r3
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800adaa:	b480      	push	{r7}
 800adac:	b085      	sub	sp, #20
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	460b      	mov	r3, r1
 800adb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800adba:	78fb      	ldrb	r3, [r7, #3]
 800adbc:	015a      	lsls	r2, r3, #5
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4413      	add	r3, r2
 800adc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	4013      	ands	r3, r2
 800add6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800add8:	68bb      	ldr	r3, [r7, #8]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b087      	sub	sp, #28
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	460b      	mov	r3, r1
 800adf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae0a:	78fb      	ldrb	r3, [r7, #3]
 800ae0c:	f003 030f 	and.w	r3, r3, #15
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	fa22 f303 	lsr.w	r3, r2, r3
 800ae16:	01db      	lsls	r3, r3, #7
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	015a      	lsls	r2, r3, #5
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	4013      	ands	r3, r2
 800ae32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae34:	68bb      	ldr	r3, [r7, #8]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	371c      	adds	r7, #28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b083      	sub	sp, #12
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	f003 0301 	and.w	r3, r3, #1
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	370c      	adds	r7, #12
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b085      	sub	sp, #20
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ae7c:	f023 0307 	bic.w	r3, r3, #7
 800ae80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	333c      	adds	r3, #60	@ 0x3c
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	4a1c      	ldr	r2, [pc, #112]	@ (800af30 <USB_EP0_OutStart+0x8c>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d90a      	bls.n	800aeda <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aed0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aed4:	d101      	bne.n	800aeda <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	e024      	b.n	800af24 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee0:	461a      	mov	r2, r3
 800aee2:	2300      	movs	r3, #0
 800aee4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af08:	f043 0318 	orr.w	r3, r3, #24
 800af0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af1c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800af20:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr
 800af30:	4f54300a 	.word	0x4f54300a

0800af34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	3301      	adds	r3, #1
 800af44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	4a13      	ldr	r2, [pc, #76]	@ (800af98 <USB_CoreReset+0x64>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d901      	bls.n	800af52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e01b      	b.n	800af8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	2b00      	cmp	r3, #0
 800af58:	daf2      	bge.n	800af40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	f043 0201 	orr.w	r2, r3, #1
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3301      	adds	r3, #1
 800af6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	4a09      	ldr	r2, [pc, #36]	@ (800af98 <USB_CoreReset+0x64>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d901      	bls.n	800af7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af78:	2303      	movs	r3, #3
 800af7a:	e006      	b.n	800af8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b01      	cmp	r3, #1
 800af86:	d0f0      	beq.n	800af6a <USB_CoreReset+0x36>

  return HAL_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	00030d40 	.word	0x00030d40

0800af9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800afa8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800afac:	f002 fe2c 	bl	800dc08 <USBD_static_malloc>
 800afb0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d109      	bne.n	800afcc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	32b0      	adds	r2, #176	@ 0xb0
 800afc2:	2100      	movs	r1, #0
 800afc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800afc8:	2302      	movs	r3, #2
 800afca:	e0d4      	b.n	800b176 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800afcc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800afd0:	2100      	movs	r1, #0
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f002 fe36 	bl	800dc44 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	32b0      	adds	r2, #176	@ 0xb0
 800afe2:	68f9      	ldr	r1, [r7, #12]
 800afe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	32b0      	adds	r2, #176	@ 0xb0
 800aff2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	7c1b      	ldrb	r3, [r3, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d138      	bne.n	800b076 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b004:	4b5e      	ldr	r3, [pc, #376]	@ (800b180 <USBD_CDC_Init+0x1e4>)
 800b006:	7819      	ldrb	r1, [r3, #0]
 800b008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b00c:	2202      	movs	r2, #2
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f002 fbe6 	bl	800d7e0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b014:	4b5a      	ldr	r3, [pc, #360]	@ (800b180 <USBD_CDC_Init+0x1e4>)
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	f003 020f 	and.w	r2, r3, #15
 800b01c:	6879      	ldr	r1, [r7, #4]
 800b01e:	4613      	mov	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	4413      	add	r3, r2
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	440b      	add	r3, r1
 800b028:	3324      	adds	r3, #36	@ 0x24
 800b02a:	2201      	movs	r2, #1
 800b02c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b02e:	4b55      	ldr	r3, [pc, #340]	@ (800b184 <USBD_CDC_Init+0x1e8>)
 800b030:	7819      	ldrb	r1, [r3, #0]
 800b032:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b036:	2202      	movs	r2, #2
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f002 fbd1 	bl	800d7e0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b03e:	4b51      	ldr	r3, [pc, #324]	@ (800b184 <USBD_CDC_Init+0x1e8>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	f003 020f 	and.w	r2, r3, #15
 800b046:	6879      	ldr	r1, [r7, #4]
 800b048:	4613      	mov	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	440b      	add	r3, r1
 800b052:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b056:	2201      	movs	r2, #1
 800b058:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b05a:	4b4b      	ldr	r3, [pc, #300]	@ (800b188 <USBD_CDC_Init+0x1ec>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	f003 020f 	and.w	r2, r3, #15
 800b062:	6879      	ldr	r1, [r7, #4]
 800b064:	4613      	mov	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	440b      	add	r3, r1
 800b06e:	3326      	adds	r3, #38	@ 0x26
 800b070:	2210      	movs	r2, #16
 800b072:	801a      	strh	r2, [r3, #0]
 800b074:	e035      	b.n	800b0e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b076:	4b42      	ldr	r3, [pc, #264]	@ (800b180 <USBD_CDC_Init+0x1e4>)
 800b078:	7819      	ldrb	r1, [r3, #0]
 800b07a:	2340      	movs	r3, #64	@ 0x40
 800b07c:	2202      	movs	r2, #2
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f002 fbae 	bl	800d7e0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b084:	4b3e      	ldr	r3, [pc, #248]	@ (800b180 <USBD_CDC_Init+0x1e4>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	f003 020f 	and.w	r2, r3, #15
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	4613      	mov	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	440b      	add	r3, r1
 800b098:	3324      	adds	r3, #36	@ 0x24
 800b09a:	2201      	movs	r2, #1
 800b09c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b09e:	4b39      	ldr	r3, [pc, #228]	@ (800b184 <USBD_CDC_Init+0x1e8>)
 800b0a0:	7819      	ldrb	r1, [r3, #0]
 800b0a2:	2340      	movs	r3, #64	@ 0x40
 800b0a4:	2202      	movs	r2, #2
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f002 fb9a 	bl	800d7e0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b0ac:	4b35      	ldr	r3, [pc, #212]	@ (800b184 <USBD_CDC_Init+0x1e8>)
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	f003 020f 	and.w	r2, r3, #15
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	440b      	add	r3, r1
 800b0c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b0c8:	4b2f      	ldr	r3, [pc, #188]	@ (800b188 <USBD_CDC_Init+0x1ec>)
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	f003 020f 	and.w	r2, r3, #15
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4413      	add	r3, r2
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	440b      	add	r3, r1
 800b0dc:	3326      	adds	r3, #38	@ 0x26
 800b0de:	2210      	movs	r2, #16
 800b0e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b0e2:	4b29      	ldr	r3, [pc, #164]	@ (800b188 <USBD_CDC_Init+0x1ec>)
 800b0e4:	7819      	ldrb	r1, [r3, #0]
 800b0e6:	2308      	movs	r3, #8
 800b0e8:	2203      	movs	r2, #3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f002 fb78 	bl	800d7e0 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b0f0:	4b25      	ldr	r3, [pc, #148]	@ (800b188 <USBD_CDC_Init+0x1ec>)
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	f003 020f 	and.w	r2, r3, #15
 800b0f8:	6879      	ldr	r1, [r7, #4]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	440b      	add	r3, r1
 800b104:	3324      	adds	r3, #36	@ 0x24
 800b106:	2201      	movs	r2, #1
 800b108:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	33b0      	adds	r3, #176	@ 0xb0
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4413      	add	r3, r2
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b140:	2302      	movs	r3, #2
 800b142:	e018      	b.n	800b176 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	7c1b      	ldrb	r3, [r3, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d10a      	bne.n	800b162 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b14c:	4b0d      	ldr	r3, [pc, #52]	@ (800b184 <USBD_CDC_Init+0x1e8>)
 800b14e:	7819      	ldrb	r1, [r3, #0]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b156:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f002 fcba 	bl	800dad4 <USBD_LL_PrepareReceive>
 800b160:	e008      	b.n	800b174 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b162:	4b08      	ldr	r3, [pc, #32]	@ (800b184 <USBD_CDC_Init+0x1e8>)
 800b164:	7819      	ldrb	r1, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b16c:	2340      	movs	r3, #64	@ 0x40
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f002 fcb0 	bl	800dad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20000093 	.word	0x20000093
 800b184:	20000094 	.word	0x20000094
 800b188:	20000095 	.word	0x20000095

0800b18c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b198:	4b3a      	ldr	r3, [pc, #232]	@ (800b284 <USBD_CDC_DeInit+0xf8>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f002 fb5c 	bl	800d85c <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b1a4:	4b37      	ldr	r3, [pc, #220]	@ (800b284 <USBD_CDC_DeInit+0xf8>)
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	f003 020f 	and.w	r2, r3, #15
 800b1ac:	6879      	ldr	r1, [r7, #4]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4413      	add	r3, r2
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	440b      	add	r3, r1
 800b1b8:	3324      	adds	r3, #36	@ 0x24
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b1be:	4b32      	ldr	r3, [pc, #200]	@ (800b288 <USBD_CDC_DeInit+0xfc>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f002 fb49 	bl	800d85c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b1ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b288 <USBD_CDC_DeInit+0xfc>)
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	f003 020f 	and.w	r2, r3, #15
 800b1d2:	6879      	ldr	r1, [r7, #4]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	440b      	add	r3, r1
 800b1de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b1e6:	4b29      	ldr	r3, [pc, #164]	@ (800b28c <USBD_CDC_DeInit+0x100>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f002 fb35 	bl	800d85c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b1f2:	4b26      	ldr	r3, [pc, #152]	@ (800b28c <USBD_CDC_DeInit+0x100>)
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	f003 020f 	and.w	r2, r3, #15
 800b1fa:	6879      	ldr	r1, [r7, #4]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	440b      	add	r3, r1
 800b206:	3324      	adds	r3, #36	@ 0x24
 800b208:	2200      	movs	r2, #0
 800b20a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b20c:	4b1f      	ldr	r3, [pc, #124]	@ (800b28c <USBD_CDC_DeInit+0x100>)
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	f003 020f 	and.w	r2, r3, #15
 800b214:	6879      	ldr	r1, [r7, #4]
 800b216:	4613      	mov	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4413      	add	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	440b      	add	r3, r1
 800b220:	3326      	adds	r3, #38	@ 0x26
 800b222:	2200      	movs	r2, #0
 800b224:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	32b0      	adds	r2, #176	@ 0xb0
 800b230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d01f      	beq.n	800b278 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	33b0      	adds	r3, #176	@ 0xb0
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	32b0      	adds	r2, #176	@ 0xb0
 800b256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f002 fce2 	bl	800dc24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	32b0      	adds	r2, #176	@ 0xb0
 800b26a:	2100      	movs	r1, #0
 800b26c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	20000093 	.word	0x20000093
 800b288:	20000094 	.word	0x20000094
 800b28c:	20000095 	.word	0x20000095

0800b290 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	32b0      	adds	r2, #176	@ 0xb0
 800b2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e0bf      	b.n	800b440 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d050      	beq.n	800b36e <USBD_CDC_Setup+0xde>
 800b2cc:	2b20      	cmp	r3, #32
 800b2ce:	f040 80af 	bne.w	800b430 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	88db      	ldrh	r3, [r3, #6]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d03a      	beq.n	800b350 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	b25b      	sxtb	r3, r3
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	da1b      	bge.n	800b31c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	33b0      	adds	r3, #176	@ 0xb0
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4413      	add	r3, r2
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b2fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2fc:	683a      	ldr	r2, [r7, #0]
 800b2fe:	88d2      	ldrh	r2, [r2, #6]
 800b300:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	88db      	ldrh	r3, [r3, #6]
 800b306:	2b07      	cmp	r3, #7
 800b308:	bf28      	it	cs
 800b30a:	2307      	movcs	r3, #7
 800b30c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	89fa      	ldrh	r2, [r7, #14]
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f001 fdb1 	bl	800ce7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b31a:	e090      	b.n	800b43e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	785a      	ldrb	r2, [r3, #1]
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	88db      	ldrh	r3, [r3, #6]
 800b32a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b32c:	d803      	bhi.n	800b336 <USBD_CDC_Setup+0xa6>
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	88db      	ldrh	r3, [r3, #6]
 800b332:	b2da      	uxtb	r2, r3
 800b334:	e000      	b.n	800b338 <USBD_CDC_Setup+0xa8>
 800b336:	2240      	movs	r2, #64	@ 0x40
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b33e:	6939      	ldr	r1, [r7, #16]
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b346:	461a      	mov	r2, r3
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f001 fdc3 	bl	800ced4 <USBD_CtlPrepareRx>
      break;
 800b34e:	e076      	b.n	800b43e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	33b0      	adds	r3, #176	@ 0xb0
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	7850      	ldrb	r0, [r2, #1]
 800b366:	2200      	movs	r2, #0
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	4798      	blx	r3
      break;
 800b36c:	e067      	b.n	800b43e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	785b      	ldrb	r3, [r3, #1]
 800b372:	2b0b      	cmp	r3, #11
 800b374:	d851      	bhi.n	800b41a <USBD_CDC_Setup+0x18a>
 800b376:	a201      	add	r2, pc, #4	@ (adr r2, 800b37c <USBD_CDC_Setup+0xec>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b3ad 	.word	0x0800b3ad
 800b380:	0800b429 	.word	0x0800b429
 800b384:	0800b41b 	.word	0x0800b41b
 800b388:	0800b41b 	.word	0x0800b41b
 800b38c:	0800b41b 	.word	0x0800b41b
 800b390:	0800b41b 	.word	0x0800b41b
 800b394:	0800b41b 	.word	0x0800b41b
 800b398:	0800b41b 	.word	0x0800b41b
 800b39c:	0800b41b 	.word	0x0800b41b
 800b3a0:	0800b41b 	.word	0x0800b41b
 800b3a4:	0800b3d7 	.word	0x0800b3d7
 800b3a8:	0800b401 	.word	0x0800b401
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d107      	bne.n	800b3c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b3b8:	f107 030a 	add.w	r3, r7, #10
 800b3bc:	2202      	movs	r2, #2
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f001 fd5b 	bl	800ce7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3c6:	e032      	b.n	800b42e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 fce5 	bl	800cd9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	75fb      	strb	r3, [r7, #23]
          break;
 800b3d4:	e02b      	b.n	800b42e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	2b03      	cmp	r3, #3
 800b3e0:	d107      	bne.n	800b3f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b3e2:	f107 030d 	add.w	r3, r7, #13
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f001 fd46 	bl	800ce7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3f0:	e01d      	b.n	800b42e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b3f2:	6839      	ldr	r1, [r7, #0]
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f001 fcd0 	bl	800cd9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	75fb      	strb	r3, [r7, #23]
          break;
 800b3fe:	e016      	b.n	800b42e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b406:	b2db      	uxtb	r3, r3
 800b408:	2b03      	cmp	r3, #3
 800b40a:	d00f      	beq.n	800b42c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f001 fcc3 	bl	800cd9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b414:	2303      	movs	r3, #3
 800b416:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b418:	e008      	b.n	800b42c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f001 fcbc 	bl	800cd9a <USBD_CtlError>
          ret = USBD_FAIL;
 800b422:	2303      	movs	r3, #3
 800b424:	75fb      	strb	r3, [r7, #23]
          break;
 800b426:	e002      	b.n	800b42e <USBD_CDC_Setup+0x19e>
          break;
 800b428:	bf00      	nop
 800b42a:	e008      	b.n	800b43e <USBD_CDC_Setup+0x1ae>
          break;
 800b42c:	bf00      	nop
      }
      break;
 800b42e:	e006      	b.n	800b43e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b430:	6839      	ldr	r1, [r7, #0]
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f001 fcb1 	bl	800cd9a <USBD_CtlError>
      ret = USBD_FAIL;
 800b438:	2303      	movs	r3, #3
 800b43a:	75fb      	strb	r3, [r7, #23]
      break;
 800b43c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	460b      	mov	r3, r1
 800b452:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b45a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	32b0      	adds	r2, #176	@ 0xb0
 800b466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b46e:	2303      	movs	r3, #3
 800b470:	e065      	b.n	800b53e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	32b0      	adds	r2, #176	@ 0xb0
 800b47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b480:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b482:	78fb      	ldrb	r3, [r7, #3]
 800b484:	f003 020f 	and.w	r2, r3, #15
 800b488:	6879      	ldr	r1, [r7, #4]
 800b48a:	4613      	mov	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4413      	add	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	440b      	add	r3, r1
 800b494:	3318      	adds	r3, #24
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d02f      	beq.n	800b4fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b49c:	78fb      	ldrb	r3, [r7, #3]
 800b49e:	f003 020f 	and.w	r2, r3, #15
 800b4a2:	6879      	ldr	r1, [r7, #4]
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	440b      	add	r3, r1
 800b4ae:	3318      	adds	r3, #24
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	78fb      	ldrb	r3, [r7, #3]
 800b4b4:	f003 010f 	and.w	r1, r3, #15
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	00db      	lsls	r3, r3, #3
 800b4be:	440b      	add	r3, r1
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4403      	add	r3, r0
 800b4c4:	3344      	adds	r3, #68	@ 0x44
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b4cc:	fb01 f303 	mul.w	r3, r1, r3
 800b4d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d112      	bne.n	800b4fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b4d6:	78fb      	ldrb	r3, [r7, #3]
 800b4d8:	f003 020f 	and.w	r2, r3, #15
 800b4dc:	6879      	ldr	r1, [r7, #4]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	4413      	add	r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	440b      	add	r3, r1
 800b4e8:	3318      	adds	r3, #24
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b4ee:	78f9      	ldrb	r1, [r7, #3]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f002 fab5 	bl	800da64 <USBD_LL_Transmit>
 800b4fa:	e01f      	b.n	800b53c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	33b0      	adds	r3, #176	@ 0xb0
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	4413      	add	r3, r2
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d010      	beq.n	800b53c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	33b0      	adds	r3, #176	@ 0xb0
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	68ba      	ldr	r2, [r7, #8]
 800b52e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b538:	78fa      	ldrb	r2, [r7, #3]
 800b53a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b084      	sub	sp, #16
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	460b      	mov	r3, r1
 800b550:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	32b0      	adds	r2, #176	@ 0xb0
 800b55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b560:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	32b0      	adds	r2, #176	@ 0xb0
 800b56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d101      	bne.n	800b578 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b574:	2303      	movs	r3, #3
 800b576:	e01a      	b.n	800b5ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b578:	78fb      	ldrb	r3, [r7, #3]
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f002 fae1 	bl	800db44 <USBD_LL_GetRxDataSize>
 800b582:	4602      	mov	r2, r0
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	33b0      	adds	r3, #176	@ 0xb0
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b084      	sub	sp, #16
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	32b0      	adds	r2, #176	@ 0xb0
 800b5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e024      	b.n	800b622 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	33b0      	adds	r3, #176	@ 0xb0
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4413      	add	r3, r2
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d019      	beq.n	800b620 <USBD_CDC_EP0_RxReady+0x6a>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b5f2:	2bff      	cmp	r3, #255	@ 0xff
 800b5f4:	d014      	beq.n	800b620 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	33b0      	adds	r3, #176	@ 0xb0
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b60e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b616:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	22ff      	movs	r2, #255	@ 0xff
 800b61c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
	...

0800b62c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b634:	2182      	movs	r1, #130	@ 0x82
 800b636:	4818      	ldr	r0, [pc, #96]	@ (800b698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b638:	f000 fd4f 	bl	800c0da <USBD_GetEpDesc>
 800b63c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b63e:	2101      	movs	r1, #1
 800b640:	4815      	ldr	r0, [pc, #84]	@ (800b698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b642:	f000 fd4a 	bl	800c0da <USBD_GetEpDesc>
 800b646:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b648:	2181      	movs	r1, #129	@ 0x81
 800b64a:	4813      	ldr	r0, [pc, #76]	@ (800b698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b64c:	f000 fd45 	bl	800c0da <USBD_GetEpDesc>
 800b650:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2210      	movs	r2, #16
 800b65c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d006      	beq.n	800b672 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	2200      	movs	r2, #0
 800b668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b66c:	711a      	strb	r2, [r3, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d006      	beq.n	800b686 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b680:	711a      	strb	r2, [r3, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2243      	movs	r2, #67	@ 0x43
 800b68a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b68c:	4b02      	ldr	r3, [pc, #8]	@ (800b698 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	20000050 	.word	0x20000050

0800b69c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6a4:	2182      	movs	r1, #130	@ 0x82
 800b6a6:	4818      	ldr	r0, [pc, #96]	@ (800b708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6a8:	f000 fd17 	bl	800c0da <USBD_GetEpDesc>
 800b6ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	4815      	ldr	r0, [pc, #84]	@ (800b708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6b2:	f000 fd12 	bl	800c0da <USBD_GetEpDesc>
 800b6b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6b8:	2181      	movs	r1, #129	@ 0x81
 800b6ba:	4813      	ldr	r0, [pc, #76]	@ (800b708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6bc:	f000 fd0d 	bl	800c0da <USBD_GetEpDesc>
 800b6c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2210      	movs	r2, #16
 800b6cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d006      	beq.n	800b6e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	711a      	strb	r2, [r3, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f042 0202 	orr.w	r2, r2, #2
 800b6e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d006      	beq.n	800b6f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	711a      	strb	r2, [r3, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f042 0202 	orr.w	r2, r2, #2
 800b6f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2243      	movs	r2, #67	@ 0x43
 800b6fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6fc:	4b02      	ldr	r3, [pc, #8]	@ (800b708 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20000050 	.word	0x20000050

0800b70c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b714:	2182      	movs	r1, #130	@ 0x82
 800b716:	4818      	ldr	r0, [pc, #96]	@ (800b778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b718:	f000 fcdf 	bl	800c0da <USBD_GetEpDesc>
 800b71c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b71e:	2101      	movs	r1, #1
 800b720:	4815      	ldr	r0, [pc, #84]	@ (800b778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b722:	f000 fcda 	bl	800c0da <USBD_GetEpDesc>
 800b726:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b728:	2181      	movs	r1, #129	@ 0x81
 800b72a:	4813      	ldr	r0, [pc, #76]	@ (800b778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b72c:	f000 fcd5 	bl	800c0da <USBD_GetEpDesc>
 800b730:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	2210      	movs	r2, #16
 800b73c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d006      	beq.n	800b752 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2200      	movs	r2, #0
 800b748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b74c:	711a      	strb	r2, [r3, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d006      	beq.n	800b766 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b760:	711a      	strb	r2, [r3, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2243      	movs	r2, #67	@ 0x43
 800b76a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b76c:	4b02      	ldr	r3, [pc, #8]	@ (800b778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3718      	adds	r7, #24
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20000050 	.word	0x20000050

0800b77c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	220a      	movs	r2, #10
 800b788:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b78a:	4b03      	ldr	r3, [pc, #12]	@ (800b798 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	2000000c 	.word	0x2000000c

0800b79c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e009      	b.n	800b7c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	33b0      	adds	r3, #176	@ 0xb0
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4413      	add	r3, r2
 800b7be:	683a      	ldr	r2, [r7, #0]
 800b7c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	32b0      	adds	r2, #176	@ 0xb0
 800b7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b7f2:	2303      	movs	r3, #3
 800b7f4:	e008      	b.n	800b808 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	371c      	adds	r7, #28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	32b0      	adds	r2, #176	@ 0xb0
 800b828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d101      	bne.n	800b838 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b834:	2303      	movs	r3, #3
 800b836:	e004      	b.n	800b842 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
	...

0800b850 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	32b0      	adds	r2, #176	@ 0xb0
 800b862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b866:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b868:	2301      	movs	r3, #1
 800b86a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d101      	bne.n	800b876 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b872:	2303      	movs	r3, #3
 800b874:	e025      	b.n	800b8c2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d11f      	bne.n	800b8c0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	2201      	movs	r2, #1
 800b884:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b888:	4b10      	ldr	r3, [pc, #64]	@ (800b8cc <USBD_CDC_TransmitPacket+0x7c>)
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	f003 020f 	and.w	r2, r3, #15
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	4613      	mov	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4403      	add	r3, r0
 800b8a2:	3318      	adds	r3, #24
 800b8a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b8a6:	4b09      	ldr	r3, [pc, #36]	@ (800b8cc <USBD_CDC_TransmitPacket+0x7c>)
 800b8a8:	7819      	ldrb	r1, [r3, #0]
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f002 f8d4 	bl	800da64 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	20000093 	.word	0x20000093

0800b8d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	32b0      	adds	r2, #176	@ 0xb0
 800b8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	32b0      	adds	r2, #176	@ 0xb0
 800b8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e018      	b.n	800b930 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	7c1b      	ldrb	r3, [r3, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10a      	bne.n	800b91c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b906:	4b0c      	ldr	r3, [pc, #48]	@ (800b938 <USBD_CDC_ReceivePacket+0x68>)
 800b908:	7819      	ldrb	r1, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b910:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f002 f8dd 	bl	800dad4 <USBD_LL_PrepareReceive>
 800b91a:	e008      	b.n	800b92e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b91c:	4b06      	ldr	r3, [pc, #24]	@ (800b938 <USBD_CDC_ReceivePacket+0x68>)
 800b91e:	7819      	ldrb	r1, [r3, #0]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b926:	2340      	movs	r3, #64	@ 0x40
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f002 f8d3 	bl	800dad4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b92e:	2300      	movs	r3, #0
}
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	20000094 	.word	0x20000094

0800b93c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b086      	sub	sp, #24
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	4613      	mov	r3, r2
 800b948:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d101      	bne.n	800b954 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b950:	2303      	movs	r3, #3
 800b952:	e01f      	b.n	800b994 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2200      	movs	r2, #0
 800b968:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d003      	beq.n	800b97a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	79fa      	ldrb	r2, [r7, #7]
 800b986:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f001 feab 	bl	800d6e4 <USBD_LL_Init>
 800b98e:	4603      	mov	r3, r0
 800b990:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b992:	7dfb      	ldrb	r3, [r7, #23]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d101      	bne.n	800b9b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e025      	b.n	800ba00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	32ae      	adds	r2, #174	@ 0xae
 800b9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00f      	beq.n	800b9f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	32ae      	adds	r2, #174	@ 0xae
 800b9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e0:	f107 020e 	add.w	r2, r7, #14
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	4798      	blx	r3
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b9f6:	1c5a      	adds	r2, r3, #1
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f001 feb3 	bl	800d77c <USBD_LL_Start>
 800ba16:	4603      	mov	r3, r0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b084      	sub	sp, #16
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d009      	beq.n	800ba64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	78fa      	ldrb	r2, [r7, #3]
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	4798      	blx	r3
 800ba60:	4603      	mov	r3, r0
 800ba62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	460b      	mov	r3, r1
 800ba78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	78fa      	ldrb	r2, [r7, #3]
 800ba88:	4611      	mov	r1, r2
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	4798      	blx	r3
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ba94:	2303      	movs	r3, #3
 800ba96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f001 f936 	bl	800cd26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bac8:	461a      	mov	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bad6:	f003 031f 	and.w	r3, r3, #31
 800bada:	2b02      	cmp	r3, #2
 800badc:	d01a      	beq.n	800bb14 <USBD_LL_SetupStage+0x72>
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d822      	bhi.n	800bb28 <USBD_LL_SetupStage+0x86>
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d002      	beq.n	800baec <USBD_LL_SetupStage+0x4a>
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d00a      	beq.n	800bb00 <USBD_LL_SetupStage+0x5e>
 800baea:	e01d      	b.n	800bb28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fb63 	bl	800c1c0 <USBD_StdDevReq>
 800bafa:	4603      	mov	r3, r0
 800bafc:	73fb      	strb	r3, [r7, #15]
      break;
 800bafe:	e020      	b.n	800bb42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fbcb 	bl	800c2a4 <USBD_StdItfReq>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	73fb      	strb	r3, [r7, #15]
      break;
 800bb12:	e016      	b.n	800bb42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fc2d 	bl	800c37c <USBD_StdEPReq>
 800bb22:	4603      	mov	r3, r0
 800bb24:	73fb      	strb	r3, [r7, #15]
      break;
 800bb26:	e00c      	b.n	800bb42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	4619      	mov	r1, r3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f001 fec6 	bl	800d8c8 <USBD_LL_StallEP>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb40:	bf00      	nop
  }

  return ret;
 800bb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	460b      	mov	r3, r1
 800bb56:	607a      	str	r2, [r7, #4]
 800bb58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bb5e:	7afb      	ldrb	r3, [r7, #11]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d16e      	bne.n	800bc42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bb6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	f040 8098 	bne.w	800bca8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	689a      	ldr	r2, [r3, #8]
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d913      	bls.n	800bbac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	689a      	ldr	r2, [r3, #8]
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	1ad2      	subs	r2, r2, r3
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	68da      	ldr	r2, [r3, #12]
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	bf28      	it	cs
 800bb9e:	4613      	movcs	r3, r2
 800bba0:	461a      	mov	r2, r3
 800bba2:	6879      	ldr	r1, [r7, #4]
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f001 f9b2 	bl	800cf0e <USBD_CtlContinueRx>
 800bbaa:	e07d      	b.n	800bca8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bbb2:	f003 031f 	and.w	r3, r3, #31
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d014      	beq.n	800bbe4 <USBD_LL_DataOutStage+0x98>
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d81d      	bhi.n	800bbfa <USBD_LL_DataOutStage+0xae>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d002      	beq.n	800bbc8 <USBD_LL_DataOutStage+0x7c>
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d003      	beq.n	800bbce <USBD_LL_DataOutStage+0x82>
 800bbc6:	e018      	b.n	800bbfa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	75bb      	strb	r3, [r7, #22]
            break;
 800bbcc:	e018      	b.n	800bc00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f000 fa64 	bl	800c0a6 <USBD_CoreFindIF>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	75bb      	strb	r3, [r7, #22]
            break;
 800bbe2:	e00d      	b.n	800bc00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	4619      	mov	r1, r3
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f000 fa66 	bl	800c0c0 <USBD_CoreFindEP>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	75bb      	strb	r3, [r7, #22]
            break;
 800bbf8:	e002      	b.n	800bc00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	75bb      	strb	r3, [r7, #22]
            break;
 800bbfe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc00:	7dbb      	ldrb	r3, [r7, #22]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d119      	bne.n	800bc3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b03      	cmp	r3, #3
 800bc10:	d113      	bne.n	800bc3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc12:	7dba      	ldrb	r2, [r7, #22]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	32ae      	adds	r2, #174	@ 0xae
 800bc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00b      	beq.n	800bc3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bc22:	7dba      	ldrb	r2, [r7, #22]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bc2a:	7dba      	ldrb	r2, [r7, #22]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	32ae      	adds	r2, #174	@ 0xae
 800bc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f001 f978 	bl	800cf30 <USBD_CtlSendStatus>
 800bc40:	e032      	b.n	800bca8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bc42:	7afb      	ldrb	r3, [r7, #11]
 800bc44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 fa37 	bl	800c0c0 <USBD_CoreFindEP>
 800bc52:	4603      	mov	r3, r0
 800bc54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc56:	7dbb      	ldrb	r3, [r7, #22]
 800bc58:	2bff      	cmp	r3, #255	@ 0xff
 800bc5a:	d025      	beq.n	800bca8 <USBD_LL_DataOutStage+0x15c>
 800bc5c:	7dbb      	ldrb	r3, [r7, #22]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d122      	bne.n	800bca8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	2b03      	cmp	r3, #3
 800bc6c:	d117      	bne.n	800bc9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bc6e:	7dba      	ldrb	r2, [r7, #22]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	32ae      	adds	r2, #174	@ 0xae
 800bc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc78:	699b      	ldr	r3, [r3, #24]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00f      	beq.n	800bc9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bc7e:	7dba      	ldrb	r2, [r7, #22]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bc86:	7dba      	ldrb	r2, [r7, #22]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	32ae      	adds	r2, #174	@ 0xae
 800bc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc90:	699b      	ldr	r3, [r3, #24]
 800bc92:	7afa      	ldrb	r2, [r7, #11]
 800bc94:	4611      	mov	r1, r2
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	4798      	blx	r3
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bc9e:	7dfb      	ldrb	r3, [r7, #23]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bca4:	7dfb      	ldrb	r3, [r7, #23]
 800bca6:	e000      	b.n	800bcaa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3718      	adds	r7, #24
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b086      	sub	sp, #24
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	60f8      	str	r0, [r7, #12]
 800bcba:	460b      	mov	r3, r1
 800bcbc:	607a      	str	r2, [r7, #4]
 800bcbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bcc0:	7afb      	ldrb	r3, [r7, #11]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d16f      	bne.n	800bda6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	3314      	adds	r3, #20
 800bcca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d15a      	bne.n	800bd8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	689a      	ldr	r2, [r3, #8]
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d914      	bls.n	800bd0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	689a      	ldr	r2, [r3, #8]
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	1ad2      	subs	r2, r2, r3
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f001 f8da 	bl	800ceb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcfe:	2300      	movs	r3, #0
 800bd00:	2200      	movs	r2, #0
 800bd02:	2100      	movs	r1, #0
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f001 fee5 	bl	800dad4 <USBD_LL_PrepareReceive>
 800bd0a:	e03f      	b.n	800bd8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	68da      	ldr	r2, [r3, #12]
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d11c      	bne.n	800bd52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d316      	bcc.n	800bd52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	685a      	ldr	r2, [r3, #4]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d20f      	bcs.n	800bd52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd32:	2200      	movs	r2, #0
 800bd34:	2100      	movs	r1, #0
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f001 f8bb 	bl	800ceb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd44:	2300      	movs	r3, #0
 800bd46:	2200      	movs	r2, #0
 800bd48:	2100      	movs	r1, #0
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f001 fec2 	bl	800dad4 <USBD_LL_PrepareReceive>
 800bd50:	e01c      	b.n	800bd8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d10f      	bne.n	800bd7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d009      	beq.n	800bd7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd7e:	2180      	movs	r1, #128	@ 0x80
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f001 fda1 	bl	800d8c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f001 f8e5 	bl	800cf56 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d03a      	beq.n	800be0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f7ff fe42 	bl	800ba20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bda4:	e032      	b.n	800be0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bda6:	7afb      	ldrb	r3, [r7, #11]
 800bda8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	4619      	mov	r1, r3
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f000 f985 	bl	800c0c0 <USBD_CoreFindEP>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdba:	7dfb      	ldrb	r3, [r7, #23]
 800bdbc:	2bff      	cmp	r3, #255	@ 0xff
 800bdbe:	d025      	beq.n	800be0c <USBD_LL_DataInStage+0x15a>
 800bdc0:	7dfb      	ldrb	r3, [r7, #23]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d122      	bne.n	800be0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	2b03      	cmp	r3, #3
 800bdd0:	d11c      	bne.n	800be0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bdd2:	7dfa      	ldrb	r2, [r7, #23]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	32ae      	adds	r2, #174	@ 0xae
 800bdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d014      	beq.n	800be0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bde2:	7dfa      	ldrb	r2, [r7, #23]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bdea:	7dfa      	ldrb	r2, [r7, #23]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	32ae      	adds	r2, #174	@ 0xae
 800bdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	7afa      	ldrb	r2, [r7, #11]
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	4798      	blx	r3
 800bdfe:	4603      	mov	r3, r0
 800be00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be02:	7dbb      	ldrb	r3, [r7, #22]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800be08:	7dbb      	ldrb	r3, [r7, #22]
 800be0a:	e000      	b.n	800be0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b084      	sub	sp, #16
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2201      	movs	r2, #1
 800be26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d014      	beq.n	800be7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00e      	beq.n	800be7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	6852      	ldr	r2, [r2, #4]
 800be6a:	b2d2      	uxtb	r2, r2
 800be6c:	4611      	mov	r1, r2
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	4798      	blx	r3
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d001      	beq.n	800be7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800be78:	2303      	movs	r3, #3
 800be7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be7c:	2340      	movs	r3, #64	@ 0x40
 800be7e:	2200      	movs	r2, #0
 800be80:	2100      	movs	r1, #0
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f001 fcac 	bl	800d7e0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2240      	movs	r2, #64	@ 0x40
 800be94:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be98:	2340      	movs	r3, #64	@ 0x40
 800be9a:	2200      	movs	r2, #0
 800be9c:	2180      	movs	r1, #128	@ 0x80
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f001 fc9e 	bl	800d7e0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2240      	movs	r2, #64	@ 0x40
 800beae:	621a      	str	r2, [r3, #32]

  return ret;
 800beb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800beba:	b480      	push	{r7}
 800bebc:	b083      	sub	sp, #12
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	460b      	mov	r3, r1
 800bec4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	78fa      	ldrb	r2, [r7, #3]
 800beca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800beda:	b480      	push	{r7}
 800bedc:	b083      	sub	sp, #12
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b04      	cmp	r3, #4
 800beec:	d006      	beq.n	800befc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2204      	movs	r2, #4
 800bf00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	370c      	adds	r7, #12
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf12:	b480      	push	{r7}
 800bf14:	b083      	sub	sp, #12
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	2b04      	cmp	r3, #4
 800bf24:	d106      	bne.n	800bf34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b082      	sub	sp, #8
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d110      	bne.n	800bf78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00b      	beq.n	800bf78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf66:	69db      	ldr	r3, [r3, #28]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d005      	beq.n	800bf78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf72:	69db      	ldr	r3, [r3, #28]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	32ae      	adds	r2, #174	@ 0xae
 800bf98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	e01c      	b.n	800bfde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	2b03      	cmp	r3, #3
 800bfae:	d115      	bne.n	800bfdc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	32ae      	adds	r2, #174	@ 0xae
 800bfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00b      	beq.n	800bfdc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	32ae      	adds	r2, #174	@ 0xae
 800bfce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd2:	6a1b      	ldr	r3, [r3, #32]
 800bfd4:	78fa      	ldrb	r2, [r7, #3]
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b082      	sub	sp, #8
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	460b      	mov	r3, r1
 800bff0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	32ae      	adds	r2, #174	@ 0xae
 800bffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d101      	bne.n	800c008 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c004:	2303      	movs	r3, #3
 800c006:	e01c      	b.n	800c042 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	2b03      	cmp	r3, #3
 800c012:	d115      	bne.n	800c040 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	32ae      	adds	r2, #174	@ 0xae
 800c01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00b      	beq.n	800c040 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	32ae      	adds	r2, #174	@ 0xae
 800c032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c038:	78fa      	ldrb	r2, [r7, #3]
 800c03a:	4611      	mov	r1, r2
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c04a:	b480      	push	{r7}
 800c04c:	b083      	sub	sp, #12
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c068:	2300      	movs	r3, #0
 800c06a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00e      	beq.n	800c09c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	6852      	ldr	r2, [r2, #4]
 800c08a:	b2d2      	uxtb	r2, r2
 800c08c:	4611      	mov	r1, r2
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	4798      	blx	r3
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d001      	beq.n	800c09c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c098:	2303      	movs	r3, #3
 800c09a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c0b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c0cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b086      	sub	sp, #24
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	885b      	ldrh	r3, [r3, #2]
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	7812      	ldrb	r2, [r2, #0]
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d91f      	bls.n	800c140 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c106:	e013      	b.n	800c130 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c108:	f107 030a 	add.w	r3, r7, #10
 800c10c:	4619      	mov	r1, r3
 800c10e:	6978      	ldr	r0, [r7, #20]
 800c110:	f000 f81b 	bl	800c14a <USBD_GetNextDesc>
 800c114:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	785b      	ldrb	r3, [r3, #1]
 800c11a:	2b05      	cmp	r3, #5
 800c11c:	d108      	bne.n	800c130 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	789b      	ldrb	r3, [r3, #2]
 800c126:	78fa      	ldrb	r2, [r7, #3]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d008      	beq.n	800c13e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c12c:	2300      	movs	r3, #0
 800c12e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	885b      	ldrh	r3, [r3, #2]
 800c134:	b29a      	uxth	r2, r3
 800c136:	897b      	ldrh	r3, [r7, #10]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d8e5      	bhi.n	800c108 <USBD_GetEpDesc+0x2e>
 800c13c:	e000      	b.n	800c140 <USBD_GetEpDesc+0x66>
          break;
 800c13e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c140:	693b      	ldr	r3, [r7, #16]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3718      	adds	r7, #24
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c14a:	b480      	push	{r7}
 800c14c:	b085      	sub	sp, #20
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	881b      	ldrh	r3, [r3, #0]
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	7812      	ldrb	r2, [r2, #0]
 800c160:	4413      	add	r3, r2
 800c162:	b29a      	uxth	r2, r3
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	461a      	mov	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4413      	add	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c174:	68fb      	ldr	r3, [r7, #12]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c182:	b480      	push	{r7}
 800c184:	b087      	sub	sp, #28
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	3301      	adds	r3, #1
 800c198:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c1a0:	8a3b      	ldrh	r3, [r7, #16]
 800c1a2:	021b      	lsls	r3, r3, #8
 800c1a4:	b21a      	sxth	r2, r3
 800c1a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	b21b      	sxth	r3, r3
 800c1ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c1b0:	89fb      	ldrh	r3, [r7, #14]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	371c      	adds	r7, #28
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr
	...

0800c1c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1d6:	2b40      	cmp	r3, #64	@ 0x40
 800c1d8:	d005      	beq.n	800c1e6 <USBD_StdDevReq+0x26>
 800c1da:	2b40      	cmp	r3, #64	@ 0x40
 800c1dc:	d857      	bhi.n	800c28e <USBD_StdDevReq+0xce>
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00f      	beq.n	800c202 <USBD_StdDevReq+0x42>
 800c1e2:	2b20      	cmp	r3, #32
 800c1e4:	d153      	bne.n	800c28e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	32ae      	adds	r2, #174	@ 0xae
 800c1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	6839      	ldr	r1, [r7, #0]
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	4798      	blx	r3
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c200:	e04a      	b.n	800c298 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	785b      	ldrb	r3, [r3, #1]
 800c206:	2b09      	cmp	r3, #9
 800c208:	d83b      	bhi.n	800c282 <USBD_StdDevReq+0xc2>
 800c20a:	a201      	add	r2, pc, #4	@ (adr r2, 800c210 <USBD_StdDevReq+0x50>)
 800c20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c210:	0800c265 	.word	0x0800c265
 800c214:	0800c279 	.word	0x0800c279
 800c218:	0800c283 	.word	0x0800c283
 800c21c:	0800c26f 	.word	0x0800c26f
 800c220:	0800c283 	.word	0x0800c283
 800c224:	0800c243 	.word	0x0800c243
 800c228:	0800c239 	.word	0x0800c239
 800c22c:	0800c283 	.word	0x0800c283
 800c230:	0800c25b 	.word	0x0800c25b
 800c234:	0800c24d 	.word	0x0800c24d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fa3c 	bl	800c6b8 <USBD_GetDescriptor>
          break;
 800c240:	e024      	b.n	800c28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 fbcb 	bl	800c9e0 <USBD_SetAddress>
          break;
 800c24a:	e01f      	b.n	800c28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fc0a 	bl	800ca68 <USBD_SetConfig>
 800c254:	4603      	mov	r3, r0
 800c256:	73fb      	strb	r3, [r7, #15]
          break;
 800c258:	e018      	b.n	800c28c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fcad 	bl	800cbbc <USBD_GetConfig>
          break;
 800c262:	e013      	b.n	800c28c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fcde 	bl	800cc28 <USBD_GetStatus>
          break;
 800c26c:	e00e      	b.n	800c28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c26e:	6839      	ldr	r1, [r7, #0]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fd0d 	bl	800cc90 <USBD_SetFeature>
          break;
 800c276:	e009      	b.n	800c28c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c278:	6839      	ldr	r1, [r7, #0]
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 fd31 	bl	800cce2 <USBD_ClrFeature>
          break;
 800c280:	e004      	b.n	800c28c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c282:	6839      	ldr	r1, [r7, #0]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fd88 	bl	800cd9a <USBD_CtlError>
          break;
 800c28a:	bf00      	nop
      }
      break;
 800c28c:	e004      	b.n	800c298 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 fd82 	bl	800cd9a <USBD_CtlError>
      break;
 800c296:	bf00      	nop
  }

  return ret;
 800c298:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop

0800c2a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c2ba:	2b40      	cmp	r3, #64	@ 0x40
 800c2bc:	d005      	beq.n	800c2ca <USBD_StdItfReq+0x26>
 800c2be:	2b40      	cmp	r3, #64	@ 0x40
 800c2c0:	d852      	bhi.n	800c368 <USBD_StdItfReq+0xc4>
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d001      	beq.n	800c2ca <USBD_StdItfReq+0x26>
 800c2c6:	2b20      	cmp	r3, #32
 800c2c8:	d14e      	bne.n	800c368 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d840      	bhi.n	800c35a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	889b      	ldrh	r3, [r3, #4]
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d836      	bhi.n	800c350 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	889b      	ldrh	r3, [r3, #4]
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff fedb 	bl	800c0a6 <USBD_CoreFindIF>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2f4:	7bbb      	ldrb	r3, [r7, #14]
 800c2f6:	2bff      	cmp	r3, #255	@ 0xff
 800c2f8:	d01d      	beq.n	800c336 <USBD_StdItfReq+0x92>
 800c2fa:	7bbb      	ldrb	r3, [r7, #14]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d11a      	bne.n	800c336 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c300:	7bba      	ldrb	r2, [r7, #14]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	32ae      	adds	r2, #174	@ 0xae
 800c306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00f      	beq.n	800c330 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c310:	7bba      	ldrb	r2, [r7, #14]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c318:	7bba      	ldrb	r2, [r7, #14]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	32ae      	adds	r2, #174	@ 0xae
 800c31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	4798      	blx	r3
 800c32a:	4603      	mov	r3, r0
 800c32c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c32e:	e004      	b.n	800c33a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c330:	2303      	movs	r3, #3
 800c332:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c334:	e001      	b.n	800c33a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c336:	2303      	movs	r3, #3
 800c338:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	88db      	ldrh	r3, [r3, #6]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d110      	bne.n	800c364 <USBD_StdItfReq+0xc0>
 800c342:	7bfb      	ldrb	r3, [r7, #15]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10d      	bne.n	800c364 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fdf1 	bl	800cf30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c34e:	e009      	b.n	800c364 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 fd21 	bl	800cd9a <USBD_CtlError>
          break;
 800c358:	e004      	b.n	800c364 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 fd1c 	bl	800cd9a <USBD_CtlError>
          break;
 800c362:	e000      	b.n	800c366 <USBD_StdItfReq+0xc2>
          break;
 800c364:	bf00      	nop
      }
      break;
 800c366:	e004      	b.n	800c372 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c368:	6839      	ldr	r1, [r7, #0]
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fd15 	bl	800cd9a <USBD_CtlError>
      break;
 800c370:	bf00      	nop
  }

  return ret;
 800c372:	7bfb      	ldrb	r3, [r7, #15]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	889b      	ldrh	r3, [r3, #4]
 800c38e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c398:	2b40      	cmp	r3, #64	@ 0x40
 800c39a:	d007      	beq.n	800c3ac <USBD_StdEPReq+0x30>
 800c39c:	2b40      	cmp	r3, #64	@ 0x40
 800c39e:	f200 817f 	bhi.w	800c6a0 <USBD_StdEPReq+0x324>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d02a      	beq.n	800c3fc <USBD_StdEPReq+0x80>
 800c3a6:	2b20      	cmp	r3, #32
 800c3a8:	f040 817a 	bne.w	800c6a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c3ac:	7bbb      	ldrb	r3, [r7, #14]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7ff fe85 	bl	800c0c0 <USBD_CoreFindEP>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3ba:	7b7b      	ldrb	r3, [r7, #13]
 800c3bc:	2bff      	cmp	r3, #255	@ 0xff
 800c3be:	f000 8174 	beq.w	800c6aa <USBD_StdEPReq+0x32e>
 800c3c2:	7b7b      	ldrb	r3, [r7, #13]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f040 8170 	bne.w	800c6aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c3ca:	7b7a      	ldrb	r2, [r7, #13]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c3d2:	7b7a      	ldrb	r2, [r7, #13]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	32ae      	adds	r2, #174	@ 0xae
 800c3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f000 8163 	beq.w	800c6aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c3e4:	7b7a      	ldrb	r2, [r7, #13]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	32ae      	adds	r2, #174	@ 0xae
 800c3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	4798      	blx	r3
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c3fa:	e156      	b.n	800c6aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	785b      	ldrb	r3, [r3, #1]
 800c400:	2b03      	cmp	r3, #3
 800c402:	d008      	beq.n	800c416 <USBD_StdEPReq+0x9a>
 800c404:	2b03      	cmp	r3, #3
 800c406:	f300 8145 	bgt.w	800c694 <USBD_StdEPReq+0x318>
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 809b 	beq.w	800c546 <USBD_StdEPReq+0x1ca>
 800c410:	2b01      	cmp	r3, #1
 800c412:	d03c      	beq.n	800c48e <USBD_StdEPReq+0x112>
 800c414:	e13e      	b.n	800c694 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d002      	beq.n	800c428 <USBD_StdEPReq+0xac>
 800c422:	2b03      	cmp	r3, #3
 800c424:	d016      	beq.n	800c454 <USBD_StdEPReq+0xd8>
 800c426:	e02c      	b.n	800c482 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c428:	7bbb      	ldrb	r3, [r7, #14]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00d      	beq.n	800c44a <USBD_StdEPReq+0xce>
 800c42e:	7bbb      	ldrb	r3, [r7, #14]
 800c430:	2b80      	cmp	r3, #128	@ 0x80
 800c432:	d00a      	beq.n	800c44a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c434:	7bbb      	ldrb	r3, [r7, #14]
 800c436:	4619      	mov	r1, r3
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f001 fa45 	bl	800d8c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c43e:	2180      	movs	r1, #128	@ 0x80
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f001 fa41 	bl	800d8c8 <USBD_LL_StallEP>
 800c446:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c448:	e020      	b.n	800c48c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fca4 	bl	800cd9a <USBD_CtlError>
              break;
 800c452:	e01b      	b.n	800c48c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	885b      	ldrh	r3, [r3, #2]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10e      	bne.n	800c47a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c45c:	7bbb      	ldrb	r3, [r7, #14]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00b      	beq.n	800c47a <USBD_StdEPReq+0xfe>
 800c462:	7bbb      	ldrb	r3, [r7, #14]
 800c464:	2b80      	cmp	r3, #128	@ 0x80
 800c466:	d008      	beq.n	800c47a <USBD_StdEPReq+0xfe>
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	88db      	ldrh	r3, [r3, #6]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d104      	bne.n	800c47a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c470:	7bbb      	ldrb	r3, [r7, #14]
 800c472:	4619      	mov	r1, r3
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f001 fa27 	bl	800d8c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fd58 	bl	800cf30 <USBD_CtlSendStatus>

              break;
 800c480:	e004      	b.n	800c48c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 fc88 	bl	800cd9a <USBD_CtlError>
              break;
 800c48a:	bf00      	nop
          }
          break;
 800c48c:	e107      	b.n	800c69e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b02      	cmp	r3, #2
 800c498:	d002      	beq.n	800c4a0 <USBD_StdEPReq+0x124>
 800c49a:	2b03      	cmp	r3, #3
 800c49c:	d016      	beq.n	800c4cc <USBD_StdEPReq+0x150>
 800c49e:	e04b      	b.n	800c538 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4a0:	7bbb      	ldrb	r3, [r7, #14]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00d      	beq.n	800c4c2 <USBD_StdEPReq+0x146>
 800c4a6:	7bbb      	ldrb	r3, [r7, #14]
 800c4a8:	2b80      	cmp	r3, #128	@ 0x80
 800c4aa:	d00a      	beq.n	800c4c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4ac:	7bbb      	ldrb	r3, [r7, #14]
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f001 fa09 	bl	800d8c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4b6:	2180      	movs	r1, #128	@ 0x80
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f001 fa05 	bl	800d8c8 <USBD_LL_StallEP>
 800c4be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4c0:	e040      	b.n	800c544 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c4c2:	6839      	ldr	r1, [r7, #0]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 fc68 	bl	800cd9a <USBD_CtlError>
              break;
 800c4ca:	e03b      	b.n	800c544 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	885b      	ldrh	r3, [r3, #2]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d136      	bne.n	800c542 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c4d4:	7bbb      	ldrb	r3, [r7, #14]
 800c4d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d004      	beq.n	800c4e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c4de:	7bbb      	ldrb	r3, [r7, #14]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f001 fa26 	bl	800d934 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 fd21 	bl	800cf30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c4ee:	7bbb      	ldrb	r3, [r7, #14]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff fde4 	bl	800c0c0 <USBD_CoreFindEP>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4fc:	7b7b      	ldrb	r3, [r7, #13]
 800c4fe:	2bff      	cmp	r3, #255	@ 0xff
 800c500:	d01f      	beq.n	800c542 <USBD_StdEPReq+0x1c6>
 800c502:	7b7b      	ldrb	r3, [r7, #13]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d11c      	bne.n	800c542 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c508:	7b7a      	ldrb	r2, [r7, #13]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c510:	7b7a      	ldrb	r2, [r7, #13]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	32ae      	adds	r2, #174	@ 0xae
 800c516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d010      	beq.n	800c542 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c520:	7b7a      	ldrb	r2, [r7, #13]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	32ae      	adds	r2, #174	@ 0xae
 800c526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	4798      	blx	r3
 800c532:	4603      	mov	r3, r0
 800c534:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c536:	e004      	b.n	800c542 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fc2d 	bl	800cd9a <USBD_CtlError>
              break;
 800c540:	e000      	b.n	800c544 <USBD_StdEPReq+0x1c8>
              break;
 800c542:	bf00      	nop
          }
          break;
 800c544:	e0ab      	b.n	800c69e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	2b02      	cmp	r3, #2
 800c550:	d002      	beq.n	800c558 <USBD_StdEPReq+0x1dc>
 800c552:	2b03      	cmp	r3, #3
 800c554:	d032      	beq.n	800c5bc <USBD_StdEPReq+0x240>
 800c556:	e097      	b.n	800c688 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c558:	7bbb      	ldrb	r3, [r7, #14]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d007      	beq.n	800c56e <USBD_StdEPReq+0x1f2>
 800c55e:	7bbb      	ldrb	r3, [r7, #14]
 800c560:	2b80      	cmp	r3, #128	@ 0x80
 800c562:	d004      	beq.n	800c56e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fc17 	bl	800cd9a <USBD_CtlError>
                break;
 800c56c:	e091      	b.n	800c692 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c56e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c572:	2b00      	cmp	r3, #0
 800c574:	da0b      	bge.n	800c58e <USBD_StdEPReq+0x212>
 800c576:	7bbb      	ldrb	r3, [r7, #14]
 800c578:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c57c:	4613      	mov	r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4413      	add	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	3310      	adds	r3, #16
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	4413      	add	r3, r2
 800c58a:	3304      	adds	r3, #4
 800c58c:	e00b      	b.n	800c5a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c58e:	7bbb      	ldrb	r3, [r7, #14]
 800c590:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c594:	4613      	mov	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4413      	add	r3, r2
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	4413      	add	r3, r2
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fc61 	bl	800ce7c <USBD_CtlSendData>
              break;
 800c5ba:	e06a      	b.n	800c692 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c5bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	da11      	bge.n	800c5e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5c4:	7bbb      	ldrb	r3, [r7, #14]
 800c5c6:	f003 020f 	and.w	r2, r3, #15
 800c5ca:	6879      	ldr	r1, [r7, #4]
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4413      	add	r3, r2
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	440b      	add	r3, r1
 800c5d6:	3324      	adds	r3, #36	@ 0x24
 800c5d8:	881b      	ldrh	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d117      	bne.n	800c60e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c5de:	6839      	ldr	r1, [r7, #0]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fbda 	bl	800cd9a <USBD_CtlError>
                  break;
 800c5e6:	e054      	b.n	800c692 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5e8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ea:	f003 020f 	and.w	r2, r3, #15
 800c5ee:	6879      	ldr	r1, [r7, #4]
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4413      	add	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	440b      	add	r3, r1
 800c5fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d104      	bne.n	800c60e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c604:	6839      	ldr	r1, [r7, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 fbc7 	bl	800cd9a <USBD_CtlError>
                  break;
 800c60c:	e041      	b.n	800c692 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c60e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c612:	2b00      	cmp	r3, #0
 800c614:	da0b      	bge.n	800c62e <USBD_StdEPReq+0x2b2>
 800c616:	7bbb      	ldrb	r3, [r7, #14]
 800c618:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c61c:	4613      	mov	r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	3310      	adds	r3, #16
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	4413      	add	r3, r2
 800c62a:	3304      	adds	r3, #4
 800c62c:	e00b      	b.n	800c646 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c62e:	7bbb      	ldrb	r3, [r7, #14]
 800c630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c634:	4613      	mov	r3, r2
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4413      	add	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	4413      	add	r3, r2
 800c644:	3304      	adds	r3, #4
 800c646:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c648:	7bbb      	ldrb	r3, [r7, #14]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d002      	beq.n	800c654 <USBD_StdEPReq+0x2d8>
 800c64e:	7bbb      	ldrb	r3, [r7, #14]
 800c650:	2b80      	cmp	r3, #128	@ 0x80
 800c652:	d103      	bne.n	800c65c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	2200      	movs	r2, #0
 800c658:	601a      	str	r2, [r3, #0]
 800c65a:	e00e      	b.n	800c67a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c65c:	7bbb      	ldrb	r3, [r7, #14]
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f001 f99d 	bl	800d9a0 <USBD_LL_IsStallEP>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d003      	beq.n	800c674 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2201      	movs	r2, #1
 800c670:	601a      	str	r2, [r3, #0]
 800c672:	e002      	b.n	800c67a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	2200      	movs	r2, #0
 800c678:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	2202      	movs	r2, #2
 800c67e:	4619      	mov	r1, r3
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 fbfb 	bl	800ce7c <USBD_CtlSendData>
              break;
 800c686:	e004      	b.n	800c692 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c688:	6839      	ldr	r1, [r7, #0]
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 fb85 	bl	800cd9a <USBD_CtlError>
              break;
 800c690:	bf00      	nop
          }
          break;
 800c692:	e004      	b.n	800c69e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 fb7f 	bl	800cd9a <USBD_CtlError>
          break;
 800c69c:	bf00      	nop
      }
      break;
 800c69e:	e005      	b.n	800c6ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 fb79 	bl	800cd9a <USBD_CtlError>
      break;
 800c6a8:	e000      	b.n	800c6ac <USBD_StdEPReq+0x330>
      break;
 800c6aa:	bf00      	nop
  }

  return ret;
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
	...

0800c6b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	885b      	ldrh	r3, [r3, #2]
 800c6d2:	0a1b      	lsrs	r3, r3, #8
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	2b0e      	cmp	r3, #14
 800c6da:	f200 8152 	bhi.w	800c982 <USBD_GetDescriptor+0x2ca>
 800c6de:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e4 <USBD_GetDescriptor+0x2c>)
 800c6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e4:	0800c755 	.word	0x0800c755
 800c6e8:	0800c76d 	.word	0x0800c76d
 800c6ec:	0800c7ad 	.word	0x0800c7ad
 800c6f0:	0800c983 	.word	0x0800c983
 800c6f4:	0800c983 	.word	0x0800c983
 800c6f8:	0800c923 	.word	0x0800c923
 800c6fc:	0800c94f 	.word	0x0800c94f
 800c700:	0800c983 	.word	0x0800c983
 800c704:	0800c983 	.word	0x0800c983
 800c708:	0800c983 	.word	0x0800c983
 800c70c:	0800c983 	.word	0x0800c983
 800c710:	0800c983 	.word	0x0800c983
 800c714:	0800c983 	.word	0x0800c983
 800c718:	0800c983 	.word	0x0800c983
 800c71c:	0800c721 	.word	0x0800c721
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c726:	69db      	ldr	r3, [r3, #28]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00b      	beq.n	800c744 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c732:	69db      	ldr	r3, [r3, #28]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	7c12      	ldrb	r2, [r2, #16]
 800c738:	f107 0108 	add.w	r1, r7, #8
 800c73c:	4610      	mov	r0, r2
 800c73e:	4798      	blx	r3
 800c740:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c742:	e126      	b.n	800c992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fb27 	bl	800cd9a <USBD_CtlError>
        err++;
 800c74c:	7afb      	ldrb	r3, [r7, #11]
 800c74e:	3301      	adds	r3, #1
 800c750:	72fb      	strb	r3, [r7, #11]
      break;
 800c752:	e11e      	b.n	800c992 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	7c12      	ldrb	r2, [r2, #16]
 800c760:	f107 0108 	add.w	r1, r7, #8
 800c764:	4610      	mov	r0, r2
 800c766:	4798      	blx	r3
 800c768:	60f8      	str	r0, [r7, #12]
      break;
 800c76a:	e112      	b.n	800c992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	7c1b      	ldrb	r3, [r3, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d10d      	bne.n	800c790 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c77c:	f107 0208 	add.w	r2, r7, #8
 800c780:	4610      	mov	r0, r2
 800c782:	4798      	blx	r3
 800c784:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	3301      	adds	r3, #1
 800c78a:	2202      	movs	r2, #2
 800c78c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c78e:	e100      	b.n	800c992 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c798:	f107 0208 	add.w	r2, r7, #8
 800c79c:	4610      	mov	r0, r2
 800c79e:	4798      	blx	r3
 800c7a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	701a      	strb	r2, [r3, #0]
      break;
 800c7aa:	e0f2      	b.n	800c992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	885b      	ldrh	r3, [r3, #2]
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	2b05      	cmp	r3, #5
 800c7b4:	f200 80ac 	bhi.w	800c910 <USBD_GetDescriptor+0x258>
 800c7b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c7c0 <USBD_GetDescriptor+0x108>)
 800c7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7be:	bf00      	nop
 800c7c0:	0800c7d9 	.word	0x0800c7d9
 800c7c4:	0800c80d 	.word	0x0800c80d
 800c7c8:	0800c841 	.word	0x0800c841
 800c7cc:	0800c875 	.word	0x0800c875
 800c7d0:	0800c8a9 	.word	0x0800c8a9
 800c7d4:	0800c8dd 	.word	0x0800c8dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00b      	beq.n	800c7fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	7c12      	ldrb	r2, [r2, #16]
 800c7f0:	f107 0108 	add.w	r1, r7, #8
 800c7f4:	4610      	mov	r0, r2
 800c7f6:	4798      	blx	r3
 800c7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7fa:	e091      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 facb 	bl	800cd9a <USBD_CtlError>
            err++;
 800c804:	7afb      	ldrb	r3, [r7, #11]
 800c806:	3301      	adds	r3, #1
 800c808:	72fb      	strb	r3, [r7, #11]
          break;
 800c80a:	e089      	b.n	800c920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00b      	beq.n	800c830 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	7c12      	ldrb	r2, [r2, #16]
 800c824:	f107 0108 	add.w	r1, r7, #8
 800c828:	4610      	mov	r0, r2
 800c82a:	4798      	blx	r3
 800c82c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c82e:	e077      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c830:	6839      	ldr	r1, [r7, #0]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 fab1 	bl	800cd9a <USBD_CtlError>
            err++;
 800c838:	7afb      	ldrb	r3, [r7, #11]
 800c83a:	3301      	adds	r3, #1
 800c83c:	72fb      	strb	r3, [r7, #11]
          break;
 800c83e:	e06f      	b.n	800c920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00b      	beq.n	800c864 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	7c12      	ldrb	r2, [r2, #16]
 800c858:	f107 0108 	add.w	r1, r7, #8
 800c85c:	4610      	mov	r0, r2
 800c85e:	4798      	blx	r3
 800c860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c862:	e05d      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c864:	6839      	ldr	r1, [r7, #0]
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 fa97 	bl	800cd9a <USBD_CtlError>
            err++;
 800c86c:	7afb      	ldrb	r3, [r7, #11]
 800c86e:	3301      	adds	r3, #1
 800c870:	72fb      	strb	r3, [r7, #11]
          break;
 800c872:	e055      	b.n	800c920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00b      	beq.n	800c898 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	7c12      	ldrb	r2, [r2, #16]
 800c88c:	f107 0108 	add.w	r1, r7, #8
 800c890:	4610      	mov	r0, r2
 800c892:	4798      	blx	r3
 800c894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c896:	e043      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fa7d 	bl	800cd9a <USBD_CtlError>
            err++;
 800c8a0:	7afb      	ldrb	r3, [r7, #11]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8a6:	e03b      	b.n	800c920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8ae:	695b      	ldr	r3, [r3, #20]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00b      	beq.n	800c8cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	7c12      	ldrb	r2, [r2, #16]
 800c8c0:	f107 0108 	add.w	r1, r7, #8
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4798      	blx	r3
 800c8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ca:	e029      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8cc:	6839      	ldr	r1, [r7, #0]
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 fa63 	bl	800cd9a <USBD_CtlError>
            err++;
 800c8d4:	7afb      	ldrb	r3, [r7, #11]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8da:	e021      	b.n	800c920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00b      	beq.n	800c900 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8ee:	699b      	ldr	r3, [r3, #24]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	7c12      	ldrb	r2, [r2, #16]
 800c8f4:	f107 0108 	add.w	r1, r7, #8
 800c8f8:	4610      	mov	r0, r2
 800c8fa:	4798      	blx	r3
 800c8fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8fe:	e00f      	b.n	800c920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c900:	6839      	ldr	r1, [r7, #0]
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fa49 	bl	800cd9a <USBD_CtlError>
            err++;
 800c908:	7afb      	ldrb	r3, [r7, #11]
 800c90a:	3301      	adds	r3, #1
 800c90c:	72fb      	strb	r3, [r7, #11]
          break;
 800c90e:	e007      	b.n	800c920 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fa41 	bl	800cd9a <USBD_CtlError>
          err++;
 800c918:	7afb      	ldrb	r3, [r7, #11]
 800c91a:	3301      	adds	r3, #1
 800c91c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c91e:	bf00      	nop
      }
      break;
 800c920:	e037      	b.n	800c992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	7c1b      	ldrb	r3, [r3, #16]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d109      	bne.n	800c93e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c932:	f107 0208 	add.w	r2, r7, #8
 800c936:	4610      	mov	r0, r2
 800c938:	4798      	blx	r3
 800c93a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c93c:	e029      	b.n	800c992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c93e:	6839      	ldr	r1, [r7, #0]
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 fa2a 	bl	800cd9a <USBD_CtlError>
        err++;
 800c946:	7afb      	ldrb	r3, [r7, #11]
 800c948:	3301      	adds	r3, #1
 800c94a:	72fb      	strb	r3, [r7, #11]
      break;
 800c94c:	e021      	b.n	800c992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	7c1b      	ldrb	r3, [r3, #16]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10d      	bne.n	800c972 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c95e:	f107 0208 	add.w	r2, r7, #8
 800c962:	4610      	mov	r0, r2
 800c964:	4798      	blx	r3
 800c966:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	3301      	adds	r3, #1
 800c96c:	2207      	movs	r2, #7
 800c96e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c970:	e00f      	b.n	800c992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c972:	6839      	ldr	r1, [r7, #0]
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fa10 	bl	800cd9a <USBD_CtlError>
        err++;
 800c97a:	7afb      	ldrb	r3, [r7, #11]
 800c97c:	3301      	adds	r3, #1
 800c97e:	72fb      	strb	r3, [r7, #11]
      break;
 800c980:	e007      	b.n	800c992 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fa08 	bl	800cd9a <USBD_CtlError>
      err++;
 800c98a:	7afb      	ldrb	r3, [r7, #11]
 800c98c:	3301      	adds	r3, #1
 800c98e:	72fb      	strb	r3, [r7, #11]
      break;
 800c990:	bf00      	nop
  }

  if (err != 0U)
 800c992:	7afb      	ldrb	r3, [r7, #11]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d11e      	bne.n	800c9d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	88db      	ldrh	r3, [r3, #6]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d016      	beq.n	800c9ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c9a0:	893b      	ldrh	r3, [r7, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00e      	beq.n	800c9c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	88da      	ldrh	r2, [r3, #6]
 800c9aa:	893b      	ldrh	r3, [r7, #8]
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	bf28      	it	cs
 800c9b0:	4613      	movcs	r3, r2
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9b6:	893b      	ldrh	r3, [r7, #8]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	68f9      	ldr	r1, [r7, #12]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fa5d 	bl	800ce7c <USBD_CtlSendData>
 800c9c2:	e009      	b.n	800c9d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f9e7 	bl	800cd9a <USBD_CtlError>
 800c9cc:	e004      	b.n	800c9d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 faae 	bl	800cf30 <USBD_CtlSendStatus>
 800c9d4:	e000      	b.n	800c9d8 <USBD_GetDescriptor+0x320>
    return;
 800c9d6:	bf00      	nop
  }
}
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop

0800c9e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	889b      	ldrh	r3, [r3, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d131      	bne.n	800ca56 <USBD_SetAddress+0x76>
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	88db      	ldrh	r3, [r3, #6]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d12d      	bne.n	800ca56 <USBD_SetAddress+0x76>
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	885b      	ldrh	r3, [r3, #2]
 800c9fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca00:	d829      	bhi.n	800ca56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	885b      	ldrh	r3, [r3, #2]
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b03      	cmp	r3, #3
 800ca18:	d104      	bne.n	800ca24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca1a:	6839      	ldr	r1, [r7, #0]
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 f9bc 	bl	800cd9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca22:	e01d      	b.n	800ca60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	7bfa      	ldrb	r2, [r7, #15]
 800ca28:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 ffe1 	bl	800d9f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 fa7a 	bl	800cf30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d004      	beq.n	800ca4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2202      	movs	r2, #2
 800ca46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca4a:	e009      	b.n	800ca60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca54:	e004      	b.n	800ca60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 f99e 	bl	800cd9a <USBD_CtlError>
  }
}
 800ca5e:	bf00      	nop
 800ca60:	bf00      	nop
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca72:	2300      	movs	r3, #0
 800ca74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	885b      	ldrh	r3, [r3, #2]
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	4b4e      	ldr	r3, [pc, #312]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800ca7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca80:	4b4d      	ldr	r3, [pc, #308]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d905      	bls.n	800ca94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f985 	bl	800cd9a <USBD_CtlError>
    return USBD_FAIL;
 800ca90:	2303      	movs	r3, #3
 800ca92:	e08c      	b.n	800cbae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d002      	beq.n	800caa6 <USBD_SetConfig+0x3e>
 800caa0:	2b03      	cmp	r3, #3
 800caa2:	d029      	beq.n	800caf8 <USBD_SetConfig+0x90>
 800caa4:	e075      	b.n	800cb92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800caa6:	4b44      	ldr	r3, [pc, #272]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d020      	beq.n	800caf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800caae:	4b42      	ldr	r3, [pc, #264]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	461a      	mov	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cab8:	4b3f      	ldr	r3, [pc, #252]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	4619      	mov	r1, r3
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7fe ffb9 	bl	800ba36 <USBD_SetClassConfig>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d008      	beq.n	800cae0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cace:	6839      	ldr	r1, [r7, #0]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 f962 	bl	800cd9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2202      	movs	r2, #2
 800cada:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cade:	e065      	b.n	800cbac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 fa25 	bl	800cf30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2203      	movs	r2, #3
 800caea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800caee:	e05d      	b.n	800cbac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 fa1d 	bl	800cf30 <USBD_CtlSendStatus>
      break;
 800caf6:	e059      	b.n	800cbac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800caf8:	4b2f      	ldr	r3, [pc, #188]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d112      	bne.n	800cb26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2202      	movs	r2, #2
 800cb04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cb08:	4b2b      	ldr	r3, [pc, #172]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb12:	4b29      	ldr	r3, [pc, #164]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	4619      	mov	r1, r3
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f7fe ffa8 	bl	800ba6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fa06 	bl	800cf30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb24:	e042      	b.n	800cbac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb26:	4b24      	ldr	r3, [pc, #144]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d02a      	beq.n	800cb8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7fe ff96 	bl	800ba6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb42:	4b1d      	ldr	r3, [pc, #116]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	461a      	mov	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb4c:	4b1a      	ldr	r3, [pc, #104]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	4619      	mov	r1, r3
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7fe ff6f 	bl	800ba36 <USBD_SetClassConfig>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb5c:	7bfb      	ldrb	r3, [r7, #15]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00f      	beq.n	800cb82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 f918 	bl	800cd9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	4619      	mov	r1, r3
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7fe ff7b 	bl	800ba6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2202      	movs	r2, #2
 800cb7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb80:	e014      	b.n	800cbac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f9d4 	bl	800cf30 <USBD_CtlSendStatus>
      break;
 800cb88:	e010      	b.n	800cbac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f9d0 	bl	800cf30 <USBD_CtlSendStatus>
      break;
 800cb90:	e00c      	b.n	800cbac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 f900 	bl	800cd9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb9a:	4b07      	ldr	r3, [pc, #28]	@ (800cbb8 <USBD_SetConfig+0x150>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	4619      	mov	r1, r3
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f7fe ff64 	bl	800ba6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cba6:	2303      	movs	r3, #3
 800cba8:	73fb      	strb	r3, [r7, #15]
      break;
 800cbaa:	bf00      	nop
  }

  return ret;
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	200039a0 	.word	0x200039a0

0800cbbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	88db      	ldrh	r3, [r3, #6]
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d004      	beq.n	800cbd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f8e2 	bl	800cd9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cbd6:	e023      	b.n	800cc20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	dc02      	bgt.n	800cbea <USBD_GetConfig+0x2e>
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	dc03      	bgt.n	800cbf0 <USBD_GetConfig+0x34>
 800cbe8:	e015      	b.n	800cc16 <USBD_GetConfig+0x5a>
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d00b      	beq.n	800cc06 <USBD_GetConfig+0x4a>
 800cbee:	e012      	b.n	800cc16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	3308      	adds	r3, #8
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f93c 	bl	800ce7c <USBD_CtlSendData>
        break;
 800cc04:	e00c      	b.n	800cc20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	3304      	adds	r3, #4
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f934 	bl	800ce7c <USBD_CtlSendData>
        break;
 800cc14:	e004      	b.n	800cc20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc16:	6839      	ldr	r1, [r7, #0]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f8be 	bl	800cd9a <USBD_CtlError>
        break;
 800cc1e:	bf00      	nop
}
 800cc20:	bf00      	nop
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	d81e      	bhi.n	800cc7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	88db      	ldrh	r3, [r3, #6]
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d004      	beq.n	800cc52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f8a5 	bl	800cd9a <USBD_CtlError>
        break;
 800cc50:	e01a      	b.n	800cc88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2201      	movs	r2, #1
 800cc56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d005      	beq.n	800cc6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	f043 0202 	orr.w	r2, r3, #2
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	330c      	adds	r3, #12
 800cc72:	2202      	movs	r2, #2
 800cc74:	4619      	mov	r1, r3
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 f900 	bl	800ce7c <USBD_CtlSendData>
      break;
 800cc7c:	e004      	b.n	800cc88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc7e:	6839      	ldr	r1, [r7, #0]
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 f88a 	bl	800cd9a <USBD_CtlError>
      break;
 800cc86:	bf00      	nop
  }
}
 800cc88:	bf00      	nop
 800cc8a:	3708      	adds	r7, #8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	885b      	ldrh	r3, [r3, #2]
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d107      	bne.n	800ccb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 f940 	bl	800cf30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ccb0:	e013      	b.n	800ccda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	885b      	ldrh	r3, [r3, #2]
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d10b      	bne.n	800ccd2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	889b      	ldrh	r3, [r3, #4]
 800ccbe:	0a1b      	lsrs	r3, r3, #8
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f930 	bl	800cf30 <USBD_CtlSendStatus>
}
 800ccd0:	e003      	b.n	800ccda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 f860 	bl	800cd9a <USBD_CtlError>
}
 800ccda:	bf00      	nop
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b082      	sub	sp, #8
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	2b02      	cmp	r3, #2
 800ccf8:	d80b      	bhi.n	800cd12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	885b      	ldrh	r3, [r3, #2]
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d10c      	bne.n	800cd1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 f910 	bl	800cf30 <USBD_CtlSendStatus>
      }
      break;
 800cd10:	e004      	b.n	800cd1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd12:	6839      	ldr	r1, [r7, #0]
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 f840 	bl	800cd9a <USBD_CtlError>
      break;
 800cd1a:	e000      	b.n	800cd1e <USBD_ClrFeature+0x3c>
      break;
 800cd1c:	bf00      	nop
  }
}
 800cd1e:	bf00      	nop
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b084      	sub	sp, #16
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	781a      	ldrb	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	781a      	ldrb	r2, [r3, #0]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f7ff fa16 	bl	800c182 <SWAPBYTE>
 800cd56:	4603      	mov	r3, r0
 800cd58:	461a      	mov	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	3301      	adds	r3, #1
 800cd62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	3301      	adds	r3, #1
 800cd68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f7ff fa09 	bl	800c182 <SWAPBYTE>
 800cd70:	4603      	mov	r3, r0
 800cd72:	461a      	mov	r2, r3
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	3301      	adds	r3, #1
 800cd82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f7ff f9fc 	bl	800c182 <SWAPBYTE>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	80da      	strh	r2, [r3, #6]
}
 800cd92:	bf00      	nop
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b082      	sub	sp, #8
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cda4:	2180      	movs	r1, #128	@ 0x80
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 fd8e 	bl	800d8c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cdac:	2100      	movs	r1, #0
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 fd8a 	bl	800d8c8 <USBD_LL_StallEP>
}
 800cdb4:	bf00      	nop
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d036      	beq.n	800ce40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cdd6:	6938      	ldr	r0, [r7, #16]
 800cdd8:	f000 f836 	bl	800ce48 <USBD_GetLen>
 800cddc:	4603      	mov	r3, r0
 800cdde:	3301      	adds	r3, #1
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	b29a      	uxth	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cdea:	7dfb      	ldrb	r3, [r7, #23]
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	4413      	add	r3, r2
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	7812      	ldrb	r2, [r2, #0]
 800cdf4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdf6:	7dfb      	ldrb	r3, [r7, #23]
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cdfc:	7dfb      	ldrb	r3, [r7, #23]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	4413      	add	r3, r2
 800ce02:	2203      	movs	r2, #3
 800ce04:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce06:	7dfb      	ldrb	r3, [r7, #23]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce0c:	e013      	b.n	800ce36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ce0e:	7dfb      	ldrb	r3, [r7, #23]
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	4413      	add	r3, r2
 800ce14:	693a      	ldr	r2, [r7, #16]
 800ce16:	7812      	ldrb	r2, [r2, #0]
 800ce18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	613b      	str	r3, [r7, #16]
    idx++;
 800ce20:	7dfb      	ldrb	r3, [r7, #23]
 800ce22:	3301      	adds	r3, #1
 800ce24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce26:	7dfb      	ldrb	r3, [r7, #23]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce30:	7dfb      	ldrb	r3, [r7, #23]
 800ce32:	3301      	adds	r3, #1
 800ce34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1e7      	bne.n	800ce0e <USBD_GetString+0x52>
 800ce3e:	e000      	b.n	800ce42 <USBD_GetString+0x86>
    return;
 800ce40:	bf00      	nop
  }
}
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce58:	e005      	b.n	800ce66 <USBD_GetLen+0x1e>
  {
    len++;
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	3301      	adds	r3, #1
 800ce64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1f5      	bne.n	800ce5a <USBD_GetLen+0x12>
  }

  return len;
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2202      	movs	r2, #2
 800ce8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	68ba      	ldr	r2, [r7, #8]
 800cea0:	2100      	movs	r1, #0
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f000 fdde 	bl	800da64 <USBD_LL_Transmit>

  return USBD_OK;
 800cea8:	2300      	movs	r3, #0
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b084      	sub	sp, #16
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	60f8      	str	r0, [r7, #12]
 800ceba:	60b9      	str	r1, [r7, #8]
 800cebc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	68ba      	ldr	r2, [r7, #8]
 800cec2:	2100      	movs	r1, #0
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f000 fdcd 	bl	800da64 <USBD_LL_Transmit>

  return USBD_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2203      	movs	r2, #3
 800cee4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68ba      	ldr	r2, [r7, #8]
 800cefc:	2100      	movs	r1, #0
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f000 fde8 	bl	800dad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b084      	sub	sp, #16
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	60f8      	str	r0, [r7, #12]
 800cf16:	60b9      	str	r1, [r7, #8]
 800cf18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	2100      	movs	r1, #0
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f000 fdd7 	bl	800dad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2204      	movs	r2, #4
 800cf3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf40:	2300      	movs	r3, #0
 800cf42:	2200      	movs	r2, #0
 800cf44:	2100      	movs	r1, #0
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fd8c 	bl	800da64 <USBD_LL_Transmit>

  return USBD_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b082      	sub	sp, #8
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2205      	movs	r2, #5
 800cf62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf66:	2300      	movs	r3, #0
 800cf68:	2200      	movs	r2, #0
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 fdb1 	bl	800dad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cf80:	2200      	movs	r2, #0
 800cf82:	4912      	ldr	r1, [pc, #72]	@ (800cfcc <MX_USB_DEVICE_Init+0x50>)
 800cf84:	4812      	ldr	r0, [pc, #72]	@ (800cfd0 <MX_USB_DEVICE_Init+0x54>)
 800cf86:	f7fe fcd9 	bl	800b93c <USBD_Init>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf90:	f7f4 fab7 	bl	8001502 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf94:	490f      	ldr	r1, [pc, #60]	@ (800cfd4 <MX_USB_DEVICE_Init+0x58>)
 800cf96:	480e      	ldr	r0, [pc, #56]	@ (800cfd0 <MX_USB_DEVICE_Init+0x54>)
 800cf98:	f7fe fd00 	bl	800b99c <USBD_RegisterClass>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d001      	beq.n	800cfa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cfa2:	f7f4 faae 	bl	8001502 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cfa6:	490c      	ldr	r1, [pc, #48]	@ (800cfd8 <MX_USB_DEVICE_Init+0x5c>)
 800cfa8:	4809      	ldr	r0, [pc, #36]	@ (800cfd0 <MX_USB_DEVICE_Init+0x54>)
 800cfaa:	f7fe fbf7 	bl	800b79c <USBD_CDC_RegisterInterface>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d001      	beq.n	800cfb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cfb4:	f7f4 faa5 	bl	8001502 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cfb8:	4805      	ldr	r0, [pc, #20]	@ (800cfd0 <MX_USB_DEVICE_Init+0x54>)
 800cfba:	f7fe fd25 	bl	800ba08 <USBD_Start>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d001      	beq.n	800cfc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cfc4:	f7f4 fa9d 	bl	8001502 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cfc8:	bf00      	nop
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	200000ac 	.word	0x200000ac
 800cfd0:	200039a4 	.word	0x200039a4
 800cfd4:	20000018 	.word	0x20000018
 800cfd8:	20000098 	.word	0x20000098

0800cfdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	4905      	ldr	r1, [pc, #20]	@ (800cff8 <CDC_Init_FS+0x1c>)
 800cfe4:	4805      	ldr	r0, [pc, #20]	@ (800cffc <CDC_Init_FS+0x20>)
 800cfe6:	f7fe fbf3 	bl	800b7d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cfea:	4905      	ldr	r1, [pc, #20]	@ (800d000 <CDC_Init_FS+0x24>)
 800cfec:	4803      	ldr	r0, [pc, #12]	@ (800cffc <CDC_Init_FS+0x20>)
 800cfee:	f7fe fc11 	bl	800b814 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cff2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	20004480 	.word	0x20004480
 800cffc:	200039a4 	.word	0x200039a4
 800d000:	20003c80 	.word	0x20003c80

0800d004 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d004:	b480      	push	{r7}
 800d006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d008:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	6039      	str	r1, [r7, #0]
 800d01e:	71fb      	strb	r3, [r7, #7]
 800d020:	4613      	mov	r3, r2
 800d022:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	2b23      	cmp	r3, #35	@ 0x23
 800d028:	d84a      	bhi.n	800d0c0 <CDC_Control_FS+0xac>
 800d02a:	a201      	add	r2, pc, #4	@ (adr r2, 800d030 <CDC_Control_FS+0x1c>)
 800d02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d030:	0800d0c1 	.word	0x0800d0c1
 800d034:	0800d0c1 	.word	0x0800d0c1
 800d038:	0800d0c1 	.word	0x0800d0c1
 800d03c:	0800d0c1 	.word	0x0800d0c1
 800d040:	0800d0c1 	.word	0x0800d0c1
 800d044:	0800d0c1 	.word	0x0800d0c1
 800d048:	0800d0c1 	.word	0x0800d0c1
 800d04c:	0800d0c1 	.word	0x0800d0c1
 800d050:	0800d0c1 	.word	0x0800d0c1
 800d054:	0800d0c1 	.word	0x0800d0c1
 800d058:	0800d0c1 	.word	0x0800d0c1
 800d05c:	0800d0c1 	.word	0x0800d0c1
 800d060:	0800d0c1 	.word	0x0800d0c1
 800d064:	0800d0c1 	.word	0x0800d0c1
 800d068:	0800d0c1 	.word	0x0800d0c1
 800d06c:	0800d0c1 	.word	0x0800d0c1
 800d070:	0800d0c1 	.word	0x0800d0c1
 800d074:	0800d0c1 	.word	0x0800d0c1
 800d078:	0800d0c1 	.word	0x0800d0c1
 800d07c:	0800d0c1 	.word	0x0800d0c1
 800d080:	0800d0c1 	.word	0x0800d0c1
 800d084:	0800d0c1 	.word	0x0800d0c1
 800d088:	0800d0c1 	.word	0x0800d0c1
 800d08c:	0800d0c1 	.word	0x0800d0c1
 800d090:	0800d0c1 	.word	0x0800d0c1
 800d094:	0800d0c1 	.word	0x0800d0c1
 800d098:	0800d0c1 	.word	0x0800d0c1
 800d09c:	0800d0c1 	.word	0x0800d0c1
 800d0a0:	0800d0c1 	.word	0x0800d0c1
 800d0a4:	0800d0c1 	.word	0x0800d0c1
 800d0a8:	0800d0c1 	.word	0x0800d0c1
 800d0ac:	0800d0c1 	.word	0x0800d0c1
 800d0b0:	0800d0c1 	.word	0x0800d0c1
 800d0b4:	0800d0c1 	.word	0x0800d0c1
 800d0b8:	0800d0c1 	.word	0x0800d0c1
 800d0bc:	0800d0c1 	.word	0x0800d0c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d0c0:	bf00      	nop
  }

  return (USBD_OK);
 800d0c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d0da:	6879      	ldr	r1, [r7, #4]
 800d0dc:	4808      	ldr	r0, [pc, #32]	@ (800d100 <CDC_Receive_FS+0x30>)
 800d0de:	f7fe fb99 	bl	800b814 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d0e2:	4807      	ldr	r0, [pc, #28]	@ (800d100 <CDC_Receive_FS+0x30>)
 800d0e4:	f7fe fbf4 	bl	800b8d0 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  //USB_My_Receive(Buf, *Len);
  comms_cdc_rx_callback(Buf, *Len);
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f7f3 fe48 	bl	8000d84 <comms_cdc_rx_callback>

  return (USBD_OK);
 800d0f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3708      	adds	r7, #8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	200039a4 	.word	0x200039a4

0800d104 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	460b      	mov	r3, r1
 800d10e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d110:	2300      	movs	r3, #0
 800d112:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d114:	4b0d      	ldr	r3, [pc, #52]	@ (800d14c <CDC_Transmit_FS+0x48>)
 800d116:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d11a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d122:	2b00      	cmp	r3, #0
 800d124:	d001      	beq.n	800d12a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d126:	2301      	movs	r3, #1
 800d128:	e00b      	b.n	800d142 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d12a:	887b      	ldrh	r3, [r7, #2]
 800d12c:	461a      	mov	r2, r3
 800d12e:	6879      	ldr	r1, [r7, #4]
 800d130:	4806      	ldr	r0, [pc, #24]	@ (800d14c <CDC_Transmit_FS+0x48>)
 800d132:	f7fe fb4d 	bl	800b7d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d136:	4805      	ldr	r0, [pc, #20]	@ (800d14c <CDC_Transmit_FS+0x48>)
 800d138:	f7fe fb8a 	bl	800b850 <USBD_CDC_TransmitPacket>
 800d13c:	4603      	mov	r3, r0
 800d13e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d140:	7bfb      	ldrb	r3, [r7, #15]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	200039a4 	.word	0x200039a4

0800d150 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d150:	b480      	push	{r7}
 800d152:	b087      	sub	sp, #28
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	4613      	mov	r3, r2
 800d15c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d15e:	2300      	movs	r3, #0
 800d160:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d166:	4618      	mov	r0, r3
 800d168:	371c      	adds	r7, #28
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
	...

0800d174 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	4603      	mov	r3, r0
 800d17c:	6039      	str	r1, [r7, #0]
 800d17e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	2212      	movs	r2, #18
 800d184:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d186:	4b03      	ldr	r3, [pc, #12]	@ (800d194 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d188:	4618      	mov	r0, r3
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr
 800d194:	200000cc 	.word	0x200000cc

0800d198 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	4603      	mov	r3, r0
 800d1a0:	6039      	str	r1, [r7, #0]
 800d1a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	2204      	movs	r2, #4
 800d1a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d1aa:	4b03      	ldr	r3, [pc, #12]	@ (800d1b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr
 800d1b8:	200000ec 	.word	0x200000ec

0800d1bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	6039      	str	r1, [r7, #0]
 800d1c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1c8:	79fb      	ldrb	r3, [r7, #7]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d105      	bne.n	800d1da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1ce:	683a      	ldr	r2, [r7, #0]
 800d1d0:	4907      	ldr	r1, [pc, #28]	@ (800d1f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d1d2:	4808      	ldr	r0, [pc, #32]	@ (800d1f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d1d4:	f7ff fdf2 	bl	800cdbc <USBD_GetString>
 800d1d8:	e004      	b.n	800d1e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	4904      	ldr	r1, [pc, #16]	@ (800d1f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d1de:	4805      	ldr	r0, [pc, #20]	@ (800d1f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d1e0:	f7ff fdec 	bl	800cdbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1e4:	4b02      	ldr	r3, [pc, #8]	@ (800d1f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	20004c80 	.word	0x20004c80
 800d1f4:	0800dcd0 	.word	0x0800dcd0

0800d1f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	4603      	mov	r3, r0
 800d200:	6039      	str	r1, [r7, #0]
 800d202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	4904      	ldr	r1, [pc, #16]	@ (800d218 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d208:	4804      	ldr	r0, [pc, #16]	@ (800d21c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d20a:	f7ff fdd7 	bl	800cdbc <USBD_GetString>
  return USBD_StrDesc;
 800d20e:	4b02      	ldr	r3, [pc, #8]	@ (800d218 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d210:	4618      	mov	r0, r3
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	20004c80 	.word	0x20004c80
 800d21c:	0800dce8 	.word	0x0800dce8

0800d220 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	4603      	mov	r3, r0
 800d228:	6039      	str	r1, [r7, #0]
 800d22a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	221a      	movs	r2, #26
 800d230:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d232:	f000 f855 	bl	800d2e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d236:	4b02      	ldr	r3, [pc, #8]	@ (800d240 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	200000f0 	.word	0x200000f0

0800d244 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	6039      	str	r1, [r7, #0]
 800d24e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d105      	bne.n	800d262 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	4907      	ldr	r1, [pc, #28]	@ (800d278 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d25a:	4808      	ldr	r0, [pc, #32]	@ (800d27c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d25c:	f7ff fdae 	bl	800cdbc <USBD_GetString>
 800d260:	e004      	b.n	800d26c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d262:	683a      	ldr	r2, [r7, #0]
 800d264:	4904      	ldr	r1, [pc, #16]	@ (800d278 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d266:	4805      	ldr	r0, [pc, #20]	@ (800d27c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d268:	f7ff fda8 	bl	800cdbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d26c:	4b02      	ldr	r3, [pc, #8]	@ (800d278 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	20004c80 	.word	0x20004c80
 800d27c:	0800dcfc 	.word	0x0800dcfc

0800d280 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	4603      	mov	r3, r0
 800d288:	6039      	str	r1, [r7, #0]
 800d28a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d28c:	79fb      	ldrb	r3, [r7, #7]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d105      	bne.n	800d29e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d292:	683a      	ldr	r2, [r7, #0]
 800d294:	4907      	ldr	r1, [pc, #28]	@ (800d2b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d296:	4808      	ldr	r0, [pc, #32]	@ (800d2b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d298:	f7ff fd90 	bl	800cdbc <USBD_GetString>
 800d29c:	e004      	b.n	800d2a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d29e:	683a      	ldr	r2, [r7, #0]
 800d2a0:	4904      	ldr	r1, [pc, #16]	@ (800d2b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d2a2:	4805      	ldr	r0, [pc, #20]	@ (800d2b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d2a4:	f7ff fd8a 	bl	800cdbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2a8:	4b02      	ldr	r3, [pc, #8]	@ (800d2b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	20004c80 	.word	0x20004c80
 800d2b8:	0800dd08 	.word	0x0800dd08

0800d2bc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	6039      	str	r1, [r7, #0]
 800d2c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	220c      	movs	r2, #12
 800d2cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d2ce:	4b03      	ldr	r3, [pc, #12]	@ (800d2dc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	200000e0 	.word	0x200000e0

0800d2e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d2e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d324 <Get_SerialNum+0x44>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d2ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d328 <Get_SerialNum+0x48>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d2f2:	4b0e      	ldr	r3, [pc, #56]	@ (800d32c <Get_SerialNum+0x4c>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d009      	beq.n	800d31a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d306:	2208      	movs	r2, #8
 800d308:	4909      	ldr	r1, [pc, #36]	@ (800d330 <Get_SerialNum+0x50>)
 800d30a:	68f8      	ldr	r0, [r7, #12]
 800d30c:	f000 f814 	bl	800d338 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d310:	2204      	movs	r2, #4
 800d312:	4908      	ldr	r1, [pc, #32]	@ (800d334 <Get_SerialNum+0x54>)
 800d314:	68b8      	ldr	r0, [r7, #8]
 800d316:	f000 f80f 	bl	800d338 <IntToUnicode>
  }
}
 800d31a:	bf00      	nop
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	1fff7590 	.word	0x1fff7590
 800d328:	1fff7594 	.word	0x1fff7594
 800d32c:	1fff7598 	.word	0x1fff7598
 800d330:	200000f2 	.word	0x200000f2
 800d334:	20000102 	.word	0x20000102

0800d338 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d338:	b480      	push	{r7}
 800d33a:	b087      	sub	sp, #28
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	4613      	mov	r3, r2
 800d344:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d34a:	2300      	movs	r3, #0
 800d34c:	75fb      	strb	r3, [r7, #23]
 800d34e:	e027      	b.n	800d3a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	0f1b      	lsrs	r3, r3, #28
 800d354:	2b09      	cmp	r3, #9
 800d356:	d80b      	bhi.n	800d370 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	0f1b      	lsrs	r3, r3, #28
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	7dfb      	ldrb	r3, [r7, #23]
 800d360:	005b      	lsls	r3, r3, #1
 800d362:	4619      	mov	r1, r3
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	440b      	add	r3, r1
 800d368:	3230      	adds	r2, #48	@ 0x30
 800d36a:	b2d2      	uxtb	r2, r2
 800d36c:	701a      	strb	r2, [r3, #0]
 800d36e:	e00a      	b.n	800d386 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	0f1b      	lsrs	r3, r3, #28
 800d374:	b2da      	uxtb	r2, r3
 800d376:	7dfb      	ldrb	r3, [r7, #23]
 800d378:	005b      	lsls	r3, r3, #1
 800d37a:	4619      	mov	r1, r3
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	440b      	add	r3, r1
 800d380:	3237      	adds	r2, #55	@ 0x37
 800d382:	b2d2      	uxtb	r2, r2
 800d384:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	011b      	lsls	r3, r3, #4
 800d38a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d38c:	7dfb      	ldrb	r3, [r7, #23]
 800d38e:	005b      	lsls	r3, r3, #1
 800d390:	3301      	adds	r3, #1
 800d392:	68ba      	ldr	r2, [r7, #8]
 800d394:	4413      	add	r3, r2
 800d396:	2200      	movs	r2, #0
 800d398:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d39a:	7dfb      	ldrb	r3, [r7, #23]
 800d39c:	3301      	adds	r3, #1
 800d39e:	75fb      	strb	r3, [r7, #23]
 800d3a0:	7dfa      	ldrb	r2, [r7, #23]
 800d3a2:	79fb      	ldrb	r3, [r7, #7]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d3d3      	bcc.n	800d350 <IntToUnicode+0x18>
  }
}
 800d3a8:	bf00      	nop
 800d3aa:	bf00      	nop
 800d3ac:	371c      	adds	r7, #28
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
	...

0800d3b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b0b0      	sub	sp, #192	@ 0xc0
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	601a      	str	r2, [r3, #0]
 800d3c8:	605a      	str	r2, [r3, #4]
 800d3ca:	609a      	str	r2, [r3, #8]
 800d3cc:	60da      	str	r2, [r3, #12]
 800d3ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d3d0:	f107 0318 	add.w	r3, r7, #24
 800d3d4:	2294      	movs	r2, #148	@ 0x94
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f000 fc33 	bl	800dc44 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d3e6:	d174      	bne.n	800d4d2 <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d3e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d3ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d3f4:	f107 0318 	add.w	r3, r7, #24
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7f9 f829 	bl	8006450 <HAL_RCCEx_PeriphCLKConfig>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d404:	f7f4 f87d 	bl	8001502 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d408:	4b34      	ldr	r3, [pc, #208]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d40a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d40c:	4a33      	ldr	r2, [pc, #204]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d40e:	f043 0301 	orr.w	r3, r3, #1
 800d412:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d414:	4b31      	ldr	r3, [pc, #196]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d418:	f003 0301 	and.w	r3, r3, #1
 800d41c:	617b      	str	r3, [r7, #20]
 800d41e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d420:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800d424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d428:	2302      	movs	r3, #2
 800d42a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d42e:	2300      	movs	r3, #0
 800d430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d434:	2303      	movs	r3, #3
 800d436:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d43a:	230a      	movs	r3, #10
 800d43c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d440:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d444:	4619      	mov	r1, r3
 800d446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d44a:	f7f6 fca9 	bl	8003da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d44e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d452:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d456:	2300      	movs	r3, #0
 800d458:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d45c:	2300      	movs	r3, #0
 800d45e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d462:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d466:	4619      	mov	r1, r3
 800d468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d46c:	f7f6 fc98 	bl	8003da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d470:	4b1a      	ldr	r3, [pc, #104]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d474:	4a19      	ldr	r2, [pc, #100]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d476:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d47a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d47c:	4b17      	ldr	r3, [pc, #92]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d47e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d484:	613b      	str	r3, [r7, #16]
 800d486:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d488:	4b14      	ldr	r3, [pc, #80]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d48a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d48c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d490:	2b00      	cmp	r3, #0
 800d492:	d114      	bne.n	800d4be <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d494:	4b11      	ldr	r3, [pc, #68]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d498:	4a10      	ldr	r2, [pc, #64]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d49a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d49e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d4a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d4a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4a8:	60fb      	str	r3, [r7, #12]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d4ac:	f7f8 f8d8 	bl	8005660 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d4b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d4b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4b4:	4a09      	ldr	r2, [pc, #36]	@ (800d4dc <HAL_PCD_MspInit+0x124>)
 800d4b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d4ba:	6593      	str	r3, [r2, #88]	@ 0x58
 800d4bc:	e001      	b.n	800d4c2 <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d4be:	f7f8 f8cf 	bl	8005660 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	2043      	movs	r0, #67	@ 0x43
 800d4c8:	f7f6 f8bd 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d4cc:	2043      	movs	r0, #67	@ 0x43
 800d4ce:	f7f6 f8d6 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d4d2:	bf00      	nop
 800d4d4:	37c0      	adds	r7, #192	@ 0xc0
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	40021000 	.word	0x40021000

0800d4e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	f7fe fad3 	bl	800baa2 <USBD_LL_SetupStage>
}
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d516:	78fa      	ldrb	r2, [r7, #3]
 800d518:	6879      	ldr	r1, [r7, #4]
 800d51a:	4613      	mov	r3, r2
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	4413      	add	r3, r2
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	440b      	add	r3, r1
 800d524:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	78fb      	ldrb	r3, [r7, #3]
 800d52c:	4619      	mov	r1, r3
 800d52e:	f7fe fb0d 	bl	800bb4c <USBD_LL_DataOutStage>
}
 800d532:	bf00      	nop
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b082      	sub	sp, #8
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
 800d542:	460b      	mov	r3, r1
 800d544:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d54c:	78fa      	ldrb	r2, [r7, #3]
 800d54e:	6879      	ldr	r1, [r7, #4]
 800d550:	4613      	mov	r3, r2
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	4413      	add	r3, r2
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	440b      	add	r3, r1
 800d55a:	3348      	adds	r3, #72	@ 0x48
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	78fb      	ldrb	r3, [r7, #3]
 800d560:	4619      	mov	r1, r3
 800d562:	f7fe fba6 	bl	800bcb2 <USBD_LL_DataInStage>
}
 800d566:	bf00      	nop
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d56e:	b580      	push	{r7, lr}
 800d570:	b082      	sub	sp, #8
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fe fce0 	bl	800bf42 <USBD_LL_SOF>
}
 800d582:	bf00      	nop
 800d584:	3708      	adds	r7, #8
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b084      	sub	sp, #16
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d592:	2301      	movs	r3, #1
 800d594:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	691b      	ldr	r3, [r3, #16]
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d001      	beq.n	800d5a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d59e:	f7f3 ffb0 	bl	8001502 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d5a8:	7bfa      	ldrb	r2, [r7, #15]
 800d5aa:	4611      	mov	r1, r2
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7fe fc84 	bl	800beba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fe fc2c 	bl	800be16 <USBD_LL_Reset>
}
 800d5be:	bf00      	nop
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
	...

0800d5c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	6812      	ldr	r2, [r2, #0]
 800d5de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d5e2:	f043 0301 	orr.w	r3, r3, #1
 800d5e6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fe fc73 	bl	800beda <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6a1b      	ldr	r3, [r3, #32]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d005      	beq.n	800d608 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5fc:	4b04      	ldr	r3, [pc, #16]	@ (800d610 <HAL_PCD_SuspendCallback+0x48>)
 800d5fe:	691b      	ldr	r3, [r3, #16]
 800d600:	4a03      	ldr	r2, [pc, #12]	@ (800d610 <HAL_PCD_SuspendCallback+0x48>)
 800d602:	f043 0306 	orr.w	r3, r3, #6
 800d606:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d608:	bf00      	nop
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	e000ed00 	.word	0xe000ed00

0800d614 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	6812      	ldr	r2, [r2, #0]
 800d62a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d62e:	f023 0301 	bic.w	r3, r3, #1
 800d632:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6a1b      	ldr	r3, [r3, #32]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d007      	beq.n	800d64c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d63c:	4b08      	ldr	r3, [pc, #32]	@ (800d660 <HAL_PCD_ResumeCallback+0x4c>)
 800d63e:	691b      	ldr	r3, [r3, #16]
 800d640:	4a07      	ldr	r2, [pc, #28]	@ (800d660 <HAL_PCD_ResumeCallback+0x4c>)
 800d642:	f023 0306 	bic.w	r3, r3, #6
 800d646:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d648:	f000 faf6 	bl	800dc38 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d652:	4618      	mov	r0, r3
 800d654:	f7fe fc5d 	bl	800bf12 <USBD_LL_Resume>
}
 800d658:	bf00      	nop
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	e000ed00 	.word	0xe000ed00

0800d664 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d676:	78fa      	ldrb	r2, [r7, #3]
 800d678:	4611      	mov	r1, r2
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fe fcb3 	bl	800bfe6 <USBD_LL_IsoOUTIncomplete>
}
 800d680:	bf00      	nop
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	460b      	mov	r3, r1
 800d692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d69a:	78fa      	ldrb	r2, [r7, #3]
 800d69c:	4611      	mov	r1, r2
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fe fc6f 	bl	800bf82 <USBD_LL_IsoINIncomplete>
}
 800d6a4:	bf00      	nop
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fcc5 	bl	800c04a <USBD_LL_DevConnected>
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fe fcc2 	bl	800c060 <USBD_LL_DevDisconnected>
}
 800d6dc:	bf00      	nop
 800d6de:	3708      	adds	r7, #8
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d13c      	bne.n	800d76e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d6f4:	4a20      	ldr	r2, [pc, #128]	@ (800d778 <USBD_LL_Init+0x94>)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4a1e      	ldr	r2, [pc, #120]	@ (800d778 <USBD_LL_Init+0x94>)
 800d700:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d704:	4b1c      	ldr	r3, [pc, #112]	@ (800d778 <USBD_LL_Init+0x94>)
 800d706:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d70a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d70c:	4b1a      	ldr	r3, [pc, #104]	@ (800d778 <USBD_LL_Init+0x94>)
 800d70e:	2206      	movs	r2, #6
 800d710:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d712:	4b19      	ldr	r3, [pc, #100]	@ (800d778 <USBD_LL_Init+0x94>)
 800d714:	2202      	movs	r2, #2
 800d716:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d718:	4b17      	ldr	r3, [pc, #92]	@ (800d778 <USBD_LL_Init+0x94>)
 800d71a:	2202      	movs	r2, #2
 800d71c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d71e:	4b16      	ldr	r3, [pc, #88]	@ (800d778 <USBD_LL_Init+0x94>)
 800d720:	2200      	movs	r2, #0
 800d722:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d724:	4b14      	ldr	r3, [pc, #80]	@ (800d778 <USBD_LL_Init+0x94>)
 800d726:	2200      	movs	r2, #0
 800d728:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d72a:	4b13      	ldr	r3, [pc, #76]	@ (800d778 <USBD_LL_Init+0x94>)
 800d72c:	2200      	movs	r2, #0
 800d72e:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d730:	4b11      	ldr	r3, [pc, #68]	@ (800d778 <USBD_LL_Init+0x94>)
 800d732:	2200      	movs	r2, #0
 800d734:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d736:	4b10      	ldr	r3, [pc, #64]	@ (800d778 <USBD_LL_Init+0x94>)
 800d738:	2200      	movs	r2, #0
 800d73a:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d73c:	4b0e      	ldr	r3, [pc, #56]	@ (800d778 <USBD_LL_Init+0x94>)
 800d73e:	2200      	movs	r2, #0
 800d740:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d742:	480d      	ldr	r0, [pc, #52]	@ (800d778 <USBD_LL_Init+0x94>)
 800d744:	f7f6 fd20 	bl	8004188 <HAL_PCD_Init>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d74e:	f7f3 fed8 	bl	8001502 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d752:	2180      	movs	r1, #128	@ 0x80
 800d754:	4808      	ldr	r0, [pc, #32]	@ (800d778 <USBD_LL_Init+0x94>)
 800d756:	f7f7 fe8a 	bl	800546e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d75a:	2240      	movs	r2, #64	@ 0x40
 800d75c:	2100      	movs	r1, #0
 800d75e:	4806      	ldr	r0, [pc, #24]	@ (800d778 <USBD_LL_Init+0x94>)
 800d760:	f7f7 fe3e 	bl	80053e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d764:	2280      	movs	r2, #128	@ 0x80
 800d766:	2101      	movs	r1, #1
 800d768:	4803      	ldr	r0, [pc, #12]	@ (800d778 <USBD_LL_Init+0x94>)
 800d76a:	f7f7 fe39 	bl	80053e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	20004e80 	.word	0x20004e80

0800d77c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d788:	2300      	movs	r3, #0
 800d78a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d792:	4618      	mov	r0, r3
 800d794:	f7f6 fe1c 	bl	80043d0 <HAL_PCD_Start>
 800d798:	4603      	mov	r3, r0
 800d79a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d79c:	7bbb      	ldrb	r3, [r7, #14]
 800d79e:	2b03      	cmp	r3, #3
 800d7a0:	d816      	bhi.n	800d7d0 <USBD_LL_Start+0x54>
 800d7a2:	a201      	add	r2, pc, #4	@ (adr r2, 800d7a8 <USBD_LL_Start+0x2c>)
 800d7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a8:	0800d7b9 	.word	0x0800d7b9
 800d7ac:	0800d7bf 	.word	0x0800d7bf
 800d7b0:	0800d7c5 	.word	0x0800d7c5
 800d7b4:	0800d7cb 	.word	0x0800d7cb
    case HAL_OK :
      usb_status = USBD_OK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d7bc:	e00b      	b.n	800d7d6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7be:	2303      	movs	r3, #3
 800d7c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7c2:	e008      	b.n	800d7d6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7c8:	e005      	b.n	800d7d6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7ca:	2303      	movs	r3, #3
 800d7cc:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ce:	e002      	b.n	800d7d6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d7d0:	2303      	movs	r3, #3
 800d7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d7d4:	bf00      	nop
  }
  return usb_status;
 800d7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	4608      	mov	r0, r1
 800d7ea:	4611      	mov	r1, r2
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	70fb      	strb	r3, [r7, #3]
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	70bb      	strb	r3, [r7, #2]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7fe:	2300      	movs	r3, #0
 800d800:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d808:	78bb      	ldrb	r3, [r7, #2]
 800d80a:	883a      	ldrh	r2, [r7, #0]
 800d80c:	78f9      	ldrb	r1, [r7, #3]
 800d80e:	f7f7 fac6 	bl	8004d9e <HAL_PCD_EP_Open>
 800d812:	4603      	mov	r3, r0
 800d814:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d816:	7bbb      	ldrb	r3, [r7, #14]
 800d818:	2b03      	cmp	r3, #3
 800d81a:	d817      	bhi.n	800d84c <USBD_LL_OpenEP+0x6c>
 800d81c:	a201      	add	r2, pc, #4	@ (adr r2, 800d824 <USBD_LL_OpenEP+0x44>)
 800d81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d822:	bf00      	nop
 800d824:	0800d835 	.word	0x0800d835
 800d828:	0800d83b 	.word	0x0800d83b
 800d82c:	0800d841 	.word	0x0800d841
 800d830:	0800d847 	.word	0x0800d847
    case HAL_OK :
      usb_status = USBD_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	73fb      	strb	r3, [r7, #15]
    break;
 800d838:	e00b      	b.n	800d852 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d83a:	2303      	movs	r3, #3
 800d83c:	73fb      	strb	r3, [r7, #15]
    break;
 800d83e:	e008      	b.n	800d852 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d840:	2301      	movs	r3, #1
 800d842:	73fb      	strb	r3, [r7, #15]
    break;
 800d844:	e005      	b.n	800d852 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d846:	2303      	movs	r3, #3
 800d848:	73fb      	strb	r3, [r7, #15]
    break;
 800d84a:	e002      	b.n	800d852 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d84c:	2303      	movs	r3, #3
 800d84e:	73fb      	strb	r3, [r7, #15]
    break;
 800d850:	bf00      	nop
  }
  return usb_status;
 800d852:	7bfb      	ldrb	r3, [r7, #15]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	460b      	mov	r3, r1
 800d866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d868:	2300      	movs	r3, #0
 800d86a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d86c:	2300      	movs	r3, #0
 800d86e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d876:	78fa      	ldrb	r2, [r7, #3]
 800d878:	4611      	mov	r1, r2
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7f7 faf7 	bl	8004e6e <HAL_PCD_EP_Close>
 800d880:	4603      	mov	r3, r0
 800d882:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d884:	7bbb      	ldrb	r3, [r7, #14]
 800d886:	2b03      	cmp	r3, #3
 800d888:	d816      	bhi.n	800d8b8 <USBD_LL_CloseEP+0x5c>
 800d88a:	a201      	add	r2, pc, #4	@ (adr r2, 800d890 <USBD_LL_CloseEP+0x34>)
 800d88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d890:	0800d8a1 	.word	0x0800d8a1
 800d894:	0800d8a7 	.word	0x0800d8a7
 800d898:	0800d8ad 	.word	0x0800d8ad
 800d89c:	0800d8b3 	.word	0x0800d8b3
    case HAL_OK :
      usb_status = USBD_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8a4:	e00b      	b.n	800d8be <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	73fb      	strb	r3, [r7, #15]
    break;
 800d8aa:	e008      	b.n	800d8be <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d8b0:	e005      	b.n	800d8be <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8b2:	2303      	movs	r3, #3
 800d8b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d8b6:	e002      	b.n	800d8be <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d8bc:	bf00      	nop
  }
  return usb_status;
 800d8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3710      	adds	r7, #16
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8e2:	78fa      	ldrb	r2, [r7, #3]
 800d8e4:	4611      	mov	r1, r2
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7f7 fb86 	bl	8004ff8 <HAL_PCD_EP_SetStall>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d8f0:	7bbb      	ldrb	r3, [r7, #14]
 800d8f2:	2b03      	cmp	r3, #3
 800d8f4:	d816      	bhi.n	800d924 <USBD_LL_StallEP+0x5c>
 800d8f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d8fc <USBD_LL_StallEP+0x34>)
 800d8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8fc:	0800d90d 	.word	0x0800d90d
 800d900:	0800d913 	.word	0x0800d913
 800d904:	0800d919 	.word	0x0800d919
 800d908:	0800d91f 	.word	0x0800d91f
    case HAL_OK :
      usb_status = USBD_OK;
 800d90c:	2300      	movs	r3, #0
 800d90e:	73fb      	strb	r3, [r7, #15]
    break;
 800d910:	e00b      	b.n	800d92a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d912:	2303      	movs	r3, #3
 800d914:	73fb      	strb	r3, [r7, #15]
    break;
 800d916:	e008      	b.n	800d92a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d918:	2301      	movs	r3, #1
 800d91a:	73fb      	strb	r3, [r7, #15]
    break;
 800d91c:	e005      	b.n	800d92a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d91e:	2303      	movs	r3, #3
 800d920:	73fb      	strb	r3, [r7, #15]
    break;
 800d922:	e002      	b.n	800d92a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d924:	2303      	movs	r3, #3
 800d926:	73fb      	strb	r3, [r7, #15]
    break;
 800d928:	bf00      	nop
  }
  return usb_status;
 800d92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	460b      	mov	r3, r1
 800d93e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d940:	2300      	movs	r3, #0
 800d942:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d944:	2300      	movs	r3, #0
 800d946:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d94e:	78fa      	ldrb	r2, [r7, #3]
 800d950:	4611      	mov	r1, r2
 800d952:	4618      	mov	r0, r3
 800d954:	f7f7 fbb2 	bl	80050bc <HAL_PCD_EP_ClrStall>
 800d958:	4603      	mov	r3, r0
 800d95a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d95c:	7bbb      	ldrb	r3, [r7, #14]
 800d95e:	2b03      	cmp	r3, #3
 800d960:	d816      	bhi.n	800d990 <USBD_LL_ClearStallEP+0x5c>
 800d962:	a201      	add	r2, pc, #4	@ (adr r2, 800d968 <USBD_LL_ClearStallEP+0x34>)
 800d964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d968:	0800d979 	.word	0x0800d979
 800d96c:	0800d97f 	.word	0x0800d97f
 800d970:	0800d985 	.word	0x0800d985
 800d974:	0800d98b 	.word	0x0800d98b
    case HAL_OK :
      usb_status = USBD_OK;
 800d978:	2300      	movs	r3, #0
 800d97a:	73fb      	strb	r3, [r7, #15]
    break;
 800d97c:	e00b      	b.n	800d996 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d97e:	2303      	movs	r3, #3
 800d980:	73fb      	strb	r3, [r7, #15]
    break;
 800d982:	e008      	b.n	800d996 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d984:	2301      	movs	r3, #1
 800d986:	73fb      	strb	r3, [r7, #15]
    break;
 800d988:	e005      	b.n	800d996 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d98a:	2303      	movs	r3, #3
 800d98c:	73fb      	strb	r3, [r7, #15]
    break;
 800d98e:	e002      	b.n	800d996 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d990:	2303      	movs	r3, #3
 800d992:	73fb      	strb	r3, [r7, #15]
    break;
 800d994:	bf00      	nop
  }
  return usb_status;
 800d996:	7bfb      	ldrb	r3, [r7, #15]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	da0b      	bge.n	800d9d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9bc:	78fb      	ldrb	r3, [r7, #3]
 800d9be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9c2:	68f9      	ldr	r1, [r7, #12]
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	00db      	lsls	r3, r3, #3
 800d9c8:	4413      	add	r3, r2
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	440b      	add	r3, r1
 800d9ce:	333e      	adds	r3, #62	@ 0x3e
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	e00b      	b.n	800d9ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9d4:	78fb      	ldrb	r3, [r7, #3]
 800d9d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9da:	68f9      	ldr	r1, [r7, #12]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	00db      	lsls	r3, r3, #3
 800d9e0:	4413      	add	r3, r2
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	440b      	add	r3, r1
 800d9e6:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800d9ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	460b      	mov	r3, r1
 800da02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da04:	2300      	movs	r3, #0
 800da06:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da12:	78fa      	ldrb	r2, [r7, #3]
 800da14:	4611      	mov	r1, r2
 800da16:	4618      	mov	r0, r3
 800da18:	f7f7 f99c 	bl	8004d54 <HAL_PCD_SetAddress>
 800da1c:	4603      	mov	r3, r0
 800da1e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800da20:	7bbb      	ldrb	r3, [r7, #14]
 800da22:	2b03      	cmp	r3, #3
 800da24:	d816      	bhi.n	800da54 <USBD_LL_SetUSBAddress+0x5c>
 800da26:	a201      	add	r2, pc, #4	@ (adr r2, 800da2c <USBD_LL_SetUSBAddress+0x34>)
 800da28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2c:	0800da3d 	.word	0x0800da3d
 800da30:	0800da43 	.word	0x0800da43
 800da34:	0800da49 	.word	0x0800da49
 800da38:	0800da4f 	.word	0x0800da4f
    case HAL_OK :
      usb_status = USBD_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	73fb      	strb	r3, [r7, #15]
    break;
 800da40:	e00b      	b.n	800da5a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da42:	2303      	movs	r3, #3
 800da44:	73fb      	strb	r3, [r7, #15]
    break;
 800da46:	e008      	b.n	800da5a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da48:	2301      	movs	r3, #1
 800da4a:	73fb      	strb	r3, [r7, #15]
    break;
 800da4c:	e005      	b.n	800da5a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da4e:	2303      	movs	r3, #3
 800da50:	73fb      	strb	r3, [r7, #15]
    break;
 800da52:	e002      	b.n	800da5a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800da54:	2303      	movs	r3, #3
 800da56:	73fb      	strb	r3, [r7, #15]
    break;
 800da58:	bf00      	nop
  }
  return usb_status;
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b086      	sub	sp, #24
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	607a      	str	r2, [r7, #4]
 800da6e:	603b      	str	r3, [r7, #0]
 800da70:	460b      	mov	r3, r1
 800da72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da74:	2300      	movs	r3, #0
 800da76:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da78:	2300      	movs	r3, #0
 800da7a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da82:	7af9      	ldrb	r1, [r7, #11]
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	f7f7 fa85 	bl	8004f96 <HAL_PCD_EP_Transmit>
 800da8c:	4603      	mov	r3, r0
 800da8e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800da90:	7dbb      	ldrb	r3, [r7, #22]
 800da92:	2b03      	cmp	r3, #3
 800da94:	d816      	bhi.n	800dac4 <USBD_LL_Transmit+0x60>
 800da96:	a201      	add	r2, pc, #4	@ (adr r2, 800da9c <USBD_LL_Transmit+0x38>)
 800da98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da9c:	0800daad 	.word	0x0800daad
 800daa0:	0800dab3 	.word	0x0800dab3
 800daa4:	0800dab9 	.word	0x0800dab9
 800daa8:	0800dabf 	.word	0x0800dabf
    case HAL_OK :
      usb_status = USBD_OK;
 800daac:	2300      	movs	r3, #0
 800daae:	75fb      	strb	r3, [r7, #23]
    break;
 800dab0:	e00b      	b.n	800daca <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dab2:	2303      	movs	r3, #3
 800dab4:	75fb      	strb	r3, [r7, #23]
    break;
 800dab6:	e008      	b.n	800daca <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dab8:	2301      	movs	r3, #1
 800daba:	75fb      	strb	r3, [r7, #23]
    break;
 800dabc:	e005      	b.n	800daca <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dabe:	2303      	movs	r3, #3
 800dac0:	75fb      	strb	r3, [r7, #23]
    break;
 800dac2:	e002      	b.n	800daca <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800dac4:	2303      	movs	r3, #3
 800dac6:	75fb      	strb	r3, [r7, #23]
    break;
 800dac8:	bf00      	nop
  }
  return usb_status;
 800daca:	7dfb      	ldrb	r3, [r7, #23]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3718      	adds	r7, #24
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	607a      	str	r2, [r7, #4]
 800dade:	603b      	str	r3, [r7, #0]
 800dae0:	460b      	mov	r3, r1
 800dae2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae8:	2300      	movs	r3, #0
 800daea:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800daf2:	7af9      	ldrb	r1, [r7, #11]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	f7f7 fa03 	bl	8004f02 <HAL_PCD_EP_Receive>
 800dafc:	4603      	mov	r3, r0
 800dafe:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800db00:	7dbb      	ldrb	r3, [r7, #22]
 800db02:	2b03      	cmp	r3, #3
 800db04:	d816      	bhi.n	800db34 <USBD_LL_PrepareReceive+0x60>
 800db06:	a201      	add	r2, pc, #4	@ (adr r2, 800db0c <USBD_LL_PrepareReceive+0x38>)
 800db08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db0c:	0800db1d 	.word	0x0800db1d
 800db10:	0800db23 	.word	0x0800db23
 800db14:	0800db29 	.word	0x0800db29
 800db18:	0800db2f 	.word	0x0800db2f
    case HAL_OK :
      usb_status = USBD_OK;
 800db1c:	2300      	movs	r3, #0
 800db1e:	75fb      	strb	r3, [r7, #23]
    break;
 800db20:	e00b      	b.n	800db3a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db22:	2303      	movs	r3, #3
 800db24:	75fb      	strb	r3, [r7, #23]
    break;
 800db26:	e008      	b.n	800db3a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db28:	2301      	movs	r3, #1
 800db2a:	75fb      	strb	r3, [r7, #23]
    break;
 800db2c:	e005      	b.n	800db3a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db2e:	2303      	movs	r3, #3
 800db30:	75fb      	strb	r3, [r7, #23]
    break;
 800db32:	e002      	b.n	800db3a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800db34:	2303      	movs	r3, #3
 800db36:	75fb      	strb	r3, [r7, #23]
    break;
 800db38:	bf00      	nop
  }
  return usb_status;
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3718      	adds	r7, #24
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	460b      	mov	r3, r1
 800db4e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db56:	78fa      	ldrb	r2, [r7, #3]
 800db58:	4611      	mov	r1, r2
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7f7 fa03 	bl	8004f66 <HAL_PCD_EP_GetRxCount>
 800db60:	4603      	mov	r3, r0
}
 800db62:	4618      	mov	r0, r3
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
	...

0800db6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	460b      	mov	r3, r1
 800db76:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800db78:	78fb      	ldrb	r3, [r7, #3]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <HAL_PCDEx_LPM_Callback+0x18>
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d01f      	beq.n	800dbc2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800db82:	e03b      	b.n	800dbfc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a1b      	ldr	r3, [r3, #32]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d007      	beq.n	800db9c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800db8c:	f000 f854 	bl	800dc38 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db90:	4b1c      	ldr	r3, [pc, #112]	@ (800dc04 <HAL_PCDEx_LPM_Callback+0x98>)
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	4a1b      	ldr	r2, [pc, #108]	@ (800dc04 <HAL_PCDEx_LPM_Callback+0x98>)
 800db96:	f023 0306 	bic.w	r3, r3, #6
 800db9a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	6812      	ldr	r2, [r2, #0]
 800dbaa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dbae:	f023 0301 	bic.w	r3, r3, #1
 800dbb2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fe f9a9 	bl	800bf12 <USBD_LL_Resume>
    break;
 800dbc0:	e01c      	b.n	800dbfc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	6812      	ldr	r2, [r2, #0]
 800dbd0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dbd4:	f043 0301 	orr.w	r3, r3, #1
 800dbd8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fe f97a 	bl	800beda <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a1b      	ldr	r3, [r3, #32]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d005      	beq.n	800dbfa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbee:	4b05      	ldr	r3, [pc, #20]	@ (800dc04 <HAL_PCDEx_LPM_Callback+0x98>)
 800dbf0:	691b      	ldr	r3, [r3, #16]
 800dbf2:	4a04      	ldr	r2, [pc, #16]	@ (800dc04 <HAL_PCDEx_LPM_Callback+0x98>)
 800dbf4:	f043 0306 	orr.w	r3, r3, #6
 800dbf8:	6113      	str	r3, [r2, #16]
    break;
 800dbfa:	bf00      	nop
}
 800dbfc:	bf00      	nop
 800dbfe:	3708      	adds	r7, #8
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	e000ed00 	.word	0xe000ed00

0800dc08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc10:	4b03      	ldr	r3, [pc, #12]	@ (800dc20 <USBD_static_malloc+0x18>)
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	370c      	adds	r7, #12
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	2000538c 	.word	0x2000538c

0800dc24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]

}
 800dc2c:	bf00      	nop
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dc3c:	f7f3 fc0e 	bl	800145c <SystemClock_Config>
}
 800dc40:	bf00      	nop
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <memset>:
 800dc44:	4402      	add	r2, r0
 800dc46:	4603      	mov	r3, r0
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d100      	bne.n	800dc4e <memset+0xa>
 800dc4c:	4770      	bx	lr
 800dc4e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc52:	e7f9      	b.n	800dc48 <memset+0x4>

0800dc54 <__libc_init_array>:
 800dc54:	b570      	push	{r4, r5, r6, lr}
 800dc56:	4d0d      	ldr	r5, [pc, #52]	@ (800dc8c <__libc_init_array+0x38>)
 800dc58:	4c0d      	ldr	r4, [pc, #52]	@ (800dc90 <__libc_init_array+0x3c>)
 800dc5a:	1b64      	subs	r4, r4, r5
 800dc5c:	10a4      	asrs	r4, r4, #2
 800dc5e:	2600      	movs	r6, #0
 800dc60:	42a6      	cmp	r6, r4
 800dc62:	d109      	bne.n	800dc78 <__libc_init_array+0x24>
 800dc64:	4d0b      	ldr	r5, [pc, #44]	@ (800dc94 <__libc_init_array+0x40>)
 800dc66:	4c0c      	ldr	r4, [pc, #48]	@ (800dc98 <__libc_init_array+0x44>)
 800dc68:	f000 f826 	bl	800dcb8 <_init>
 800dc6c:	1b64      	subs	r4, r4, r5
 800dc6e:	10a4      	asrs	r4, r4, #2
 800dc70:	2600      	movs	r6, #0
 800dc72:	42a6      	cmp	r6, r4
 800dc74:	d105      	bne.n	800dc82 <__libc_init_array+0x2e>
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc7c:	4798      	blx	r3
 800dc7e:	3601      	adds	r6, #1
 800dc80:	e7ee      	b.n	800dc60 <__libc_init_array+0xc>
 800dc82:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc86:	4798      	blx	r3
 800dc88:	3601      	adds	r6, #1
 800dc8a:	e7f2      	b.n	800dc72 <__libc_init_array+0x1e>
 800dc8c:	0800dd90 	.word	0x0800dd90
 800dc90:	0800dd90 	.word	0x0800dd90
 800dc94:	0800dd90 	.word	0x0800dd90
 800dc98:	0800dd94 	.word	0x0800dd94

0800dc9c <memcpy>:
 800dc9c:	440a      	add	r2, r1
 800dc9e:	4291      	cmp	r1, r2
 800dca0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dca4:	d100      	bne.n	800dca8 <memcpy+0xc>
 800dca6:	4770      	bx	lr
 800dca8:	b510      	push	{r4, lr}
 800dcaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcb2:	4291      	cmp	r1, r2
 800dcb4:	d1f9      	bne.n	800dcaa <memcpy+0xe>
 800dcb6:	bd10      	pop	{r4, pc}

0800dcb8 <_init>:
 800dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcba:	bf00      	nop
 800dcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcbe:	bc08      	pop	{r3}
 800dcc0:	469e      	mov	lr, r3
 800dcc2:	4770      	bx	lr

0800dcc4 <_fini>:
 800dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc6:	bf00      	nop
 800dcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcca:	bc08      	pop	{r3}
 800dccc:	469e      	mov	lr, r3
 800dcce:	4770      	bx	lr
