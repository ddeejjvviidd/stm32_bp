
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf30  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800c0ec  0800c0ec  0000d0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1a4  0800c1a4  0000e10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1a4  0800c1a4  0000d1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1ac  0800c1ac  0000e10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1ac  0800c1ac  0000d1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1b0  0800c1b0  0000d1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800c1b4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010470  2000010c  0800c2c0  0000e10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001057c  0800c2c0  0000e57c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e30  00000000  00000000  0000e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004daa  00000000  00000000  00031f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  00036d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015d4  00000000  00000000  00038968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff19  00000000  00000000  00039f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002376a  00000000  00000000  00069e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d777  00000000  00000000  0008d5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001aad36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007758  00000000  00000000  001aad7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b24d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800c0d4 	.word	0x0800c0d4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800c0d4 	.word	0x0800c0d4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2201      	movs	r2, #1
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fb73 	bl	8001c54 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fd7d 	bl	8001072 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f001 feef 	bl	8002378 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fd67 	bl	8001072 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f001 fee1 	bl	8002378 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 fd59 	bl	8001072 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00b fd31 	bl	800c060 <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fbdd 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 fd15 	bl	8001072 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 f871 	bl	8003778 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 fd97 	bl	8003204 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 fcc9 	bl	8001072 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 fd50 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 fd69 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 fd3a 	bl	8003204 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fc6c 	bl	8001072 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 fcf9 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 fd12 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 fcf1 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 fd0a 	bl	80031ce <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 fbe3 	bl	8005028 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 f90b 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 f906 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 f901 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f002 ff61 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f002 ff52 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f002 ff46 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f002 ff38 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f002 ff2a 	bl	8003778 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fc34 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fc4d 	bl	80031ce <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d119      	bne.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000974:	f003 f892 	bl	8003a9c <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000988:	f003 f888 	bl	8003a9c <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000250 	.word	0x20000250
 80009a0:	48000400 	.word	0x48000400

080009a4 <comms_reset_active_buffer>:
} comms_return_codes;

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);
extern void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values);

void comms_reset_active_buffer(){
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	comms_active_buffer[1] = 0;
 80009a8:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <comms_reset_active_buffer+0x24>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
	comms_active_wr_pointer = comms_active_buffer+2;
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <comms_reset_active_buffer+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3302      	adds	r3, #2
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <comms_reset_active_buffer+0x28>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000c254 	.word	0x2000c254
 80009cc:	2000c658 	.word	0x2000c658

080009d0 <comms_init>:

void comms_init(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	comms_active_buffer = comms_tx_buffer1;
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <comms_init+0x24>)
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <comms_init+0x28>)
 80009d8:	601a      	str	r2, [r3, #0]
	comms_prepared_buffer = comms_tx_buffer2;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <comms_init+0x2c>)
 80009dc:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <comms_init+0x30>)
 80009de:	601a      	str	r2, [r3, #0]

	comms_reset_active_buffer();
 80009e0:	f7ff ffe0 	bl	80009a4 <comms_reset_active_buffer>
	comms_prepared_wr_pointer = comms_prepared_buffer+2;
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <comms_init+0x2c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3302      	adds	r3, #2
 80009ea:	4a06      	ldr	r2, [pc, #24]	@ (8000a04 <comms_init+0x34>)
 80009ec:	6013      	str	r3, [r2, #0]
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000c254 	.word	0x2000c254
 80009f8:	20004254 	.word	0x20004254
 80009fc:	2000c258 	.word	0x2000c258
 8000a00:	20008254 	.word	0x20008254
 8000a04:	2000c65c 	.word	0x2000c65c

08000a08 <comms_purge_id_register>:

void comms_purge_id_register(){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	memset(comms_id_register, NULL, sizeof(comms_id_register));
 8000a0c:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000a10:	2100      	movs	r1, #0
 8000a12:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <comms_purge_id_register+0x14>)
 8000a14:	f00b fb24 	bl	800c060 <memset>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000c25c 	.word	0x2000c25c

08000a20 <comms_find_existing_data>:

void * comms_find_existing_data(uint8_t data_id){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if (comms_id_register[data_id] != NULL) {
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <comms_find_existing_data+0x30>)
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <comms_find_existing_data+0x20>
		return comms_id_register[data_id];
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <comms_find_existing_data+0x30>)
 8000a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3e:	e000      	b.n	8000a42 <comms_find_existing_data+0x22>
	}
	return NULL;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000c25c 	.word	0x2000c25c

08000a54 <comms_append_int32>:

int comms_append_int32(uint8_t data_id, uint8_t data_count, int data){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	603a      	str	r2, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	460b      	mov	r3, r1
 8000a62:	71bb      	strb	r3, [r7, #6]
	//check tx_register for same data id, return if existing
	if (comms_find_existing_data(data_id) != NULL) {
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffda 	bl	8000a20 <comms_find_existing_data>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <comms_append_int32+0x22>
		return 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e028      	b.n	8000ac8 <comms_append_int32+0x74>
	}

	// save the pointer to new data to register
	comms_id_register[data_id] = (void *)comms_active_wr_pointer;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4a15      	ldr	r2, [pc, #84]	@ (8000ad0 <comms_append_int32+0x7c>)
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	4915      	ldr	r1, [pc, #84]	@ (8000ad4 <comms_append_int32+0x80>)
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_active_buffer[1] += 1;
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <comms_append_int32+0x84>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <comms_append_int32+0x84>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	3201      	adds	r2, #1
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	701a      	strb	r2, [r3, #0]

	// write id, bytes and count
	*comms_active_wr_pointer = data_id;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <comms_append_int32+0x7c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer+1) = (uint8_t)sizeof(data);
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <comms_append_int32+0x7c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer+2) = data_count;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <comms_append_int32+0x7c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3302      	adds	r3, #2
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int *)(comms_active_wr_pointer+3)) = data;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <comms_append_int32+0x7c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3303      	adds	r3, #3
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_active_wr_pointer = (comms_active_wr_pointer+3+sizeof(data));
 8000abc:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <comms_append_int32+0x7c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3307      	adds	r3, #7
 8000ac2:	4a03      	ldr	r2, [pc, #12]	@ (8000ad0 <comms_append_int32+0x7c>)
 8000ac4:	6013      	str	r3, [r2, #0]

	return 0;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000c658 	.word	0x2000c658
 8000ad4:	2000c25c 	.word	0x2000c25c
 8000ad8:	2000c254 	.word	0x2000c254

08000adc <comms_switch_buffers>:

void comms_switch_buffers(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8000ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8000ae8:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000aea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t * _temp = comms_prepared_buffer;
 8000af0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <comms_switch_buffers+0x4c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60bb      	str	r3, [r7, #8]
	comms_prepared_buffer = comms_active_buffer;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <comms_switch_buffers+0x50>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <comms_switch_buffers+0x4c>)
 8000afc:	6013      	str	r3, [r2, #0]
	comms_active_buffer = _temp;
 8000afe:	4a0b      	ldr	r2, [pc, #44]	@ (8000b2c <comms_switch_buffers+0x50>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_prepared_wr_pointer = comms_active_wr_pointer;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <comms_switch_buffers+0x54>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <comms_switch_buffers+0x58>)
 8000b0a:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_buffer();
 8000b0c:	f7ff ff4a 	bl	80009a4 <comms_reset_active_buffer>
	comms_purge_id_register();
 8000b10:	f7ff ff7a 	bl	8000a08 <comms_purge_id_register>
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f383 8810 	msr	PRIMASK, r3
}
 8000b1e:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000c258 	.word	0x2000c258
 8000b2c:	2000c254 	.word	0x2000c254
 8000b30:	2000c658 	.word	0x2000c658
 8000b34:	2000c65c 	.word	0x2000c65c

08000b38 <comms_send>:

int comms_send(){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

	// need to switch buffers
	comms_switch_buffers();
 8000b3c:	f7ff ffce 	bl	8000adc <comms_switch_buffers>


	// buffer is empty
	if (comms_prepared_buffer[1] == 0) {
 8000b40:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <comms_send+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d101      	bne.n	8000b50 <comms_send+0x18>
		return COMMS_TX_BUFFER_EMPTY;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e010      	b.n	8000b72 <comms_send+0x3a>
	}

	// send data
	if (CDC_Transmit_FS(comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer)) {
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <comms_send+0x40>)
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <comms_send+0x44>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <comms_send+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	f00a fcdd 	bl	800b520 <CDC_Transmit_FS>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <comms_send+0x38>
		return COMMS_TX_CDC_FAIL;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	e000      	b.n	8000b72 <comms_send+0x3a>
	}

	return COMMS_SUCCESS;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000c258 	.word	0x2000c258
 8000b7c:	2000c65c 	.word	0x2000c65c

08000b80 <m2s_Process>:
int SendInt2MTLB(uint16_t iD, int *xInt) {

	return DataTransmit2MTLB(iD, (uint8_t*) xInt, 1);
}

void m2s_Process() {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	// funkce volana z nekonecne smycky

	if (!m2s_Status)
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <m2s_Process+0x50>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d01e      	beq.n	8000bca <m2s_Process+0x4a>
		return; // pokud neprisla data, ukonci se

	if (m2s_Status == 1) {
 8000b8c:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <m2s_Process+0x50>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d111      	bne.n	8000bb8 <m2s_Process+0x38>
		// zpracuje data
		DataReceive_MTLB_Callback(m2s_ID, m2s_buf, m2s_nData_in_bytes / 4);
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <m2s_Process+0x54>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	b298      	uxth	r0, r3
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <m2s_Process+0x58>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	da00      	bge.n	8000ba4 <m2s_Process+0x24>
 8000ba2:	3303      	adds	r3, #3
 8000ba4:	109b      	asrs	r3, r3, #2
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	490c      	ldr	r1, [pc, #48]	@ (8000bdc <m2s_Process+0x5c>)
 8000bac:	f000 f886 	bl	8000cbc <DataReceive_MTLB_Callback>
		m2s_Status = 0;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <m2s_Process+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
		return;
 8000bb6:	e009      	b.n	8000bcc <m2s_Process+0x4c>
	}

	if (m2s_Status == -1) {
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <m2s_Process+0x50>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000bc0:	d104      	bne.n	8000bcc <m2s_Process+0x4c>
		// inicializace
		m2s_Status = 0;
 8000bc2:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <m2s_Process+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
		return;
 8000bc8:	e000      	b.n	8000bcc <m2s_Process+0x4c>
		return; // pokud neprisla data, ukonci se
 8000bca:	bf00      	nop
	}

}
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000c660 	.word	0x2000c660
 8000bd4:	2000c664 	.word	0x2000c664
 8000bd8:	2000c668 	.word	0x2000c668
 8000bdc:	20000254 	.word	0x20000254

08000be0 <USB_My_Receive>:

void USB_My_Receive(uint8_t *Buf, uint32_t Len) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]

	// callback na prijem dat

	if (m2s_Status == 0) {
 8000bea:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <USB_My_Receive+0x94>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10c      	bne.n	8000c0c <USB_My_Receive+0x2c>
		// iD
		m2s_ID = ((uint16_t*) Buf)[0];
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <USB_My_Receive+0x98>)
 8000bfa:	601a      	str	r2, [r3, #0]
		if (m2s_ID == 0)
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <USB_My_Receive+0x98>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d030      	beq.n	8000c66 <USB_My_Receive+0x86>
			return;
		m2s_Status = 100;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <USB_My_Receive+0x94>)
 8000c06:	2264      	movs	r2, #100	@ 0x64
 8000c08:	601a      	str	r2, [r3, #0]
		return;
 8000c0a:	e02f      	b.n	8000c6c <USB_My_Receive+0x8c>
	}

	if (m2s_Status == 100) {
 8000c0c:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <USB_My_Receive+0x94>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b64      	cmp	r3, #100	@ 0x64
 8000c12:	d110      	bne.n	8000c36 <USB_My_Receive+0x56>
		// nData
		m2s_nData_in_bytes = ((uint16_t*) Buf)[0] * 4;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4a18      	ldr	r2, [pc, #96]	@ (8000c7c <USB_My_Receive+0x9c>)
 8000c1c:	6013      	str	r3, [r2, #0]
		if (m2s_nData_in_bytes == 0) {
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <USB_My_Receive+0x9c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d103      	bne.n	8000c2e <USB_My_Receive+0x4e>
			m2s_Status = 1;
 8000c26:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <USB_My_Receive+0x94>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
			return;
 8000c2c:	e01e      	b.n	8000c6c <USB_My_Receive+0x8c>
		}
		m2s_Status = 3; //wait for xData
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <USB_My_Receive+0x94>)
 8000c30:	2203      	movs	r2, #3
 8000c32:	601a      	str	r2, [r3, #0]
		return;
 8000c34:	e01a      	b.n	8000c6c <USB_My_Receive+0x8c>
	}

	if (m2s_Status == 3) {
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <USB_My_Receive+0x94>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d115      	bne.n	8000c6a <USB_My_Receive+0x8a>
		// xData
		if (Len < m2s_nData_in_bytes)
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <USB_My_Receive+0x9c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d202      	bcs.n	8000c50 <USB_My_Receive+0x70>
			m2s_nData_in_bytes = Len;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <USB_My_Receive+0x9c>)
 8000c4e:	6013      	str	r3, [r2, #0]
		memcpy(m2s_buf, Buf, m2s_nData_in_bytes);
 8000c50:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <USB_My_Receive+0x9c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <USB_My_Receive+0xa0>)
 8000c5a:	f00b fa2d 	bl	800c0b8 <memcpy>
		m2s_Status = 1;
 8000c5e:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <USB_My_Receive+0x94>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
		return;
 8000c64:	e002      	b.n	8000c6c <USB_My_Receive+0x8c>
			return;
 8000c66:	bf00      	nop
 8000c68:	e000      	b.n	8000c6c <USB_My_Receive+0x8c>
	}

	return;
 8000c6a:	bf00      	nop
}
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000c660 	.word	0x2000c660
 8000c78:	2000c664 	.word	0x2000c664
 8000c7c:	2000c668 	.word	0x2000c668
 8000c80:	20000254 	.word	0x20000254

08000c84 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d108      	bne.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c94:	2180      	movs	r1, #128	@ 0x80
 8000c96:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c98:	f002 ff18 	bl	8003acc <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ca4:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		//DataTransmit2MTLB(1, &periodical, 1);
	}
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000e7f8 	.word	0x2000e7f8
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	2000c66c 	.word	0x2000c66c

08000cbc <DataReceive_MTLB_Callback>:
//    	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);
//    }

}

void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	80fb      	strh	r3, [r7, #6]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	80bb      	strh	r3, [r7, #4]
	// funkce volana po prijmu dat

	switch (iD) {
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	2b14      	cmp	r3, #20
		//data odesilam zpet do matlabu
		//DataTransmit2MTLB(20, xData, nData_in_values);
		break;

	default:
		break;
 8000cd0:	bf00      	nop
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <myDmaFunction>:

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <myDmaFunction+0x28>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cee:	4a07      	ldr	r2, [pc, #28]	@ (8000d0c <myDmaFunction+0x2c>)
 8000cf0:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <myDmaFunction+0x28>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf8:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <myDmaFunction+0x30>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	2000e7ac 	.word	0x2000e7ac
 8000d0c:	2000c678 	.word	0x2000c678
 8000d10:	2000c67c 	.word	0x2000c67c

08000d14 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	@ 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8000d1c:	4b51      	ldr	r3, [pc, #324]	@ (8000e64 <HAL_ADC_ConvCpltCallback+0x150>)
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 8000d24:	4b50      	ldr	r3, [pc, #320]	@ (8000e68 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 100; i++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	e027      	b.n	8000d82 <HAL_ADC_ConvCpltCallback+0x6e>
        adcValue += dma_data_buffer[i + 100]; // Použití druhé poloviny DMA bufferu
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3364      	adds	r3, #100	@ 0x64
 8000d36:	4a4d      	ldr	r2, [pc, #308]	@ (8000e6c <HAL_ADC_ConvCpltCallback+0x158>)
 8000d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3c:	ee07 3a90 	vmov	s15, r3
 8000d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d44:	4b47      	ldr	r3, [pc, #284]	@ (8000e64 <HAL_ADC_ConvCpltCallback+0x150>)
 8000d46:	edd3 7a00 	vldr	s15, [r3]
 8000d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d4e:	4b45      	ldr	r3, [pc, #276]	@ (8000e64 <HAL_ADC_ConvCpltCallback+0x150>)
 8000d50:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 100];
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	3365      	adds	r3, #101	@ 0x65
 8000d58:	4a44      	ldr	r2, [pc, #272]	@ (8000e6c <HAL_ADC_ConvCpltCallback+0x158>)
 8000d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5e:	ee07 3a90 	vmov	s15, r3
 8000d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d66:	4b40      	ldr	r3, [pc, #256]	@ (8000e68 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d68:	edd3 7a00 	vldr	s15, [r3]
 8000d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d70:	4b3d      	ldr	r3, [pc, #244]	@ (8000e68 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d72:	edc3 7a00 	vstr	s15, [r3]
        i++;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 100; i++) {
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	2b63      	cmp	r3, #99	@ 0x63
 8000d86:	ddd4      	ble.n	8000d32 <HAL_ADC_ConvCpltCallback+0x1e>
    }
    adcValue /= 50.0f;
 8000d88:	4b36      	ldr	r3, [pc, #216]	@ (8000e64 <HAL_ADC_ConvCpltCallback+0x150>)
 8000d8a:	ed93 7a00 	vldr	s14, [r3]
 8000d8e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000e70 <HAL_ADC_ConvCpltCallback+0x15c>
 8000d92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d96:	4b33      	ldr	r3, [pc, #204]	@ (8000e64 <HAL_ADC_ConvCpltCallback+0x150>)
 8000d98:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 8000d9c:	4b32      	ldr	r3, [pc, #200]	@ (8000e68 <HAL_ADC_ConvCpltCallback+0x154>)
 8000d9e:	ed93 7a00 	vldr	s14, [r3]
 8000da2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8000e70 <HAL_ADC_ConvCpltCallback+0x15c>
 8000da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000daa:	4b2f      	ldr	r3, [pc, #188]	@ (8000e68 <HAL_ADC_ConvCpltCallback+0x154>)
 8000dac:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8000db0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <HAL_ADC_ConvCpltCallback+0x150>)
 8000db2:	ed93 7a00 	vldr	s14, [r3]
 8000db6:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000e74 <HAL_ADC_ConvCpltCallback+0x160>
 8000dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dbe:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000e78 <HAL_ADC_ConvCpltCallback+0x164>
 8000dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc6:	edc7 7a06 	vstr	s15, [r7, #24]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8000dca:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <HAL_ADC_ConvCpltCallback+0x168>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	ee07 3a90 	vmov	s15, r3
 8000dd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dd6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000e74 <HAL_ADC_ConvCpltCallback+0x160>
 8000dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dde:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000e78 <HAL_ADC_ConvCpltCallback+0x164>
 8000de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de6:	edc7 7a05 	vstr	s15, [r7, #20]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8000dea:	4b25      	ldr	r3, [pc, #148]	@ (8000e80 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	ee07 3a90 	vmov	s15, r3
 8000df2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000df6:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000e74 <HAL_ADC_ConvCpltCallback+0x160>
 8000dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dfe:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000e78 <HAL_ADC_ConvCpltCallback+0x164>
 8000e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e06:	edc7 7a04 	vstr	s15, [r7, #16]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8000e0a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e16:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000e84 <HAL_ADC_ConvCpltCallback+0x170>
 8000e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e1e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e26:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <HAL_ADC_ConvCpltCallback+0x174>)
 8000e28:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x178>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x178>)
 8000e34:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    int temperatureInt = (int)temperature;
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <HAL_ADC_ConvCpltCallback+0x174>)
 8000e38:	edd3 7a00 	vldr	s15, [r3]
 8000e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e40:	ee17 3a90 	vmov	r3, s15
 8000e44:	60fb      	str	r3, [r7, #12]
    //SendInt2MTLB(2, &temperatureInt);

    int adcIn1Int = (int)adcIn1;
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <HAL_ADC_ConvCpltCallback+0x154>)
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e50:	ee17 3a90 	vmov	r3, s15
 8000e54:	60bb      	str	r3, [r7, #8]
    //SendInt2MTLB(23, &adcIn1Int);
}
 8000e56:	bf00      	nop
 8000e58:	3724      	adds	r7, #36	@ 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	2000e750 	.word	0x2000e750
 8000e68:	2000e758 	.word	0x2000e758
 8000e6c:	2000e5c0 	.word	0x2000e5c0
 8000e70:	42480000 	.word	0x42480000
 8000e74:	45800000 	.word	0x45800000
 8000e78:	40533333 	.word	0x40533333
 8000e7c:	1fff75a8 	.word	0x1fff75a8
 8000e80:	1fff75ca 	.word	0x1fff75ca
 8000e84:	42a00000 	.word	0x42a00000
 8000e88:	2000e754 	.word	0x2000e754
 8000e8c:	2000e75c 	.word	0x2000e75c

08000e90 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

	//SendInt2MTLB(23, &adcValueInt);
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eaa:	f000 fc26 	bl	80016fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eae:	f000 f88d 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb2:	f7ff fc8d 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb6:	f7ff fc2f 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 8000eba:	f000 fa27 	bl	800130c <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000ebe:	f00a fa6b 	bl	800b398 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000ec2:	f000 f9d5 	bl	8001270 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000ec6:	f7ff fb11 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000eca:	f000 f983 	bl	80011d4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000ece:	f000 faf9 	bl	80014c4 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8000ed2:	f000 faa9 	bl	8001428 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  comms_init();
 8000ed6:	f7ff fd7b 	bl	80009d0 <comms_init>
  comms_append_int32(20, 1, 65000);
 8000eda:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8000ede:	2101      	movs	r1, #1
 8000ee0:	2014      	movs	r0, #20
 8000ee2:	f7ff fdb7 	bl	8000a54 <comms_append_int32>
  comms_append_int32(20, 1, 65000);
 8000ee6:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8000eea:	2101      	movs	r1, #1
 8000eec:	2014      	movs	r0, #20
 8000eee:	f7ff fdb1 	bl	8000a54 <comms_append_int32>
  comms_send();
 8000ef2:	f7ff fe21 	bl	8000b38 <comms_send>

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2180      	movs	r1, #128	@ 0x80
 8000efa:	4827      	ldr	r0, [pc, #156]	@ (8000f98 <main+0xf4>)
 8000efc:	f002 fdce 	bl	8003a9c <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 8000f00:	4826      	ldr	r0, [pc, #152]	@ (8000f9c <main+0xf8>)
 8000f02:	f005 fd51 	bl	80069a8 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 8000f06:	4826      	ldr	r0, [pc, #152]	@ (8000fa0 <main+0xfc>)
 8000f08:	f005 fce6 	bl	80068d8 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	e00d      	b.n	8000f2e <main+0x8a>
		dma[i] = i;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1c:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <main+0x100>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f34:	dbed      	blt.n	8000f12 <main+0x6e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 8000f36:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <main+0x104>)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	481c      	ldr	r0, [pc, #112]	@ (8000fac <main+0x108>)
 8000f3c:	f002 fb34 	bl	80035a8 <HAL_DMA_RegisterCallback>
 8000f40:	4603      	mov	r3, r0
 8000f42:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <main+0xfc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4a:	4a19      	ldr	r2, [pc, #100]	@ (8000fb0 <main+0x10c>)
 8000f4c:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8000f4e:	4915      	ldr	r1, [pc, #84]	@ (8000fa4 <main+0x100>)
 8000f50:	4a18      	ldr	r2, [pc, #96]	@ (8000fb4 <main+0x110>)
 8000f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f56:	4815      	ldr	r0, [pc, #84]	@ (8000fac <main+0x108>)
 8000f58:	f002 f9fc 	bl	8003354 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <main+0xfc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f62:	4a15      	ldr	r2, [pc, #84]	@ (8000fb8 <main+0x114>)
 8000f64:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <main+0xfc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6c:	4a13      	ldr	r2, [pc, #76]	@ (8000fbc <main+0x118>)
 8000f6e:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 8000f70:	4813      	ldr	r0, [pc, #76]	@ (8000fc0 <main+0x11c>)
 8000f72:	f005 fd19 	bl	80069a8 <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f76:	217f      	movs	r1, #127	@ 0x7f
 8000f78:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <main+0x120>)
 8000f7a:	f001 ff9f 	bl	8002ebc <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 8000f7e:	2032      	movs	r0, #50	@ 0x32
 8000f80:	f000 fc30 	bl	80017e4 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 8000f84:	22c8      	movs	r2, #200	@ 0xc8
 8000f86:	4910      	ldr	r1, [pc, #64]	@ (8000fc8 <main+0x124>)
 8000f88:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <main+0x120>)
 8000f8a:	f000 ffa9 	bl	8001ee0 <HAL_ADC_Start_DMA>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	70bb      	strb	r3, [r7, #2]
//		void * nazevpole2[255];
//		memset(nazevpole2, NULL, 255*sizeof(void *));


		//load_CPU();
		m2s_Process();
 8000f92:	f7ff fdf5 	bl	8000b80 <m2s_Process>
 8000f96:	e7fc      	b.n	8000f92 <main+0xee>
 8000f98:	48000800 	.word	0x48000800
 8000f9c:	2000e7f8 	.word	0x2000e7f8
 8000fa0:	2000e7ac 	.word	0x2000e7ac
 8000fa4:	2000c680 	.word	0x2000c680
 8000fa8:	08000ce1 	.word	0x08000ce1
 8000fac:	200001f0 	.word	0x200001f0
 8000fb0:	2000c670 	.word	0x2000c670
 8000fb4:	2000d620 	.word	0x2000d620
 8000fb8:	2000c67c 	.word	0x2000c67c
 8000fbc:	2000c674 	.word	0x2000c674
 8000fc0:	2000e760 	.word	0x2000e760
 8000fc4:	20000128 	.word	0x20000128
 8000fc8:	2000e5c0 	.word	0x2000e5c0

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b096      	sub	sp, #88	@ 0x58
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2244      	movs	r2, #68	@ 0x44
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00b f840 	bl	800c060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f003 ff66 	bl	8004ec0 <HAL_PWREx_ControlVoltageScaling>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000ffa:	f000 f83a 	bl	8001072 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000ffe:	2322      	movs	r3, #34	@ 0x22
 8001000:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	2340      	movs	r3, #64	@ 0x40
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001010:	2302      	movs	r3, #2
 8001012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001014:	2302      	movs	r3, #2
 8001016:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800101c:	231e      	movs	r3, #30
 800101e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001024:	2302      	movs	r3, #2
 8001026:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001028:	2302      	movs	r3, #2
 800102a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4618      	mov	r0, r3
 8001032:	f004 f809 	bl	8005048 <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800103c:	f000 f819 	bl	8001072 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	2303      	movs	r3, #3
 8001046:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001050:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	2105      	movs	r1, #5
 800105a:	4618      	mov	r0, r3
 800105c:	f004 fc0e 	bl	800587c <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001066:	f000 f804 	bl	8001072 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3758      	adds	r7, #88	@ 0x58
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001076:	b672      	cpsid	i
}
 8001078:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800107a:	bf00      	nop
 800107c:	e7fd      	b.n	800107a <Error_Handler+0x8>
	...

08001080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_MspInit+0x44>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108a:	4a0e      	ldr	r2, [pc, #56]	@ (80010c4 <HAL_MspInit+0x44>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6613      	str	r3, [r2, #96]	@ 0x60
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <HAL_MspInit+0x44>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_MspInit+0x44>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_MspInit+0x44>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_MspInit+0x44>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <NMI_Handler+0x4>

080010d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <MemManage_Handler+0x4>

080010e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <UsageFault_Handler+0x4>

080010f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 fb41 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <DMA1_Channel1_IRQHandler+0x10>)
 800112e:	f002 f98c 	bl	800344a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000190 	.word	0x20000190

0800113c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <DMA1_Channel2_IRQHandler+0x10>)
 8001142:	f002 f982 	bl	800344a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001f0 	.word	0x200001f0

08001150 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <ADC1_IRQHandler+0x10>)
 8001156:	f000 ff47 	bl	8001fe8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000128 	.word	0x20000128

08001164 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <TIM3_IRQHandler+0x10>)
 800116a:	f005 fc8d 	bl	8006a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000e760 	.word	0x2000e760

08001178 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800117c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001180:	f002 fcbe 	bl	8003b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800118c:	4802      	ldr	r0, [pc, #8]	@ (8001198 <TIM6_DAC_IRQHandler+0x10>)
 800118e:	f005 fc7b 	bl	8006a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000e7f8 	.word	0x2000e7f8

0800119c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <OTG_FS_IRQHandler+0x10>)
 80011a2:	f002 fe18 	bl	8003dd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000fe50 	.word	0x2000fe50

080011b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <MX_TIM3_Init+0x94>)
 80011f4:	4a1d      	ldr	r2, [pc, #116]	@ (800126c <MX_TIM3_Init+0x98>)
 80011f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <MX_TIM3_Init+0x94>)
 80011fa:	2217      	movs	r2, #23
 80011fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_TIM3_Init+0x94>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <MX_TIM3_Init+0x94>)
 8001206:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800120a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <MX_TIM3_Init+0x94>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <MX_TIM3_Init+0x94>)
 8001214:	2280      	movs	r2, #128	@ 0x80
 8001216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001218:	4813      	ldr	r0, [pc, #76]	@ (8001268 <MX_TIM3_Init+0x94>)
 800121a:	f005 fb05 	bl	8006828 <HAL_TIM_Base_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001224:	f7ff ff25 	bl	8001072 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001228:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	@ (8001268 <MX_TIM3_Init+0x94>)
 8001236:	f005 fd29 	bl	8006c8c <HAL_TIM_ConfigClockSource>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001240:	f7ff ff17 	bl	8001072 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001244:	2320      	movs	r3, #32
 8001246:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_TIM3_Init+0x94>)
 8001252:	f005 ff41 	bl	80070d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800125c:	f7ff ff09 	bl	8001072 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000e760 	.word	0x2000e760
 800126c:	40000400 	.word	0x40000400

08001270 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <MX_TIM5_Init+0x94>)
 8001290:	4a1d      	ldr	r2, [pc, #116]	@ (8001308 <MX_TIM5_Init+0x98>)
 8001292:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <MX_TIM5_Init+0x94>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <MX_TIM5_Init+0x94>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80012a0:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <MX_TIM5_Init+0x94>)
 80012a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_TIM5_Init+0x94>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <MX_TIM5_Init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012b4:	4813      	ldr	r0, [pc, #76]	@ (8001304 <MX_TIM5_Init+0x94>)
 80012b6:	f005 fab7 	bl	8006828 <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80012c0:	f7ff fed7 	bl	8001072 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <MX_TIM5_Init+0x94>)
 80012d2:	f005 fcdb 	bl	8006c8c <HAL_TIM_ConfigClockSource>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80012dc:	f7ff fec9 	bl	8001072 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_TIM5_Init+0x94>)
 80012ee:	f005 fef3 	bl	80070d8 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80012f8:	f7ff febb 	bl	8001072 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000e7ac 	.word	0x2000e7ac
 8001308:	40000c00 	.word	0x40000c00

0800130c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800131c:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <MX_TIM6_Init+0x68>)
 800131e:	4a16      	ldr	r2, [pc, #88]	@ (8001378 <MX_TIM6_Init+0x6c>)
 8001320:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <MX_TIM6_Init+0x68>)
 8001324:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001328:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <MX_TIM6_Init+0x68>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <MX_TIM6_Init+0x68>)
 8001332:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001336:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_TIM6_Init+0x68>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800133e:	480d      	ldr	r0, [pc, #52]	@ (8001374 <MX_TIM6_Init+0x68>)
 8001340:	f005 fa72 	bl	8006828 <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800134a:	f7ff fe92 	bl	8001072 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	@ (8001374 <MX_TIM6_Init+0x68>)
 800135c:	f005 febc 	bl	80070d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001366:	f7ff fe84 	bl	8001072 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000e7f8 	.word	0x2000e7f8
 8001378:	40001000 	.word	0x40001000

0800137c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a23      	ldr	r2, [pc, #140]	@ (8001418 <HAL_TIM_Base_MspInit+0x9c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d114      	bne.n	80013b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800138e:	4b23      	ldr	r3, [pc, #140]	@ (800141c <HAL_TIM_Base_MspInit+0xa0>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	4a22      	ldr	r2, [pc, #136]	@ (800141c <HAL_TIM_Base_MspInit+0xa0>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6593      	str	r3, [r2, #88]	@ 0x58
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <HAL_TIM_Base_MspInit+0xa0>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	201d      	movs	r0, #29
 80013ac:	f001 fef3 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013b0:	201d      	movs	r0, #29
 80013b2:	f001 ff0c 	bl	80031ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80013b6:	e02a      	b.n	800140e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a18      	ldr	r2, [pc, #96]	@ (8001420 <HAL_TIM_Base_MspInit+0xa4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10c      	bne.n	80013dc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <HAL_TIM_Base_MspInit+0xa0>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c6:	4a15      	ldr	r2, [pc, #84]	@ (800141c <HAL_TIM_Base_MspInit+0xa0>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ce:	4b13      	ldr	r3, [pc, #76]	@ (800141c <HAL_TIM_Base_MspInit+0xa0>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
}
 80013da:	e018      	b.n	800140e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a10      	ldr	r2, [pc, #64]	@ (8001424 <HAL_TIM_Base_MspInit+0xa8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d113      	bne.n	800140e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <HAL_TIM_Base_MspInit+0xa0>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ea:	4a0c      	ldr	r2, [pc, #48]	@ (800141c <HAL_TIM_Base_MspInit+0xa0>)
 80013ec:	f043 0310 	orr.w	r3, r3, #16
 80013f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_TIM_Base_MspInit+0xa0>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	2036      	movs	r0, #54	@ 0x36
 8001404:	f001 fec7 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001408:	2036      	movs	r0, #54	@ 0x36
 800140a:	f001 fee0 	bl	80031ce <HAL_NVIC_EnableIRQ>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40000400 	.word	0x40000400
 800141c:	40021000 	.word	0x40021000
 8001420:	40000c00 	.word	0x40000c00
 8001424:	40001000 	.word	0x40001000

08001428 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800142c:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 800142e:	4a23      	ldr	r2, [pc, #140]	@ (80014bc <MX_LPUART1_UART_Init+0x94>)
 8001430:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 8001434:	4a22      	ldr	r2, [pc, #136]	@ (80014c0 <MX_LPUART1_UART_Init+0x98>)
 8001436:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 800143a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800143e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001458:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001470:	4811      	ldr	r0, [pc, #68]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 8001472:	f005 fed7 	bl	8007224 <HAL_UART_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800147c:	f7ff fdf9 	bl	8001072 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001480:	2100      	movs	r1, #0
 8001482:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 8001484:	f006 fc6c 	bl	8007d60 <HAL_UARTEx_SetTxFifoThreshold>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800148e:	f7ff fdf0 	bl	8001072 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001492:	2100      	movs	r1, #0
 8001494:	4808      	ldr	r0, [pc, #32]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 8001496:	f006 fca1 	bl	8007ddc <HAL_UARTEx_SetRxFifoThreshold>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014a0:	f7ff fde7 	bl	8001072 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	@ (80014b8 <MX_LPUART1_UART_Init+0x90>)
 80014a6:	f006 fc22 	bl	8007cee <HAL_UARTEx_DisableFifoMode>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014b0:	f7ff fddf 	bl	8001072 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000e844 	.word	0x2000e844
 80014bc:	40008000 	.word	0x40008000
 80014c0:	00033324 	.word	0x00033324

080014c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014c8:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 80014ca:	4a23      	ldr	r2, [pc, #140]	@ (8001558 <MX_USART3_UART_Init+0x94>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001500:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001506:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800150c:	4811      	ldr	r0, [pc, #68]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 800150e:	f005 fe89 	bl	8007224 <HAL_UART_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001518:	f7ff fdab 	bl	8001072 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800151c:	2100      	movs	r1, #0
 800151e:	480d      	ldr	r0, [pc, #52]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 8001520:	f006 fc1e 	bl	8007d60 <HAL_UARTEx_SetTxFifoThreshold>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800152a:	f7ff fda2 	bl	8001072 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800152e:	2100      	movs	r1, #0
 8001530:	4808      	ldr	r0, [pc, #32]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 8001532:	f006 fc53 	bl	8007ddc <HAL_UARTEx_SetRxFifoThreshold>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800153c:	f7ff fd99 	bl	8001072 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001540:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_USART3_UART_Init+0x90>)
 8001542:	f006 fbd4 	bl	8007cee <HAL_UARTEx_DisableFifoMode>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800154c:	f7ff fd91 	bl	8001072 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000e8d8 	.word	0x2000e8d8
 8001558:	40004800 	.word	0x40004800

0800155c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0b0      	sub	sp, #192	@ 0xc0
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	f107 0318 	add.w	r3, r7, #24
 8001578:	2294      	movs	r2, #148	@ 0x94
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f00a fd6f 	bl	800c060 <memset>
  if(uartHandle->Instance==LPUART1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a43      	ldr	r2, [pc, #268]	@ (8001694 <HAL_UART_MspInit+0x138>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d13e      	bne.n	800160a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800158c:	2320      	movs	r3, #32
 800158e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001590:	2300      	movs	r3, #0
 8001592:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	f107 0318 	add.w	r3, r7, #24
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fc2d 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a4:	f7ff fd65 	bl	8001072 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ac:	4a3a      	ldr	r2, [pc, #232]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80015b4:	4b38      	ldr	r3, [pc, #224]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c0:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c4:	4a34      	ldr	r2, [pc, #208]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015cc:	4b32      	ldr	r3, [pc, #200]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80015d8:	f003 fd26 	bl	8005028 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80015dc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80015f6:	2308      	movs	r3, #8
 80015f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001600:	4619      	mov	r1, r3
 8001602:	4826      	ldr	r0, [pc, #152]	@ (800169c <HAL_UART_MspInit+0x140>)
 8001604:	f002 f8b8 	bl	8003778 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001608:	e040      	b.n	800168c <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART3)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a24      	ldr	r2, [pc, #144]	@ (80016a0 <HAL_UART_MspInit+0x144>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d13b      	bne.n	800168c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001614:	2304      	movs	r3, #4
 8001616:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001618:	2300      	movs	r3, #0
 800161a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	4618      	mov	r0, r3
 8001622:	f004 fbe9 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800162c:	f7ff fd21 	bl	8001072 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001630:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 8001632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001634:	4a18      	ldr	r2, [pc, #96]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 8001636:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800163a:	6593      	str	r3, [r2, #88]	@ 0x58
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001640:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164c:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001654:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <HAL_UART_MspInit+0x13c>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001660:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800167a:	2307      	movs	r3, #7
 800167c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001680:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001684:	4619      	mov	r1, r3
 8001686:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <HAL_UART_MspInit+0x148>)
 8001688:	f002 f876 	bl	8003778 <HAL_GPIO_Init>
}
 800168c:	bf00      	nop
 800168e:	37c0      	adds	r7, #192	@ 0xc0
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40008000 	.word	0x40008000
 8001698:	40021000 	.word	0x40021000
 800169c:	48001800 	.word	0x48001800
 80016a0:	40004800 	.word	0x40004800
 80016a4:	48000c00 	.word	0x48000c00

080016a8 <Reset_Handler>:
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e0 <LoopForever+0x2>
 80016ac:	f7ff fd80 	bl	80011b0 <SystemInit>
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <LoopForever+0x6>)
 80016b2:	490d      	ldr	r1, [pc, #52]	@ (80016e8 <LoopForever+0xa>)
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <LoopForever+0xe>)
 80016b6:	2300      	movs	r3, #0
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:
 80016ba:	58d4      	ldr	r4, [r2, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:
 80016c0:	18c4      	adds	r4, r0, r3
 80016c2:	428c      	cmp	r4, r1
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LoopForever+0x12>)
 80016c8:	4c0a      	ldr	r4, [pc, #40]	@ (80016f4 <LoopForever+0x16>)
 80016ca:	2300      	movs	r3, #0
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:
 80016d2:	42a2      	cmp	r2, r4
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>
 80016d6:	f00a fccb 	bl	800c070 <__libc_init_array>
 80016da:	f7ff fbe3 	bl	8000ea4 <main>

080016de <LoopForever>:
 80016de:	e7fe      	b.n	80016de <LoopForever>
 80016e0:	200a0000 	.word	0x200a0000
 80016e4:	20000000 	.word	0x20000000
 80016e8:	2000010c 	.word	0x2000010c
 80016ec:	0800c1b4 	.word	0x0800c1b4
 80016f0:	2000010c 	.word	0x2000010c
 80016f4:	2001057c 	.word	0x2001057c

080016f8 <CAN1_RX0_IRQHandler>:
 80016f8:	e7fe      	b.n	80016f8 <CAN1_RX0_IRQHandler>

080016fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f001 fd3b 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f80e 	bl	800172c <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	71fb      	strb	r3, [r7, #7]
 800171a:	e001      	b.n	8001720 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800171c:	f7ff fcb0 	bl	8001080 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001720:	79fb      	ldrb	r3, [r7, #7]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001738:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <HAL_InitTick+0x6c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d023      	beq.n	8001788 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001740:	4b16      	ldr	r3, [pc, #88]	@ (800179c <HAL_InitTick+0x70>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <HAL_InitTick+0x6c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f001 fd47 	bl	80031ea <HAL_SYSTICK_Config>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d809      	bhi.n	800177c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001770:	f001 fd11 	bl	8003196 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001774:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <HAL_InitTick+0x74>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e007      	b.n	800178c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e004      	b.n	800178c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e001      	b.n	800178c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_IncTick+0x20>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_IncTick+0x24>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <HAL_IncTick+0x24>)
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008
 80017c8:	2000e96c 	.word	0x2000e96c

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <HAL_GetTick+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	2000e96c 	.word	0x2000e96c

080017e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff ffee 	bl	80017cc <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffde 	bl	80017cc <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000008 	.word	0x20000008

0800182c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	609a      	str	r2, [r3, #8]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	609a      	str	r2, [r3, #8]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3360      	adds	r3, #96	@ 0x60
 80018a6:	461a      	mov	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <LL_ADC_SetOffset+0x44>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	4313      	orrs	r3, r2
 80018c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018cc:	bf00      	nop
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	03fff000 	.word	0x03fff000

080018dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3360      	adds	r3, #96	@ 0x60
 80018ea:	461a      	mov	r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3360      	adds	r3, #96	@ 0x60
 8001918:	461a      	mov	r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	431a      	orrs	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001932:	bf00      	nop
 8001934:	371c      	adds	r7, #28
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	615a      	str	r2, [r3, #20]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800198a:	b480      	push	{r7}
 800198c:	b087      	sub	sp, #28
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3330      	adds	r3, #48	@ 0x30
 800199a:	461a      	mov	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	4413      	add	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	211f      	movs	r1, #31
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	401a      	ands	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	0e9b      	lsrs	r3, r3, #26
 80019c2:	f003 011f 	and.w	r1, r3, #31
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	431a      	orrs	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019d6:	bf00      	nop
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3314      	adds	r3, #20
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	0e5b      	lsrs	r3, r3, #25
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	0d1b      	lsrs	r3, r3, #20
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2107      	movs	r1, #7
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	0d1b      	lsrs	r3, r3, #20
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a52:	bf00      	nop
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0318 	and.w	r3, r3, #24
 8001a82:	4908      	ldr	r1, [pc, #32]	@ (8001aa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a84:	40d9      	lsrs	r1, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	400b      	ands	r3, r1
 8001a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	0007ffff 	.word	0x0007ffff

08001aa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ab8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6093      	str	r3, [r2, #8]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ae0:	d101      	bne.n	8001ae6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b80:	f043 0202 	orr.w	r2, r3, #2
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <LL_ADC_IsEnabled+0x18>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <LL_ADC_IsEnabled+0x1a>
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d101      	bne.n	8001bd2 <LL_ADC_IsDisableOngoing+0x18>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_ADC_IsDisableOngoing+0x1a>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bf4:	f043 0204 	orr.w	r2, r3, #4
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d101      	bne.n	8001c20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d101      	bne.n	8001c46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e129      	b.n	8001ec2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7fe fcab 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff19 	bl	8001acc <LL_ADC_IsDeepPowerDownEnabled>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff feff 	bl	8001aa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff34 	bl	8001b1c <LL_ADC_IsInternalRegulatorEnabled>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d115      	bne.n	8001ce6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff18 	bl	8001af4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cc4:	4b81      	ldr	r3, [pc, #516]	@ (8001ecc <HAL_ADC_Init+0x278>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	099b      	lsrs	r3, r3, #6
 8001cca:	4a81      	ldr	r2, [pc, #516]	@ (8001ed0 <HAL_ADC_Init+0x27c>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cd8:	e002      	b.n	8001ce0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f9      	bne.n	8001cda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff16 	bl	8001b1c <LL_ADC_IsInternalRegulatorEnabled>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10d      	bne.n	8001d12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	f043 0210 	orr.w	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d06:	f043 0201 	orr.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff76 	bl	8001c08 <LL_ADC_REG_IsConversionOngoing>
 8001d1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 80c2 	bne.w	8001eb0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 80be 	bne.w	8001eb0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d38:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d3c:	f043 0202 	orr.w	r2, r3, #2
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff23 	bl	8001b94 <LL_ADC_IsEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10b      	bne.n	8001d6c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d54:	485f      	ldr	r0, [pc, #380]	@ (8001ed4 <HAL_ADC_Init+0x280>)
 8001d56:	f7ff ff1d 	bl	8001b94 <LL_ADC_IsEnabled>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d105      	bne.n	8001d6c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4619      	mov	r1, r3
 8001d66:	485c      	ldr	r0, [pc, #368]	@ (8001ed8 <HAL_ADC_Init+0x284>)
 8001d68:	f7ff fd60 	bl	800182c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7e5b      	ldrb	r3, [r3, #25]
 8001d70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d106      	bne.n	8001da8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	045b      	lsls	r3, r3, #17
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d009      	beq.n	8001dc4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	4b44      	ldr	r3, [pc, #272]	@ (8001edc <HAL_ADC_Init+0x288>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	69b9      	ldr	r1, [r7, #24]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff26 	bl	8001c2e <LL_ADC_INJ_IsConversionOngoing>
 8001de2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d140      	bne.n	8001e6c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d13d      	bne.n	8001e6c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e1b      	ldrb	r3, [r3, #24]
 8001df8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dfa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e02:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e12:	f023 0306 	bic.w	r3, r3, #6
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	69b9      	ldr	r1, [r7, #24]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d118      	bne.n	8001e5c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e40:	4311      	orrs	r1, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	611a      	str	r2, [r3, #16]
 8001e5a:	e007      	b.n	8001e6c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0201 	bic.w	r2, r2, #1
 8001e6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d10c      	bne.n	8001e8e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f023 010f 	bic.w	r1, r3, #15
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	1e5a      	subs	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e8c:	e007      	b.n	8001e9e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 020f 	bic.w	r2, r2, #15
 8001e9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	f023 0303 	bic.w	r3, r3, #3
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	659a      	str	r2, [r3, #88]	@ 0x58
 8001eae:	e007      	b.n	8001ec0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	f043 0210 	orr.w	r2, r3, #16
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	053e2d63 	.word	0x053e2d63
 8001ed4:	50040000 	.word	0x50040000
 8001ed8:	50040300 	.word	0x50040300
 8001edc:	fff0c007 	.word	0xfff0c007

08001ee0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fe89 	bl	8001c08 <LL_ADC_REG_IsConversionOngoing>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d167      	bne.n	8001fcc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_Start_DMA+0x2a>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e063      	b.n	8001fd2 <HAL_ADC_Start_DMA+0xf2>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fe2c 	bl	8002b70 <ADC_Enable>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d14f      	bne.n	8001fc2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f46:	f023 0206 	bic.w	r2, r3, #6
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f4e:	e002      	b.n	8001f56 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5a:	4a20      	ldr	r2, [pc, #128]	@ (8001fdc <HAL_ADC_Start_DMA+0xfc>)
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f62:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe0 <HAL_ADC_Start_DMA+0x100>)
 8001f64:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe4 <HAL_ADC_Start_DMA+0x104>)
 8001f6c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	221c      	movs	r2, #28
 8001f74:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0210 	orr.w	r2, r2, #16
 8001f8c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0201 	orr.w	r2, r2, #1
 8001f9c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3340      	adds	r3, #64	@ 0x40
 8001fa8:	4619      	mov	r1, r3
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f001 f9d1 	bl	8003354 <HAL_DMA_Start_IT>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe10 	bl	8001be0 <LL_ADC_REG_StartConversion>
 8001fc0:	e006      	b.n	8001fd0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001fca:	e001      	b.n	8001fd0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	08002d3b 	.word	0x08002d3b
 8001fe0:	08002e13 	.word	0x08002e13
 8001fe4:	08002e2f 	.word	0x08002e2f

08001fe8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d017      	beq.n	800203e <HAL_ADC_IRQHandler+0x56>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d012      	beq.n	800203e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 ffcb 	bl	8002fcc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2202      	movs	r2, #2
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_ADC_IRQHandler+0x6a>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002058:	2b00      	cmp	r3, #0
 800205a:	d05e      	beq.n	800211a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d059      	beq.n	800211a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fc6e 	bl	8001964 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d03e      	beq.n	800210c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d135      	bne.n	800210c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d12e      	bne.n	800210c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fda8 	bl	8001c08 <LL_ADC_REG_IsConversionOngoing>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d11a      	bne.n	80020f4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 020c 	bic.w	r2, r2, #12
 80020cc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d112      	bne.n	800210c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80020f2:	e00b      	b.n	800210c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f8:	f043 0210 	orr.w	r2, r3, #16
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7fe fe01 	bl	8000d14 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	220c      	movs	r2, #12
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <HAL_ADC_IRQHandler+0x146>
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002134:	2b00      	cmp	r3, #0
 8002136:	d072      	beq.n	800221e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d06d      	beq.n	800221e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	d105      	bne.n	800215a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fc3f 	bl	80019e2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002164:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fbfa 	bl	8001964 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002170:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d047      	beq.n	8002210 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_ADC_IRQHandler+0x1b2>
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d03f      	beq.n	8002210 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d13a      	bne.n	8002210 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a4:	2b40      	cmp	r3, #64	@ 0x40
 80021a6:	d133      	bne.n	8002210 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d12e      	bne.n	8002210 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fd39 	bl	8001c2e <LL_ADC_INJ_IsConversionOngoing>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11a      	bne.n	80021f8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021d0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d112      	bne.n	8002210 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	f043 0201 	orr.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80021f6:	e00b      	b.n	8002210 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	f043 0210 	orr.w	r2, r3, #16
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 feb3 	bl	8002f7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2260      	movs	r2, #96	@ 0x60
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002224:	2b00      	cmp	r3, #0
 8002226:	d011      	beq.n	800224c <HAL_ADC_IRQHandler+0x264>
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00c      	beq.n	800224c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002236:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f886 	bl	8002350 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d012      	beq.n	800227c <HAL_ADC_IRQHandler+0x294>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002264:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fe99 	bl	8002fa4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800227a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002282:	2b00      	cmp	r3, #0
 8002284:	d012      	beq.n	80022ac <HAL_ADC_IRQHandler+0x2c4>
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00d      	beq.n	80022ac <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002294:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fe8b 	bl	8002fb8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02a      	beq.n	800230c <HAL_ADC_IRQHandler+0x324>
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d025      	beq.n	800230c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d102      	bne.n	80022ce <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80022c8:	2301      	movs	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	e008      	b.n	80022e0 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80022dc:	2301      	movs	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d10e      	bne.n	8002304 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	f043 0202 	orr.w	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f830 	bl	8002364 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2210      	movs	r2, #16
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002312:	2b00      	cmp	r3, #0
 8002314:	d018      	beq.n	8002348 <HAL_ADC_IRQHandler+0x360>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002330:	f043 0208 	orr.w	r2, r3, #8
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002340:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fe24 	bl	8002f90 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002348:	bf00      	nop
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b0b6      	sub	sp, #216	@ 0xd8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x22>
 8002396:	2302      	movs	r3, #2
 8002398:	e3d5      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x7ce>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fc2e 	bl	8001c08 <LL_ADC_REG_IsConversionOngoing>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 83ba 	bne.w	8002b28 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d824      	bhi.n	800240e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	3b02      	subs	r3, #2
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d81b      	bhi.n	8002406 <HAL_ADC_ConfigChannel+0x8e>
 80023ce:	a201      	add	r2, pc, #4	@ (adr r2, 80023d4 <HAL_ADC_ConfigChannel+0x5c>)
 80023d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d4:	080023e5 	.word	0x080023e5
 80023d8:	080023ed 	.word	0x080023ed
 80023dc:	080023f5 	.word	0x080023f5
 80023e0:	080023fd 	.word	0x080023fd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80023e4:	230c      	movs	r3, #12
 80023e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023ea:	e010      	b.n	800240e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80023ec:	2312      	movs	r3, #18
 80023ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023f2:	e00c      	b.n	800240e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80023f4:	2318      	movs	r3, #24
 80023f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023fa:	e008      	b.n	800240e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80023fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002404:	e003      	b.n	800240e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002406:	2306      	movs	r3, #6
 8002408:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800240c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800241c:	f7ff fab5 	bl	800198a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fbef 	bl	8001c08 <LL_ADC_REG_IsConversionOngoing>
 800242a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fbfb 	bl	8001c2e <LL_ADC_INJ_IsConversionOngoing>
 8002438:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800243c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 81bf 	bne.w	80027c4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 81ba 	bne.w	80027c4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002458:	d10f      	bne.n	800247a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2200      	movs	r2, #0
 8002464:	4619      	mov	r1, r3
 8002466:	f7ff facf 	bl	8001a08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fa63 	bl	800193e <LL_ADC_SetSamplingTimeCommonConfig>
 8002478:	e00e      	b.n	8002498 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6819      	ldr	r1, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	461a      	mov	r2, r3
 8002488:	f7ff fabe 	bl	8001a08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fa53 	bl	800193e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	08db      	lsrs	r3, r3, #3
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d00a      	beq.n	80024d0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6919      	ldr	r1, [r3, #16]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024ca:	f7ff f9e3 	bl	8001894 <LL_ADC_SetOffset>
 80024ce:	e179      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fa00 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x184>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff f9f5 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	f003 021f 	and.w	r2, r3, #31
 80024fa:	e01e      	b.n	800253a <HAL_ADC_ConfigChannel+0x1c2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f9ea 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002508:	4603      	mov	r3, r0
 800250a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800251a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800251e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002522:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800252a:	2320      	movs	r3, #32
 800252c:	e004      	b.n	8002538 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800252e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x1da>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	e018      	b.n	8002584 <HAL_ADC_ConfigChannel+0x20c>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800256a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800256e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e004      	b.n	8002584 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800257a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002584:	429a      	cmp	r2, r3
 8002586:	d106      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f9b9 	bl	8001908 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2101      	movs	r1, #1
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f99d 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x24a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2101      	movs	r1, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff f992 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	e01e      	b.n	8002600 <HAL_ADC_ConfigChannel+0x288>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2101      	movs	r1, #1
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f987 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80025e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80025e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e004      	b.n	80025fe <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80025f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x2a0>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	e018      	b.n	800264a <HAL_ADC_ConfigChannel+0x2d2>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800262c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e004      	b.n	800264a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002640:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800264a:	429a      	cmp	r2, r3
 800264c:	d106      	bne.n	800265c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f956 	bl	8001908 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2102      	movs	r1, #2
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f93a 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10a      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x310>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2102      	movs	r1, #2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff f92f 	bl	80018dc <LL_ADC_GetOffsetChannel>
 800267e:	4603      	mov	r3, r0
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	f003 021f 	and.w	r2, r3, #31
 8002686:	e01e      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x34e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2102      	movs	r1, #2
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff f924 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002694:	4603      	mov	r3, r0
 8002696:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80026a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80026ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e004      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80026ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_ADC_ConfigChannel+0x366>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	e014      	b.n	8002708 <HAL_ADC_ConfigChannel+0x390>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80026ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80026f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e004      	b.n	8002708 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80026fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	2102      	movs	r1, #2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff f8f7 	bl	8001908 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2103      	movs	r1, #3
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff f8db 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x3ce>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2103      	movs	r1, #3
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f8d0 	bl	80018dc <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	e017      	b.n	8002776 <HAL_ADC_ConfigChannel+0x3fe>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2103      	movs	r1, #3
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f8c5 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800275e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002760:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002768:	2320      	movs	r3, #32
 800276a:	e003      	b.n	8002774 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800276c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_ADC_ConfigChannel+0x416>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	e011      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x43a>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800279c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800279e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80027a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80027a6:	2320      	movs	r3, #32
 80027a8:	e003      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80027aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d106      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2103      	movs	r1, #3
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f8a2 	bl	8001908 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff f9e3 	bl	8001b94 <LL_ADC_IsEnabled>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 813f 	bne.w	8002a54 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f7ff f93c 	bl	8001a60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a8e      	ldr	r2, [pc, #568]	@ (8002a28 <HAL_ADC_ConfigChannel+0x6b0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f040 8130 	bne.w	8002a54 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_ADC_ConfigChannel+0x4a4>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	3301      	adds	r3, #1
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2b09      	cmp	r3, #9
 8002812:	bf94      	ite	ls
 8002814:	2301      	movls	r3, #1
 8002816:	2300      	movhi	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e019      	b.n	8002850 <HAL_ADC_ConfigChannel+0x4d8>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800282a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800282e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e003      	b.n	8002840 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2b09      	cmp	r3, #9
 8002848:	bf94      	ite	ls
 800284a:	2301      	movls	r3, #1
 800284c:	2300      	movhi	r3, #0
 800284e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002850:	2b00      	cmp	r3, #0
 8002852:	d079      	beq.n	8002948 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x4f8>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	3301      	adds	r3, #1
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800286e:	e015      	b.n	800289c <HAL_ADC_ConfigChannel+0x524>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800287e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002880:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002888:	2320      	movs	r3, #32
 800288a:	e003      	b.n	8002894 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800288c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3301      	adds	r3, #1
 8002896:	069b      	lsls	r3, r3, #26
 8002898:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x544>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	e017      	b.n	80028ec <HAL_ADC_ConfigChannel+0x574>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80028ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80028ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80028d4:	2320      	movs	r3, #32
 80028d6:	e003      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80028d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2101      	movs	r1, #1
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	ea42 0103 	orr.w	r1, r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x59a>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	3301      	adds	r3, #1
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	051b      	lsls	r3, r3, #20
 8002910:	e018      	b.n	8002944 <HAL_ADC_ConfigChannel+0x5cc>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002922:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e003      	b.n	8002936 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002944:	430b      	orrs	r3, r1
 8002946:	e080      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x5ec>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0e9b      	lsrs	r3, r3, #26
 800295a:	3301      	adds	r3, #1
 800295c:	069b      	lsls	r3, r3, #26
 800295e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002962:	e015      	b.n	8002990 <HAL_ADC_ConfigChannel+0x618>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e003      	b.n	8002988 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	3301      	adds	r3, #1
 800298a:	069b      	lsls	r3, r3, #26
 800298c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x638>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	3301      	adds	r3, #1
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	e017      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x668>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	61bb      	str	r3, [r7, #24]
  return result;
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e003      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	ea42 0103 	orr.w	r1, r2, r3
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10d      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x694>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	3301      	adds	r3, #1
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	3b1e      	subs	r3, #30
 8002a04:	051b      	lsls	r3, r3, #20
 8002a06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	e01d      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x6d0>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	60fb      	str	r3, [r7, #12]
  return result;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e005      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x6bc>
 8002a28:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	3301      	adds	r3, #1
 8002a36:	f003 021f 	and.w	r2, r3, #31
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b1e      	subs	r3, #30
 8002a42:	051b      	lsls	r3, r3, #20
 8002a44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a48:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f7fe ffda 	bl	8001a08 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b3d      	ldr	r3, [pc, #244]	@ (8002b50 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d06c      	beq.n	8002b3a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a60:	483c      	ldr	r0, [pc, #240]	@ (8002b54 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a62:	f7fe ff09 	bl	8001878 <LL_ADC_GetCommonPathInternalCh>
 8002a66:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a3a      	ldr	r2, [pc, #232]	@ (8002b58 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d127      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d121      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a35      	ldr	r2, [pc, #212]	@ (8002b5c <HAL_ADC_ConfigChannel+0x7e4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d157      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a92:	4619      	mov	r1, r3
 8002a94:	482f      	ldr	r0, [pc, #188]	@ (8002b54 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a96:	f7fe fedc 	bl	8001852 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a9a:	4b31      	ldr	r3, [pc, #196]	@ (8002b60 <HAL_ADC_ConfigChannel+0x7e8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	4a30      	ldr	r2, [pc, #192]	@ (8002b64 <HAL_ADC_ConfigChannel+0x7ec>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	099b      	lsrs	r3, r3, #6
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ab4:	e002      	b.n	8002abc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f9      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ac2:	e03a      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a27      	ldr	r2, [pc, #156]	@ (8002b68 <HAL_ADC_ConfigChannel+0x7f0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d113      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ace:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ad2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1f      	ldr	r2, [pc, #124]	@ (8002b5c <HAL_ADC_ConfigChannel+0x7e4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d12a      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ae4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ae8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aec:	4619      	mov	r1, r3
 8002aee:	4819      	ldr	r0, [pc, #100]	@ (8002b54 <HAL_ADC_ConfigChannel+0x7dc>)
 8002af0:	f7fe feaf 	bl	8001852 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002af4:	e021      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1c      	ldr	r2, [pc, #112]	@ (8002b6c <HAL_ADC_ConfigChannel+0x7f4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d11c      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d116      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a12      	ldr	r2, [pc, #72]	@ (8002b5c <HAL_ADC_ConfigChannel+0x7e4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d111      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b1e:	4619      	mov	r1, r3
 8002b20:	480c      	ldr	r0, [pc, #48]	@ (8002b54 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b22:	f7fe fe96 	bl	8001852 <LL_ADC_SetCommonPathInternalCh>
 8002b26:	e008      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b42:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	37d8      	adds	r7, #216	@ 0xd8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	80080000 	.word	0x80080000
 8002b54:	50040300 	.word	0x50040300
 8002b58:	c7520000 	.word	0xc7520000
 8002b5c:	50040000 	.word	0x50040000
 8002b60:	20000000 	.word	0x20000000
 8002b64:	053e2d63 	.word	0x053e2d63
 8002b68:	cb840000 	.word	0xcb840000
 8002b6c:	80000001 	.word	0x80000001

08002b70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f807 	bl	8001b94 <LL_ADC_IsEnabled>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d169      	bne.n	8002c60 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	4b36      	ldr	r3, [pc, #216]	@ (8002c6c <ADC_Enable+0xfc>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9e:	f043 0210 	orr.w	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002baa:	f043 0201 	orr.w	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e055      	b.n	8002c62 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe ffc2 	bl	8001b44 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bc0:	482b      	ldr	r0, [pc, #172]	@ (8002c70 <ADC_Enable+0x100>)
 8002bc2:	f7fe fe59 	bl	8001878 <LL_ADC_GetCommonPathInternalCh>
 8002bc6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002bc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bd0:	4b28      	ldr	r3, [pc, #160]	@ (8002c74 <ADC_Enable+0x104>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	4a28      	ldr	r2, [pc, #160]	@ (8002c78 <ADC_Enable+0x108>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bea:	e002      	b.n	8002bf2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f9      	bne.n	8002bec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fde8 	bl	80017cc <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bfe:	e028      	b.n	8002c52 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe ffc5 	bl	8001b94 <LL_ADC_IsEnabled>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d104      	bne.n	8002c1a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe ff95 	bl	8001b44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c1a:	f7fe fdd7 	bl	80017cc <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d914      	bls.n	8002c52 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d00d      	beq.n	8002c52 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3a:	f043 0210 	orr.w	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e007      	b.n	8002c62 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d1cf      	bne.n	8002c00 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	8000003f 	.word	0x8000003f
 8002c70:	50040300 	.word	0x50040300
 8002c74:	20000000 	.word	0x20000000
 8002c78:	053e2d63 	.word	0x053e2d63

08002c7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe ff96 	bl	8001bba <LL_ADC_IsDisableOngoing>
 8002c8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe ff7d 	bl	8001b94 <LL_ADC_IsEnabled>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d047      	beq.n	8002d30 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d144      	bne.n	8002d30 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030d 	and.w	r3, r3, #13
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10c      	bne.n	8002cce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe ff57 	bl	8001b6c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe fd81 	bl	80017cc <HAL_GetTick>
 8002cca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ccc:	e029      	b.n	8002d22 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd2:	f043 0210 	orr.w	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e023      	b.n	8002d32 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cea:	f7fe fd6f 	bl	80017cc <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d914      	bls.n	8002d22 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e007      	b.n	8002d32 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1dc      	bne.n	8002cea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d14b      	bne.n	8002dec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d021      	beq.n	8002db2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fdf6 	bl	8001964 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d032      	beq.n	8002de4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d12b      	bne.n	8002de4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11f      	bne.n	8002de4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	659a      	str	r2, [r3, #88]	@ 0x58
 8002db0:	e018      	b.n	8002de4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d111      	bne.n	8002de4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7fd ff95 	bl	8000d14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dea:	e00e      	b.n	8002e0a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff fab3 	bl	8002364 <HAL_ADC_ErrorCallback>
}
 8002dfe:	e004      	b.n	8002e0a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f7fe f835 	bl	8000e90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4c:	f043 0204 	orr.w	r2, r3, #4
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff fa85 	bl	8002364 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <LL_ADC_StartCalibration>:
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002e74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_IsCalibrationOnGoing>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ea8:	d101      	bne.n	8002eae <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADCEx_Calibration_Start+0x1c>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e04d      	b.n	8002f74 <HAL_ADCEx_Calibration_Start+0xb8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff fecb 	bl	8002c7c <ADC_Disable>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d136      	bne.n	8002f5e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ef8:	f023 0302 	bic.w	r3, r3, #2
 8002efc:	f043 0202 	orr.w	r2, r3, #2
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ffa9 	bl	8002e62 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f10:	e014      	b.n	8002f3c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3301      	adds	r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002f1e:	d30d      	bcc.n	8002f3c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	f023 0312 	bic.w	r3, r3, #18
 8002f28:	f043 0210 	orr.w	r2, r3, #16
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e01b      	b.n	8002f74 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ffa7 	bl	8002e94 <LL_ADC_IsCalibrationOnGoing>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e2      	bne.n	8002f12 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f50:	f023 0303 	bic.w	r3, r3, #3
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f5c:	e005      	b.n	8002f6a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f62:	f043 0210 	orr.w	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800300c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	@ (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800302c:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <__NVIC_GetPriorityGrouping+0x18>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0307 	and.w	r3, r3, #7
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	db0b      	blt.n	800306e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	4907      	ldr	r1, [pc, #28]	@ (800307c <__NVIC_EnableIRQ+0x38>)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2001      	movs	r0, #1
 8003066:	fa00 f202 	lsl.w	r2, r0, r2
 800306a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000e100 	.word	0xe000e100

08003080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db0a      	blt.n	80030aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	490c      	ldr	r1, [pc, #48]	@ (80030cc <__NVIC_SetPriority+0x4c>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a8:	e00a      	b.n	80030c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4908      	ldr	r1, [pc, #32]	@ (80030d0 <__NVIC_SetPriority+0x50>)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3b04      	subs	r3, #4
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	440b      	add	r3, r1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	@ 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	bf28      	it	cs
 80030f2:	2304      	movcs	r3, #4
 80030f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d902      	bls.n	8003104 <NVIC_EncodePriority+0x30>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3b03      	subs	r3, #3
 8003102:	e000      	b.n	8003106 <NVIC_EncodePriority+0x32>
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800311c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43d9      	mvns	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	4313      	orrs	r3, r2
         );
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	@ 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800314c:	d301      	bcc.n	8003152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314e:	2301      	movs	r3, #1
 8003150:	e00f      	b.n	8003172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003152:	4a0a      	ldr	r2, [pc, #40]	@ (800317c <SysTick_Config+0x40>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315a:	210f      	movs	r1, #15
 800315c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003160:	f7ff ff8e 	bl	8003080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003164:	4b05      	ldr	r3, [pc, #20]	@ (800317c <SysTick_Config+0x40>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316a:	4b04      	ldr	r3, [pc, #16]	@ (800317c <SysTick_Config+0x40>)
 800316c:	2207      	movs	r2, #7
 800316e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	e000e010 	.word	0xe000e010

08003180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff29 	bl	8002fe0 <__NVIC_SetPriorityGrouping>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031a8:	f7ff ff3e 	bl	8003028 <__NVIC_GetPriorityGrouping>
 80031ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7ff ff8e 	bl	80030d4 <NVIC_EncodePriority>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff5d 	bl	8003080 <__NVIC_SetPriority>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff31 	bl	8003044 <__NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffa2 	bl	800313c <SysTick_Config>
 80031f8:	4603      	mov	r3, r0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e08d      	b.n	8003332 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	4b47      	ldr	r3, [pc, #284]	@ (800333c <HAL_DMA_Init+0x138>)
 800321e:	429a      	cmp	r2, r3
 8003220:	d80f      	bhi.n	8003242 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	4b45      	ldr	r3, [pc, #276]	@ (8003340 <HAL_DMA_Init+0x13c>)
 800322a:	4413      	add	r3, r2
 800322c:	4a45      	ldr	r2, [pc, #276]	@ (8003344 <HAL_DMA_Init+0x140>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	091b      	lsrs	r3, r3, #4
 8003234:	009a      	lsls	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a42      	ldr	r2, [pc, #264]	@ (8003348 <HAL_DMA_Init+0x144>)
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003240:	e00e      	b.n	8003260 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	4b40      	ldr	r3, [pc, #256]	@ (800334c <HAL_DMA_Init+0x148>)
 800324a:	4413      	add	r3, r2
 800324c:	4a3d      	ldr	r2, [pc, #244]	@ (8003344 <HAL_DMA_Init+0x140>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	009a      	lsls	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a3c      	ldr	r2, [pc, #240]	@ (8003350 <HAL_DMA_Init+0x14c>)
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f9fe 	bl	80036b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032c0:	d102      	bne.n	80032c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d010      	beq.n	8003308 <HAL_DMA_Init+0x104>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d80c      	bhi.n	8003308 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fa1e 	bl	8003730 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	e008      	b.n	800331a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40020407 	.word	0x40020407
 8003340:	bffdfff8 	.word	0xbffdfff8
 8003344:	cccccccd 	.word	0xcccccccd
 8003348:	40020000 	.word	0x40020000
 800334c:	bffdfbf8 	.word	0xbffdfbf8
 8003350:	40020400 	.word	0x40020400

08003354 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_DMA_Start_IT+0x20>
 8003370:	2302      	movs	r3, #2
 8003372:	e066      	b.n	8003442 <HAL_DMA_Start_IT+0xee>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d155      	bne.n	8003434 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f943 	bl	8003638 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 020e 	orr.w	r2, r2, #14
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e00f      	b.n	80033ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 020a 	orr.w	r2, r2, #10
 80033ea:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003408:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003420:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0201 	orr.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e005      	b.n	8003440 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800343c:	2302      	movs	r3, #2
 800343e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003440:	7dfb      	ldrb	r3, [r7, #23]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f003 031c 	and.w	r3, r3, #28
 800346a:	2204      	movs	r2, #4
 800346c:	409a      	lsls	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d026      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x7a>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d021      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0204 	bic.w	r2, r2, #4
 800349c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	f003 021c 	and.w	r2, r3, #28
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	2104      	movs	r1, #4
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d071      	beq.n	800359e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80034c2:	e06c      	b.n	800359e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c8:	f003 031c 	and.w	r3, r3, #28
 80034cc:	2202      	movs	r2, #2
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d02e      	beq.n	8003536 <HAL_DMA_IRQHandler+0xec>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d029      	beq.n	8003536 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 020a 	bic.w	r2, r2, #10
 80034fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350c:	f003 021c 	and.w	r2, r3, #28
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003514:	2102      	movs	r1, #2
 8003516:	fa01 f202 	lsl.w	r2, r1, r2
 800351a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d038      	beq.n	800359e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003534:	e033      	b.n	800359e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	f003 031c 	and.w	r3, r3, #28
 800353e:	2208      	movs	r2, #8
 8003540:	409a      	lsls	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d02a      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x156>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d025      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 020e 	bic.w	r2, r2, #14
 8003562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003568:	f003 021c 	and.w	r2, r3, #28
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	2101      	movs	r1, #1
 8003572:	fa01 f202 	lsl.w	r2, r1, r2
 8003576:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
}
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	460b      	mov	r3, r1
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_DMA_RegisterCallback+0x20>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e031      	b.n	800362c <HAL_DMA_RegisterCallback+0x84>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d120      	bne.n	800361e <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80035dc:	7afb      	ldrb	r3, [r7, #11]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d81a      	bhi.n	8003618 <HAL_DMA_RegisterCallback+0x70>
 80035e2:	a201      	add	r2, pc, #4	@ (adr r2, 80035e8 <HAL_DMA_RegisterCallback+0x40>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	08003601 	.word	0x08003601
 80035f0:	08003609 	.word	0x08003609
 80035f4:	08003611 	.word	0x08003611
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 80035fe:	e010      	b.n	8003622 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8003606:	e00c      	b.n	8003622 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 800360e:	e008      	b.n	8003622 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003616:	e004      	b.n	8003622 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	75fb      	strb	r3, [r7, #23]
        break;
 800361c:	e001      	b.n	8003622 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800362a:	7dfb      	ldrb	r3, [r7, #23]
}
 800362c:	4618      	mov	r0, r3
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800364e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003660:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f003 021c 	and.w	r2, r3, #28
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	2101      	movs	r1, #1
 8003670:	fa01 f202 	lsl.w	r2, r1, r2
 8003674:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b10      	cmp	r3, #16
 8003684:	d108      	bne.n	8003698 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003696:	e007      	b.n	80036a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	60da      	str	r2, [r3, #12]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b17      	ldr	r3, [pc, #92]	@ (8003720 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d80a      	bhi.n	80036de <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036cc:	089b      	lsrs	r3, r3, #2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036d4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6493      	str	r3, [r2, #72]	@ 0x48
 80036dc:	e007      	b.n	80036ee <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	089b      	lsrs	r3, r3, #2
 80036e4:	009a      	lsls	r2, r3, #2
 80036e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80036e8:	4413      	add	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3b08      	subs	r3, #8
 80036f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003728 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a0a      	ldr	r2, [pc, #40]	@ (800372c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003704:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2201      	movs	r2, #1
 800370e:	409a      	lsls	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40020407 	.word	0x40020407
 8003724:	4002081c 	.word	0x4002081c
 8003728:	cccccccd 	.word	0xcccccccd
 800372c:	40020880 	.word	0x40020880

08003730 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	461a      	mov	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a08      	ldr	r2, [pc, #32]	@ (8003774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003752:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3b01      	subs	r3, #1
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2201      	movs	r2, #1
 800375e:	409a      	lsls	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	1000823f 	.word	0x1000823f
 8003774:	40020940 	.word	0x40020940

08003778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003786:	e166      	b.n	8003a56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	2101      	movs	r1, #1
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	fa01 f303 	lsl.w	r3, r1, r3
 8003794:	4013      	ands	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8158 	beq.w	8003a50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d005      	beq.n	80037b8 <HAL_GPIO_Init+0x40>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d130      	bne.n	800381a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	2203      	movs	r2, #3
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ee:	2201      	movs	r2, #1
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 0201 	and.w	r2, r3, #1
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b03      	cmp	r3, #3
 8003824:	d017      	beq.n	8003856 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	2203      	movs	r2, #3
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d123      	bne.n	80038aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	08da      	lsrs	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3208      	adds	r2, #8
 800386a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	220f      	movs	r2, #15
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	08da      	lsrs	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3208      	adds	r2, #8
 80038a4:	6939      	ldr	r1, [r7, #16]
 80038a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	2203      	movs	r2, #3
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4013      	ands	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0203 	and.w	r2, r3, #3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80b2 	beq.w	8003a50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ec:	4b61      	ldr	r3, [pc, #388]	@ (8003a74 <HAL_GPIO_Init+0x2fc>)
 80038ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f0:	4a60      	ldr	r2, [pc, #384]	@ (8003a74 <HAL_GPIO_Init+0x2fc>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80038f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a74 <HAL_GPIO_Init+0x2fc>)
 80038fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003904:	4a5c      	ldr	r2, [pc, #368]	@ (8003a78 <HAL_GPIO_Init+0x300>)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	3302      	adds	r3, #2
 800390c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	220f      	movs	r2, #15
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4013      	ands	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800392e:	d02b      	beq.n	8003988 <HAL_GPIO_Init+0x210>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a52      	ldr	r2, [pc, #328]	@ (8003a7c <HAL_GPIO_Init+0x304>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d025      	beq.n	8003984 <HAL_GPIO_Init+0x20c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a51      	ldr	r2, [pc, #324]	@ (8003a80 <HAL_GPIO_Init+0x308>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d01f      	beq.n	8003980 <HAL_GPIO_Init+0x208>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a50      	ldr	r2, [pc, #320]	@ (8003a84 <HAL_GPIO_Init+0x30c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d019      	beq.n	800397c <HAL_GPIO_Init+0x204>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a4f      	ldr	r2, [pc, #316]	@ (8003a88 <HAL_GPIO_Init+0x310>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <HAL_GPIO_Init+0x200>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a4e      	ldr	r2, [pc, #312]	@ (8003a8c <HAL_GPIO_Init+0x314>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00d      	beq.n	8003974 <HAL_GPIO_Init+0x1fc>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a4d      	ldr	r2, [pc, #308]	@ (8003a90 <HAL_GPIO_Init+0x318>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <HAL_GPIO_Init+0x1f8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a4c      	ldr	r2, [pc, #304]	@ (8003a94 <HAL_GPIO_Init+0x31c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_GPIO_Init+0x1f4>
 8003968:	2307      	movs	r3, #7
 800396a:	e00e      	b.n	800398a <HAL_GPIO_Init+0x212>
 800396c:	2308      	movs	r3, #8
 800396e:	e00c      	b.n	800398a <HAL_GPIO_Init+0x212>
 8003970:	2306      	movs	r3, #6
 8003972:	e00a      	b.n	800398a <HAL_GPIO_Init+0x212>
 8003974:	2305      	movs	r3, #5
 8003976:	e008      	b.n	800398a <HAL_GPIO_Init+0x212>
 8003978:	2304      	movs	r3, #4
 800397a:	e006      	b.n	800398a <HAL_GPIO_Init+0x212>
 800397c:	2303      	movs	r3, #3
 800397e:	e004      	b.n	800398a <HAL_GPIO_Init+0x212>
 8003980:	2302      	movs	r3, #2
 8003982:	e002      	b.n	800398a <HAL_GPIO_Init+0x212>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <HAL_GPIO_Init+0x212>
 8003988:	2300      	movs	r3, #0
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	f002 0203 	and.w	r2, r2, #3
 8003990:	0092      	lsls	r2, r2, #2
 8003992:	4093      	lsls	r3, r2
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800399a:	4937      	ldr	r1, [pc, #220]	@ (8003a78 <HAL_GPIO_Init+0x300>)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	3302      	adds	r3, #2
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003a98 <HAL_GPIO_Init+0x320>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039cc:	4a32      	ldr	r2, [pc, #200]	@ (8003a98 <HAL_GPIO_Init+0x320>)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039d2:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <HAL_GPIO_Init+0x320>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039f6:	4a28      	ldr	r2, [pc, #160]	@ (8003a98 <HAL_GPIO_Init+0x320>)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039fc:	4b26      	ldr	r3, [pc, #152]	@ (8003a98 <HAL_GPIO_Init+0x320>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a20:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <HAL_GPIO_Init+0x320>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a26:	4b1c      	ldr	r3, [pc, #112]	@ (8003a98 <HAL_GPIO_Init+0x320>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a4a:	4a13      	ldr	r2, [pc, #76]	@ (8003a98 <HAL_GPIO_Init+0x320>)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	3301      	adds	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f47f ae91 	bne.w	8003788 <HAL_GPIO_Init+0x10>
  }
}
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	48000400 	.word	0x48000400
 8003a80:	48000800 	.word	0x48000800
 8003a84:	48000c00 	.word	0x48000c00
 8003a88:	48001000 	.word	0x48001000
 8003a8c:	48001400 	.word	0x48001400
 8003a90:	48001800 	.word	0x48001800
 8003a94:	48001c00 	.word	0x48001c00
 8003a98:	40010400 	.word	0x40010400

08003a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aac:	787b      	ldrb	r3, [r7, #1]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ab8:	e002      	b.n	8003ac0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ade:	887a      	ldrh	r2, [r7, #2]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	041a      	lsls	r2, r3, #16
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43d9      	mvns	r1, r3
 8003aea:	887b      	ldrh	r3, [r7, #2]
 8003aec:	400b      	ands	r3, r1
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	619a      	str	r2, [r3, #24]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b0a:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b16:	4a05      	ldr	r2, [pc, #20]	@ (8003b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc ff14 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40010400 	.word	0x40010400

08003b30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b32:	b08f      	sub	sp, #60	@ 0x3c
 8003b34:	af0a      	add	r7, sp, #40	@ 0x28
 8003b36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e116      	b.n	8003d70 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f007 fe39 	bl	800b7d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2203      	movs	r2, #3
 8003b66:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f004 fa90 	bl	80080a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	687e      	ldr	r6, [r7, #4]
 8003b8e:	466d      	mov	r5, sp
 8003b90:	f106 0410 	add.w	r4, r6, #16
 8003b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ba0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ba4:	1d33      	adds	r3, r6, #4
 8003ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ba8:	6838      	ldr	r0, [r7, #0]
 8003baa:	f004 f9a3 	bl	8007ef4 <USB_CoreInit>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0d7      	b.n	8003d70 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f004 fa7e 	bl	80080c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	73fb      	strb	r3, [r7, #15]
 8003bd0:	e04a      	b.n	8003c68 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bd2:	7bfa      	ldrb	r2, [r7, #15]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	333d      	adds	r3, #61	@ 0x3d
 8003be2:	2201      	movs	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003be6:	7bfa      	ldrb	r2, [r7, #15]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	333c      	adds	r3, #60	@ 0x3c
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	b298      	uxth	r0, r3
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3356      	adds	r3, #86	@ 0x56
 8003c0e:	4602      	mov	r2, r0
 8003c10:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	3340      	adds	r3, #64	@ 0x40
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c26:	7bfa      	ldrb	r2, [r7, #15]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	3344      	adds	r3, #68	@ 0x44
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c3a:	7bfa      	ldrb	r2, [r7, #15]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3348      	adds	r3, #72	@ 0x48
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	334c      	adds	r3, #76	@ 0x4c
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	3301      	adds	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d3af      	bcc.n	8003bd2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	e044      	b.n	8003d02 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c8e:	7bfa      	ldrb	r2, [r7, #15]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ca4:	7bfa      	ldrb	r2, [r7, #15]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
 8003d02:	7bfa      	ldrb	r2, [r7, #15]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d3b5      	bcc.n	8003c78 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	687e      	ldr	r6, [r7, #4]
 8003d14:	466d      	mov	r5, sp
 8003d16:	f106 0410 	add.w	r4, r6, #16
 8003d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d26:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d2a:	1d33      	adds	r3, r6, #4
 8003d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d2e:	6838      	ldr	r0, [r7, #0]
 8003d30:	f004 fa16 	bl	8008160 <USB_DevInit>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e014      	b.n	8003d70 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d102      	bne.n	8003d64 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f001 f86a 	bl	8004e38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f005 f9c4 	bl	80090f6 <USB_DevDisconnect>

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_PCD_Start+0x1c>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e01c      	b.n	8003dce <HAL_PCD_Start+0x56>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d105      	bne.n	8003db0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f004 f965 	bl	8008084 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f005 f978 	bl	80090b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003dd6:	b590      	push	{r4, r7, lr}
 8003dd8:	b08d      	sub	sp, #52	@ 0x34
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f005 fa36 	bl	800925e <USB_GetMode>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 847e 	bne.w	80046f6 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f005 f99a 	bl	8009138 <USB_ReadInterrupts>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8474 	beq.w	80046f4 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f005 f987 	bl	8009138 <USB_ReadInterrupts>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d107      	bne.n	8003e44 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f002 0202 	and.w	r2, r2, #2
 8003e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f005 f975 	bl	8009138 <USB_ReadInterrupts>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d161      	bne.n	8003f1c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0210 	bic.w	r2, r2, #16
 8003e66:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f003 020f 	and.w	r2, r3, #15
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4413      	add	r3, r2
 8003e84:	3304      	adds	r3, #4
 8003e86:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	0c5b      	lsrs	r3, r3, #17
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d124      	bne.n	8003ede <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d035      	beq.n	8003f0c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003eaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	6a38      	ldr	r0, [r7, #32]
 8003eb4:	f004 ffac 	bl	8008e10 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ec4:	441a      	add	r2, r3
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ed6:	441a      	add	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	615a      	str	r2, [r3, #20]
 8003edc:	e016      	b.n	8003f0c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	0c5b      	lsrs	r3, r3, #17
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	2b06      	cmp	r3, #6
 8003ee8:	d110      	bne.n	8003f0c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6a38      	ldr	r0, [r7, #32]
 8003ef6:	f004 ff8b 	bl	8008e10 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f06:	441a      	add	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0210 	orr.w	r2, r2, #16
 8003f1a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f005 f909 	bl	8009138 <USB_ReadInterrupts>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f30:	f040 80a7 	bne.w	8004082 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f005 f90e 	bl	800915e <USB_ReadDevAllOutEpInterrupt>
 8003f42:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f44:	e099      	b.n	800407a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 808e 	beq.w	800406e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f005 f932 	bl	80091c6 <USB_ReadDevOutEPInterrupt>
 8003f62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fe7e 	bl	8004c84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00c      	beq.n	8003fac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2308      	movs	r3, #8
 8003fa2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003fa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 feba 	bl	8004d20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d030      	beq.n	8004034 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fda:	2b80      	cmp	r3, #128	@ 0x80
 8003fdc:	d109      	bne.n	8003ff2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ff0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	3304      	adds	r3, #4
 8004006:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	78db      	ldrb	r3, [r3, #3]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d108      	bne.n	8004022 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2200      	movs	r2, #0
 8004014:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	b2db      	uxtb	r3, r3
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f007 fd2f 	bl	800ba80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800402e:	461a      	mov	r2, r3
 8004030:	2302      	movs	r3, #2
 8004032:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800404a:	461a      	mov	r2, r3
 800404c:	2320      	movs	r3, #32
 800404e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004066:	461a      	mov	r2, r3
 8004068:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800406c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	3301      	adds	r3, #1
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800407a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	f47f af62 	bne.w	8003f46 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f005 f856 	bl	8009138 <USB_ReadInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004092:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004096:	f040 80a4 	bne.w	80041e2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f005 f877 	bl	8009192 <USB_ReadDevAllInEpInterrupt>
 80040a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80040aa:	e096      	b.n	80041da <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80040ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 808b 	beq.w	80041ce <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f005 f89d 	bl	8009202 <USB_ReadDevInEPInterrupt>
 80040c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	2201      	movs	r2, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69f9      	ldr	r1, [r7, #28]
 80040f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040f4:	4013      	ands	r3, r2
 80040f6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004104:	461a      	mov	r2, r3
 8004106:	2301      	movs	r3, #1
 8004108:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	b2db      	uxtb	r3, r3
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f007 fc20 	bl	800b956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800412c:	461a      	mov	r2, r3
 800412e:	2308      	movs	r3, #8
 8004130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004148:	461a      	mov	r2, r3
 800414a:	2310      	movs	r3, #16
 800414c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004164:	461a      	mov	r2, r3
 8004166:	2340      	movs	r3, #64	@ 0x40
 8004168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d023      	beq.n	80041bc <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004174:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004176:	6a38      	ldr	r0, [r7, #32]
 8004178:	f004 f934 	bl	80083e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800417c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	3338      	adds	r3, #56	@ 0x38
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4413      	add	r3, r2
 800418c:	3304      	adds	r3, #4
 800418e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	78db      	ldrb	r3, [r3, #3]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d108      	bne.n	80041aa <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2200      	movs	r2, #0
 800419c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f007 fc7d 	bl	800baa4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b6:	461a      	mov	r2, r3
 80041b8:	2302      	movs	r3, #2
 80041ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80041c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fcd2 	bl	8004b72 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	3301      	adds	r3, #1
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80041d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80041da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f47f af65 	bne.w	80040ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f004 ffa6 	bl	8009138 <USB_ReadInterrupts>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041f6:	d122      	bne.n	800423e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004212:	2b01      	cmp	r3, #1
 8004214:	d108      	bne.n	8004228 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800421e:	2100      	movs	r1, #0
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f007 feb1 	bl	800bf88 <HAL_PCDEx_LPM_Callback>
 8004226:	e002      	b.n	800422e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f007 fc01 	bl	800ba30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800423c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f004 ff78 	bl	8009138 <USB_ReadInterrupts>
 8004248:	4603      	mov	r3, r0
 800424a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800424e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004252:	d112      	bne.n	800427a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d102      	bne.n	800426a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f007 fbbd 	bl	800b9e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004278:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f004 ff5a 	bl	8009138 <USB_ReadInterrupts>
 8004284:	4603      	mov	r3, r0
 8004286:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800428a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800428e:	d121      	bne.n	80042d4 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800429e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d111      	bne.n	80042ce <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b8:	089b      	lsrs	r3, r3, #2
 80042ba:	f003 020f 	and.w	r2, r3, #15
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80042c4:	2101      	movs	r1, #1
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f007 fe5e 	bl	800bf88 <HAL_PCDEx_LPM_Callback>
 80042cc:	e002      	b.n	80042d4 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f007 fb88 	bl	800b9e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f004 ff2d 	bl	8009138 <USB_ReadInterrupts>
 80042de:	4603      	mov	r3, r0
 80042e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e8:	f040 80b5 	bne.w	8004456 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2110      	movs	r1, #16
 8004306:	4618      	mov	r0, r3
 8004308:	f004 f86c 	bl	80083e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800430c:	2300      	movs	r3, #0
 800430e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004310:	e046      	b.n	80043a0 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800431e:	461a      	mov	r2, r3
 8004320:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004324:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	440a      	add	r2, r1
 800433c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004340:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004344:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004352:	461a      	mov	r2, r3
 8004354:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004358:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800435a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	440a      	add	r2, r1
 8004370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004374:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004378:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800437a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800438a:	0151      	lsls	r1, r2, #5
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	440a      	add	r2, r1
 8004390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004394:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004398:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800439a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439c:	3301      	adds	r3, #1
 800439e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d3b3      	bcc.n	8004312 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043b8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80043bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d016      	beq.n	80043f4 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043d6:	f043 030b 	orr.w	r3, r3, #11
 80043da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ec:	f043 030b 	orr.w	r3, r3, #11
 80043f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80043f2:	e015      	b.n	8004420 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004402:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004406:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800440a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800441a:	f043 030b 	orr.w	r3, r3, #11
 800441e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800442e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004432:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800443e:	4619      	mov	r1, r3
 8004440:	4610      	mov	r0, r2
 8004442:	f004 ff3d 	bl	80092c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004454:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f004 fe6c 	bl	8009138 <USB_ReadInterrupts>
 8004460:	4603      	mov	r3, r0
 8004462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446a:	d124      	bne.n	80044b6 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f004 ff02 	bl	800927a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f004 f82f 	bl	80084de <USB_GetDevSpeed>
 8004480:	4603      	mov	r3, r0
 8004482:	461a      	mov	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681c      	ldr	r4, [r3, #0]
 800448c:	f001 fbbc 	bl	8005c08 <HAL_RCC_GetHCLKFreq>
 8004490:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004496:	b2db      	uxtb	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	4620      	mov	r0, r4
 800449c:	f003 fd56 	bl	8007f4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f007 fa80 	bl	800b9a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80044b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f004 fe3c 	bl	8009138 <USB_ReadInterrupts>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d10a      	bne.n	80044e0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f007 fa5d 	bl	800b98a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f002 0208 	and.w	r2, r2, #8
 80044de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f004 fe27 	bl	8009138 <USB_ReadInterrupts>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f0:	2b80      	cmp	r3, #128	@ 0x80
 80044f2:	d122      	bne.n	800453a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004500:	2301      	movs	r3, #1
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24
 8004504:	e014      	b.n	8004530 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	b2db      	uxtb	r3, r3
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 faf3 	bl	8004b10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	3301      	adds	r3, #1
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004536:	429a      	cmp	r2, r3
 8004538:	d3e5      	bcc.n	8004506 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f004 fdfa 	bl	8009138 <USB_ReadInterrupts>
 8004544:	4603      	mov	r3, r0
 8004546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800454a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800454e:	d13b      	bne.n	80045c8 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004550:	2301      	movs	r3, #1
 8004552:	627b      	str	r3, [r7, #36]	@ 0x24
 8004554:	e02b      	b.n	80045ae <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	3340      	adds	r3, #64	@ 0x40
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d115      	bne.n	80045a8 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800457c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800457e:	2b00      	cmp	r3, #0
 8004580:	da12      	bge.n	80045a8 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	333f      	adds	r3, #63	@ 0x3f
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fab4 	bl	8004b10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	3301      	adds	r3, #1
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d3ce      	bcc.n	8004556 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80045c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f004 fdb3 	bl	8009138 <USB_ReadInterrupts>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045dc:	d155      	bne.n	800468a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045de:	2301      	movs	r3, #1
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e2:	e045      	b.n	8004670 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d12e      	bne.n	800466a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800460c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800460e:	2b00      	cmp	r3, #0
 8004610:	da2b      	bge.n	800466a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800461e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004622:	429a      	cmp	r2, r3
 8004624:	d121      	bne.n	800466a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004662:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004666:	6053      	str	r3, [r2, #4]
            break;
 8004668:	e007      	b.n	800467a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	3301      	adds	r3, #1
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004676:	429a      	cmp	r2, r3
 8004678:	d3b4      	bcc.n	80045e4 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f004 fd52 	bl	8009138 <USB_ReadInterrupts>
 8004694:	4603      	mov	r3, r0
 8004696:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469e:	d10a      	bne.n	80046b6 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f007 fa11 	bl	800bac8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80046b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f004 fd3c 	bl	8009138 <USB_ReadInterrupts>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d115      	bne.n	80046f6 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f007 fa01 	bl	800bae4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6859      	ldr	r1, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	e000      	b.n	80046f6 <HAL_PCD_IRQHandler+0x920>
      return;
 80046f4:	bf00      	nop
    }
  }
}
 80046f6:	3734      	adds	r7, #52	@ 0x34
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd90      	pop	{r4, r7, pc}

080046fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_PCD_SetAddress+0x1a>
 8004712:	2302      	movs	r3, #2
 8004714:	e013      	b.n	800473e <HAL_PCD_SetAddress+0x42>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f004 fc9a 	bl	8009068 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	4608      	mov	r0, r1
 8004750:	4611      	mov	r1, r2
 8004752:	461a      	mov	r2, r3
 8004754:	4603      	mov	r3, r0
 8004756:	70fb      	strb	r3, [r7, #3]
 8004758:	460b      	mov	r3, r1
 800475a:	803b      	strh	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004768:	2b00      	cmp	r3, #0
 800476a:	da0f      	bge.n	800478c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	f003 020f 	and.w	r2, r3, #15
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	3338      	adds	r3, #56	@ 0x38
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	3304      	adds	r3, #4
 8004782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	705a      	strb	r2, [r3, #1]
 800478a:	e00f      	b.n	80047ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	f003 020f 	and.w	r2, r3, #15
 8004792:	4613      	mov	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	3304      	adds	r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80047b8:	883a      	ldrh	r2, [r7, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	78ba      	ldrb	r2, [r7, #2]
 80047c2:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047d6:	78bb      	ldrb	r3, [r7, #2]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d102      	bne.n	80047e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_PCD_EP_Open+0xaa>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e00e      	b.n	800480e <HAL_PCD_EP_Open+0xc8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68f9      	ldr	r1, [r7, #12]
 80047fe:	4618      	mov	r0, r3
 8004800:	f003 fe8c 	bl	800851c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800480c:	7afb      	ldrb	r3, [r7, #11]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004826:	2b00      	cmp	r3, #0
 8004828:	da0f      	bge.n	800484a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	f003 020f 	and.w	r2, r3, #15
 8004830:	4613      	mov	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	3338      	adds	r3, #56	@ 0x38
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	3304      	adds	r3, #4
 8004840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	705a      	strb	r2, [r3, #1]
 8004848:	e00f      	b.n	800486a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	f003 020f 	and.w	r2, r3, #15
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	4413      	add	r3, r2
 8004860:	3304      	adds	r3, #4
 8004862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_PCD_EP_Close+0x6e>
 8004880:	2302      	movs	r3, #2
 8004882:	e00e      	b.n	80048a2 <HAL_PCD_EP_Close+0x8c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	4618      	mov	r0, r3
 8004894:	f003 feca 	bl	800862c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	460b      	mov	r3, r1
 80048b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048ba:	7afb      	ldrb	r3, [r7, #11]
 80048bc:	f003 020f 	and.w	r2, r3, #15
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	3304      	adds	r3, #4
 80048d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2200      	movs	r2, #0
 80048e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2200      	movs	r2, #0
 80048ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ec:	7afb      	ldrb	r3, [r7, #11]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6979      	ldr	r1, [r7, #20]
 80048fe:	4618      	mov	r0, r3
 8004900:	f003 ff70 	bl	80087e4 <USB_EPStartXfer>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	f003 020f 	and.w	r2, r3, #15
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004930:	681b      	ldr	r3, [r3, #0]
}
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b086      	sub	sp, #24
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	460b      	mov	r3, r1
 800494c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800494e:	7afb      	ldrb	r3, [r7, #11]
 8004950:	f003 020f 	and.w	r2, r3, #15
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	3338      	adds	r3, #56	@ 0x38
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	3304      	adds	r3, #4
 8004964:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2201      	movs	r2, #1
 800497c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800497e:	7afb      	ldrb	r3, [r7, #11]
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	b2da      	uxtb	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6979      	ldr	r1, [r7, #20]
 8004990:	4618      	mov	r0, r3
 8004992:	f003 ff27 	bl	80087e4 <USB_EPStartXfer>

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	f003 020f 	and.w	r2, r3, #15
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d901      	bls.n	80049be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e04e      	b.n	8004a5c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	da0f      	bge.n	80049e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	f003 020f 	and.w	r2, r3, #15
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	3338      	adds	r3, #56	@ 0x38
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	4413      	add	r3, r2
 80049da:	3304      	adds	r3, #4
 80049dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	705a      	strb	r2, [r3, #1]
 80049e4:	e00d      	b.n	8004a02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4413      	add	r3, r2
 80049f8:	3304      	adds	r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_PCD_EP_SetStall+0x82>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e01c      	b.n	8004a5c <HAL_PCD_EP_SetStall+0xbc>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68f9      	ldr	r1, [r7, #12]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f004 fa45 	bl	8008ec0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d108      	bne.n	8004a52 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f004 fc37 	bl	80092c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	f003 020f 	and.w	r2, r3, #15
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d901      	bls.n	8004a82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e042      	b.n	8004b08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	da0f      	bge.n	8004aaa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	f003 020f 	and.w	r2, r3, #15
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	3338      	adds	r3, #56	@ 0x38
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	705a      	strb	r2, [r3, #1]
 8004aa8:	e00f      	b.n	8004aca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 020f 	and.w	r2, r3, #15
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4413      	add	r3, r2
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_PCD_EP_ClrStall+0x86>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e00e      	b.n	8004b08 <HAL_PCD_EP_ClrStall+0xa4>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68f9      	ldr	r1, [r7, #12]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f004 fa4f 	bl	8008f9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	da0c      	bge.n	8004b3e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	f003 020f 	and.w	r2, r3, #15
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	3338      	adds	r3, #56	@ 0x38
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	4413      	add	r3, r2
 8004b38:	3304      	adds	r3, #4
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e00c      	b.n	8004b58 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	f003 020f 	and.w	r2, r3, #15
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4413      	add	r3, r2
 8004b54:	3304      	adds	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f004 f872 	bl	8008c48 <USB_EPStopXfer>
 8004b64:	4603      	mov	r3, r0
 8004b66:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b68:	7afb      	ldrb	r3, [r7, #11]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b088      	sub	sp, #32
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	3338      	adds	r3, #56	@ 0x38
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	3304      	adds	r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d901      	bls.n	8004baa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e067      	b.n	8004c7a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d902      	bls.n	8004bc6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	3303      	adds	r3, #3
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bce:	e026      	b.n	8004c1e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d902      	bls.n	8004bec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	3303      	adds	r3, #3
 8004bf0:	089b      	lsrs	r3, r3, #2
 8004bf2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68d9      	ldr	r1, [r3, #12]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	6978      	ldr	r0, [r7, #20]
 8004c02:	f004 f8cb 	bl	8008d9c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	441a      	add	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	441a      	add	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d809      	bhi.n	8004c48 <PCD_WriteEmptyTxFifo+0xd6>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	695a      	ldr	r2, [r3, #20]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d203      	bcs.n	8004c48 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1c3      	bne.n	8004bd0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d811      	bhi.n	8004c78 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	6939      	ldr	r1, [r7, #16]
 8004c70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c74:	4013      	ands	r3, r2
 8004c76:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	333c      	adds	r3, #60	@ 0x3c
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a19      	ldr	r2, [pc, #100]	@ (8004d1c <PCD_EP_OutXfrComplete_int+0x98>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d124      	bne.n	8004d04 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cd6:	6093      	str	r3, [r2, #8]
 8004cd8:	e01a      	b.n	8004d10 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f006 fe0f 	bl	800b920 <HAL_PCD_DataOutStageCallback>
 8004d02:	e005      	b.n	8004d10 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f006 fe08 	bl	800b920 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	4f54310a 	.word	0x4f54310a

08004d20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	333c      	adds	r3, #60	@ 0x3c
 8004d38:	3304      	adds	r3, #4
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4a0c      	ldr	r2, [pc, #48]	@ (8004d84 <PCD_EP_OutSetupPacket_int+0x64>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d90e      	bls.n	8004d74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d009      	beq.n	8004d74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f006 fdc1 	bl	800b8fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	4f54300a 	.word	0x4f54300a

08004d88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
 8004d94:	4613      	mov	r3, r2
 8004d96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d107      	bne.n	8004db6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004da6:	883b      	ldrh	r3, [r7, #0]
 8004da8:	0419      	lsls	r1, r3, #16
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004db4:	e028      	b.n	8004e08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]
 8004dc8:	e00d      	b.n	8004de6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	3340      	adds	r3, #64	@ 0x40
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4413      	add	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	3301      	adds	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
 8004de6:	7bfa      	ldrb	r2, [r7, #15]
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d3ec      	bcc.n	8004dca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004df0:	883b      	ldrh	r3, [r7, #0]
 8004df2:	0418      	lsls	r0, r3, #16
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	4302      	orrs	r2, r0
 8004e00:	3340      	adds	r3, #64	@ 0x40
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	887a      	ldrh	r2, [r7, #2]
 8004e28:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e6a:	f043 0303 	orr.w	r3, r3, #3
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e84:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e90:	d102      	bne.n	8004e98 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e96:	e00b      	b.n	8004eb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004e98:	4b08      	ldr	r3, [pc, #32]	@ (8004ebc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ea6:	d102      	bne.n	8004eae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004ea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eac:	e000      	b.n	8004eb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004eae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40007000 	.word	0x40007000

08004ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d141      	bne.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ece:	4b4b      	ldr	r3, [pc, #300]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eda:	d131      	bne.n	8004f40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004edc:	4b47      	ldr	r3, [pc, #284]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ee2:	4a46      	ldr	r2, [pc, #280]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ee8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eec:	4b43      	ldr	r3, [pc, #268]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ef4:	4a41      	ldr	r2, [pc, #260]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004efa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004efc:	4b40      	ldr	r3, [pc, #256]	@ (8005000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2232      	movs	r2, #50	@ 0x32
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	4a3f      	ldr	r2, [pc, #252]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f08:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0c:	0c9b      	lsrs	r3, r3, #18
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f12:	e002      	b.n	8004f1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f1a:	4b38      	ldr	r3, [pc, #224]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f26:	d102      	bne.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f2      	bne.n	8004f14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f2e:	4b33      	ldr	r3, [pc, #204]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f3a:	d158      	bne.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e057      	b.n	8004ff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f40:	4b2e      	ldr	r3, [pc, #184]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f46:	4a2d      	ldr	r2, [pc, #180]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f50:	e04d      	b.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f58:	d141      	bne.n	8004fde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f5a:	4b28      	ldr	r3, [pc, #160]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f66:	d131      	bne.n	8004fcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f68:	4b24      	ldr	r3, [pc, #144]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f6e:	4a23      	ldr	r2, [pc, #140]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f78:	4b20      	ldr	r3, [pc, #128]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f80:	4a1e      	ldr	r2, [pc, #120]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004f88:	4b1d      	ldr	r3, [pc, #116]	@ (8005000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2232      	movs	r2, #50	@ 0x32
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	4a1c      	ldr	r2, [pc, #112]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f94:	fba2 2303 	umull	r2, r3, r2, r3
 8004f98:	0c9b      	lsrs	r3, r3, #18
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f9e:	e002      	b.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fa6:	4b15      	ldr	r3, [pc, #84]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb2:	d102      	bne.n	8004fba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f2      	bne.n	8004fa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fba:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc6:	d112      	bne.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e011      	b.n	8004ff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fdc:	e007      	b.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fde:	4b07      	ldr	r3, [pc, #28]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fe6:	4a05      	ldr	r2, [pc, #20]	@ (8004ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40007000 	.word	0x40007000
 8005000:	20000000 	.word	0x20000000
 8005004:	431bde83 	.word	0x431bde83

08005008 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800500c:	4b05      	ldr	r3, [pc, #20]	@ (8005024 <HAL_PWREx_EnableVddUSB+0x1c>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	4a04      	ldr	r2, [pc, #16]	@ (8005024 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005012:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005016:	6053      	str	r3, [r2, #4]
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40007000 	.word	0x40007000

08005028 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800502c:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <HAL_PWREx_EnableVddIO2+0x1c>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	4a04      	ldr	r2, [pc, #16]	@ (8005044 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005036:	6053      	str	r3, [r2, #4]
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40007000 	.word	0x40007000

08005048 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f000 bc08 	b.w	800586c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800505c:	4b96      	ldr	r3, [pc, #600]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005066:	4b94      	ldr	r3, [pc, #592]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80e4 	beq.w	8005246 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d007      	beq.n	8005094 <HAL_RCC_OscConfig+0x4c>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b0c      	cmp	r3, #12
 8005088:	f040 808b 	bne.w	80051a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2b01      	cmp	r3, #1
 8005090:	f040 8087 	bne.w	80051a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005094:	4b88      	ldr	r3, [pc, #544]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_OscConfig+0x64>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e3df      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1a      	ldr	r2, [r3, #32]
 80050b0:	4b81      	ldr	r3, [pc, #516]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <HAL_RCC_OscConfig+0x7e>
 80050bc:	4b7e      	ldr	r3, [pc, #504]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050c4:	e005      	b.n	80050d2 <HAL_RCC_OscConfig+0x8a>
 80050c6:	4b7c      	ldr	r3, [pc, #496]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80050c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d223      	bcs.n	800511e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fdcc 	bl	8005c78 <RCC_SetFlashLatencyFromMSIRange>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e3c0      	b.n	800586c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ea:	4b73      	ldr	r3, [pc, #460]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a72      	ldr	r2, [pc, #456]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80050f0:	f043 0308 	orr.w	r3, r3, #8
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	4b70      	ldr	r3, [pc, #448]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	496d      	ldr	r1, [pc, #436]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005104:	4313      	orrs	r3, r2
 8005106:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005108:	4b6b      	ldr	r3, [pc, #428]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	4968      	ldr	r1, [pc, #416]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005118:	4313      	orrs	r3, r2
 800511a:	604b      	str	r3, [r1, #4]
 800511c:	e025      	b.n	800516a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800511e:	4b66      	ldr	r3, [pc, #408]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a65      	ldr	r2, [pc, #404]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005124:	f043 0308 	orr.w	r3, r3, #8
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	4b63      	ldr	r3, [pc, #396]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	4960      	ldr	r1, [pc, #384]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800513c:	4b5e      	ldr	r3, [pc, #376]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	021b      	lsls	r3, r3, #8
 800514a:	495b      	ldr	r1, [pc, #364]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 800514c:	4313      	orrs	r3, r2
 800514e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d109      	bne.n	800516a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fd8c 	bl	8005c78 <RCC_SetFlashLatencyFromMSIRange>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e380      	b.n	800586c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800516a:	f000 fcc1 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 800516e:	4602      	mov	r2, r0
 8005170:	4b51      	ldr	r3, [pc, #324]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	4950      	ldr	r1, [pc, #320]	@ (80052bc <HAL_RCC_OscConfig+0x274>)
 800517c:	5ccb      	ldrb	r3, [r1, r3]
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	fa22 f303 	lsr.w	r3, r2, r3
 8005186:	4a4e      	ldr	r2, [pc, #312]	@ (80052c0 <HAL_RCC_OscConfig+0x278>)
 8005188:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800518a:	4b4e      	ldr	r3, [pc, #312]	@ (80052c4 <HAL_RCC_OscConfig+0x27c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f7fc facc 	bl	800172c <HAL_InitTick>
 8005194:	4603      	mov	r3, r0
 8005196:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d052      	beq.n	8005244 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	e364      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d032      	beq.n	8005210 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051aa:	4b43      	ldr	r3, [pc, #268]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a42      	ldr	r2, [pc, #264]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051b6:	f7fc fb09 	bl	80017cc <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051be:	f7fc fb05 	bl	80017cc <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e34d      	b.n	800586c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051d0:	4b39      	ldr	r3, [pc, #228]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051dc:	4b36      	ldr	r3, [pc, #216]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a35      	ldr	r2, [pc, #212]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80051e2:	f043 0308 	orr.w	r3, r3, #8
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	4b33      	ldr	r3, [pc, #204]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	4930      	ldr	r1, [pc, #192]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051fa:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	492b      	ldr	r1, [pc, #172]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
 800520e:	e01a      	b.n	8005246 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005210:	4b29      	ldr	r3, [pc, #164]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a28      	ldr	r2, [pc, #160]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005216:	f023 0301 	bic.w	r3, r3, #1
 800521a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800521c:	f7fc fad6 	bl	80017cc <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005224:	f7fc fad2 	bl	80017cc <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e31a      	b.n	800586c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005236:	4b20      	ldr	r3, [pc, #128]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x1dc>
 8005242:	e000      	b.n	8005246 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005244:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d073      	beq.n	800533a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b08      	cmp	r3, #8
 8005256:	d005      	beq.n	8005264 <HAL_RCC_OscConfig+0x21c>
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b0c      	cmp	r3, #12
 800525c:	d10e      	bne.n	800527c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d10b      	bne.n	800527c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005264:	4b14      	ldr	r3, [pc, #80]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d063      	beq.n	8005338 <HAL_RCC_OscConfig+0x2f0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d15f      	bne.n	8005338 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e2f7      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005284:	d106      	bne.n	8005294 <HAL_RCC_OscConfig+0x24c>
 8005286:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a0b      	ldr	r2, [pc, #44]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e025      	b.n	80052e0 <HAL_RCC_OscConfig+0x298>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800529c:	d114      	bne.n	80052c8 <HAL_RCC_OscConfig+0x280>
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a05      	ldr	r2, [pc, #20]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80052a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	4b03      	ldr	r3, [pc, #12]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a02      	ldr	r2, [pc, #8]	@ (80052b8 <HAL_RCC_OscConfig+0x270>)
 80052b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	e013      	b.n	80052e0 <HAL_RCC_OscConfig+0x298>
 80052b8:	40021000 	.word	0x40021000
 80052bc:	0800c134 	.word	0x0800c134
 80052c0:	20000000 	.word	0x20000000
 80052c4:	20000004 	.word	0x20000004
 80052c8:	4ba0      	ldr	r3, [pc, #640]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a9f      	ldr	r2, [pc, #636]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80052ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	4b9d      	ldr	r3, [pc, #628]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a9c      	ldr	r2, [pc, #624]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80052da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d013      	beq.n	8005310 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fc fa70 	bl	80017cc <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052f0:	f7fc fa6c 	bl	80017cc <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	@ 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e2b4      	b.n	800586c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005302:	4b92      	ldr	r3, [pc, #584]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x2a8>
 800530e:	e014      	b.n	800533a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005310:	f7fc fa5c 	bl	80017cc <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005318:	f7fc fa58 	bl	80017cc <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	@ 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e2a0      	b.n	800586c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800532a:	4b88      	ldr	r3, [pc, #544]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x2d0>
 8005336:	e000      	b.n	800533a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d060      	beq.n	8005408 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b04      	cmp	r3, #4
 800534a:	d005      	beq.n	8005358 <HAL_RCC_OscConfig+0x310>
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b0c      	cmp	r3, #12
 8005350:	d119      	bne.n	8005386 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d116      	bne.n	8005386 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005358:	4b7c      	ldr	r3, [pc, #496]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_OscConfig+0x328>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e27d      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005370:	4b76      	ldr	r3, [pc, #472]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	061b      	lsls	r3, r3, #24
 800537e:	4973      	ldr	r1, [pc, #460]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005380:	4313      	orrs	r3, r2
 8005382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005384:	e040      	b.n	8005408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d023      	beq.n	80053d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800538e:	4b6f      	ldr	r3, [pc, #444]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a6e      	ldr	r2, [pc, #440]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539a:	f7fc fa17 	bl	80017cc <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a2:	f7fc fa13 	bl	80017cc <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e25b      	b.n	800586c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053b4:	4b65      	ldr	r3, [pc, #404]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c0:	4b62      	ldr	r3, [pc, #392]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	061b      	lsls	r3, r3, #24
 80053ce:	495f      	ldr	r1, [pc, #380]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]
 80053d4:	e018      	b.n	8005408 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053d6:	4b5d      	ldr	r3, [pc, #372]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a5c      	ldr	r2, [pc, #368]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80053dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e2:	f7fc f9f3 	bl	80017cc <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ea:	f7fc f9ef 	bl	80017cc <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e237      	b.n	800586c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053fc:	4b53      	ldr	r3, [pc, #332]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1f0      	bne.n	80053ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	d03c      	beq.n	800548e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01c      	beq.n	8005456 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800541c:	4b4b      	ldr	r3, [pc, #300]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 800541e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005422:	4a4a      	ldr	r2, [pc, #296]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542c:	f7fc f9ce 	bl	80017cc <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005434:	f7fc f9ca 	bl	80017cc <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e212      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005446:	4b41      	ldr	r3, [pc, #260]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0ef      	beq.n	8005434 <HAL_RCC_OscConfig+0x3ec>
 8005454:	e01b      	b.n	800548e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005456:	4b3d      	ldr	r3, [pc, #244]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800545c:	4a3b      	ldr	r2, [pc, #236]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005466:	f7fc f9b1 	bl	80017cc <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800546e:	f7fc f9ad 	bl	80017cc <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e1f5      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005480:	4b32      	ldr	r3, [pc, #200]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1ef      	bne.n	800546e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80a6 	beq.w	80055e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800549c:	2300      	movs	r3, #0
 800549e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80054a0:	4b2a      	ldr	r3, [pc, #168]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80054a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10d      	bne.n	80054c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ac:	4b27      	ldr	r3, [pc, #156]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80054ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b0:	4a26      	ldr	r2, [pc, #152]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80054b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054b8:	4b24      	ldr	r3, [pc, #144]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 80054ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054c4:	2301      	movs	r3, #1
 80054c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054c8:	4b21      	ldr	r3, [pc, #132]	@ (8005550 <HAL_RCC_OscConfig+0x508>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d118      	bne.n	8005506 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005550 <HAL_RCC_OscConfig+0x508>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005550 <HAL_RCC_OscConfig+0x508>)
 80054da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054e0:	f7fc f974 	bl	80017cc <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e8:	f7fc f970 	bl	80017cc <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e1b8      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054fa:	4b15      	ldr	r3, [pc, #84]	@ (8005550 <HAL_RCC_OscConfig+0x508>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d108      	bne.n	8005520 <HAL_RCC_OscConfig+0x4d8>
 800550e:	4b0f      	ldr	r3, [pc, #60]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005514:	4a0d      	ldr	r2, [pc, #52]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800551e:	e029      	b.n	8005574 <HAL_RCC_OscConfig+0x52c>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b05      	cmp	r3, #5
 8005526:	d115      	bne.n	8005554 <HAL_RCC_OscConfig+0x50c>
 8005528:	4b08      	ldr	r3, [pc, #32]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552e:	4a07      	ldr	r2, [pc, #28]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005530:	f043 0304 	orr.w	r3, r3, #4
 8005534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005538:	4b04      	ldr	r3, [pc, #16]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 800553a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553e:	4a03      	ldr	r2, [pc, #12]	@ (800554c <HAL_RCC_OscConfig+0x504>)
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005548:	e014      	b.n	8005574 <HAL_RCC_OscConfig+0x52c>
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000
 8005550:	40007000 	.word	0x40007000
 8005554:	4b9d      	ldr	r3, [pc, #628]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800555a:	4a9c      	ldr	r2, [pc, #624]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 800555c:	f023 0301 	bic.w	r3, r3, #1
 8005560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005564:	4b99      	ldr	r3, [pc, #612]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556a:	4a98      	ldr	r2, [pc, #608]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 800556c:	f023 0304 	bic.w	r3, r3, #4
 8005570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d016      	beq.n	80055aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557c:	f7fc f926 	bl	80017cc <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005582:	e00a      	b.n	800559a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005584:	f7fc f922 	bl	80017cc <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e168      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800559a:	4b8c      	ldr	r3, [pc, #560]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 800559c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0ed      	beq.n	8005584 <HAL_RCC_OscConfig+0x53c>
 80055a8:	e015      	b.n	80055d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055aa:	f7fc f90f 	bl	80017cc <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055b0:	e00a      	b.n	80055c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b2:	f7fc f90b 	bl	80017cc <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e151      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055c8:	4b80      	ldr	r3, [pc, #512]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1ed      	bne.n	80055b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055d6:	7ffb      	ldrb	r3, [r7, #31]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d105      	bne.n	80055e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055dc:	4b7b      	ldr	r3, [pc, #492]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 80055de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e0:	4a7a      	ldr	r2, [pc, #488]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 80055e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d03c      	beq.n	800566e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01c      	beq.n	8005636 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055fc:	4b73      	ldr	r3, [pc, #460]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 80055fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005602:	4a72      	ldr	r2, [pc, #456]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560c:	f7fc f8de 	bl	80017cc <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005614:	f7fc f8da 	bl	80017cc <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e122      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005626:	4b69      	ldr	r3, [pc, #420]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005628:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0ef      	beq.n	8005614 <HAL_RCC_OscConfig+0x5cc>
 8005634:	e01b      	b.n	800566e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005636:	4b65      	ldr	r3, [pc, #404]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005638:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800563c:	4a63      	ldr	r2, [pc, #396]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 800563e:	f023 0301 	bic.w	r3, r3, #1
 8005642:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005646:	f7fc f8c1 	bl	80017cc <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800564e:	f7fc f8bd 	bl	80017cc <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e105      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005660:	4b5a      	ldr	r3, [pc, #360]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005662:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1ef      	bne.n	800564e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80f9 	beq.w	800586a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	2b02      	cmp	r3, #2
 800567e:	f040 80cf 	bne.w	8005820 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005682:	4b52      	ldr	r3, [pc, #328]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f003 0203 	and.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005692:	429a      	cmp	r2, r3
 8005694:	d12c      	bne.n	80056f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a0:	3b01      	subs	r3, #1
 80056a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d123      	bne.n	80056f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d11b      	bne.n	80056f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d113      	bne.n	80056f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	3b01      	subs	r3, #1
 80056d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d109      	bne.n	80056f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e6:	085b      	lsrs	r3, r3, #1
 80056e8:	3b01      	subs	r3, #1
 80056ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d071      	beq.n	80057d4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b0c      	cmp	r3, #12
 80056f4:	d068      	beq.n	80057c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056f6:	4b35      	ldr	r3, [pc, #212]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005702:	4b32      	ldr	r3, [pc, #200]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e0ac      	b.n	800586c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005712:	4b2e      	ldr	r3, [pc, #184]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a2d      	ldr	r2, [pc, #180]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005718:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800571c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800571e:	f7fc f855 	bl	80017cc <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005726:	f7fc f851 	bl	80017cc <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e099      	b.n	800586c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005738:	4b24      	ldr	r3, [pc, #144]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f0      	bne.n	8005726 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005744:	4b21      	ldr	r3, [pc, #132]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	4b21      	ldr	r3, [pc, #132]	@ (80057d0 <HAL_RCC_OscConfig+0x788>)
 800574a:	4013      	ands	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005754:	3a01      	subs	r2, #1
 8005756:	0112      	lsls	r2, r2, #4
 8005758:	4311      	orrs	r1, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800575e:	0212      	lsls	r2, r2, #8
 8005760:	4311      	orrs	r1, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005766:	0852      	lsrs	r2, r2, #1
 8005768:	3a01      	subs	r2, #1
 800576a:	0552      	lsls	r2, r2, #21
 800576c:	4311      	orrs	r1, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005772:	0852      	lsrs	r2, r2, #1
 8005774:	3a01      	subs	r2, #1
 8005776:	0652      	lsls	r2, r2, #25
 8005778:	4311      	orrs	r1, r2
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800577e:	06d2      	lsls	r2, r2, #27
 8005780:	430a      	orrs	r2, r1
 8005782:	4912      	ldr	r1, [pc, #72]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005784:	4313      	orrs	r3, r2
 8005786:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005788:	4b10      	ldr	r3, [pc, #64]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a0f      	ldr	r2, [pc, #60]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 800578e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005792:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005794:	4b0d      	ldr	r3, [pc, #52]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	4a0c      	ldr	r2, [pc, #48]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 800579a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800579e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057a0:	f7fc f814 	bl	80017cc <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a8:	f7fc f810 	bl	80017cc <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e058      	b.n	800586c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ba:	4b04      	ldr	r3, [pc, #16]	@ (80057cc <HAL_RCC_OscConfig+0x784>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057c6:	e050      	b.n	800586a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e04f      	b.n	800586c <HAL_RCC_OscConfig+0x824>
 80057cc:	40021000 	.word	0x40021000
 80057d0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d4:	4b27      	ldr	r3, [pc, #156]	@ (8005874 <HAL_RCC_OscConfig+0x82c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d144      	bne.n	800586a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80057e0:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <HAL_RCC_OscConfig+0x82c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a23      	ldr	r2, [pc, #140]	@ (8005874 <HAL_RCC_OscConfig+0x82c>)
 80057e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057ec:	4b21      	ldr	r3, [pc, #132]	@ (8005874 <HAL_RCC_OscConfig+0x82c>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4a20      	ldr	r2, [pc, #128]	@ (8005874 <HAL_RCC_OscConfig+0x82c>)
 80057f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057f8:	f7fb ffe8 	bl	80017cc <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005800:	f7fb ffe4 	bl	80017cc <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e02c      	b.n	800586c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005812:	4b18      	ldr	r3, [pc, #96]	@ (8005874 <HAL_RCC_OscConfig+0x82c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0x7b8>
 800581e:	e024      	b.n	800586a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b0c      	cmp	r3, #12
 8005824:	d01f      	beq.n	8005866 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005826:	4b13      	ldr	r3, [pc, #76]	@ (8005874 <HAL_RCC_OscConfig+0x82c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a12      	ldr	r2, [pc, #72]	@ (8005874 <HAL_RCC_OscConfig+0x82c>)
 800582c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005832:	f7fb ffcb 	bl	80017cc <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583a:	f7fb ffc7 	bl	80017cc <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e00f      	b.n	800586c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800584c:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <HAL_RCC_OscConfig+0x82c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f0      	bne.n	800583a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005858:	4b06      	ldr	r3, [pc, #24]	@ (8005874 <HAL_RCC_OscConfig+0x82c>)
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	4905      	ldr	r1, [pc, #20]	@ (8005874 <HAL_RCC_OscConfig+0x82c>)
 800585e:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <HAL_RCC_OscConfig+0x830>)
 8005860:	4013      	ands	r3, r2
 8005862:	60cb      	str	r3, [r1, #12]
 8005864:	e001      	b.n	800586a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3720      	adds	r7, #32
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40021000 	.word	0x40021000
 8005878:	feeefffc 	.word	0xfeeefffc

0800587c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e11d      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005894:	4b90      	ldr	r3, [pc, #576]	@ (8005ad8 <HAL_RCC_ClockConfig+0x25c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d910      	bls.n	80058c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b8d      	ldr	r3, [pc, #564]	@ (8005ad8 <HAL_RCC_ClockConfig+0x25c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f023 020f 	bic.w	r2, r3, #15
 80058aa:	498b      	ldr	r1, [pc, #556]	@ (8005ad8 <HAL_RCC_ClockConfig+0x25c>)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b2:	4b89      	ldr	r3, [pc, #548]	@ (8005ad8 <HAL_RCC_ClockConfig+0x25c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e105      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d010      	beq.n	80058f2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	4b81      	ldr	r3, [pc, #516]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058dc:	429a      	cmp	r2, r3
 80058de:	d908      	bls.n	80058f2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e0:	4b7e      	ldr	r3, [pc, #504]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	497b      	ldr	r1, [pc, #492]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d079      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d11e      	bne.n	8005944 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005906:	4b75      	ldr	r3, [pc, #468]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e0dc      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005916:	f000 fa09 	bl	8005d2c <RCC_GetSysClockFreqFromPLLSource>
 800591a:	4603      	mov	r3, r0
 800591c:	4a70      	ldr	r2, [pc, #448]	@ (8005ae0 <HAL_RCC_ClockConfig+0x264>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d946      	bls.n	80059b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005922:	4b6e      	ldr	r3, [pc, #440]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d140      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800592e:	4b6b      	ldr	r3, [pc, #428]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005936:	4a69      	ldr	r2, [pc, #420]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800593c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800593e:	2380      	movs	r3, #128	@ 0x80
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e035      	b.n	80059b0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d107      	bne.n	800595c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800594c:	4b63      	ldr	r3, [pc, #396]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d115      	bne.n	8005984 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0b9      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d107      	bne.n	8005974 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005964:	4b5d      	ldr	r3, [pc, #372]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d109      	bne.n	8005984 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0ad      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005974:	4b59      	ldr	r3, [pc, #356]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e0a5      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005984:	f000 f8b4 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8005988:	4603      	mov	r3, r0
 800598a:	4a55      	ldr	r2, [pc, #340]	@ (8005ae0 <HAL_RCC_ClockConfig+0x264>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d90f      	bls.n	80059b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005990:	4b52      	ldr	r3, [pc, #328]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800599c:	4b4f      	ldr	r3, [pc, #316]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059a4:	4a4d      	ldr	r2, [pc, #308]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 80059a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059aa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059ac:	2380      	movs	r3, #128	@ 0x80
 80059ae:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059b0:	4b4a      	ldr	r3, [pc, #296]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f023 0203 	bic.w	r2, r3, #3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	4947      	ldr	r1, [pc, #284]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c2:	f7fb ff03 	bl	80017cc <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c8:	e00a      	b.n	80059e0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ca:	f7fb feff 	bl	80017cc <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d8:	4293      	cmp	r3, r2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e077      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e0:	4b3e      	ldr	r3, [pc, #248]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 020c 	and.w	r2, r3, #12
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d1eb      	bne.n	80059ca <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b80      	cmp	r3, #128	@ 0x80
 80059f6:	d105      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80059f8:	4b38      	ldr	r3, [pc, #224]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4a37      	ldr	r2, [pc, #220]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 80059fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a02:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d010      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	4b31      	ldr	r3, [pc, #196]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d208      	bcs.n	8005a32 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a20:	4b2e      	ldr	r3, [pc, #184]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	492b      	ldr	r1, [pc, #172]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a32:	4b29      	ldr	r3, [pc, #164]	@ (8005ad8 <HAL_RCC_ClockConfig+0x25c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d210      	bcs.n	8005a62 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a40:	4b25      	ldr	r3, [pc, #148]	@ (8005ad8 <HAL_RCC_ClockConfig+0x25c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f023 020f 	bic.w	r2, r3, #15
 8005a48:	4923      	ldr	r1, [pc, #140]	@ (8005ad8 <HAL_RCC_ClockConfig+0x25c>)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a50:	4b21      	ldr	r3, [pc, #132]	@ (8005ad8 <HAL_RCC_ClockConfig+0x25c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d001      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e036      	b.n	8005ad0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d008      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	4918      	ldr	r1, [pc, #96]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a8c:	4b13      	ldr	r3, [pc, #76]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	4910      	ldr	r1, [pc, #64]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005aa0:	f000 f826 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005adc <HAL_RCC_ClockConfig+0x260>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	091b      	lsrs	r3, r3, #4
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	490c      	ldr	r1, [pc, #48]	@ (8005ae4 <HAL_RCC_ClockConfig+0x268>)
 8005ab2:	5ccb      	ldrb	r3, [r1, r3]
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8005abc:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae8 <HAL_RCC_ClockConfig+0x26c>)
 8005abe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <HAL_RCC_ClockConfig+0x270>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fb fe31 	bl	800172c <HAL_InitTick>
 8005aca:	4603      	mov	r3, r0
 8005acc:	73fb      	strb	r3, [r7, #15]

  return status;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40022000 	.word	0x40022000
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	04c4b400 	.word	0x04c4b400
 8005ae4:	0800c134 	.word	0x0800c134
 8005ae8:	20000000 	.word	0x20000000
 8005aec:	20000004 	.word	0x20000004

08005af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b089      	sub	sp, #36	@ 0x24
 8005af4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	2300      	movs	r3, #0
 8005afc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005afe:	4b3e      	ldr	r3, [pc, #248]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 030c 	and.w	r3, r3, #12
 8005b06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b08:	4b3b      	ldr	r3, [pc, #236]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_RCC_GetSysClockFreq+0x34>
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b0c      	cmp	r3, #12
 8005b1c:	d121      	bne.n	8005b62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d11e      	bne.n	8005b62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b24:	4b34      	ldr	r3, [pc, #208]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b30:	4b31      	ldr	r3, [pc, #196]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	e005      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b40:	4b2d      	ldr	r3, [pc, #180]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10d      	bne.n	8005b78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b60:	e00a      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d102      	bne.n	8005b6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b68:	4b25      	ldr	r3, [pc, #148]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	e004      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d101      	bne.n	8005b78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b74:	4b23      	ldr	r3, [pc, #140]	@ (8005c04 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b0c      	cmp	r3, #12
 8005b7c:	d134      	bne.n	8005be8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d003      	beq.n	8005b96 <HAL_RCC_GetSysClockFreq+0xa6>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d003      	beq.n	8005b9c <HAL_RCC_GetSysClockFreq+0xac>
 8005b94:	e005      	b.n	8005ba2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b96:	4b1a      	ldr	r3, [pc, #104]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b98:	617b      	str	r3, [r7, #20]
      break;
 8005b9a:	e005      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b9c:	4b19      	ldr	r3, [pc, #100]	@ (8005c04 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b9e:	617b      	str	r3, [r7, #20]
      break;
 8005ba0:	e002      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	617b      	str	r3, [r7, #20]
      break;
 8005ba6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ba8:	4b13      	ldr	r3, [pc, #76]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005bb6:	4b10      	ldr	r3, [pc, #64]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	fb03 f202 	mul.w	r2, r3, r2
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bce:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	0e5b      	lsrs	r3, r3, #25
 8005bd4:	f003 0303 	and.w	r3, r3, #3
 8005bd8:	3301      	adds	r3, #1
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005be8:	69bb      	ldr	r3, [r7, #24]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3724      	adds	r7, #36	@ 0x24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	0800c14c 	.word	0x0800c14c
 8005c00:	00f42400 	.word	0x00f42400
 8005c04:	007a1200 	.word	0x007a1200

08005c08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c0c:	4b03      	ldr	r3, [pc, #12]	@ (8005c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20000000 	.word	0x20000000

08005c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c24:	f7ff fff0 	bl	8005c08 <HAL_RCC_GetHCLKFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b06      	ldr	r3, [pc, #24]	@ (8005c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	4904      	ldr	r1, [pc, #16]	@ (8005c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40021000 	.word	0x40021000
 8005c48:	0800c144 	.word	0x0800c144

08005c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c50:	f7ff ffda 	bl	8005c08 <HAL_RCC_GetHCLKFreq>
 8005c54:	4602      	mov	r2, r0
 8005c56:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	0adb      	lsrs	r3, r3, #11
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	4904      	ldr	r1, [pc, #16]	@ (8005c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c62:	5ccb      	ldrb	r3, [r1, r3]
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40021000 	.word	0x40021000
 8005c74:	0800c144 	.word	0x0800c144

08005c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c84:	4b27      	ldr	r3, [pc, #156]	@ (8005d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c90:	f7ff f8f6 	bl	8004e80 <HAL_PWREx_GetVoltageRange>
 8005c94:	6178      	str	r0, [r7, #20]
 8005c96:	e014      	b.n	8005cc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c98:	4b22      	ldr	r3, [pc, #136]	@ (8005d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c9c:	4a21      	ldr	r2, [pc, #132]	@ (8005d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8005d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005cb0:	f7ff f8e6 	bl	8004e80 <HAL_PWREx_GetVoltageRange>
 8005cb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cba:	4a1a      	ldr	r2, [pc, #104]	@ (8005d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005cbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cc8:	d10b      	bne.n	8005ce2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b80      	cmp	r3, #128	@ 0x80
 8005cce:	d913      	bls.n	8005cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8005cd4:	d902      	bls.n	8005cdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	e00d      	b.n	8005cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cdc:	2301      	movs	r3, #1
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	e00a      	b.n	8005cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ce6:	d902      	bls.n	8005cee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005ce8:	2302      	movs	r3, #2
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	e004      	b.n	8005cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b70      	cmp	r3, #112	@ 0x70
 8005cf2:	d101      	bne.n	8005cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f023 020f 	bic.w	r2, r3, #15
 8005d00:	4909      	ldr	r1, [pc, #36]	@ (8005d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d08:	4b07      	ldr	r3, [pc, #28]	@ (8005d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d001      	beq.n	8005d1a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40021000 	.word	0x40021000
 8005d28:	40022000 	.word	0x40022000

08005d2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d32:	4b2d      	ldr	r3, [pc, #180]	@ (8005de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d00b      	beq.n	8005d5a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d825      	bhi.n	8005d94 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d008      	beq.n	8005d60 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d11f      	bne.n	8005d94 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005d54:	4b25      	ldr	r3, [pc, #148]	@ (8005dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005d56:	613b      	str	r3, [r7, #16]
    break;
 8005d58:	e01f      	b.n	8005d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005d5a:	4b25      	ldr	r3, [pc, #148]	@ (8005df0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005d5c:	613b      	str	r3, [r7, #16]
    break;
 8005d5e:	e01c      	b.n	8005d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d60:	4b21      	ldr	r3, [pc, #132]	@ (8005de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d107      	bne.n	8005d7c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8005de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d72:	0a1b      	lsrs	r3, r3, #8
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	e005      	b.n	8005d88 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	091b      	lsrs	r3, r3, #4
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005d88:	4a1a      	ldr	r2, [pc, #104]	@ (8005df4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d90:	613b      	str	r3, [r7, #16]
    break;
 8005d92:	e002      	b.n	8005d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
    break;
 8005d98:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d9a:	4b13      	ldr	r3, [pc, #76]	@ (8005de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	091b      	lsrs	r3, r3, #4
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	3301      	adds	r3, #1
 8005da6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005da8:	4b0f      	ldr	r3, [pc, #60]	@ (8005de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	0a1b      	lsrs	r3, r3, #8
 8005dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	fb03 f202 	mul.w	r2, r3, r2
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dc0:	4b09      	ldr	r3, [pc, #36]	@ (8005de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	0e5b      	lsrs	r3, r3, #25
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	3301      	adds	r3, #1
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005dda:	683b      	ldr	r3, [r7, #0]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	40021000 	.word	0x40021000
 8005dec:	00f42400 	.word	0x00f42400
 8005df0:	007a1200 	.word	0x007a1200
 8005df4:	0800c14c 	.word	0x0800c14c

08005df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e00:	2300      	movs	r3, #0
 8005e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e04:	2300      	movs	r3, #0
 8005e06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d040      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e18:	2b80      	cmp	r3, #128	@ 0x80
 8005e1a:	d02a      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e1c:	2b80      	cmp	r3, #128	@ 0x80
 8005e1e:	d825      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005e20:	2b60      	cmp	r3, #96	@ 0x60
 8005e22:	d026      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e24:	2b60      	cmp	r3, #96	@ 0x60
 8005e26:	d821      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	d006      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005e2c:	2b40      	cmp	r3, #64	@ 0x40
 8005e2e:	d81d      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d009      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d010      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005e38:	e018      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e3a:	4b89      	ldr	r3, [pc, #548]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	4a88      	ldr	r2, [pc, #544]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e44:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e46:	e015      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fb02 	bl	8006458 <RCCEx_PLLSAI1_Config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e58:	e00c      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3320      	adds	r3, #32
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fbed 	bl	8006640 <RCCEx_PLLSAI2_Config>
 8005e66:	4603      	mov	r3, r0
 8005e68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e6a:	e003      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	74fb      	strb	r3, [r7, #19]
      break;
 8005e70:	e000      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e74:	7cfb      	ldrb	r3, [r7, #19]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e7a:	4b79      	ldr	r3, [pc, #484]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e80:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e88:	4975      	ldr	r1, [pc, #468]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005e90:	e001      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e92:	7cfb      	ldrb	r3, [r7, #19]
 8005e94:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d047      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eaa:	d030      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb0:	d82a      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb6:	d02a      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ebc:	d824      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ec2:	d008      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ec8:	d81e      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed2:	d010      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ed4:	e018      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ed6:	4b62      	ldr	r3, [pc, #392]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	4a61      	ldr	r2, [pc, #388]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ee2:	e015      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	2100      	movs	r1, #0
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fab4 	bl	8006458 <RCCEx_PLLSAI1_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ef4:	e00c      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	3320      	adds	r3, #32
 8005efa:	2100      	movs	r1, #0
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 fb9f 	bl	8006640 <RCCEx_PLLSAI2_Config>
 8005f02:	4603      	mov	r3, r0
 8005f04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f06:	e003      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	74fb      	strb	r3, [r7, #19]
      break;
 8005f0c:	e000      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f10:	7cfb      	ldrb	r3, [r7, #19]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10b      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f16:	4b52      	ldr	r3, [pc, #328]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f24:	494e      	ldr	r1, [pc, #312]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005f2c:	e001      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2e:	7cfb      	ldrb	r3, [r7, #19]
 8005f30:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 809f 	beq.w	800607e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f40:	2300      	movs	r3, #0
 8005f42:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f44:	4b46      	ldr	r3, [pc, #280]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e000      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005f54:	2300      	movs	r3, #0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f5a:	4b41      	ldr	r3, [pc, #260]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5e:	4a40      	ldr	r2, [pc, #256]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f66:	4b3e      	ldr	r3, [pc, #248]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f6e:	60bb      	str	r3, [r7, #8]
 8005f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f72:	2301      	movs	r3, #1
 8005f74:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f76:	4b3b      	ldr	r3, [pc, #236]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a3a      	ldr	r2, [pc, #232]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f82:	f7fb fc23 	bl	80017cc <HAL_GetTick>
 8005f86:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f88:	e009      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8a:	f7fb fc1f 	bl	80017cc <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d902      	bls.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	74fb      	strb	r3, [r7, #19]
        break;
 8005f9c:	e005      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f9e:	4b31      	ldr	r3, [pc, #196]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0ef      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005faa:	7cfb      	ldrb	r3, [r7, #19]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d15b      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d01f      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d019      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fce:	4b24      	ldr	r3, [pc, #144]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fda:	4b21      	ldr	r3, [pc, #132]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fe6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fea:	4b1d      	ldr	r3, [pc, #116]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ff6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ffa:	4a19      	ldr	r2, [pc, #100]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d016      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600c:	f7fb fbde 	bl	80017cc <HAL_GetTick>
 8006010:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006012:	e00b      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006014:	f7fb fbda 	bl	80017cc <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006022:	4293      	cmp	r3, r2
 8006024:	d902      	bls.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	74fb      	strb	r3, [r7, #19]
            break;
 800602a:	e006      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800602c:	4b0c      	ldr	r3, [pc, #48]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800602e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0ec      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800603a:	7cfb      	ldrb	r3, [r7, #19]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10c      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006040:	4b07      	ldr	r3, [pc, #28]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006046:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006050:	4903      	ldr	r1, [pc, #12]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006052:	4313      	orrs	r3, r2
 8006054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006058:	e008      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800605a:	7cfb      	ldrb	r3, [r7, #19]
 800605c:	74bb      	strb	r3, [r7, #18]
 800605e:	e005      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006060:	40021000 	.word	0x40021000
 8006064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006068:	7cfb      	ldrb	r3, [r7, #19]
 800606a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800606c:	7c7b      	ldrb	r3, [r7, #17]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d105      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006072:	4ba0      	ldr	r3, [pc, #640]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006076:	4a9f      	ldr	r2, [pc, #636]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800607c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800608a:	4b9a      	ldr	r3, [pc, #616]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800608c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006090:	f023 0203 	bic.w	r2, r3, #3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	4996      	ldr	r1, [pc, #600]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060ac:	4b91      	ldr	r3, [pc, #580]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b2:	f023 020c 	bic.w	r2, r3, #12
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	498e      	ldr	r1, [pc, #568]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060ce:	4b89      	ldr	r3, [pc, #548]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060dc:	4985      	ldr	r1, [pc, #532]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060f0:	4b80      	ldr	r3, [pc, #512]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fe:	497d      	ldr	r1, [pc, #500]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0310 	and.w	r3, r3, #16
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006112:	4b78      	ldr	r3, [pc, #480]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006118:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006120:	4974      	ldr	r1, [pc, #464]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006122:	4313      	orrs	r3, r2
 8006124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00a      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006134:	4b6f      	ldr	r3, [pc, #444]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006142:	496c      	ldr	r1, [pc, #432]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006144:	4313      	orrs	r3, r2
 8006146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006156:	4b67      	ldr	r3, [pc, #412]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006164:	4963      	ldr	r1, [pc, #396]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006178:	4b5e      	ldr	r3, [pc, #376]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800617e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006186:	495b      	ldr	r1, [pc, #364]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006188:	4313      	orrs	r3, r2
 800618a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800619a:	4b56      	ldr	r3, [pc, #344]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a8:	4952      	ldr	r1, [pc, #328]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061bc:	4b4d      	ldr	r3, [pc, #308]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ca:	494a      	ldr	r1, [pc, #296]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061de:	4b45      	ldr	r3, [pc, #276]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ec:	4941      	ldr	r1, [pc, #260]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006200:	4b3c      	ldr	r3, [pc, #240]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006202:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006206:	f023 0203 	bic.w	r2, r3, #3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800620e:	4939      	ldr	r1, [pc, #228]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006210:	4313      	orrs	r3, r2
 8006212:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d028      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006222:	4b34      	ldr	r3, [pc, #208]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006228:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006230:	4930      	ldr	r1, [pc, #192]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800623c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006240:	d106      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006242:	4b2c      	ldr	r3, [pc, #176]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	4a2b      	ldr	r2, [pc, #172]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006248:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800624c:	60d3      	str	r3, [r2, #12]
 800624e:	e011      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006254:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006258:	d10c      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3304      	adds	r3, #4
 800625e:	2101      	movs	r1, #1
 8006260:	4618      	mov	r0, r3
 8006262:	f000 f8f9 	bl	8006458 <RCCEx_PLLSAI1_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800626a:	7cfb      	ldrb	r3, [r7, #19]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006270:	7cfb      	ldrb	r3, [r7, #19]
 8006272:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d04d      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006284:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006288:	d108      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800628a:	4b1a      	ldr	r3, [pc, #104]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800628c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006290:	4a18      	ldr	r2, [pc, #96]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006292:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006296:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800629a:	e012      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800629c:	4b15      	ldr	r3, [pc, #84]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800629e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062a2:	4a14      	ldr	r2, [pc, #80]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062a8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80062ac:	4b11      	ldr	r3, [pc, #68]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062ba:	490e      	ldr	r1, [pc, #56]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062ca:	d106      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062cc:	4b09      	ldr	r3, [pc, #36]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4a08      	ldr	r2, [pc, #32]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062d6:	60d3      	str	r3, [r2, #12]
 80062d8:	e020      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062e2:	d109      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062e4:	4b03      	ldr	r3, [pc, #12]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4a02      	ldr	r2, [pc, #8]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ee:	60d3      	str	r3, [r2, #12]
 80062f0:	e014      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80062f2:	bf00      	nop
 80062f4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006300:	d10c      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3304      	adds	r3, #4
 8006306:	2101      	movs	r1, #1
 8006308:	4618      	mov	r0, r3
 800630a:	f000 f8a5 	bl	8006458 <RCCEx_PLLSAI1_Config>
 800630e:	4603      	mov	r3, r0
 8006310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006312:	7cfb      	ldrb	r3, [r7, #19]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006318:	7cfb      	ldrb	r3, [r7, #19]
 800631a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d028      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006328:	4b4a      	ldr	r3, [pc, #296]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800632e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006336:	4947      	ldr	r1, [pc, #284]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006342:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006346:	d106      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006348:	4b42      	ldr	r3, [pc, #264]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4a41      	ldr	r2, [pc, #260]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800634e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006352:	60d3      	str	r3, [r2, #12]
 8006354:	e011      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800635a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800635e:	d10c      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3304      	adds	r3, #4
 8006364:	2101      	movs	r1, #1
 8006366:	4618      	mov	r0, r3
 8006368:	f000 f876 	bl	8006458 <RCCEx_PLLSAI1_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006370:	7cfb      	ldrb	r3, [r7, #19]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006376:	7cfb      	ldrb	r3, [r7, #19]
 8006378:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01e      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006386:	4b33      	ldr	r3, [pc, #204]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006396:	492f      	ldr	r1, [pc, #188]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063a8:	d10c      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3304      	adds	r3, #4
 80063ae:	2102      	movs	r1, #2
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 f851 	bl	8006458 <RCCEx_PLLSAI1_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063ba:	7cfb      	ldrb	r3, [r7, #19]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80063c0:	7cfb      	ldrb	r3, [r7, #19]
 80063c2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063d0:	4b20      	ldr	r3, [pc, #128]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063d6:	f023 0204 	bic.w	r2, r3, #4
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063e0:	491c      	ldr	r1, [pc, #112]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80063f4:	4b17      	ldr	r3, [pc, #92]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063fa:	f023 0218 	bic.w	r2, r3, #24
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006404:	4913      	ldr	r1, [pc, #76]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d017      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006418:	4b0e      	ldr	r3, [pc, #56]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800641a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800641e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006428:	490a      	ldr	r1, [pc, #40]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006436:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800643a:	d105      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800643c:	4b05      	ldr	r3, [pc, #20]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	4a04      	ldr	r2, [pc, #16]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006446:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006448:	7cbb      	ldrb	r3, [r7, #18]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40021000 	.word	0x40021000

08006458 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006466:	4b72      	ldr	r3, [pc, #456]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00e      	beq.n	8006490 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006472:	4b6f      	ldr	r3, [pc, #444]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f003 0203 	and.w	r2, r3, #3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d103      	bne.n	800648a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
       ||
 8006486:	2b00      	cmp	r3, #0
 8006488:	d142      	bne.n	8006510 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	73fb      	strb	r3, [r7, #15]
 800648e:	e03f      	b.n	8006510 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b03      	cmp	r3, #3
 8006496:	d018      	beq.n	80064ca <RCCEx_PLLSAI1_Config+0x72>
 8006498:	2b03      	cmp	r3, #3
 800649a:	d825      	bhi.n	80064e8 <RCCEx_PLLSAI1_Config+0x90>
 800649c:	2b01      	cmp	r3, #1
 800649e:	d002      	beq.n	80064a6 <RCCEx_PLLSAI1_Config+0x4e>
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d009      	beq.n	80064b8 <RCCEx_PLLSAI1_Config+0x60>
 80064a4:	e020      	b.n	80064e8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064a6:	4b62      	ldr	r3, [pc, #392]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d11d      	bne.n	80064ee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064b6:	e01a      	b.n	80064ee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064b8:	4b5d      	ldr	r3, [pc, #372]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d116      	bne.n	80064f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064c8:	e013      	b.n	80064f2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064ca:	4b59      	ldr	r3, [pc, #356]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10f      	bne.n	80064f6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064d6:	4b56      	ldr	r3, [pc, #344]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064e6:	e006      	b.n	80064f6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	73fb      	strb	r3, [r7, #15]
      break;
 80064ec:	e004      	b.n	80064f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064ee:	bf00      	nop
 80064f0:	e002      	b.n	80064f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064f2:	bf00      	nop
 80064f4:	e000      	b.n	80064f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d108      	bne.n	8006510 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80064fe:	4b4c      	ldr	r3, [pc, #304]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f023 0203 	bic.w	r2, r3, #3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4949      	ldr	r1, [pc, #292]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 800650c:	4313      	orrs	r3, r2
 800650e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b00      	cmp	r3, #0
 8006514:	f040 8086 	bne.w	8006624 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006518:	4b45      	ldr	r3, [pc, #276]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a44      	ldr	r2, [pc, #272]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 800651e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006524:	f7fb f952 	bl	80017cc <HAL_GetTick>
 8006528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800652a:	e009      	b.n	8006540 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800652c:	f7fb f94e 	bl	80017cc <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d902      	bls.n	8006540 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	73fb      	strb	r3, [r7, #15]
        break;
 800653e:	e005      	b.n	800654c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006540:	4b3b      	ldr	r3, [pc, #236]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ef      	bne.n	800652c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d168      	bne.n	8006624 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d113      	bne.n	8006580 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006558:	4b35      	ldr	r3, [pc, #212]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	4b35      	ldr	r3, [pc, #212]	@ (8006634 <RCCEx_PLLSAI1_Config+0x1dc>)
 800655e:	4013      	ands	r3, r2
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6892      	ldr	r2, [r2, #8]
 8006564:	0211      	lsls	r1, r2, #8
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68d2      	ldr	r2, [r2, #12]
 800656a:	06d2      	lsls	r2, r2, #27
 800656c:	4311      	orrs	r1, r2
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6852      	ldr	r2, [r2, #4]
 8006572:	3a01      	subs	r2, #1
 8006574:	0112      	lsls	r2, r2, #4
 8006576:	430a      	orrs	r2, r1
 8006578:	492d      	ldr	r1, [pc, #180]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 800657a:	4313      	orrs	r3, r2
 800657c:	610b      	str	r3, [r1, #16]
 800657e:	e02d      	b.n	80065dc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d115      	bne.n	80065b2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006586:	4b2a      	ldr	r3, [pc, #168]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	4b2b      	ldr	r3, [pc, #172]	@ (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 800658c:	4013      	ands	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6892      	ldr	r2, [r2, #8]
 8006592:	0211      	lsls	r1, r2, #8
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6912      	ldr	r2, [r2, #16]
 8006598:	0852      	lsrs	r2, r2, #1
 800659a:	3a01      	subs	r2, #1
 800659c:	0552      	lsls	r2, r2, #21
 800659e:	4311      	orrs	r1, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6852      	ldr	r2, [r2, #4]
 80065a4:	3a01      	subs	r2, #1
 80065a6:	0112      	lsls	r2, r2, #4
 80065a8:	430a      	orrs	r2, r1
 80065aa:	4921      	ldr	r1, [pc, #132]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	610b      	str	r3, [r1, #16]
 80065b0:	e014      	b.n	80065dc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	4b21      	ldr	r3, [pc, #132]	@ (800663c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6892      	ldr	r2, [r2, #8]
 80065be:	0211      	lsls	r1, r2, #8
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6952      	ldr	r2, [r2, #20]
 80065c4:	0852      	lsrs	r2, r2, #1
 80065c6:	3a01      	subs	r2, #1
 80065c8:	0652      	lsls	r2, r2, #25
 80065ca:	4311      	orrs	r1, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6852      	ldr	r2, [r2, #4]
 80065d0:	3a01      	subs	r2, #1
 80065d2:	0112      	lsls	r2, r2, #4
 80065d4:	430a      	orrs	r2, r1
 80065d6:	4916      	ldr	r1, [pc, #88]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80065dc:	4b14      	ldr	r3, [pc, #80]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a13      	ldr	r2, [pc, #76]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e8:	f7fb f8f0 	bl	80017cc <HAL_GetTick>
 80065ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065ee:	e009      	b.n	8006604 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065f0:	f7fb f8ec 	bl	80017cc <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d902      	bls.n	8006604 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	73fb      	strb	r3, [r7, #15]
          break;
 8006602:	e005      	b.n	8006610 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006604:	4b0a      	ldr	r3, [pc, #40]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0ef      	beq.n	80065f0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006616:	4b06      	ldr	r3, [pc, #24]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	4904      	ldr	r1, [pc, #16]	@ (8006630 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006620:	4313      	orrs	r3, r2
 8006622:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006624:	7bfb      	ldrb	r3, [r7, #15]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	40021000 	.word	0x40021000
 8006634:	07ff800f 	.word	0x07ff800f
 8006638:	ff9f800f 	.word	0xff9f800f
 800663c:	f9ff800f 	.word	0xf9ff800f

08006640 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800664e:	4b72      	ldr	r3, [pc, #456]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00e      	beq.n	8006678 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800665a:	4b6f      	ldr	r3, [pc, #444]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f003 0203 	and.w	r2, r3, #3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d103      	bne.n	8006672 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
       ||
 800666e:	2b00      	cmp	r3, #0
 8006670:	d142      	bne.n	80066f8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	73fb      	strb	r3, [r7, #15]
 8006676:	e03f      	b.n	80066f8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b03      	cmp	r3, #3
 800667e:	d018      	beq.n	80066b2 <RCCEx_PLLSAI2_Config+0x72>
 8006680:	2b03      	cmp	r3, #3
 8006682:	d825      	bhi.n	80066d0 <RCCEx_PLLSAI2_Config+0x90>
 8006684:	2b01      	cmp	r3, #1
 8006686:	d002      	beq.n	800668e <RCCEx_PLLSAI2_Config+0x4e>
 8006688:	2b02      	cmp	r3, #2
 800668a:	d009      	beq.n	80066a0 <RCCEx_PLLSAI2_Config+0x60>
 800668c:	e020      	b.n	80066d0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800668e:	4b62      	ldr	r3, [pc, #392]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d11d      	bne.n	80066d6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800669e:	e01a      	b.n	80066d6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80066a0:	4b5d      	ldr	r3, [pc, #372]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d116      	bne.n	80066da <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066b0:	e013      	b.n	80066da <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80066b2:	4b59      	ldr	r3, [pc, #356]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10f      	bne.n	80066de <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80066be:	4b56      	ldr	r3, [pc, #344]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066ce:	e006      	b.n	80066de <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]
      break;
 80066d4:	e004      	b.n	80066e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066d6:	bf00      	nop
 80066d8:	e002      	b.n	80066e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066da:	bf00      	nop
 80066dc:	e000      	b.n	80066e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066de:	bf00      	nop
    }

    if(status == HAL_OK)
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d108      	bne.n	80066f8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80066e6:	4b4c      	ldr	r3, [pc, #304]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f023 0203 	bic.w	r2, r3, #3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4949      	ldr	r1, [pc, #292]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f040 8086 	bne.w	800680c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006700:	4b45      	ldr	r3, [pc, #276]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a44      	ldr	r2, [pc, #272]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800670a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800670c:	f7fb f85e 	bl	80017cc <HAL_GetTick>
 8006710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006712:	e009      	b.n	8006728 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006714:	f7fb f85a 	bl	80017cc <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d902      	bls.n	8006728 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	73fb      	strb	r3, [r7, #15]
        break;
 8006726:	e005      	b.n	8006734 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006728:	4b3b      	ldr	r3, [pc, #236]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1ef      	bne.n	8006714 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d168      	bne.n	800680c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d113      	bne.n	8006768 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006740:	4b35      	ldr	r3, [pc, #212]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006742:	695a      	ldr	r2, [r3, #20]
 8006744:	4b35      	ldr	r3, [pc, #212]	@ (800681c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006746:	4013      	ands	r3, r2
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6892      	ldr	r2, [r2, #8]
 800674c:	0211      	lsls	r1, r2, #8
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	68d2      	ldr	r2, [r2, #12]
 8006752:	06d2      	lsls	r2, r2, #27
 8006754:	4311      	orrs	r1, r2
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6852      	ldr	r2, [r2, #4]
 800675a:	3a01      	subs	r2, #1
 800675c:	0112      	lsls	r2, r2, #4
 800675e:	430a      	orrs	r2, r1
 8006760:	492d      	ldr	r1, [pc, #180]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006762:	4313      	orrs	r3, r2
 8006764:	614b      	str	r3, [r1, #20]
 8006766:	e02d      	b.n	80067c4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d115      	bne.n	800679a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800676e:	4b2a      	ldr	r3, [pc, #168]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006770:	695a      	ldr	r2, [r3, #20]
 8006772:	4b2b      	ldr	r3, [pc, #172]	@ (8006820 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006774:	4013      	ands	r3, r2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6892      	ldr	r2, [r2, #8]
 800677a:	0211      	lsls	r1, r2, #8
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6912      	ldr	r2, [r2, #16]
 8006780:	0852      	lsrs	r2, r2, #1
 8006782:	3a01      	subs	r2, #1
 8006784:	0552      	lsls	r2, r2, #21
 8006786:	4311      	orrs	r1, r2
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6852      	ldr	r2, [r2, #4]
 800678c:	3a01      	subs	r2, #1
 800678e:	0112      	lsls	r2, r2, #4
 8006790:	430a      	orrs	r2, r1
 8006792:	4921      	ldr	r1, [pc, #132]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006794:	4313      	orrs	r3, r2
 8006796:	614b      	str	r3, [r1, #20]
 8006798:	e014      	b.n	80067c4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800679a:	4b1f      	ldr	r3, [pc, #124]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	4b21      	ldr	r3, [pc, #132]	@ (8006824 <RCCEx_PLLSAI2_Config+0x1e4>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6892      	ldr	r2, [r2, #8]
 80067a6:	0211      	lsls	r1, r2, #8
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6952      	ldr	r2, [r2, #20]
 80067ac:	0852      	lsrs	r2, r2, #1
 80067ae:	3a01      	subs	r2, #1
 80067b0:	0652      	lsls	r2, r2, #25
 80067b2:	4311      	orrs	r1, r2
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6852      	ldr	r2, [r2, #4]
 80067b8:	3a01      	subs	r2, #1
 80067ba:	0112      	lsls	r2, r2, #4
 80067bc:	430a      	orrs	r2, r1
 80067be:	4916      	ldr	r1, [pc, #88]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80067c4:	4b14      	ldr	r3, [pc, #80]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a13      	ldr	r2, [pc, #76]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d0:	f7fa fffc 	bl	80017cc <HAL_GetTick>
 80067d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067d6:	e009      	b.n	80067ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067d8:	f7fa fff8 	bl	80017cc <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d902      	bls.n	80067ec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	73fb      	strb	r3, [r7, #15]
          break;
 80067ea:	e005      	b.n	80067f8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0ef      	beq.n	80067d8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80067fe:	4b06      	ldr	r3, [pc, #24]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006800:	695a      	ldr	r2, [r3, #20]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	4904      	ldr	r1, [pc, #16]	@ (8006818 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006808:	4313      	orrs	r3, r2
 800680a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	40021000 	.word	0x40021000
 800681c:	07ff800f 	.word	0x07ff800f
 8006820:	ff9f800f 	.word	0xff9f800f
 8006824:	f9ff800f 	.word	0xf9ff800f

08006828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e049      	b.n	80068ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fa fd94 	bl	800137c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f000 fb02 	bl	8006e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d001      	beq.n	80068f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e047      	b.n	8006980 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a23      	ldr	r2, [pc, #140]	@ (800698c <HAL_TIM_Base_Start+0xb4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d01d      	beq.n	800693e <HAL_TIM_Base_Start+0x66>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800690a:	d018      	beq.n	800693e <HAL_TIM_Base_Start+0x66>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1f      	ldr	r2, [pc, #124]	@ (8006990 <HAL_TIM_Base_Start+0xb8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <HAL_TIM_Base_Start+0x66>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a1e      	ldr	r2, [pc, #120]	@ (8006994 <HAL_TIM_Base_Start+0xbc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00e      	beq.n	800693e <HAL_TIM_Base_Start+0x66>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1c      	ldr	r2, [pc, #112]	@ (8006998 <HAL_TIM_Base_Start+0xc0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d009      	beq.n	800693e <HAL_TIM_Base_Start+0x66>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1b      	ldr	r2, [pc, #108]	@ (800699c <HAL_TIM_Base_Start+0xc4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d004      	beq.n	800693e <HAL_TIM_Base_Start+0x66>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a19      	ldr	r2, [pc, #100]	@ (80069a0 <HAL_TIM_Base_Start+0xc8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d115      	bne.n	800696a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	4b17      	ldr	r3, [pc, #92]	@ (80069a4 <HAL_TIM_Base_Start+0xcc>)
 8006946:	4013      	ands	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b06      	cmp	r3, #6
 800694e:	d015      	beq.n	800697c <HAL_TIM_Base_Start+0xa4>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006956:	d011      	beq.n	800697c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006968:	e008      	b.n	800697c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f042 0201 	orr.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e000      	b.n	800697e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	40012c00 	.word	0x40012c00
 8006990:	40000400 	.word	0x40000400
 8006994:	40000800 	.word	0x40000800
 8006998:	40000c00 	.word	0x40000c00
 800699c:	40013400 	.word	0x40013400
 80069a0:	40014000 	.word	0x40014000
 80069a4:	00010007 	.word	0x00010007

080069a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d001      	beq.n	80069c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e04f      	b.n	8006a60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0201 	orr.w	r2, r2, #1
 80069d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a23      	ldr	r2, [pc, #140]	@ (8006a6c <HAL_TIM_Base_Start_IT+0xc4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d01d      	beq.n	8006a1e <HAL_TIM_Base_Start_IT+0x76>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ea:	d018      	beq.n	8006a1e <HAL_TIM_Base_Start_IT+0x76>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a70 <HAL_TIM_Base_Start_IT+0xc8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <HAL_TIM_Base_Start_IT+0x76>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006a74 <HAL_TIM_Base_Start_IT+0xcc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <HAL_TIM_Base_Start_IT+0x76>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1c      	ldr	r2, [pc, #112]	@ (8006a78 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <HAL_TIM_Base_Start_IT+0x76>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006a7c <HAL_TIM_Base_Start_IT+0xd4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <HAL_TIM_Base_Start_IT+0x76>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a19      	ldr	r2, [pc, #100]	@ (8006a80 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d115      	bne.n	8006a4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	4b17      	ldr	r3, [pc, #92]	@ (8006a84 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b06      	cmp	r3, #6
 8006a2e:	d015      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0xb4>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a36:	d011      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a48:	e008      	b.n	8006a5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0201 	orr.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e000      	b.n	8006a5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40000400 	.word	0x40000400
 8006a74:	40000800 	.word	0x40000800
 8006a78:	40000c00 	.word	0x40000c00
 8006a7c:	40013400 	.word	0x40013400
 8006a80:	40014000 	.word	0x40014000
 8006a84:	00010007 	.word	0x00010007

08006a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d020      	beq.n	8006aec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01b      	beq.n	8006aec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0202 	mvn.w	r2, #2
 8006abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f9ad 	bl	8006e32 <HAL_TIM_IC_CaptureCallback>
 8006ad8:	e005      	b.n	8006ae6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f99f 	bl	8006e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f9b0 	bl	8006e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d020      	beq.n	8006b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01b      	beq.n	8006b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0204 	mvn.w	r2, #4
 8006b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f987 	bl	8006e32 <HAL_TIM_IC_CaptureCallback>
 8006b24:	e005      	b.n	8006b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f979 	bl	8006e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f98a 	bl	8006e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f003 0308 	and.w	r3, r3, #8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d020      	beq.n	8006b84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01b      	beq.n	8006b84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0208 	mvn.w	r2, #8
 8006b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2204      	movs	r2, #4
 8006b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f961 	bl	8006e32 <HAL_TIM_IC_CaptureCallback>
 8006b70:	e005      	b.n	8006b7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f953 	bl	8006e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f964 	bl	8006e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d020      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01b      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f06f 0210 	mvn.w	r2, #16
 8006ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f93b 	bl	8006e32 <HAL_TIM_IC_CaptureCallback>
 8006bbc:	e005      	b.n	8006bca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f92d 	bl	8006e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f93e 	bl	8006e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00c      	beq.n	8006bf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0201 	mvn.w	r2, #1
 8006bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fa f848 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00c      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d007      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 faf2 	bl	80071fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00c      	beq.n	8006c3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 faea 	bl	8007210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00c      	beq.n	8006c60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f8fd 	bl	8006e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00c      	beq.n	8006c84 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f003 0320 	and.w	r3, r3, #32
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d007      	beq.n	8006c84 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0220 	mvn.w	r2, #32
 8006c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fab2 	bl	80071e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e0b6      	b.n	8006e16 <HAL_TIM_ConfigClockSource+0x18a>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ce4:	d03e      	beq.n	8006d64 <HAL_TIM_ConfigClockSource+0xd8>
 8006ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cea:	f200 8087 	bhi.w	8006dfc <HAL_TIM_ConfigClockSource+0x170>
 8006cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cf2:	f000 8086 	beq.w	8006e02 <HAL_TIM_ConfigClockSource+0x176>
 8006cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cfa:	d87f      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x170>
 8006cfc:	2b70      	cmp	r3, #112	@ 0x70
 8006cfe:	d01a      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0xaa>
 8006d00:	2b70      	cmp	r3, #112	@ 0x70
 8006d02:	d87b      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x170>
 8006d04:	2b60      	cmp	r3, #96	@ 0x60
 8006d06:	d050      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x11e>
 8006d08:	2b60      	cmp	r3, #96	@ 0x60
 8006d0a:	d877      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x170>
 8006d0c:	2b50      	cmp	r3, #80	@ 0x50
 8006d0e:	d03c      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0xfe>
 8006d10:	2b50      	cmp	r3, #80	@ 0x50
 8006d12:	d873      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x170>
 8006d14:	2b40      	cmp	r3, #64	@ 0x40
 8006d16:	d058      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x13e>
 8006d18:	2b40      	cmp	r3, #64	@ 0x40
 8006d1a:	d86f      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x170>
 8006d1c:	2b30      	cmp	r3, #48	@ 0x30
 8006d1e:	d064      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x15e>
 8006d20:	2b30      	cmp	r3, #48	@ 0x30
 8006d22:	d86b      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x170>
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d060      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x15e>
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	d867      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x170>
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d05c      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x15e>
 8006d30:	2b10      	cmp	r3, #16
 8006d32:	d05a      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x15e>
 8006d34:	e062      	b.n	8006dfc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d46:	f000 f9a7 	bl	8007098 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	609a      	str	r2, [r3, #8]
      break;
 8006d62:	e04f      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d74:	f000 f990 	bl	8007098 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d86:	609a      	str	r2, [r3, #8]
      break;
 8006d88:	e03c      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d96:	461a      	mov	r2, r3
 8006d98:	f000 f904 	bl	8006fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2150      	movs	r1, #80	@ 0x50
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 f95d 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 8006da8:	e02c      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006db6:	461a      	mov	r2, r3
 8006db8:	f000 f923 	bl	8007002 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2160      	movs	r1, #96	@ 0x60
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 f94d 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 8006dc8:	e01c      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f000 f8e4 	bl	8006fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2140      	movs	r1, #64	@ 0x40
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 f93d 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 8006de8:	e00c      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f000 f934 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 8006dfa:	e003      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006e00:	e000      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
	...

08006e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a40      	ldr	r2, [pc, #256]	@ (8006f84 <TIM_Base_SetConfig+0x114>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d013      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e8e:	d00f      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a3d      	ldr	r2, [pc, #244]	@ (8006f88 <TIM_Base_SetConfig+0x118>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00b      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a3c      	ldr	r2, [pc, #240]	@ (8006f8c <TIM_Base_SetConfig+0x11c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d007      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a3b      	ldr	r2, [pc, #236]	@ (8006f90 <TIM_Base_SetConfig+0x120>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a3a      	ldr	r2, [pc, #232]	@ (8006f94 <TIM_Base_SetConfig+0x124>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d108      	bne.n	8006ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8006f84 <TIM_Base_SetConfig+0x114>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d01f      	beq.n	8006f0a <TIM_Base_SetConfig+0x9a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ed0:	d01b      	beq.n	8006f0a <TIM_Base_SetConfig+0x9a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8006f88 <TIM_Base_SetConfig+0x118>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d017      	beq.n	8006f0a <TIM_Base_SetConfig+0x9a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a2b      	ldr	r2, [pc, #172]	@ (8006f8c <TIM_Base_SetConfig+0x11c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <TIM_Base_SetConfig+0x9a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8006f90 <TIM_Base_SetConfig+0x120>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00f      	beq.n	8006f0a <TIM_Base_SetConfig+0x9a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a29      	ldr	r2, [pc, #164]	@ (8006f94 <TIM_Base_SetConfig+0x124>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00b      	beq.n	8006f0a <TIM_Base_SetConfig+0x9a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a28      	ldr	r2, [pc, #160]	@ (8006f98 <TIM_Base_SetConfig+0x128>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d007      	beq.n	8006f0a <TIM_Base_SetConfig+0x9a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a27      	ldr	r2, [pc, #156]	@ (8006f9c <TIM_Base_SetConfig+0x12c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d003      	beq.n	8006f0a <TIM_Base_SetConfig+0x9a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a26      	ldr	r2, [pc, #152]	@ (8006fa0 <TIM_Base_SetConfig+0x130>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d108      	bne.n	8006f1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a10      	ldr	r2, [pc, #64]	@ (8006f84 <TIM_Base_SetConfig+0x114>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00f      	beq.n	8006f68 <TIM_Base_SetConfig+0xf8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a12      	ldr	r2, [pc, #72]	@ (8006f94 <TIM_Base_SetConfig+0x124>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00b      	beq.n	8006f68 <TIM_Base_SetConfig+0xf8>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a11      	ldr	r2, [pc, #68]	@ (8006f98 <TIM_Base_SetConfig+0x128>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d007      	beq.n	8006f68 <TIM_Base_SetConfig+0xf8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a10      	ldr	r2, [pc, #64]	@ (8006f9c <TIM_Base_SetConfig+0x12c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <TIM_Base_SetConfig+0xf8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a0f      	ldr	r2, [pc, #60]	@ (8006fa0 <TIM_Base_SetConfig+0x130>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d103      	bne.n	8006f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	615a      	str	r2, [r3, #20]
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40012c00 	.word	0x40012c00
 8006f88:	40000400 	.word	0x40000400
 8006f8c:	40000800 	.word	0x40000800
 8006f90:	40000c00 	.word	0x40000c00
 8006f94:	40013400 	.word	0x40013400
 8006f98:	40014000 	.word	0x40014000
 8006f9c:	40014400 	.word	0x40014400
 8006fa0:	40014800 	.word	0x40014800

08006fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f023 0201 	bic.w	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f023 030a 	bic.w	r3, r3, #10
 8006fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007002:	b480      	push	{r7}
 8007004:	b087      	sub	sp, #28
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	f023 0210 	bic.w	r2, r3, #16
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800702c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	031b      	lsls	r3, r3, #12
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800703e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	f043 0307 	orr.w	r3, r3, #7
 8007084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	609a      	str	r2, [r3, #8]
}
 800708c:	bf00      	nop
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	021a      	lsls	r2, r3, #8
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4313      	orrs	r3, r2
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	609a      	str	r2, [r3, #8]
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e068      	b.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a2e      	ldr	r2, [pc, #184]	@ (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d004      	beq.n	8007124 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2d      	ldr	r2, [pc, #180]	@ (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d108      	bne.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800712a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1e      	ldr	r2, [pc, #120]	@ (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01d      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007162:	d018      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1b      	ldr	r2, [pc, #108]	@ (80071d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d013      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1a      	ldr	r2, [pc, #104]	@ (80071dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00e      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a18      	ldr	r2, [pc, #96]	@ (80071e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d009      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a13      	ldr	r2, [pc, #76]	@ (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d004      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a14      	ldr	r2, [pc, #80]	@ (80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d10c      	bne.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800719c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40012c00 	.word	0x40012c00
 80071d4:	40013400 	.word	0x40013400
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00
 80071e4:	40014000 	.word	0x40014000

080071e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e042      	b.n	80072bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7fa f987 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2224      	movs	r2, #36	@ 0x24
 8007252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0201 	bic.w	r2, r2, #1
 8007264:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fb24 	bl	80078bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f825 	bl	80072c4 <UART_SetConfig>
 800727a:	4603      	mov	r3, r0
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e01b      	b.n	80072bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fba3 	bl	8007a00 <UART_CheckIdleState>
 80072ba:	4603      	mov	r3, r0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072c8:	b08c      	sub	sp, #48	@ 0x30
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	431a      	orrs	r2, r3
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4baa      	ldr	r3, [pc, #680]	@ (800759c <UART_SetConfig+0x2d8>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	6812      	ldr	r2, [r2, #0]
 80072fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072fc:	430b      	orrs	r3, r1
 80072fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a9f      	ldr	r2, [pc, #636]	@ (80075a0 <UART_SetConfig+0x2dc>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800732c:	4313      	orrs	r3, r2
 800732e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800733a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007344:	430b      	orrs	r3, r1
 8007346:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734e:	f023 010f 	bic.w	r1, r3, #15
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a90      	ldr	r2, [pc, #576]	@ (80075a4 <UART_SetConfig+0x2e0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d125      	bne.n	80073b4 <UART_SetConfig+0xf0>
 8007368:	4b8f      	ldr	r3, [pc, #572]	@ (80075a8 <UART_SetConfig+0x2e4>)
 800736a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736e:	f003 0303 	and.w	r3, r3, #3
 8007372:	2b03      	cmp	r3, #3
 8007374:	d81a      	bhi.n	80073ac <UART_SetConfig+0xe8>
 8007376:	a201      	add	r2, pc, #4	@ (adr r2, 800737c <UART_SetConfig+0xb8>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	0800738d 	.word	0x0800738d
 8007380:	0800739d 	.word	0x0800739d
 8007384:	08007395 	.word	0x08007395
 8007388:	080073a5 	.word	0x080073a5
 800738c:	2301      	movs	r3, #1
 800738e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007392:	e116      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007394:	2302      	movs	r3, #2
 8007396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800739a:	e112      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800739c:	2304      	movs	r3, #4
 800739e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073a2:	e10e      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80073a4:	2308      	movs	r3, #8
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073aa:	e10a      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80073ac:	2310      	movs	r3, #16
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073b2:	e106      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a7c      	ldr	r2, [pc, #496]	@ (80075ac <UART_SetConfig+0x2e8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d138      	bne.n	8007430 <UART_SetConfig+0x16c>
 80073be:	4b7a      	ldr	r3, [pc, #488]	@ (80075a8 <UART_SetConfig+0x2e4>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c4:	f003 030c 	and.w	r3, r3, #12
 80073c8:	2b0c      	cmp	r3, #12
 80073ca:	d82d      	bhi.n	8007428 <UART_SetConfig+0x164>
 80073cc:	a201      	add	r2, pc, #4	@ (adr r2, 80073d4 <UART_SetConfig+0x110>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	08007409 	.word	0x08007409
 80073d8:	08007429 	.word	0x08007429
 80073dc:	08007429 	.word	0x08007429
 80073e0:	08007429 	.word	0x08007429
 80073e4:	08007419 	.word	0x08007419
 80073e8:	08007429 	.word	0x08007429
 80073ec:	08007429 	.word	0x08007429
 80073f0:	08007429 	.word	0x08007429
 80073f4:	08007411 	.word	0x08007411
 80073f8:	08007429 	.word	0x08007429
 80073fc:	08007429 	.word	0x08007429
 8007400:	08007429 	.word	0x08007429
 8007404:	08007421 	.word	0x08007421
 8007408:	2300      	movs	r3, #0
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800740e:	e0d8      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007410:	2302      	movs	r3, #2
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007416:	e0d4      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007418:	2304      	movs	r3, #4
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741e:	e0d0      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007420:	2308      	movs	r3, #8
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007426:	e0cc      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007428:	2310      	movs	r3, #16
 800742a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742e:	e0c8      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a5e      	ldr	r2, [pc, #376]	@ (80075b0 <UART_SetConfig+0x2ec>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d125      	bne.n	8007486 <UART_SetConfig+0x1c2>
 800743a:	4b5b      	ldr	r3, [pc, #364]	@ (80075a8 <UART_SetConfig+0x2e4>)
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007440:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007444:	2b30      	cmp	r3, #48	@ 0x30
 8007446:	d016      	beq.n	8007476 <UART_SetConfig+0x1b2>
 8007448:	2b30      	cmp	r3, #48	@ 0x30
 800744a:	d818      	bhi.n	800747e <UART_SetConfig+0x1ba>
 800744c:	2b20      	cmp	r3, #32
 800744e:	d00a      	beq.n	8007466 <UART_SetConfig+0x1a2>
 8007450:	2b20      	cmp	r3, #32
 8007452:	d814      	bhi.n	800747e <UART_SetConfig+0x1ba>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <UART_SetConfig+0x19a>
 8007458:	2b10      	cmp	r3, #16
 800745a:	d008      	beq.n	800746e <UART_SetConfig+0x1aa>
 800745c:	e00f      	b.n	800747e <UART_SetConfig+0x1ba>
 800745e:	2300      	movs	r3, #0
 8007460:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007464:	e0ad      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007466:	2302      	movs	r3, #2
 8007468:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800746c:	e0a9      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800746e:	2304      	movs	r3, #4
 8007470:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007474:	e0a5      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007476:	2308      	movs	r3, #8
 8007478:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800747c:	e0a1      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800747e:	2310      	movs	r3, #16
 8007480:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007484:	e09d      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a4a      	ldr	r2, [pc, #296]	@ (80075b4 <UART_SetConfig+0x2f0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d125      	bne.n	80074dc <UART_SetConfig+0x218>
 8007490:	4b45      	ldr	r3, [pc, #276]	@ (80075a8 <UART_SetConfig+0x2e4>)
 8007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007496:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800749a:	2bc0      	cmp	r3, #192	@ 0xc0
 800749c:	d016      	beq.n	80074cc <UART_SetConfig+0x208>
 800749e:	2bc0      	cmp	r3, #192	@ 0xc0
 80074a0:	d818      	bhi.n	80074d4 <UART_SetConfig+0x210>
 80074a2:	2b80      	cmp	r3, #128	@ 0x80
 80074a4:	d00a      	beq.n	80074bc <UART_SetConfig+0x1f8>
 80074a6:	2b80      	cmp	r3, #128	@ 0x80
 80074a8:	d814      	bhi.n	80074d4 <UART_SetConfig+0x210>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <UART_SetConfig+0x1f0>
 80074ae:	2b40      	cmp	r3, #64	@ 0x40
 80074b0:	d008      	beq.n	80074c4 <UART_SetConfig+0x200>
 80074b2:	e00f      	b.n	80074d4 <UART_SetConfig+0x210>
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ba:	e082      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80074bc:	2302      	movs	r3, #2
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c2:	e07e      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80074c4:	2304      	movs	r3, #4
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ca:	e07a      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80074cc:	2308      	movs	r3, #8
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d2:	e076      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80074d4:	2310      	movs	r3, #16
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074da:	e072      	b.n	80075c2 <UART_SetConfig+0x2fe>
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a35      	ldr	r2, [pc, #212]	@ (80075b8 <UART_SetConfig+0x2f4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d12a      	bne.n	800753c <UART_SetConfig+0x278>
 80074e6:	4b30      	ldr	r3, [pc, #192]	@ (80075a8 <UART_SetConfig+0x2e4>)
 80074e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074f4:	d01a      	beq.n	800752c <UART_SetConfig+0x268>
 80074f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074fa:	d81b      	bhi.n	8007534 <UART_SetConfig+0x270>
 80074fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007500:	d00c      	beq.n	800751c <UART_SetConfig+0x258>
 8007502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007506:	d815      	bhi.n	8007534 <UART_SetConfig+0x270>
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <UART_SetConfig+0x250>
 800750c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007510:	d008      	beq.n	8007524 <UART_SetConfig+0x260>
 8007512:	e00f      	b.n	8007534 <UART_SetConfig+0x270>
 8007514:	2300      	movs	r3, #0
 8007516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800751a:	e052      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800751c:	2302      	movs	r3, #2
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007522:	e04e      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007524:	2304      	movs	r3, #4
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800752a:	e04a      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800752c:	2308      	movs	r3, #8
 800752e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007532:	e046      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007534:	2310      	movs	r3, #16
 8007536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753a:	e042      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a17      	ldr	r2, [pc, #92]	@ (80075a0 <UART_SetConfig+0x2dc>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d13a      	bne.n	80075bc <UART_SetConfig+0x2f8>
 8007546:	4b18      	ldr	r3, [pc, #96]	@ (80075a8 <UART_SetConfig+0x2e4>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007550:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007554:	d01a      	beq.n	800758c <UART_SetConfig+0x2c8>
 8007556:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800755a:	d81b      	bhi.n	8007594 <UART_SetConfig+0x2d0>
 800755c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007560:	d00c      	beq.n	800757c <UART_SetConfig+0x2b8>
 8007562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007566:	d815      	bhi.n	8007594 <UART_SetConfig+0x2d0>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <UART_SetConfig+0x2b0>
 800756c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007570:	d008      	beq.n	8007584 <UART_SetConfig+0x2c0>
 8007572:	e00f      	b.n	8007594 <UART_SetConfig+0x2d0>
 8007574:	2300      	movs	r3, #0
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800757a:	e022      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800757c:	2302      	movs	r3, #2
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007582:	e01e      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007584:	2304      	movs	r3, #4
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758a:	e01a      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800758c:	2308      	movs	r3, #8
 800758e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007592:	e016      	b.n	80075c2 <UART_SetConfig+0x2fe>
 8007594:	2310      	movs	r3, #16
 8007596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800759a:	e012      	b.n	80075c2 <UART_SetConfig+0x2fe>
 800759c:	cfff69f3 	.word	0xcfff69f3
 80075a0:	40008000 	.word	0x40008000
 80075a4:	40013800 	.word	0x40013800
 80075a8:	40021000 	.word	0x40021000
 80075ac:	40004400 	.word	0x40004400
 80075b0:	40004800 	.word	0x40004800
 80075b4:	40004c00 	.word	0x40004c00
 80075b8:	40005000 	.word	0x40005000
 80075bc:	2310      	movs	r3, #16
 80075be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4aae      	ldr	r2, [pc, #696]	@ (8007880 <UART_SetConfig+0x5bc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	f040 8097 	bne.w	80076fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80075d2:	2b08      	cmp	r3, #8
 80075d4:	d823      	bhi.n	800761e <UART_SetConfig+0x35a>
 80075d6:	a201      	add	r2, pc, #4	@ (adr r2, 80075dc <UART_SetConfig+0x318>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	08007601 	.word	0x08007601
 80075e0:	0800761f 	.word	0x0800761f
 80075e4:	08007609 	.word	0x08007609
 80075e8:	0800761f 	.word	0x0800761f
 80075ec:	0800760f 	.word	0x0800760f
 80075f0:	0800761f 	.word	0x0800761f
 80075f4:	0800761f 	.word	0x0800761f
 80075f8:	0800761f 	.word	0x0800761f
 80075fc:	08007617 	.word	0x08007617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007600:	f7fe fb0e 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 8007604:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007606:	e010      	b.n	800762a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007608:	4b9e      	ldr	r3, [pc, #632]	@ (8007884 <UART_SetConfig+0x5c0>)
 800760a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800760c:	e00d      	b.n	800762a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800760e:	f7fe fa6f 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007612:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007614:	e009      	b.n	800762a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800761c:	e005      	b.n	800762a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007628:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8130 	beq.w	8007892 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007636:	4a94      	ldr	r2, [pc, #592]	@ (8007888 <UART_SetConfig+0x5c4>)
 8007638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800763c:	461a      	mov	r2, r3
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007640:	fbb3 f3f2 	udiv	r3, r3, r2
 8007644:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	4613      	mov	r3, r2
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	4413      	add	r3, r2
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	429a      	cmp	r2, r3
 8007654:	d305      	bcc.n	8007662 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	429a      	cmp	r2, r3
 8007660:	d903      	bls.n	800766a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007668:	e113      	b.n	8007892 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766c:	2200      	movs	r2, #0
 800766e:	60bb      	str	r3, [r7, #8]
 8007670:	60fa      	str	r2, [r7, #12]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007676:	4a84      	ldr	r2, [pc, #528]	@ (8007888 <UART_SetConfig+0x5c4>)
 8007678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800767c:	b29b      	uxth	r3, r3
 800767e:	2200      	movs	r2, #0
 8007680:	603b      	str	r3, [r7, #0]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007688:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800768c:	f7f8 fdb6 	bl	80001fc <__aeabi_uldivmod>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4610      	mov	r0, r2
 8007696:	4619      	mov	r1, r3
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	f04f 0300 	mov.w	r3, #0
 80076a0:	020b      	lsls	r3, r1, #8
 80076a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076a6:	0202      	lsls	r2, r0, #8
 80076a8:	6979      	ldr	r1, [r7, #20]
 80076aa:	6849      	ldr	r1, [r1, #4]
 80076ac:	0849      	lsrs	r1, r1, #1
 80076ae:	2000      	movs	r0, #0
 80076b0:	460c      	mov	r4, r1
 80076b2:	4605      	mov	r5, r0
 80076b4:	eb12 0804 	adds.w	r8, r2, r4
 80076b8:	eb43 0905 	adc.w	r9, r3, r5
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	469a      	mov	sl, r3
 80076c4:	4693      	mov	fp, r2
 80076c6:	4652      	mov	r2, sl
 80076c8:	465b      	mov	r3, fp
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f8 fd95 	bl	80001fc <__aeabi_uldivmod>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4613      	mov	r3, r2
 80076d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076e0:	d308      	bcc.n	80076f4 <UART_SetConfig+0x430>
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076e8:	d204      	bcs.n	80076f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6a3a      	ldr	r2, [r7, #32]
 80076f0:	60da      	str	r2, [r3, #12]
 80076f2:	e0ce      	b.n	8007892 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076fa:	e0ca      	b.n	8007892 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007704:	d166      	bne.n	80077d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800770a:	2b08      	cmp	r3, #8
 800770c:	d827      	bhi.n	800775e <UART_SetConfig+0x49a>
 800770e:	a201      	add	r2, pc, #4	@ (adr r2, 8007714 <UART_SetConfig+0x450>)
 8007710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007714:	08007739 	.word	0x08007739
 8007718:	08007741 	.word	0x08007741
 800771c:	08007749 	.word	0x08007749
 8007720:	0800775f 	.word	0x0800775f
 8007724:	0800774f 	.word	0x0800774f
 8007728:	0800775f 	.word	0x0800775f
 800772c:	0800775f 	.word	0x0800775f
 8007730:	0800775f 	.word	0x0800775f
 8007734:	08007757 	.word	0x08007757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007738:	f7fe fa72 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 800773c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800773e:	e014      	b.n	800776a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007740:	f7fe fa84 	bl	8005c4c <HAL_RCC_GetPCLK2Freq>
 8007744:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007746:	e010      	b.n	800776a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007748:	4b4e      	ldr	r3, [pc, #312]	@ (8007884 <UART_SetConfig+0x5c0>)
 800774a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800774c:	e00d      	b.n	800776a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800774e:	f7fe f9cf 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007752:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007754:	e009      	b.n	800776a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800775c:	e005      	b.n	800776a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 8090 	beq.w	8007892 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007776:	4a44      	ldr	r2, [pc, #272]	@ (8007888 <UART_SetConfig+0x5c4>)
 8007778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800777c:	461a      	mov	r2, r3
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	fbb3 f3f2 	udiv	r3, r3, r2
 8007784:	005a      	lsls	r2, r3, #1
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	085b      	lsrs	r3, r3, #1
 800778c:	441a      	add	r2, r3
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	fbb2 f3f3 	udiv	r3, r2, r3
 8007796:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	2b0f      	cmp	r3, #15
 800779c:	d916      	bls.n	80077cc <UART_SetConfig+0x508>
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077a4:	d212      	bcs.n	80077cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	f023 030f 	bic.w	r3, r3, #15
 80077ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	8bfb      	ldrh	r3, [r7, #30]
 80077be:	4313      	orrs	r3, r2
 80077c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	8bfa      	ldrh	r2, [r7, #30]
 80077c8:	60da      	str	r2, [r3, #12]
 80077ca:	e062      	b.n	8007892 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077d2:	e05e      	b.n	8007892 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d828      	bhi.n	800782e <UART_SetConfig+0x56a>
 80077dc:	a201      	add	r2, pc, #4	@ (adr r2, 80077e4 <UART_SetConfig+0x520>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	08007809 	.word	0x08007809
 80077e8:	08007811 	.word	0x08007811
 80077ec:	08007819 	.word	0x08007819
 80077f0:	0800782f 	.word	0x0800782f
 80077f4:	0800781f 	.word	0x0800781f
 80077f8:	0800782f 	.word	0x0800782f
 80077fc:	0800782f 	.word	0x0800782f
 8007800:	0800782f 	.word	0x0800782f
 8007804:	08007827 	.word	0x08007827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007808:	f7fe fa0a 	bl	8005c20 <HAL_RCC_GetPCLK1Freq>
 800780c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800780e:	e014      	b.n	800783a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007810:	f7fe fa1c 	bl	8005c4c <HAL_RCC_GetPCLK2Freq>
 8007814:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007816:	e010      	b.n	800783a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007818:	4b1a      	ldr	r3, [pc, #104]	@ (8007884 <UART_SetConfig+0x5c0>)
 800781a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800781c:	e00d      	b.n	800783a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800781e:	f7fe f967 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007822:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007824:	e009      	b.n	800783a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800782c:	e005      	b.n	800783a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007838:	bf00      	nop
    }

    if (pclk != 0U)
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d028      	beq.n	8007892 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007844:	4a10      	ldr	r2, [pc, #64]	@ (8007888 <UART_SetConfig+0x5c4>)
 8007846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800784a:	461a      	mov	r2, r3
 800784c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	085b      	lsrs	r3, r3, #1
 8007858:	441a      	add	r2, r3
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007862:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	2b0f      	cmp	r3, #15
 8007868:	d910      	bls.n	800788c <UART_SetConfig+0x5c8>
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007870:	d20c      	bcs.n	800788c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	b29a      	uxth	r2, r3
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60da      	str	r2, [r3, #12]
 800787c:	e009      	b.n	8007892 <UART_SetConfig+0x5ce>
 800787e:	bf00      	nop
 8007880:	40008000 	.word	0x40008000
 8007884:	00f42400 	.word	0x00f42400
 8007888:	0800c17c 	.word	0x0800c17c
      }
      else
      {
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2201      	movs	r2, #1
 8007896:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2201      	movs	r2, #1
 800789e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2200      	movs	r2, #0
 80078a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2200      	movs	r2, #0
 80078ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80078ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3730      	adds	r7, #48	@ 0x30
 80078b6:	46bd      	mov	sp, r7
 80078b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080078bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c8:	f003 0308 	and.w	r3, r3, #8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00a      	beq.n	800792a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792e:	f003 0304 	and.w	r3, r3, #4
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007950:	f003 0310 	and.w	r3, r3, #16
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00a      	beq.n	800796e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007972:	f003 0320 	and.w	r3, r3, #32
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	d01a      	beq.n	80079d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ba:	d10a      	bne.n	80079d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	605a      	str	r2, [r3, #4]
  }
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b098      	sub	sp, #96	@ 0x60
 8007a04:	af02      	add	r7, sp, #8
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a10:	f7f9 fedc 	bl	80017cc <HAL_GetTick>
 8007a14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d12f      	bne.n	8007a84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f88e 	bl	8007b54 <UART_WaitOnFlagUntilTimeout>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d022      	beq.n	8007a84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e6      	bne.n	8007a3e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e063      	b.n	8007b4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0304 	and.w	r3, r3, #4
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d149      	bne.n	8007b26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f857 	bl	8007b54 <UART_WaitOnFlagUntilTimeout>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d03c      	beq.n	8007b26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aca:	633b      	str	r3, [r7, #48]	@ 0x30
 8007acc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e6      	bne.n	8007aac <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f023 0301 	bic.w	r3, r3, #1
 8007af4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007afe:	61fa      	str	r2, [r7, #28]
 8007b00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	69b9      	ldr	r1, [r7, #24]
 8007b04:	69fa      	ldr	r2, [r7, #28]
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e5      	bne.n	8007ade <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e012      	b.n	8007b4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3758      	adds	r7, #88	@ 0x58
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	4613      	mov	r3, r2
 8007b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b64:	e049      	b.n	8007bfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b6c:	d045      	beq.n	8007bfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b6e:	f7f9 fe2d 	bl	80017cc <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d302      	bcc.n	8007b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e048      	b.n	8007c1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d031      	beq.n	8007bfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d110      	bne.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2208      	movs	r2, #8
 8007baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f838 	bl	8007c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2208      	movs	r2, #8
 8007bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e029      	b.n	8007c1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bd4:	d111      	bne.n	8007bfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f81e 	bl	8007c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2220      	movs	r2, #32
 8007bea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e00f      	b.n	8007c1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69da      	ldr	r2, [r3, #28]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4013      	ands	r3, r2
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	bf0c      	ite	eq
 8007c0a:	2301      	moveq	r3, #1
 8007c0c:	2300      	movne	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d0a6      	beq.n	8007b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b095      	sub	sp, #84	@ 0x54
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e6      	bne.n	8007c2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3308      	adds	r3, #8
 8007c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e3      	bne.n	8007c5c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d118      	bne.n	8007cce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f023 0310 	bic.w	r3, r3, #16
 8007cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6979      	ldr	r1, [r7, #20]
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e6      	bne.n	8007c9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ce2:	bf00      	nop
 8007ce4:	3754      	adds	r7, #84	@ 0x54
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e027      	b.n	8007d54 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2224      	movs	r2, #36	@ 0x24
 8007d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 0201 	bic.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e02d      	b.n	8007dd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2224      	movs	r2, #36	@ 0x24
 8007d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0201 	bic.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	430a      	orrs	r2, r1
 8007db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f84f 	bl	8007e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e02d      	b.n	8007e50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2224      	movs	r2, #36	@ 0x24
 8007e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 0201 	bic.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f811 	bl	8007e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d108      	bne.n	8007e7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e78:	e031      	b.n	8007ede <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e7a:	2308      	movs	r3, #8
 8007e7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e7e:	2308      	movs	r3, #8
 8007e80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	0e5b      	lsrs	r3, r3, #25
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	0f5b      	lsrs	r3, r3, #29
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	f003 0307 	and.w	r3, r3, #7
 8007ea0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	7b3a      	ldrb	r2, [r7, #12]
 8007ea6:	4911      	ldr	r1, [pc, #68]	@ (8007eec <UARTEx_SetNbDataToProcess+0x94>)
 8007ea8:	5c8a      	ldrb	r2, [r1, r2]
 8007eaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007eae:	7b3a      	ldrb	r2, [r7, #12]
 8007eb0:	490f      	ldr	r1, [pc, #60]	@ (8007ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8007eb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	7b7a      	ldrb	r2, [r7, #13]
 8007ec4:	4909      	ldr	r1, [pc, #36]	@ (8007eec <UARTEx_SetNbDataToProcess+0x94>)
 8007ec6:	5c8a      	ldrb	r2, [r1, r2]
 8007ec8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ecc:	7b7a      	ldrb	r2, [r7, #13]
 8007ece:	4908      	ldr	r1, [pc, #32]	@ (8007ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8007ed0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ede:	bf00      	nop
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	0800c194 	.word	0x0800c194
 8007ef0:	0800c19c 	.word	0x0800c19c

08007ef4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	f107 001c 	add.w	r0, r7, #28
 8007f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 fa1c 	bl	8009350 <USB_CoreReset>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d106      	bne.n	8007f30 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f2e:	e005      	b.n	8007f3c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f48:	b004      	add	sp, #16
 8007f4a:	4770      	bx	lr

08007f4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d165      	bne.n	800802c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	4a3e      	ldr	r2, [pc, #248]	@ (800805c <USB_SetTurnaroundTime+0x110>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d906      	bls.n	8007f76 <USB_SetTurnaroundTime+0x2a>
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	4a3d      	ldr	r2, [pc, #244]	@ (8008060 <USB_SetTurnaroundTime+0x114>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d202      	bcs.n	8007f76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007f70:	230f      	movs	r3, #15
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	e05c      	b.n	8008030 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	4a39      	ldr	r2, [pc, #228]	@ (8008060 <USB_SetTurnaroundTime+0x114>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d306      	bcc.n	8007f8c <USB_SetTurnaroundTime+0x40>
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	4a38      	ldr	r2, [pc, #224]	@ (8008064 <USB_SetTurnaroundTime+0x118>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d202      	bcs.n	8007f8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007f86:	230e      	movs	r3, #14
 8007f88:	617b      	str	r3, [r7, #20]
 8007f8a:	e051      	b.n	8008030 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	4a35      	ldr	r2, [pc, #212]	@ (8008064 <USB_SetTurnaroundTime+0x118>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d306      	bcc.n	8007fa2 <USB_SetTurnaroundTime+0x56>
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4a34      	ldr	r2, [pc, #208]	@ (8008068 <USB_SetTurnaroundTime+0x11c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d202      	bcs.n	8007fa2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007f9c:	230d      	movs	r3, #13
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	e046      	b.n	8008030 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	4a30      	ldr	r2, [pc, #192]	@ (8008068 <USB_SetTurnaroundTime+0x11c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d306      	bcc.n	8007fb8 <USB_SetTurnaroundTime+0x6c>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	4a2f      	ldr	r2, [pc, #188]	@ (800806c <USB_SetTurnaroundTime+0x120>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d802      	bhi.n	8007fb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007fb2:	230c      	movs	r3, #12
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	e03b      	b.n	8008030 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4a2c      	ldr	r2, [pc, #176]	@ (800806c <USB_SetTurnaroundTime+0x120>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d906      	bls.n	8007fce <USB_SetTurnaroundTime+0x82>
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8008070 <USB_SetTurnaroundTime+0x124>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d802      	bhi.n	8007fce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007fc8:	230b      	movs	r3, #11
 8007fca:	617b      	str	r3, [r7, #20]
 8007fcc:	e030      	b.n	8008030 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4a27      	ldr	r2, [pc, #156]	@ (8008070 <USB_SetTurnaroundTime+0x124>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d906      	bls.n	8007fe4 <USB_SetTurnaroundTime+0x98>
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4a26      	ldr	r2, [pc, #152]	@ (8008074 <USB_SetTurnaroundTime+0x128>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d802      	bhi.n	8007fe4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007fde:	230a      	movs	r3, #10
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	e025      	b.n	8008030 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4a23      	ldr	r2, [pc, #140]	@ (8008074 <USB_SetTurnaroundTime+0x128>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d906      	bls.n	8007ffa <USB_SetTurnaroundTime+0xae>
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	4a22      	ldr	r2, [pc, #136]	@ (8008078 <USB_SetTurnaroundTime+0x12c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d202      	bcs.n	8007ffa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ff4:	2309      	movs	r3, #9
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	e01a      	b.n	8008030 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8008078 <USB_SetTurnaroundTime+0x12c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d306      	bcc.n	8008010 <USB_SetTurnaroundTime+0xc4>
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	4a1d      	ldr	r2, [pc, #116]	@ (800807c <USB_SetTurnaroundTime+0x130>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d802      	bhi.n	8008010 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800800a:	2308      	movs	r3, #8
 800800c:	617b      	str	r3, [r7, #20]
 800800e:	e00f      	b.n	8008030 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4a1a      	ldr	r2, [pc, #104]	@ (800807c <USB_SetTurnaroundTime+0x130>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d906      	bls.n	8008026 <USB_SetTurnaroundTime+0xda>
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4a19      	ldr	r2, [pc, #100]	@ (8008080 <USB_SetTurnaroundTime+0x134>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d202      	bcs.n	8008026 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008020:	2307      	movs	r3, #7
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	e004      	b.n	8008030 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008026:	2306      	movs	r3, #6
 8008028:	617b      	str	r3, [r7, #20]
 800802a:	e001      	b.n	8008030 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800802c:	2309      	movs	r3, #9
 800802e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	68da      	ldr	r2, [r3, #12]
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	029b      	lsls	r3, r3, #10
 8008044:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008048:	431a      	orrs	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	371c      	adds	r7, #28
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	00d8acbf 	.word	0x00d8acbf
 8008060:	00e4e1c0 	.word	0x00e4e1c0
 8008064:	00f42400 	.word	0x00f42400
 8008068:	01067380 	.word	0x01067380
 800806c:	011a499f 	.word	0x011a499f
 8008070:	01312cff 	.word	0x01312cff
 8008074:	014ca43f 	.word	0x014ca43f
 8008078:	016e3600 	.word	0x016e3600
 800807c:	01a6ab1f 	.word	0x01a6ab1f
 8008080:	01e84800 	.word	0x01e84800

08008084 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f043 0201 	orr.w	r2, r3, #1
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f023 0201 	bic.w	r2, r3, #1
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d115      	bne.n	8008116 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80080f6:	2001      	movs	r0, #1
 80080f8:	f7f9 fb74 	bl	80017e4 <HAL_Delay>
      ms++;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3301      	adds	r3, #1
 8008100:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f001 f8ab 	bl	800925e <USB_GetMode>
 8008108:	4603      	mov	r3, r0
 800810a:	2b01      	cmp	r3, #1
 800810c:	d01e      	beq.n	800814c <USB_SetCurrentMode+0x84>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2b31      	cmp	r3, #49	@ 0x31
 8008112:	d9f0      	bls.n	80080f6 <USB_SetCurrentMode+0x2e>
 8008114:	e01a      	b.n	800814c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d115      	bne.n	8008148 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008128:	2001      	movs	r0, #1
 800812a:	f7f9 fb5b 	bl	80017e4 <HAL_Delay>
      ms++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3301      	adds	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 f892 	bl	800925e <USB_GetMode>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d005      	beq.n	800814c <USB_SetCurrentMode+0x84>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b31      	cmp	r3, #49	@ 0x31
 8008144:	d9f0      	bls.n	8008128 <USB_SetCurrentMode+0x60>
 8008146:	e001      	b.n	800814c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e005      	b.n	8008158 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b32      	cmp	r3, #50	@ 0x32
 8008150:	d101      	bne.n	8008156 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e000      	b.n	8008158 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008160:	b084      	sub	sp, #16
 8008162:	b580      	push	{r7, lr}
 8008164:	b086      	sub	sp, #24
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800816e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800817a:	2300      	movs	r3, #0
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	e009      	b.n	8008194 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	3340      	adds	r3, #64	@ 0x40
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	2200      	movs	r2, #0
 800818c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	3301      	adds	r3, #1
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2b0e      	cmp	r3, #14
 8008198:	d9f2      	bls.n	8008180 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800819a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d11c      	bne.n	80081da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081ae:	f043 0302 	orr.w	r3, r3, #2
 80081b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	e005      	b.n	80081e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081ec:	461a      	mov	r2, r3
 80081ee:	2300      	movs	r3, #0
 80081f0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80081f2:	2103      	movs	r1, #3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f959 	bl	80084ac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081fa:	2110      	movs	r1, #16
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f8f1 	bl	80083e4 <USB_FlushTxFifo>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f91d 	bl	800844c <USB_FlushRxFifo>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008222:	461a      	mov	r2, r3
 8008224:	2300      	movs	r3, #0
 8008226:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800822e:	461a      	mov	r2, r3
 8008230:	2300      	movs	r3, #0
 8008232:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800823a:	461a      	mov	r2, r3
 800823c:	2300      	movs	r3, #0
 800823e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008240:	2300      	movs	r3, #0
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	e043      	b.n	80082ce <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008258:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800825c:	d118      	bne.n	8008290 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008270:	461a      	mov	r2, r3
 8008272:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	e013      	b.n	80082a2 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008286:	461a      	mov	r2, r3
 8008288:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	e008      	b.n	80082a2 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800829c:	461a      	mov	r2, r3
 800829e:	2300      	movs	r3, #0
 80082a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ae:	461a      	mov	r2, r3
 80082b0:	2300      	movs	r3, #0
 80082b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c0:	461a      	mov	r2, r3
 80082c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80082c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	3301      	adds	r3, #1
 80082cc:	613b      	str	r3, [r7, #16]
 80082ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d3b7      	bcc.n	8008246 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082d6:	2300      	movs	r3, #0
 80082d8:	613b      	str	r3, [r7, #16]
 80082da:	e043      	b.n	8008364 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082f2:	d118      	bne.n	8008326 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10a      	bne.n	8008310 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008306:	461a      	mov	r2, r3
 8008308:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	e013      	b.n	8008338 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800831c:	461a      	mov	r2, r3
 800831e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	e008      	b.n	8008338 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008332:	461a      	mov	r2, r3
 8008334:	2300      	movs	r3, #0
 8008336:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008344:	461a      	mov	r2, r3
 8008346:	2300      	movs	r3, #0
 8008348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008356:	461a      	mov	r2, r3
 8008358:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800835c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	3301      	adds	r3, #1
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	429a      	cmp	r2, r3
 800836a:	d3b7      	bcc.n	80082dc <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800837a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800837e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800838c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	f043 0210 	orr.w	r2, r3, #16
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699a      	ldr	r2, [r3, #24]
 800839e:	4b10      	ldr	r3, [pc, #64]	@ (80083e0 <USB_DevInit+0x280>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80083a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	f043 0208 	orr.w	r2, r3, #8
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80083b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d107      	bne.n	80083ce <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083c6:	f043 0304 	orr.w	r3, r3, #4
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083da:	b004      	add	sp, #16
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	803c3800 	.word	0x803c3800

080083e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3301      	adds	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4a13      	ldr	r2, [pc, #76]	@ (8008448 <USB_FlushTxFifo+0x64>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d901      	bls.n	8008404 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e01b      	b.n	800843c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	daf2      	bge.n	80083f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	019b      	lsls	r3, r3, #6
 8008414:	f043 0220 	orr.w	r2, r3, #32
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3301      	adds	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4a08      	ldr	r2, [pc, #32]	@ (8008448 <USB_FlushTxFifo+0x64>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d901      	bls.n	800842e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e006      	b.n	800843c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b20      	cmp	r3, #32
 8008438:	d0f0      	beq.n	800841c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	00030d40 	.word	0x00030d40

0800844c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4a11      	ldr	r2, [pc, #68]	@ (80084a8 <USB_FlushRxFifo+0x5c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d901      	bls.n	800846a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e018      	b.n	800849c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	daf2      	bge.n	8008458 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2210      	movs	r2, #16
 800847a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3301      	adds	r3, #1
 8008480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	4a08      	ldr	r2, [pc, #32]	@ (80084a8 <USB_FlushRxFifo+0x5c>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d901      	bls.n	800848e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e006      	b.n	800849c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	f003 0310 	and.w	r3, r3, #16
 8008496:	2b10      	cmp	r3, #16
 8008498:	d0f0      	beq.n	800847c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	00030d40 	.word	0x00030d40

080084ac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	68f9      	ldr	r1, [r7, #12]
 80084c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084cc:	4313      	orrs	r3, r2
 80084ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80084de:	b480      	push	{r7}
 80084e0:	b087      	sub	sp, #28
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 0306 	and.w	r3, r3, #6
 80084f6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d002      	beq.n	8008504 <USB_GetDevSpeed+0x26>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b06      	cmp	r3, #6
 8008502:	d102      	bne.n	800850a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008504:	2302      	movs	r3, #2
 8008506:	75fb      	strb	r3, [r7, #23]
 8008508:	e001      	b.n	800850e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800850a:	230f      	movs	r3, #15
 800850c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800850e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008510:	4618      	mov	r0, r3
 8008512:	371c      	adds	r7, #28
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d13a      	bne.n	80085ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800853e:	69da      	ldr	r2, [r3, #28]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	f003 030f 	and.w	r3, r3, #15
 8008548:	2101      	movs	r1, #1
 800854a:	fa01 f303 	lsl.w	r3, r1, r3
 800854e:	b29b      	uxth	r3, r3
 8008550:	68f9      	ldr	r1, [r7, #12]
 8008552:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008556:	4313      	orrs	r3, r2
 8008558:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d155      	bne.n	800861c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	791b      	ldrb	r3, [r3, #4]
 800858a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800858c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	059b      	lsls	r3, r3, #22
 8008592:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008594:	4313      	orrs	r3, r2
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	e036      	b.n	800861c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085b4:	69da      	ldr	r2, [r3, #28]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	f003 030f 	and.w	r3, r3, #15
 80085be:	2101      	movs	r1, #1
 80085c0:	fa01 f303 	lsl.w	r3, r1, r3
 80085c4:	041b      	lsls	r3, r3, #16
 80085c6:	68f9      	ldr	r1, [r7, #12]
 80085c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085cc:	4313      	orrs	r3, r2
 80085ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d11a      	bne.n	800861c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	791b      	ldrb	r3, [r3, #4]
 8008600:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008602:	430b      	orrs	r3, r1
 8008604:	4313      	orrs	r3, r2
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	0151      	lsls	r1, r2, #5
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	440a      	add	r2, r1
 800860e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800861a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
	...

0800862c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	785b      	ldrb	r3, [r3, #1]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d161      	bne.n	800870c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	015a      	lsls	r2, r3, #5
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4413      	add	r3, r2
 8008650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800865a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800865e:	d11f      	bne.n	80086a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	440a      	add	r2, r1
 8008676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800867a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800867e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	0151      	lsls	r1, r2, #5
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	440a      	add	r2, r1
 8008696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800869a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800869e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	2101      	movs	r1, #1
 80086b2:	fa01 f303 	lsl.w	r3, r1, r3
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	43db      	mvns	r3, r3
 80086ba:	68f9      	ldr	r1, [r7, #12]
 80086bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086c0:	4013      	ands	r3, r2
 80086c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ca:	69da      	ldr	r2, [r3, #28]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	2101      	movs	r1, #1
 80086d6:	fa01 f303 	lsl.w	r3, r1, r3
 80086da:	b29b      	uxth	r3, r3
 80086dc:	43db      	mvns	r3, r3
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086e4:	4013      	ands	r3, r2
 80086e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	0159      	lsls	r1, r3, #5
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	440b      	add	r3, r1
 80086fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008702:	4619      	mov	r1, r3
 8008704:	4b35      	ldr	r3, [pc, #212]	@ (80087dc <USB_DeactivateEndpoint+0x1b0>)
 8008706:	4013      	ands	r3, r2
 8008708:	600b      	str	r3, [r1, #0]
 800870a:	e060      	b.n	80087ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800871e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008722:	d11f      	bne.n	8008764 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	0151      	lsls	r1, r2, #5
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	440a      	add	r2, r1
 800873a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800873e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008742:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	0151      	lsls	r1, r2, #5
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	440a      	add	r2, r1
 800875a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800875e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008762:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800876a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	f003 030f 	and.w	r3, r3, #15
 8008774:	2101      	movs	r1, #1
 8008776:	fa01 f303 	lsl.w	r3, r1, r3
 800877a:	041b      	lsls	r3, r3, #16
 800877c:	43db      	mvns	r3, r3
 800877e:	68f9      	ldr	r1, [r7, #12]
 8008780:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008784:	4013      	ands	r3, r2
 8008786:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800878e:	69da      	ldr	r2, [r3, #28]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	f003 030f 	and.w	r3, r3, #15
 8008798:	2101      	movs	r1, #1
 800879a:	fa01 f303 	lsl.w	r3, r1, r3
 800879e:	041b      	lsls	r3, r3, #16
 80087a0:	43db      	mvns	r3, r3
 80087a2:	68f9      	ldr	r1, [r7, #12]
 80087a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087a8:	4013      	ands	r3, r2
 80087aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	0159      	lsls	r1, r3, #5
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	440b      	add	r3, r1
 80087c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087c6:	4619      	mov	r1, r3
 80087c8:	4b05      	ldr	r3, [pc, #20]	@ (80087e0 <USB_DeactivateEndpoint+0x1b4>)
 80087ca:	4013      	ands	r3, r2
 80087cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	ec337800 	.word	0xec337800
 80087e0:	eff37800 	.word	0xeff37800

080087e4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	785b      	ldrb	r3, [r3, #1]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	f040 8128 	bne.w	8008a52 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d132      	bne.n	8008870 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	4413      	add	r3, r2
 8008812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	0151      	lsls	r1, r2, #5
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	440a      	add	r2, r1
 8008820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008824:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008828:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800882c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	0151      	lsls	r1, r2, #5
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	440a      	add	r2, r1
 8008844:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008848:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800884c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	0151      	lsls	r1, r2, #5
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	440a      	add	r2, r1
 8008864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008868:	0cdb      	lsrs	r3, r3, #19
 800886a:	04db      	lsls	r3, r3, #19
 800886c:	6113      	str	r3, [r2, #16]
 800886e:	e092      	b.n	8008996 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	440a      	add	r2, r1
 8008886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800888a:	0cdb      	lsrs	r3, r3, #19
 800888c:	04db      	lsls	r3, r3, #19
 800888e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	4413      	add	r3, r2
 8008898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	0151      	lsls	r1, r2, #5
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	440a      	add	r2, r1
 80088a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80088ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80088b2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d11a      	bne.n	80088f0 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	691a      	ldr	r2, [r3, #16]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d903      	bls.n	80088ce <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	689a      	ldr	r2, [r3, #8]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	0151      	lsls	r1, r2, #5
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	440a      	add	r2, r1
 80088e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088ec:	6113      	str	r3, [r2, #16]
 80088ee:	e01b      	b.n	8008928 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088fc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	6919      	ldr	r1, [r3, #16]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	440b      	add	r3, r1
 8008908:	1e59      	subs	r1, r3, #1
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008912:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008914:	4b8d      	ldr	r3, [pc, #564]	@ (8008b4c <USB_EPStartXfer+0x368>)
 8008916:	400b      	ands	r3, r1
 8008918:	6939      	ldr	r1, [r7, #16]
 800891a:	0148      	lsls	r0, r1, #5
 800891c:	6979      	ldr	r1, [r7, #20]
 800891e:	4401      	add	r1, r0
 8008920:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008924:	4313      	orrs	r3, r2
 8008926:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800893e:	6939      	ldr	r1, [r7, #16]
 8008940:	0148      	lsls	r0, r1, #5
 8008942:	6979      	ldr	r1, [r7, #20]
 8008944:	4401      	add	r1, r0
 8008946:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800894a:	4313      	orrs	r3, r2
 800894c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	791b      	ldrb	r3, [r3, #4]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d11f      	bne.n	8008996 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	0151      	lsls	r1, r2, #5
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	440a      	add	r2, r1
 800896c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008970:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008974:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008990:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008994:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	0151      	lsls	r1, r2, #5
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	440a      	add	r2, r1
 80089ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80089b4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	791b      	ldrb	r3, [r3, #4]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d015      	beq.n	80089ea <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f000 8139 	beq.w	8008c3a <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	f003 030f 	and.w	r3, r3, #15
 80089d8:	2101      	movs	r1, #1
 80089da:	fa01 f303 	lsl.w	r3, r1, r3
 80089de:	6979      	ldr	r1, [r7, #20]
 80089e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089e4:	4313      	orrs	r3, r2
 80089e6:	634b      	str	r3, [r1, #52]	@ 0x34
 80089e8:	e127      	b.n	8008c3a <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d110      	bne.n	8008a1c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	e00f      	b.n	8008a3c <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	0151      	lsls	r1, r2, #5
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	440a      	add	r2, r1
 8008a32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a3a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	68d9      	ldr	r1, [r3, #12]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f9a6 	bl	8008d9c <USB_WritePacket>
 8008a50:	e0f3      	b.n	8008c3a <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	0151      	lsls	r1, r2, #5
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	440a      	add	r2, r1
 8008a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a6c:	0cdb      	lsrs	r3, r3, #19
 8008a6e:	04db      	lsls	r3, r3, #19
 8008a70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a8c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a90:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a94:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d12f      	bne.n	8008afc <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aca:	6939      	ldr	r1, [r7, #16]
 8008acc:	0148      	lsls	r0, r1, #5
 8008ace:	6979      	ldr	r1, [r7, #20]
 8008ad0:	4401      	add	r1, r0
 8008ad2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008af4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008af8:	6113      	str	r3, [r2, #16]
 8008afa:	e061      	b.n	8008bc0 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d125      	bne.n	8008b50 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b10:	691a      	ldr	r2, [r3, #16]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b1a:	6939      	ldr	r1, [r7, #16]
 8008b1c:	0148      	lsls	r0, r1, #5
 8008b1e:	6979      	ldr	r1, [r7, #20]
 8008b20:	4401      	add	r1, r0
 8008b22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b26:	4313      	orrs	r3, r2
 8008b28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	0151      	lsls	r1, r2, #5
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	440a      	add	r2, r1
 8008b40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b48:	6113      	str	r3, [r2, #16]
 8008b4a:	e039      	b.n	8008bc0 <USB_EPStartXfer+0x3dc>
 8008b4c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	691a      	ldr	r2, [r3, #16]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	4413      	add	r3, r2
 8008b5a:	1e5a      	subs	r2, r3, #1
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b64:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	89fa      	ldrh	r2, [r7, #14]
 8008b6c:	fb03 f202 	mul.w	r2, r3, r2
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b80:	691a      	ldr	r2, [r3, #16]
 8008b82:	89fb      	ldrh	r3, [r7, #14]
 8008b84:	04d9      	lsls	r1, r3, #19
 8008b86:	4b2f      	ldr	r3, [pc, #188]	@ (8008c44 <USB_EPStartXfer+0x460>)
 8008b88:	400b      	ands	r3, r1
 8008b8a:	6939      	ldr	r1, [r7, #16]
 8008b8c:	0148      	lsls	r0, r1, #5
 8008b8e:	6979      	ldr	r1, [r7, #20]
 8008b90:	4401      	add	r1, r0
 8008b92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b96:	4313      	orrs	r3, r2
 8008b98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bb0:	6939      	ldr	r1, [r7, #16]
 8008bb2:	0148      	lsls	r0, r1, #5
 8008bb4:	6979      	ldr	r1, [r7, #20]
 8008bb6:	4401      	add	r1, r0
 8008bb8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	791b      	ldrb	r3, [r3, #4]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d128      	bne.n	8008c1a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d110      	bne.n	8008bfa <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bf2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	e00f      	b.n	8008c1a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	015a      	lsls	r2, r3, #5
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	0151      	lsls	r1, r2, #5
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	440a      	add	r2, r1
 8008c10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c18:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	015a      	lsls	r2, r3, #5
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	0151      	lsls	r1, r2, #5
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	440a      	add	r2, r1
 8008c30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c34:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	1ff80000 	.word	0x1ff80000

08008c48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d14a      	bne.n	8008cfc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c7e:	f040 8086 	bne.w	8008d8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	7812      	ldrb	r2, [r2, #0]
 8008c96:	0151      	lsls	r1, r2, #5
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ca0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ca4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	7812      	ldrb	r2, [r2, #0]
 8008cba:	0151      	lsls	r1, r2, #5
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	440a      	add	r2, r1
 8008cc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d902      	bls.n	8008ce0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	75fb      	strb	r3, [r7, #23]
          break;
 8008cde:	e056      	b.n	8008d8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cf8:	d0e7      	beq.n	8008cca <USB_EPStopXfer+0x82>
 8008cfa:	e048      	b.n	8008d8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d14:	d13b      	bne.n	8008d8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	7812      	ldrb	r2, [r2, #0]
 8008d2a:	0151      	lsls	r1, r2, #5
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	440a      	add	r2, r1
 8008d30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	7812      	ldrb	r2, [r2, #0]
 8008d4e:	0151      	lsls	r1, r2, #5
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	440a      	add	r2, r1
 8008d54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3301      	adds	r3, #1
 8008d62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d902      	bls.n	8008d74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	75fb      	strb	r3, [r7, #23]
          break;
 8008d72:	e00c      	b.n	8008d8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d8c:	d0e7      	beq.n	8008d5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b089      	sub	sp, #36	@ 0x24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	4611      	mov	r1, r2
 8008da8:	461a      	mov	r2, r3
 8008daa:	460b      	mov	r3, r1
 8008dac:	71fb      	strb	r3, [r7, #7]
 8008dae:	4613      	mov	r3, r2
 8008db0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008dba:	88bb      	ldrh	r3, [r7, #4]
 8008dbc:	3303      	adds	r3, #3
 8008dbe:	089b      	lsrs	r3, r3, #2
 8008dc0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
 8008dc6:	e018      	b.n	8008dfa <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	031a      	lsls	r2, r3, #12
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	3301      	adds	r3, #1
 8008de0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	3301      	adds	r3, #1
 8008de6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	3301      	adds	r3, #1
 8008dec:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	3301      	adds	r3, #1
 8008df2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	3301      	adds	r3, #1
 8008df8:	61bb      	str	r3, [r7, #24]
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d3e2      	bcc.n	8008dc8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3724      	adds	r7, #36	@ 0x24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b08b      	sub	sp, #44	@ 0x2c
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e26:	88fb      	ldrh	r3, [r7, #6]
 8008e28:	089b      	lsrs	r3, r3, #2
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e2e:	88fb      	ldrh	r3, [r7, #6]
 8008e30:	f003 0303 	and.w	r3, r3, #3
 8008e34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e36:	2300      	movs	r3, #0
 8008e38:	623b      	str	r3, [r7, #32]
 8008e3a:	e014      	b.n	8008e66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e50:	3301      	adds	r3, #1
 8008e52:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	3301      	adds	r3, #1
 8008e58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008e60:	6a3b      	ldr	r3, [r7, #32]
 8008e62:	3301      	adds	r3, #1
 8008e64:	623b      	str	r3, [r7, #32]
 8008e66:	6a3a      	ldr	r2, [r7, #32]
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d3e6      	bcc.n	8008e3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e6e:	8bfb      	ldrh	r3, [r7, #30]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01e      	beq.n	8008eb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f107 0310 	add.w	r3, r7, #16
 8008e84:	6812      	ldr	r2, [r2, #0]
 8008e86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	fa22 f303 	lsr.w	r3, r2, r3
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	701a      	strb	r2, [r3, #0]
      i++;
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008ea6:	8bfb      	ldrh	r3, [r7, #30]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008eac:	8bfb      	ldrh	r3, [r7, #30]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1ea      	bne.n	8008e88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	372c      	adds	r7, #44	@ 0x2c
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	785b      	ldrb	r3, [r3, #1]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d12c      	bne.n	8008f36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	db12      	blt.n	8008f14 <USB_EPSetStall+0x54>
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00f      	beq.n	8008f14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	0151      	lsls	r1, r2, #5
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	440a      	add	r2, r1
 8008f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	0151      	lsls	r1, r2, #5
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	440a      	add	r2, r1
 8008f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f32:	6013      	str	r3, [r2, #0]
 8008f34:	e02b      	b.n	8008f8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	015a      	lsls	r2, r3, #5
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	db12      	blt.n	8008f6e <USB_EPSetStall+0xae>
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00f      	beq.n	8008f6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	0151      	lsls	r1, r2, #5
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	440a      	add	r2, r1
 8008f64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	0151      	lsls	r1, r2, #5
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	440a      	add	r2, r1
 8008f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	785b      	ldrb	r3, [r3, #1]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d128      	bne.n	800900a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	0151      	lsls	r1, r2, #5
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	440a      	add	r2, r1
 8008fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008fd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	791b      	ldrb	r3, [r3, #4]
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d003      	beq.n	8008fe8 <USB_EPClearStall+0x4c>
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	791b      	ldrb	r3, [r3, #4]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d138      	bne.n	800905a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	e027      	b.n	800905a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	0151      	lsls	r1, r2, #5
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	440a      	add	r2, r1
 8009020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009024:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009028:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	791b      	ldrb	r3, [r3, #4]
 800902e:	2b03      	cmp	r3, #3
 8009030:	d003      	beq.n	800903a <USB_EPClearStall+0x9e>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	791b      	ldrb	r3, [r3, #4]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d10f      	bne.n	800905a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4413      	add	r3, r2
 8009042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	0151      	lsls	r1, r2, #5
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	440a      	add	r2, r1
 8009050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009058:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009086:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800908a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	78fb      	ldrb	r3, [r7, #3]
 8009096:	011b      	lsls	r3, r3, #4
 8009098:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800909c:	68f9      	ldr	r1, [r7, #12]
 800909e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090a2:	4313      	orrs	r3, r2
 80090a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090ce:	f023 0303 	bic.w	r3, r3, #3
 80090d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090e2:	f023 0302 	bic.w	r3, r3, #2
 80090e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b085      	sub	sp, #20
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009110:	f023 0303 	bic.w	r3, r3, #3
 8009114:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009124:	f043 0302 	orr.w	r3, r3, #2
 8009128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	4013      	ands	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009150:	68fb      	ldr	r3, [r7, #12]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800915e:	b480      	push	{r7}
 8009160:	b085      	sub	sp, #20
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	4013      	ands	r3, r2
 8009180:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	0c1b      	lsrs	r3, r3, #16
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009192:	b480      	push	{r7}
 8009194:	b085      	sub	sp, #20
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	4013      	ands	r3, r2
 80091b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	b29b      	uxth	r3, r3
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b085      	sub	sp, #20
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091d6:	78fb      	ldrb	r3, [r7, #3]
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	4013      	ands	r3, r2
 80091f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091f4:	68bb      	ldr	r3, [r7, #8]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009202:	b480      	push	{r7}
 8009204:	b087      	sub	sp, #28
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	460b      	mov	r3, r1
 800920c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009224:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009226:	78fb      	ldrb	r3, [r7, #3]
 8009228:	f003 030f 	and.w	r3, r3, #15
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	fa22 f303 	lsr.w	r3, r2, r3
 8009232:	01db      	lsls	r3, r3, #7
 8009234:	b2db      	uxtb	r3, r3
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4313      	orrs	r3, r2
 800923a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	4413      	add	r3, r2
 8009244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4013      	ands	r3, r2
 800924e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009250:	68bb      	ldr	r3, [r7, #8]
}
 8009252:	4618      	mov	r0, r3
 8009254:	371c      	adds	r7, #28
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800925e:	b480      	push	{r7}
 8009260:	b083      	sub	sp, #12
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	f003 0301 	and.w	r3, r3, #1
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009294:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009298:	f023 0307 	bic.w	r3, r3, #7
 800929c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	333c      	adds	r3, #60	@ 0x3c
 80092d2:	3304      	adds	r3, #4
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4a1c      	ldr	r2, [pc, #112]	@ (800934c <USB_EP0_OutStart+0x8c>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d90a      	bls.n	80092f6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092f0:	d101      	bne.n	80092f6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	e024      	b.n	8009340 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fc:	461a      	mov	r2, r3
 80092fe:	2300      	movs	r3, #0
 8009300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009310:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009324:	f043 0318 	orr.w	r3, r3, #24
 8009328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009338:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800933c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	4f54300a 	.word	0x4f54300a

08009350 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009358:	2300      	movs	r3, #0
 800935a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3301      	adds	r3, #1
 8009360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4a13      	ldr	r2, [pc, #76]	@ (80093b4 <USB_CoreReset+0x64>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d901      	bls.n	800936e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e01b      	b.n	80093a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	daf2      	bge.n	800935c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	f043 0201 	orr.w	r2, r3, #1
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	3301      	adds	r3, #1
 800938a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4a09      	ldr	r2, [pc, #36]	@ (80093b4 <USB_CoreReset+0x64>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d901      	bls.n	8009398 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e006      	b.n	80093a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d0f0      	beq.n	8009386 <USB_CoreReset+0x36>

  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	00030d40 	.word	0x00030d40

080093b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80093c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80093c8:	f002 fe2c 	bl	800c024 <USBD_static_malloc>
 80093cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	32b0      	adds	r2, #176	@ 0xb0
 80093de:	2100      	movs	r1, #0
 80093e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80093e4:	2302      	movs	r3, #2
 80093e6:	e0d4      	b.n	8009592 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80093e8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80093ec:	2100      	movs	r1, #0
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f002 fe36 	bl	800c060 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	32b0      	adds	r2, #176	@ 0xb0
 80093fe:	68f9      	ldr	r1, [r7, #12]
 8009400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	32b0      	adds	r2, #176	@ 0xb0
 800940e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	7c1b      	ldrb	r3, [r3, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d138      	bne.n	8009492 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009420:	4b5e      	ldr	r3, [pc, #376]	@ (800959c <USBD_CDC_Init+0x1e4>)
 8009422:	7819      	ldrb	r1, [r3, #0]
 8009424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009428:	2202      	movs	r2, #2
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f002 fbe6 	bl	800bbfc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009430:	4b5a      	ldr	r3, [pc, #360]	@ (800959c <USBD_CDC_Init+0x1e4>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 020f 	and.w	r2, r3, #15
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	440b      	add	r3, r1
 8009444:	3324      	adds	r3, #36	@ 0x24
 8009446:	2201      	movs	r2, #1
 8009448:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800944a:	4b55      	ldr	r3, [pc, #340]	@ (80095a0 <USBD_CDC_Init+0x1e8>)
 800944c:	7819      	ldrb	r1, [r3, #0]
 800944e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009452:	2202      	movs	r2, #2
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f002 fbd1 	bl	800bbfc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800945a:	4b51      	ldr	r3, [pc, #324]	@ (80095a0 <USBD_CDC_Init+0x1e8>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	f003 020f 	and.w	r2, r3, #15
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	440b      	add	r3, r1
 800946e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009472:	2201      	movs	r2, #1
 8009474:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009476:	4b4b      	ldr	r3, [pc, #300]	@ (80095a4 <USBD_CDC_Init+0x1ec>)
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	f003 020f 	and.w	r2, r3, #15
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	440b      	add	r3, r1
 800948a:	3326      	adds	r3, #38	@ 0x26
 800948c:	2210      	movs	r2, #16
 800948e:	801a      	strh	r2, [r3, #0]
 8009490:	e035      	b.n	80094fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009492:	4b42      	ldr	r3, [pc, #264]	@ (800959c <USBD_CDC_Init+0x1e4>)
 8009494:	7819      	ldrb	r1, [r3, #0]
 8009496:	2340      	movs	r3, #64	@ 0x40
 8009498:	2202      	movs	r2, #2
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f002 fbae 	bl	800bbfc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80094a0:	4b3e      	ldr	r3, [pc, #248]	@ (800959c <USBD_CDC_Init+0x1e4>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	f003 020f 	and.w	r2, r3, #15
 80094a8:	6879      	ldr	r1, [r7, #4]
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	440b      	add	r3, r1
 80094b4:	3324      	adds	r3, #36	@ 0x24
 80094b6:	2201      	movs	r2, #1
 80094b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094ba:	4b39      	ldr	r3, [pc, #228]	@ (80095a0 <USBD_CDC_Init+0x1e8>)
 80094bc:	7819      	ldrb	r1, [r3, #0]
 80094be:	2340      	movs	r3, #64	@ 0x40
 80094c0:	2202      	movs	r2, #2
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f002 fb9a 	bl	800bbfc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094c8:	4b35      	ldr	r3, [pc, #212]	@ (80095a0 <USBD_CDC_Init+0x1e8>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	f003 020f 	and.w	r2, r3, #15
 80094d0:	6879      	ldr	r1, [r7, #4]
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	440b      	add	r3, r1
 80094dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094e0:	2201      	movs	r2, #1
 80094e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80094e4:	4b2f      	ldr	r3, [pc, #188]	@ (80095a4 <USBD_CDC_Init+0x1ec>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	f003 020f 	and.w	r2, r3, #15
 80094ec:	6879      	ldr	r1, [r7, #4]
 80094ee:	4613      	mov	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	440b      	add	r3, r1
 80094f8:	3326      	adds	r3, #38	@ 0x26
 80094fa:	2210      	movs	r2, #16
 80094fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80094fe:	4b29      	ldr	r3, [pc, #164]	@ (80095a4 <USBD_CDC_Init+0x1ec>)
 8009500:	7819      	ldrb	r1, [r3, #0]
 8009502:	2308      	movs	r3, #8
 8009504:	2203      	movs	r2, #3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f002 fb78 	bl	800bbfc <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800950c:	4b25      	ldr	r3, [pc, #148]	@ (80095a4 <USBD_CDC_Init+0x1ec>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	f003 020f 	and.w	r2, r3, #15
 8009514:	6879      	ldr	r1, [r7, #4]
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	440b      	add	r3, r1
 8009520:	3324      	adds	r3, #36	@ 0x24
 8009522:	2201      	movs	r2, #1
 8009524:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	33b0      	adds	r3, #176	@ 0xb0
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800955c:	2302      	movs	r3, #2
 800955e:	e018      	b.n	8009592 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	7c1b      	ldrb	r3, [r3, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009568:	4b0d      	ldr	r3, [pc, #52]	@ (80095a0 <USBD_CDC_Init+0x1e8>)
 800956a:	7819      	ldrb	r1, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009572:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f002 fcba 	bl	800bef0 <USBD_LL_PrepareReceive>
 800957c:	e008      	b.n	8009590 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800957e:	4b08      	ldr	r3, [pc, #32]	@ (80095a0 <USBD_CDC_Init+0x1e8>)
 8009580:	7819      	ldrb	r1, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009588:	2340      	movs	r3, #64	@ 0x40
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f002 fcb0 	bl	800bef0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20000093 	.word	0x20000093
 80095a0:	20000094 	.word	0x20000094
 80095a4:	20000095 	.word	0x20000095

080095a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80095b4:	4b3a      	ldr	r3, [pc, #232]	@ (80096a0 <USBD_CDC_DeInit+0xf8>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f002 fb5c 	bl	800bc78 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80095c0:	4b37      	ldr	r3, [pc, #220]	@ (80096a0 <USBD_CDC_DeInit+0xf8>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	f003 020f 	and.w	r2, r3, #15
 80095c8:	6879      	ldr	r1, [r7, #4]
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	3324      	adds	r3, #36	@ 0x24
 80095d6:	2200      	movs	r2, #0
 80095d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80095da:	4b32      	ldr	r3, [pc, #200]	@ (80096a4 <USBD_CDC_DeInit+0xfc>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f002 fb49 	bl	800bc78 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80095e6:	4b2f      	ldr	r3, [pc, #188]	@ (80096a4 <USBD_CDC_DeInit+0xfc>)
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	f003 020f 	and.w	r2, r3, #15
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	4613      	mov	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	440b      	add	r3, r1
 80095fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095fe:	2200      	movs	r2, #0
 8009600:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009602:	4b29      	ldr	r3, [pc, #164]	@ (80096a8 <USBD_CDC_DeInit+0x100>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f002 fb35 	bl	800bc78 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800960e:	4b26      	ldr	r3, [pc, #152]	@ (80096a8 <USBD_CDC_DeInit+0x100>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	f003 020f 	and.w	r2, r3, #15
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	4613      	mov	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	3324      	adds	r3, #36	@ 0x24
 8009624:	2200      	movs	r2, #0
 8009626:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009628:	4b1f      	ldr	r3, [pc, #124]	@ (80096a8 <USBD_CDC_DeInit+0x100>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	f003 020f 	and.w	r2, r3, #15
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	4613      	mov	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	440b      	add	r3, r1
 800963c:	3326      	adds	r3, #38	@ 0x26
 800963e:	2200      	movs	r2, #0
 8009640:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	32b0      	adds	r2, #176	@ 0xb0
 800964c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d01f      	beq.n	8009694 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	33b0      	adds	r3, #176	@ 0xb0
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	32b0      	adds	r2, #176	@ 0xb0
 8009672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009676:	4618      	mov	r0, r3
 8009678:	f002 fce2 	bl	800c040 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	32b0      	adds	r2, #176	@ 0xb0
 8009686:	2100      	movs	r1, #0
 8009688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20000093 	.word	0x20000093
 80096a4:	20000094 	.word	0x20000094
 80096a8:	20000095 	.word	0x20000095

080096ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	32b0      	adds	r2, #176	@ 0xb0
 80096c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80096d8:	2303      	movs	r3, #3
 80096da:	e0bf      	b.n	800985c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d050      	beq.n	800978a <USBD_CDC_Setup+0xde>
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	f040 80af 	bne.w	800984c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	88db      	ldrh	r3, [r3, #6]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d03a      	beq.n	800976c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	b25b      	sxtb	r3, r3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	da1b      	bge.n	8009738 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	33b0      	adds	r3, #176	@ 0xb0
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009716:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	88d2      	ldrh	r2, [r2, #6]
 800971c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	88db      	ldrh	r3, [r3, #6]
 8009722:	2b07      	cmp	r3, #7
 8009724:	bf28      	it	cs
 8009726:	2307      	movcs	r3, #7
 8009728:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	89fa      	ldrh	r2, [r7, #14]
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f001 fdb1 	bl	800b298 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009736:	e090      	b.n	800985a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	785a      	ldrb	r2, [r3, #1]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	88db      	ldrh	r3, [r3, #6]
 8009746:	2b3f      	cmp	r3, #63	@ 0x3f
 8009748:	d803      	bhi.n	8009752 <USBD_CDC_Setup+0xa6>
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	88db      	ldrh	r3, [r3, #6]
 800974e:	b2da      	uxtb	r2, r3
 8009750:	e000      	b.n	8009754 <USBD_CDC_Setup+0xa8>
 8009752:	2240      	movs	r2, #64	@ 0x40
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800975a:	6939      	ldr	r1, [r7, #16]
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009762:	461a      	mov	r2, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f001 fdc3 	bl	800b2f0 <USBD_CtlPrepareRx>
      break;
 800976a:	e076      	b.n	800985a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	33b0      	adds	r3, #176	@ 0xb0
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	7850      	ldrb	r0, [r2, #1]
 8009782:	2200      	movs	r2, #0
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	4798      	blx	r3
      break;
 8009788:	e067      	b.n	800985a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	785b      	ldrb	r3, [r3, #1]
 800978e:	2b0b      	cmp	r3, #11
 8009790:	d851      	bhi.n	8009836 <USBD_CDC_Setup+0x18a>
 8009792:	a201      	add	r2, pc, #4	@ (adr r2, 8009798 <USBD_CDC_Setup+0xec>)
 8009794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009798:	080097c9 	.word	0x080097c9
 800979c:	08009845 	.word	0x08009845
 80097a0:	08009837 	.word	0x08009837
 80097a4:	08009837 	.word	0x08009837
 80097a8:	08009837 	.word	0x08009837
 80097ac:	08009837 	.word	0x08009837
 80097b0:	08009837 	.word	0x08009837
 80097b4:	08009837 	.word	0x08009837
 80097b8:	08009837 	.word	0x08009837
 80097bc:	08009837 	.word	0x08009837
 80097c0:	080097f3 	.word	0x080097f3
 80097c4:	0800981d 	.word	0x0800981d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b03      	cmp	r3, #3
 80097d2:	d107      	bne.n	80097e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80097d4:	f107 030a 	add.w	r3, r7, #10
 80097d8:	2202      	movs	r2, #2
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f001 fd5b 	bl	800b298 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097e2:	e032      	b.n	800984a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f001 fce5 	bl	800b1b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80097ec:	2303      	movs	r3, #3
 80097ee:	75fb      	strb	r3, [r7, #23]
          break;
 80097f0:	e02b      	b.n	800984a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d107      	bne.n	800980e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80097fe:	f107 030d 	add.w	r3, r7, #13
 8009802:	2201      	movs	r2, #1
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f001 fd46 	bl	800b298 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800980c:	e01d      	b.n	800984a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f001 fcd0 	bl	800b1b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009816:	2303      	movs	r3, #3
 8009818:	75fb      	strb	r3, [r7, #23]
          break;
 800981a:	e016      	b.n	800984a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b03      	cmp	r3, #3
 8009826:	d00f      	beq.n	8009848 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 fcc3 	bl	800b1b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009830:	2303      	movs	r3, #3
 8009832:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009834:	e008      	b.n	8009848 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 fcbc 	bl	800b1b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800983e:	2303      	movs	r3, #3
 8009840:	75fb      	strb	r3, [r7, #23]
          break;
 8009842:	e002      	b.n	800984a <USBD_CDC_Setup+0x19e>
          break;
 8009844:	bf00      	nop
 8009846:	e008      	b.n	800985a <USBD_CDC_Setup+0x1ae>
          break;
 8009848:	bf00      	nop
      }
      break;
 800984a:	e006      	b.n	800985a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f001 fcb1 	bl	800b1b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009854:	2303      	movs	r3, #3
 8009856:	75fb      	strb	r3, [r7, #23]
      break;
 8009858:	bf00      	nop
  }

  return (uint8_t)ret;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009876:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	32b0      	adds	r2, #176	@ 0xb0
 8009882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800988a:	2303      	movs	r3, #3
 800988c:	e065      	b.n	800995a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	32b0      	adds	r2, #176	@ 0xb0
 8009898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800989e:	78fb      	ldrb	r3, [r7, #3]
 80098a0:	f003 020f 	and.w	r2, r3, #15
 80098a4:	6879      	ldr	r1, [r7, #4]
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	440b      	add	r3, r1
 80098b0:	3318      	adds	r3, #24
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d02f      	beq.n	8009918 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80098b8:	78fb      	ldrb	r3, [r7, #3]
 80098ba:	f003 020f 	and.w	r2, r3, #15
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	4613      	mov	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	3318      	adds	r3, #24
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	f003 010f 	and.w	r1, r3, #15
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	460b      	mov	r3, r1
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	440b      	add	r3, r1
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4403      	add	r3, r0
 80098e0:	3344      	adds	r3, #68	@ 0x44
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80098e8:	fb01 f303 	mul.w	r3, r1, r3
 80098ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d112      	bne.n	8009918 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	f003 020f 	and.w	r2, r3, #15
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	440b      	add	r3, r1
 8009904:	3318      	adds	r3, #24
 8009906:	2200      	movs	r2, #0
 8009908:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800990a:	78f9      	ldrb	r1, [r7, #3]
 800990c:	2300      	movs	r3, #0
 800990e:	2200      	movs	r2, #0
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f002 fab5 	bl	800be80 <USBD_LL_Transmit>
 8009916:	e01f      	b.n	8009958 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2200      	movs	r2, #0
 800991c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	33b0      	adds	r3, #176	@ 0xb0
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d010      	beq.n	8009958 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	33b0      	adds	r3, #176	@ 0xb0
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009954:	78fa      	ldrb	r2, [r7, #3]
 8009956:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	32b0      	adds	r2, #176	@ 0xb0
 8009978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	32b0      	adds	r2, #176	@ 0xb0
 8009988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009990:	2303      	movs	r3, #3
 8009992:	e01a      	b.n	80099ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	4619      	mov	r1, r3
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f002 fae1 	bl	800bf60 <USBD_LL_GetRxDataSize>
 800999e:	4602      	mov	r2, r0
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	33b0      	adds	r3, #176	@ 0xb0
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80099c4:	4611      	mov	r1, r2
 80099c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	32b0      	adds	r2, #176	@ 0xb0
 80099e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e024      	b.n	8009a3e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	33b0      	adds	r3, #176	@ 0xb0
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d019      	beq.n	8009a3c <USBD_CDC_EP0_RxReady+0x6a>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009a0e:	2bff      	cmp	r3, #255	@ 0xff
 8009a10:	d014      	beq.n	8009a3c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	33b0      	adds	r3, #176	@ 0xb0
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009a2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	22ff      	movs	r2, #255	@ 0xff
 8009a38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a50:	2182      	movs	r1, #130	@ 0x82
 8009a52:	4818      	ldr	r0, [pc, #96]	@ (8009ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a54:	f000 fd4f 	bl	800a4f6 <USBD_GetEpDesc>
 8009a58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	4815      	ldr	r0, [pc, #84]	@ (8009ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a5e:	f000 fd4a 	bl	800a4f6 <USBD_GetEpDesc>
 8009a62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a64:	2181      	movs	r1, #129	@ 0x81
 8009a66:	4813      	ldr	r0, [pc, #76]	@ (8009ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a68:	f000 fd45 	bl	800a4f6 <USBD_GetEpDesc>
 8009a6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2210      	movs	r2, #16
 8009a78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d006      	beq.n	8009a8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a88:	711a      	strb	r2, [r3, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d006      	beq.n	8009aa2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a9c:	711a      	strb	r2, [r3, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2243      	movs	r2, #67	@ 0x43
 8009aa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009aa8:	4b02      	ldr	r3, [pc, #8]	@ (8009ab4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3718      	adds	r7, #24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20000050 	.word	0x20000050

08009ab8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ac0:	2182      	movs	r1, #130	@ 0x82
 8009ac2:	4818      	ldr	r0, [pc, #96]	@ (8009b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ac4:	f000 fd17 	bl	800a4f6 <USBD_GetEpDesc>
 8009ac8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009aca:	2101      	movs	r1, #1
 8009acc:	4815      	ldr	r0, [pc, #84]	@ (8009b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ace:	f000 fd12 	bl	800a4f6 <USBD_GetEpDesc>
 8009ad2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ad4:	2181      	movs	r1, #129	@ 0x81
 8009ad6:	4813      	ldr	r0, [pc, #76]	@ (8009b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ad8:	f000 fd0d 	bl	800a4f6 <USBD_GetEpDesc>
 8009adc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	2210      	movs	r2, #16
 8009ae8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d006      	beq.n	8009afe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	2200      	movs	r2, #0
 8009af4:	711a      	strb	r2, [r3, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f042 0202 	orr.w	r2, r2, #2
 8009afc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d006      	beq.n	8009b12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	711a      	strb	r2, [r3, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f042 0202 	orr.w	r2, r2, #2
 8009b10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2243      	movs	r2, #67	@ 0x43
 8009b16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b18:	4b02      	ldr	r3, [pc, #8]	@ (8009b24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20000050 	.word	0x20000050

08009b28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b30:	2182      	movs	r1, #130	@ 0x82
 8009b32:	4818      	ldr	r0, [pc, #96]	@ (8009b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b34:	f000 fcdf 	bl	800a4f6 <USBD_GetEpDesc>
 8009b38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	4815      	ldr	r0, [pc, #84]	@ (8009b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b3e:	f000 fcda 	bl	800a4f6 <USBD_GetEpDesc>
 8009b42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b44:	2181      	movs	r1, #129	@ 0x81
 8009b46:	4813      	ldr	r0, [pc, #76]	@ (8009b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b48:	f000 fcd5 	bl	800a4f6 <USBD_GetEpDesc>
 8009b4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2210      	movs	r2, #16
 8009b58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d006      	beq.n	8009b6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b68:	711a      	strb	r2, [r3, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d006      	beq.n	8009b82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b7c:	711a      	strb	r2, [r3, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2243      	movs	r2, #67	@ 0x43
 8009b86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b88:	4b02      	ldr	r3, [pc, #8]	@ (8009b94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20000050 	.word	0x20000050

08009b98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	220a      	movs	r2, #10
 8009ba4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009ba6:	4b03      	ldr	r3, [pc, #12]	@ (8009bb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	2000000c 	.word	0x2000000c

08009bb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e009      	b.n	8009be0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	33b0      	adds	r3, #176	@ 0xb0
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b087      	sub	sp, #28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	32b0      	adds	r2, #176	@ 0xb0
 8009c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c06:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e008      	b.n	8009c24 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	371c      	adds	r7, #28
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	32b0      	adds	r2, #176	@ 0xb0
 8009c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e004      	b.n	8009c5e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	32b0      	adds	r2, #176	@ 0xb0
 8009c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c82:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009c84:	2301      	movs	r3, #1
 8009c86:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d101      	bne.n	8009c92 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e025      	b.n	8009cde <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d11f      	bne.n	8009cdc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009ca4:	4b10      	ldr	r3, [pc, #64]	@ (8009ce8 <USBD_CDC_TransmitPacket+0x7c>)
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	f003 020f 	and.w	r2, r3, #15
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4403      	add	r3, r0
 8009cbe:	3318      	adds	r3, #24
 8009cc0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009cc2:	4b09      	ldr	r3, [pc, #36]	@ (8009ce8 <USBD_CDC_TransmitPacket+0x7c>)
 8009cc4:	7819      	ldrb	r1, [r3, #0]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f002 f8d4 	bl	800be80 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000093 	.word	0x20000093

08009cec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	32b0      	adds	r2, #176	@ 0xb0
 8009cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	32b0      	adds	r2, #176	@ 0xb0
 8009d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d16:	2303      	movs	r3, #3
 8009d18:	e018      	b.n	8009d4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	7c1b      	ldrb	r3, [r3, #16]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10a      	bne.n	8009d38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d22:	4b0c      	ldr	r3, [pc, #48]	@ (8009d54 <USBD_CDC_ReceivePacket+0x68>)
 8009d24:	7819      	ldrb	r1, [r3, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f002 f8dd 	bl	800bef0 <USBD_LL_PrepareReceive>
 8009d36:	e008      	b.n	8009d4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d38:	4b06      	ldr	r3, [pc, #24]	@ (8009d54 <USBD_CDC_ReceivePacket+0x68>)
 8009d3a:	7819      	ldrb	r1, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d42:	2340      	movs	r3, #64	@ 0x40
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f002 f8d3 	bl	800bef0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	20000094 	.word	0x20000094

08009d58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	4613      	mov	r3, r2
 8009d64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e01f      	b.n	8009db0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	79fa      	ldrb	r2, [r7, #7]
 8009da2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f001 feab 	bl	800bb00 <USBD_LL_Init>
 8009daa:	4603      	mov	r3, r0
 8009dac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e025      	b.n	8009e1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	32ae      	adds	r2, #174	@ 0xae
 8009de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00f      	beq.n	8009e0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	32ae      	adds	r2, #174	@ 0xae
 8009df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfc:	f107 020e 	add.w	r2, r7, #14
 8009e00:	4610      	mov	r0, r2
 8009e02:	4798      	blx	r3
 8009e04:	4602      	mov	r2, r0
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 feb3 	bl	800bb98 <USBD_LL_Start>
 8009e32:	4603      	mov	r3, r0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b084      	sub	sp, #16
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d009      	beq.n	8009e80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	78fa      	ldrb	r2, [r7, #3]
 8009e76:	4611      	mov	r1, r2
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	4798      	blx	r3
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	460b      	mov	r3, r1
 8009e94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	78fa      	ldrb	r2, [r7, #3]
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	4798      	blx	r3
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f001 f936 	bl	800b142 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009ef2:	f003 031f 	and.w	r3, r3, #31
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d01a      	beq.n	8009f30 <USBD_LL_SetupStage+0x72>
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d822      	bhi.n	8009f44 <USBD_LL_SetupStage+0x86>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <USBD_LL_SetupStage+0x4a>
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d00a      	beq.n	8009f1c <USBD_LL_SetupStage+0x5e>
 8009f06:	e01d      	b.n	8009f44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fb63 	bl	800a5dc <USBD_StdDevReq>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73fb      	strb	r3, [r7, #15]
      break;
 8009f1a:	e020      	b.n	8009f5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fbcb 	bl	800a6c0 <USBD_StdItfReq>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2e:	e016      	b.n	8009f5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fc2d 	bl	800a798 <USBD_StdEPReq>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	73fb      	strb	r3, [r7, #15]
      break;
 8009f42:	e00c      	b.n	8009f5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	4619      	mov	r1, r3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f001 fec6 	bl	800bce4 <USBD_LL_StallEP>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f5c:	bf00      	nop
  }

  return ret;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	460b      	mov	r3, r1
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d16e      	bne.n	800a05e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009f86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	f040 8098 	bne.w	800a0c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	689a      	ldr	r2, [r3, #8]
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d913      	bls.n	8009fc8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	bf28      	it	cs
 8009fba:	4613      	movcs	r3, r2
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	6879      	ldr	r1, [r7, #4]
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f001 f9b2 	bl	800b32a <USBD_CtlContinueRx>
 8009fc6:	e07d      	b.n	800a0c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009fce:	f003 031f 	and.w	r3, r3, #31
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d014      	beq.n	800a000 <USBD_LL_DataOutStage+0x98>
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d81d      	bhi.n	800a016 <USBD_LL_DataOutStage+0xae>
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d002      	beq.n	8009fe4 <USBD_LL_DataOutStage+0x7c>
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d003      	beq.n	8009fea <USBD_LL_DataOutStage+0x82>
 8009fe2:	e018      	b.n	800a016 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	75bb      	strb	r3, [r7, #22]
            break;
 8009fe8:	e018      	b.n	800a01c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 fa64 	bl	800a4c2 <USBD_CoreFindIF>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8009ffe:	e00d      	b.n	800a01c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a006:	b2db      	uxtb	r3, r3
 800a008:	4619      	mov	r1, r3
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 fa66 	bl	800a4dc <USBD_CoreFindEP>
 800a010:	4603      	mov	r3, r0
 800a012:	75bb      	strb	r3, [r7, #22]
            break;
 800a014:	e002      	b.n	800a01c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a016:	2300      	movs	r3, #0
 800a018:	75bb      	strb	r3, [r7, #22]
            break;
 800a01a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a01c:	7dbb      	ldrb	r3, [r7, #22]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d119      	bne.n	800a056 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d113      	bne.n	800a056 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a02e:	7dba      	ldrb	r2, [r7, #22]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	32ae      	adds	r2, #174	@ 0xae
 800a034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00b      	beq.n	800a056 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a03e:	7dba      	ldrb	r2, [r7, #22]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a046:	7dba      	ldrb	r2, [r7, #22]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	32ae      	adds	r2, #174	@ 0xae
 800a04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f001 f978 	bl	800b34c <USBD_CtlSendStatus>
 800a05c:	e032      	b.n	800a0c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a05e:	7afb      	ldrb	r3, [r7, #11]
 800a060:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a064:	b2db      	uxtb	r3, r3
 800a066:	4619      	mov	r1, r3
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 fa37 	bl	800a4dc <USBD_CoreFindEP>
 800a06e:	4603      	mov	r3, r0
 800a070:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a072:	7dbb      	ldrb	r3, [r7, #22]
 800a074:	2bff      	cmp	r3, #255	@ 0xff
 800a076:	d025      	beq.n	800a0c4 <USBD_LL_DataOutStage+0x15c>
 800a078:	7dbb      	ldrb	r3, [r7, #22]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d122      	bne.n	800a0c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b03      	cmp	r3, #3
 800a088:	d117      	bne.n	800a0ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a08a:	7dba      	ldrb	r2, [r7, #22]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	32ae      	adds	r2, #174	@ 0xae
 800a090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00f      	beq.n	800a0ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a09a:	7dba      	ldrb	r2, [r7, #22]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a0a2:	7dba      	ldrb	r2, [r7, #22]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	32ae      	adds	r2, #174	@ 0xae
 800a0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	7afa      	ldrb	r2, [r7, #11]
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	4798      	blx	r3
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
 800a0c2:	e000      	b.n	800a0c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b086      	sub	sp, #24
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	607a      	str	r2, [r7, #4]
 800a0da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a0dc:	7afb      	ldrb	r3, [r7, #11]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d16f      	bne.n	800a1c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3314      	adds	r3, #20
 800a0e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d15a      	bne.n	800a1a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d914      	bls.n	800a128 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	689a      	ldr	r2, [r3, #8]
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	1ad2      	subs	r2, r2, r3
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	461a      	mov	r2, r3
 800a112:	6879      	ldr	r1, [r7, #4]
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f001 f8da 	bl	800b2ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a11a:	2300      	movs	r3, #0
 800a11c:	2200      	movs	r2, #0
 800a11e:	2100      	movs	r1, #0
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f001 fee5 	bl	800bef0 <USBD_LL_PrepareReceive>
 800a126:	e03f      	b.n	800a1a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	68da      	ldr	r2, [r3, #12]
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	429a      	cmp	r2, r3
 800a132:	d11c      	bne.n	800a16e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	685a      	ldr	r2, [r3, #4]
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d316      	bcc.n	800a16e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d20f      	bcs.n	800a16e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a14e:	2200      	movs	r2, #0
 800a150:	2100      	movs	r1, #0
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f001 f8bb 	bl	800b2ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a160:	2300      	movs	r3, #0
 800a162:	2200      	movs	r2, #0
 800a164:	2100      	movs	r1, #0
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f001 fec2 	bl	800bef0 <USBD_LL_PrepareReceive>
 800a16c:	e01c      	b.n	800a1a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b03      	cmp	r3, #3
 800a178:	d10f      	bne.n	800a19a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d009      	beq.n	800a19a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a19a:	2180      	movs	r1, #128	@ 0x80
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f001 fda1 	bl	800bce4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f001 f8e5 	bl	800b372 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d03a      	beq.n	800a228 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f7ff fe42 	bl	8009e3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a1c0:	e032      	b.n	800a228 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a1c2:	7afb      	ldrb	r3, [r7, #11]
 800a1c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 f985 	bl	800a4dc <USBD_CoreFindEP>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
 800a1d8:	2bff      	cmp	r3, #255	@ 0xff
 800a1da:	d025      	beq.n	800a228 <USBD_LL_DataInStage+0x15a>
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d122      	bne.n	800a228 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d11c      	bne.n	800a228 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a1ee:	7dfa      	ldrb	r2, [r7, #23]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	32ae      	adds	r2, #174	@ 0xae
 800a1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d014      	beq.n	800a228 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a1fe:	7dfa      	ldrb	r2, [r7, #23]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a206:	7dfa      	ldrb	r2, [r7, #23]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	32ae      	adds	r2, #174	@ 0xae
 800a20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	7afa      	ldrb	r2, [r7, #11]
 800a214:	4611      	mov	r1, r2
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	4798      	blx	r3
 800a21a:	4603      	mov	r3, r0
 800a21c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a21e:	7dbb      	ldrb	r3, [r7, #22]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d001      	beq.n	800a228 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a224:	7dbb      	ldrb	r3, [r7, #22]
 800a226:	e000      	b.n	800a22a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b084      	sub	sp, #16
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d014      	beq.n	800a298 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00e      	beq.n	800a298 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	6852      	ldr	r2, [r2, #4]
 800a286:	b2d2      	uxtb	r2, r2
 800a288:	4611      	mov	r1, r2
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	4798      	blx	r3
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a294:	2303      	movs	r3, #3
 800a296:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a298:	2340      	movs	r3, #64	@ 0x40
 800a29a:	2200      	movs	r2, #0
 800a29c:	2100      	movs	r1, #0
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f001 fcac 	bl	800bbfc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2240      	movs	r2, #64	@ 0x40
 800a2b0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2b4:	2340      	movs	r3, #64	@ 0x40
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2180      	movs	r1, #128	@ 0x80
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f001 fc9e 	bl	800bbfc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2240      	movs	r2, #64	@ 0x40
 800a2ca:	621a      	str	r2, [r3, #32]

  return ret;
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	78fa      	ldrb	r2, [r7, #3]
 800a2e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b04      	cmp	r3, #4
 800a308:	d006      	beq.n	800a318 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a310:	b2da      	uxtb	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2204      	movs	r2, #4
 800a31c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d106      	bne.n	800a350 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b082      	sub	sp, #8
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d110      	bne.n	800a394 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00b      	beq.n	800a394 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a382:	69db      	ldr	r3, [r3, #28]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d005      	beq.n	800a394 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b082      	sub	sp, #8
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	32ae      	adds	r2, #174	@ 0xae
 800a3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e01c      	b.n	800a3fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d115      	bne.n	800a3f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	32ae      	adds	r2, #174	@ 0xae
 800a3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00b      	beq.n	800a3f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	32ae      	adds	r2, #174	@ 0xae
 800a3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	78fa      	ldrb	r2, [r7, #3]
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	460b      	mov	r3, r1
 800a40c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	32ae      	adds	r2, #174	@ 0xae
 800a418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a420:	2303      	movs	r3, #3
 800a422:	e01c      	b.n	800a45e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d115      	bne.n	800a45c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	32ae      	adds	r2, #174	@ 0xae
 800a43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00b      	beq.n	800a45c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	32ae      	adds	r2, #174	@ 0xae
 800a44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a454:	78fa      	ldrb	r2, [r7, #3]
 800a456:	4611      	mov	r1, r2
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00e      	beq.n	800a4b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	6852      	ldr	r2, [r2, #4]
 800a4a6:	b2d2      	uxtb	r2, r2
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	4798      	blx	r3
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	370c      	adds	r7, #12
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b086      	sub	sp, #24
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	460b      	mov	r3, r1
 800a500:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a50a:	2300      	movs	r3, #0
 800a50c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	885b      	ldrh	r3, [r3, #2]
 800a512:	b29b      	uxth	r3, r3
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	7812      	ldrb	r2, [r2, #0]
 800a518:	4293      	cmp	r3, r2
 800a51a:	d91f      	bls.n	800a55c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a522:	e013      	b.n	800a54c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a524:	f107 030a 	add.w	r3, r7, #10
 800a528:	4619      	mov	r1, r3
 800a52a:	6978      	ldr	r0, [r7, #20]
 800a52c:	f000 f81b 	bl	800a566 <USBD_GetNextDesc>
 800a530:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	785b      	ldrb	r3, [r3, #1]
 800a536:	2b05      	cmp	r3, #5
 800a538:	d108      	bne.n	800a54c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	789b      	ldrb	r3, [r3, #2]
 800a542:	78fa      	ldrb	r2, [r7, #3]
 800a544:	429a      	cmp	r2, r3
 800a546:	d008      	beq.n	800a55a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a548:	2300      	movs	r3, #0
 800a54a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	885b      	ldrh	r3, [r3, #2]
 800a550:	b29a      	uxth	r2, r3
 800a552:	897b      	ldrh	r3, [r7, #10]
 800a554:	429a      	cmp	r2, r3
 800a556:	d8e5      	bhi.n	800a524 <USBD_GetEpDesc+0x2e>
 800a558:	e000      	b.n	800a55c <USBD_GetEpDesc+0x66>
          break;
 800a55a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a55c:	693b      	ldr	r3, [r7, #16]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a566:	b480      	push	{r7}
 800a568:	b085      	sub	sp, #20
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	7812      	ldrb	r2, [r2, #0]
 800a57c:	4413      	add	r3, r2
 800a57e:	b29a      	uxth	r2, r3
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4413      	add	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a590:	68fb      	ldr	r3, [r7, #12]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b087      	sub	sp, #28
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5bc:	8a3b      	ldrh	r3, [r7, #16]
 800a5be:	021b      	lsls	r3, r3, #8
 800a5c0:	b21a      	sxth	r2, r3
 800a5c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	b21b      	sxth	r3, r3
 800a5ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a5cc:	89fb      	ldrh	r3, [r7, #14]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
	...

0800a5dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5f2:	2b40      	cmp	r3, #64	@ 0x40
 800a5f4:	d005      	beq.n	800a602 <USBD_StdDevReq+0x26>
 800a5f6:	2b40      	cmp	r3, #64	@ 0x40
 800a5f8:	d857      	bhi.n	800a6aa <USBD_StdDevReq+0xce>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00f      	beq.n	800a61e <USBD_StdDevReq+0x42>
 800a5fe:	2b20      	cmp	r3, #32
 800a600:	d153      	bne.n	800a6aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	32ae      	adds	r2, #174	@ 0xae
 800a60c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	6839      	ldr	r1, [r7, #0]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	4798      	blx	r3
 800a618:	4603      	mov	r3, r0
 800a61a:	73fb      	strb	r3, [r7, #15]
      break;
 800a61c:	e04a      	b.n	800a6b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	785b      	ldrb	r3, [r3, #1]
 800a622:	2b09      	cmp	r3, #9
 800a624:	d83b      	bhi.n	800a69e <USBD_StdDevReq+0xc2>
 800a626:	a201      	add	r2, pc, #4	@ (adr r2, 800a62c <USBD_StdDevReq+0x50>)
 800a628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62c:	0800a681 	.word	0x0800a681
 800a630:	0800a695 	.word	0x0800a695
 800a634:	0800a69f 	.word	0x0800a69f
 800a638:	0800a68b 	.word	0x0800a68b
 800a63c:	0800a69f 	.word	0x0800a69f
 800a640:	0800a65f 	.word	0x0800a65f
 800a644:	0800a655 	.word	0x0800a655
 800a648:	0800a69f 	.word	0x0800a69f
 800a64c:	0800a677 	.word	0x0800a677
 800a650:	0800a669 	.word	0x0800a669
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fa3c 	bl	800aad4 <USBD_GetDescriptor>
          break;
 800a65c:	e024      	b.n	800a6a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fbcb 	bl	800adfc <USBD_SetAddress>
          break;
 800a666:	e01f      	b.n	800a6a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fc0a 	bl	800ae84 <USBD_SetConfig>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]
          break;
 800a674:	e018      	b.n	800a6a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 fcad 	bl	800afd8 <USBD_GetConfig>
          break;
 800a67e:	e013      	b.n	800a6a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fcde 	bl	800b044 <USBD_GetStatus>
          break;
 800a688:	e00e      	b.n	800a6a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fd0d 	bl	800b0ac <USBD_SetFeature>
          break;
 800a692:	e009      	b.n	800a6a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fd31 	bl	800b0fe <USBD_ClrFeature>
          break;
 800a69c:	e004      	b.n	800a6a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fd88 	bl	800b1b6 <USBD_CtlError>
          break;
 800a6a6:	bf00      	nop
      }
      break;
 800a6a8:	e004      	b.n	800a6b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fd82 	bl	800b1b6 <USBD_CtlError>
      break;
 800a6b2:	bf00      	nop
  }

  return ret;
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop

0800a6c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6d6:	2b40      	cmp	r3, #64	@ 0x40
 800a6d8:	d005      	beq.n	800a6e6 <USBD_StdItfReq+0x26>
 800a6da:	2b40      	cmp	r3, #64	@ 0x40
 800a6dc:	d852      	bhi.n	800a784 <USBD_StdItfReq+0xc4>
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <USBD_StdItfReq+0x26>
 800a6e2:	2b20      	cmp	r3, #32
 800a6e4:	d14e      	bne.n	800a784 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d840      	bhi.n	800a776 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	889b      	ldrh	r3, [r3, #4]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d836      	bhi.n	800a76c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	889b      	ldrh	r3, [r3, #4]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff fedb 	bl	800a4c2 <USBD_CoreFindIF>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a710:	7bbb      	ldrb	r3, [r7, #14]
 800a712:	2bff      	cmp	r3, #255	@ 0xff
 800a714:	d01d      	beq.n	800a752 <USBD_StdItfReq+0x92>
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d11a      	bne.n	800a752 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a71c:	7bba      	ldrb	r2, [r7, #14]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	32ae      	adds	r2, #174	@ 0xae
 800a722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00f      	beq.n	800a74c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a72c:	7bba      	ldrb	r2, [r7, #14]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a734:	7bba      	ldrb	r2, [r7, #14]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	32ae      	adds	r2, #174	@ 0xae
 800a73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	4798      	blx	r3
 800a746:	4603      	mov	r3, r0
 800a748:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a74a:	e004      	b.n	800a756 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a74c:	2303      	movs	r3, #3
 800a74e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a750:	e001      	b.n	800a756 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a752:	2303      	movs	r3, #3
 800a754:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	88db      	ldrh	r3, [r3, #6]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d110      	bne.n	800a780 <USBD_StdItfReq+0xc0>
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10d      	bne.n	800a780 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fdf1 	bl	800b34c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a76a:	e009      	b.n	800a780 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fd21 	bl	800b1b6 <USBD_CtlError>
          break;
 800a774:	e004      	b.n	800a780 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fd1c 	bl	800b1b6 <USBD_CtlError>
          break;
 800a77e:	e000      	b.n	800a782 <USBD_StdItfReq+0xc2>
          break;
 800a780:	bf00      	nop
      }
      break;
 800a782:	e004      	b.n	800a78e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fd15 	bl	800b1b6 <USBD_CtlError>
      break;
 800a78c:	bf00      	nop
  }

  return ret;
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	889b      	ldrh	r3, [r3, #4]
 800a7aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7b4:	2b40      	cmp	r3, #64	@ 0x40
 800a7b6:	d007      	beq.n	800a7c8 <USBD_StdEPReq+0x30>
 800a7b8:	2b40      	cmp	r3, #64	@ 0x40
 800a7ba:	f200 817f 	bhi.w	800aabc <USBD_StdEPReq+0x324>
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d02a      	beq.n	800a818 <USBD_StdEPReq+0x80>
 800a7c2:	2b20      	cmp	r3, #32
 800a7c4:	f040 817a 	bne.w	800aabc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff fe85 	bl	800a4dc <USBD_CoreFindEP>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7d6:	7b7b      	ldrb	r3, [r7, #13]
 800a7d8:	2bff      	cmp	r3, #255	@ 0xff
 800a7da:	f000 8174 	beq.w	800aac6 <USBD_StdEPReq+0x32e>
 800a7de:	7b7b      	ldrb	r3, [r7, #13]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f040 8170 	bne.w	800aac6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a7e6:	7b7a      	ldrb	r2, [r7, #13]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a7ee:	7b7a      	ldrb	r2, [r7, #13]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	32ae      	adds	r2, #174	@ 0xae
 800a7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 8163 	beq.w	800aac6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a800:	7b7a      	ldrb	r2, [r7, #13]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	32ae      	adds	r2, #174	@ 0xae
 800a806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	4798      	blx	r3
 800a812:	4603      	mov	r3, r0
 800a814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a816:	e156      	b.n	800aac6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	785b      	ldrb	r3, [r3, #1]
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d008      	beq.n	800a832 <USBD_StdEPReq+0x9a>
 800a820:	2b03      	cmp	r3, #3
 800a822:	f300 8145 	bgt.w	800aab0 <USBD_StdEPReq+0x318>
 800a826:	2b00      	cmp	r3, #0
 800a828:	f000 809b 	beq.w	800a962 <USBD_StdEPReq+0x1ca>
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d03c      	beq.n	800a8aa <USBD_StdEPReq+0x112>
 800a830:	e13e      	b.n	800aab0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d002      	beq.n	800a844 <USBD_StdEPReq+0xac>
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d016      	beq.n	800a870 <USBD_StdEPReq+0xd8>
 800a842:	e02c      	b.n	800a89e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a844:	7bbb      	ldrb	r3, [r7, #14]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00d      	beq.n	800a866 <USBD_StdEPReq+0xce>
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
 800a84c:	2b80      	cmp	r3, #128	@ 0x80
 800a84e:	d00a      	beq.n	800a866 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a850:	7bbb      	ldrb	r3, [r7, #14]
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f001 fa45 	bl	800bce4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a85a:	2180      	movs	r1, #128	@ 0x80
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 fa41 	bl	800bce4 <USBD_LL_StallEP>
 800a862:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a864:	e020      	b.n	800a8a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fca4 	bl	800b1b6 <USBD_CtlError>
              break;
 800a86e:	e01b      	b.n	800a8a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	885b      	ldrh	r3, [r3, #2]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10e      	bne.n	800a896 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00b      	beq.n	800a896 <USBD_StdEPReq+0xfe>
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	2b80      	cmp	r3, #128	@ 0x80
 800a882:	d008      	beq.n	800a896 <USBD_StdEPReq+0xfe>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	88db      	ldrh	r3, [r3, #6]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d104      	bne.n	800a896 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 fa27 	bl	800bce4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fd58 	bl	800b34c <USBD_CtlSendStatus>

              break;
 800a89c:	e004      	b.n	800a8a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fc88 	bl	800b1b6 <USBD_CtlError>
              break;
 800a8a6:	bf00      	nop
          }
          break;
 800a8a8:	e107      	b.n	800aaba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d002      	beq.n	800a8bc <USBD_StdEPReq+0x124>
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	d016      	beq.n	800a8e8 <USBD_StdEPReq+0x150>
 800a8ba:	e04b      	b.n	800a954 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00d      	beq.n	800a8de <USBD_StdEPReq+0x146>
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	2b80      	cmp	r3, #128	@ 0x80
 800a8c6:	d00a      	beq.n	800a8de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 fa09 	bl	800bce4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8d2:	2180      	movs	r1, #128	@ 0x80
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f001 fa05 	bl	800bce4 <USBD_LL_StallEP>
 800a8da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8dc:	e040      	b.n	800a960 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fc68 	bl	800b1b6 <USBD_CtlError>
              break;
 800a8e6:	e03b      	b.n	800a960 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	885b      	ldrh	r3, [r3, #2]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d136      	bne.n	800a95e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a8f0:	7bbb      	ldrb	r3, [r7, #14]
 800a8f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d004      	beq.n	800a904 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a8fa:	7bbb      	ldrb	r3, [r7, #14]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f001 fa26 	bl	800bd50 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fd21 	bl	800b34c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a90a:	7bbb      	ldrb	r3, [r7, #14]
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7ff fde4 	bl	800a4dc <USBD_CoreFindEP>
 800a914:	4603      	mov	r3, r0
 800a916:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a918:	7b7b      	ldrb	r3, [r7, #13]
 800a91a:	2bff      	cmp	r3, #255	@ 0xff
 800a91c:	d01f      	beq.n	800a95e <USBD_StdEPReq+0x1c6>
 800a91e:	7b7b      	ldrb	r3, [r7, #13]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d11c      	bne.n	800a95e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a924:	7b7a      	ldrb	r2, [r7, #13]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a92c:	7b7a      	ldrb	r2, [r7, #13]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	32ae      	adds	r2, #174	@ 0xae
 800a932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d010      	beq.n	800a95e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a93c:	7b7a      	ldrb	r2, [r7, #13]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	32ae      	adds	r2, #174	@ 0xae
 800a942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	4798      	blx	r3
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a952:	e004      	b.n	800a95e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fc2d 	bl	800b1b6 <USBD_CtlError>
              break;
 800a95c:	e000      	b.n	800a960 <USBD_StdEPReq+0x1c8>
              break;
 800a95e:	bf00      	nop
          }
          break;
 800a960:	e0ab      	b.n	800aaba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b02      	cmp	r3, #2
 800a96c:	d002      	beq.n	800a974 <USBD_StdEPReq+0x1dc>
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d032      	beq.n	800a9d8 <USBD_StdEPReq+0x240>
 800a972:	e097      	b.n	800aaa4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d007      	beq.n	800a98a <USBD_StdEPReq+0x1f2>
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
 800a97c:	2b80      	cmp	r3, #128	@ 0x80
 800a97e:	d004      	beq.n	800a98a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fc17 	bl	800b1b6 <USBD_CtlError>
                break;
 800a988:	e091      	b.n	800aaae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a98a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	da0b      	bge.n	800a9aa <USBD_StdEPReq+0x212>
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a998:	4613      	mov	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	3310      	adds	r3, #16
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	e00b      	b.n	800a9c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4413      	add	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	4413      	add	r3, r2
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	2202      	movs	r2, #2
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fc61 	bl	800b298 <USBD_CtlSendData>
              break;
 800a9d6:	e06a      	b.n	800aaae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a9d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	da11      	bge.n	800aa04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	f003 020f 	and.w	r2, r3, #15
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	440b      	add	r3, r1
 800a9f2:	3324      	adds	r3, #36	@ 0x24
 800a9f4:	881b      	ldrh	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d117      	bne.n	800aa2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fbda 	bl	800b1b6 <USBD_CtlError>
                  break;
 800aa02:	e054      	b.n	800aaae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	f003 020f 	and.w	r2, r3, #15
 800aa0a:	6879      	ldr	r1, [r7, #4]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	440b      	add	r3, r1
 800aa16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa1a:	881b      	ldrh	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d104      	bne.n	800aa2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa20:	6839      	ldr	r1, [r7, #0]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fbc7 	bl	800b1b6 <USBD_CtlError>
                  break;
 800aa28:	e041      	b.n	800aaae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	da0b      	bge.n	800aa4a <USBD_StdEPReq+0x2b2>
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
 800aa34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa38:	4613      	mov	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	4413      	add	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	3310      	adds	r3, #16
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	4413      	add	r3, r2
 800aa46:	3304      	adds	r3, #4
 800aa48:	e00b      	b.n	800aa62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa50:	4613      	mov	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4413      	add	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	4413      	add	r3, r2
 800aa60:	3304      	adds	r3, #4
 800aa62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa64:	7bbb      	ldrb	r3, [r7, #14]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <USBD_StdEPReq+0x2d8>
 800aa6a:	7bbb      	ldrb	r3, [r7, #14]
 800aa6c:	2b80      	cmp	r3, #128	@ 0x80
 800aa6e:	d103      	bne.n	800aa78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
 800aa76:	e00e      	b.n	800aa96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f001 f99d 	bl	800bdbc <USBD_LL_IsStallEP>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	e002      	b.n	800aa96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2202      	movs	r2, #2
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fbfb 	bl	800b298 <USBD_CtlSendData>
              break;
 800aaa2:	e004      	b.n	800aaae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fb85 	bl	800b1b6 <USBD_CtlError>
              break;
 800aaac:	bf00      	nop
          }
          break;
 800aaae:	e004      	b.n	800aaba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fb7f 	bl	800b1b6 <USBD_CtlError>
          break;
 800aab8:	bf00      	nop
      }
      break;
 800aaba:	e005      	b.n	800aac8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fb79 	bl	800b1b6 <USBD_CtlError>
      break;
 800aac4:	e000      	b.n	800aac8 <USBD_StdEPReq+0x330>
      break;
 800aac6:	bf00      	nop
  }

  return ret;
 800aac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
	...

0800aad4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aade:	2300      	movs	r3, #0
 800aae0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	885b      	ldrh	r3, [r3, #2]
 800aaee:	0a1b      	lsrs	r3, r3, #8
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	2b0e      	cmp	r3, #14
 800aaf6:	f200 8152 	bhi.w	800ad9e <USBD_GetDescriptor+0x2ca>
 800aafa:	a201      	add	r2, pc, #4	@ (adr r2, 800ab00 <USBD_GetDescriptor+0x2c>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab71 	.word	0x0800ab71
 800ab04:	0800ab89 	.word	0x0800ab89
 800ab08:	0800abc9 	.word	0x0800abc9
 800ab0c:	0800ad9f 	.word	0x0800ad9f
 800ab10:	0800ad9f 	.word	0x0800ad9f
 800ab14:	0800ad3f 	.word	0x0800ad3f
 800ab18:	0800ad6b 	.word	0x0800ad6b
 800ab1c:	0800ad9f 	.word	0x0800ad9f
 800ab20:	0800ad9f 	.word	0x0800ad9f
 800ab24:	0800ad9f 	.word	0x0800ad9f
 800ab28:	0800ad9f 	.word	0x0800ad9f
 800ab2c:	0800ad9f 	.word	0x0800ad9f
 800ab30:	0800ad9f 	.word	0x0800ad9f
 800ab34:	0800ad9f 	.word	0x0800ad9f
 800ab38:	0800ab3d 	.word	0x0800ab3d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab42:	69db      	ldr	r3, [r3, #28]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00b      	beq.n	800ab60 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	7c12      	ldrb	r2, [r2, #16]
 800ab54:	f107 0108 	add.w	r1, r7, #8
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4798      	blx	r3
 800ab5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab5e:	e126      	b.n	800adae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fb27 	bl	800b1b6 <USBD_CtlError>
        err++;
 800ab68:	7afb      	ldrb	r3, [r7, #11]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	72fb      	strb	r3, [r7, #11]
      break;
 800ab6e:	e11e      	b.n	800adae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	7c12      	ldrb	r2, [r2, #16]
 800ab7c:	f107 0108 	add.w	r1, r7, #8
 800ab80:	4610      	mov	r0, r2
 800ab82:	4798      	blx	r3
 800ab84:	60f8      	str	r0, [r7, #12]
      break;
 800ab86:	e112      	b.n	800adae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7c1b      	ldrb	r3, [r3, #16]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10d      	bne.n	800abac <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab98:	f107 0208 	add.w	r2, r7, #8
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	4798      	blx	r3
 800aba0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3301      	adds	r3, #1
 800aba6:	2202      	movs	r2, #2
 800aba8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800abaa:	e100      	b.n	800adae <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb4:	f107 0208 	add.w	r2, r7, #8
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3
 800abbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	3301      	adds	r3, #1
 800abc2:	2202      	movs	r2, #2
 800abc4:	701a      	strb	r2, [r3, #0]
      break;
 800abc6:	e0f2      	b.n	800adae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	885b      	ldrh	r3, [r3, #2]
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b05      	cmp	r3, #5
 800abd0:	f200 80ac 	bhi.w	800ad2c <USBD_GetDescriptor+0x258>
 800abd4:	a201      	add	r2, pc, #4	@ (adr r2, 800abdc <USBD_GetDescriptor+0x108>)
 800abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abda:	bf00      	nop
 800abdc:	0800abf5 	.word	0x0800abf5
 800abe0:	0800ac29 	.word	0x0800ac29
 800abe4:	0800ac5d 	.word	0x0800ac5d
 800abe8:	0800ac91 	.word	0x0800ac91
 800abec:	0800acc5 	.word	0x0800acc5
 800abf0:	0800acf9 	.word	0x0800acf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	7c12      	ldrb	r2, [r2, #16]
 800ac0c:	f107 0108 	add.w	r1, r7, #8
 800ac10:	4610      	mov	r0, r2
 800ac12:	4798      	blx	r3
 800ac14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac16:	e091      	b.n	800ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 facb 	bl	800b1b6 <USBD_CtlError>
            err++;
 800ac20:	7afb      	ldrb	r3, [r7, #11]
 800ac22:	3301      	adds	r3, #1
 800ac24:	72fb      	strb	r3, [r7, #11]
          break;
 800ac26:	e089      	b.n	800ad3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00b      	beq.n	800ac4c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	7c12      	ldrb	r2, [r2, #16]
 800ac40:	f107 0108 	add.w	r1, r7, #8
 800ac44:	4610      	mov	r0, r2
 800ac46:	4798      	blx	r3
 800ac48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac4a:	e077      	b.n	800ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fab1 	bl	800b1b6 <USBD_CtlError>
            err++;
 800ac54:	7afb      	ldrb	r3, [r7, #11]
 800ac56:	3301      	adds	r3, #1
 800ac58:	72fb      	strb	r3, [r7, #11]
          break;
 800ac5a:	e06f      	b.n	800ad3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00b      	beq.n	800ac80 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	7c12      	ldrb	r2, [r2, #16]
 800ac74:	f107 0108 	add.w	r1, r7, #8
 800ac78:	4610      	mov	r0, r2
 800ac7a:	4798      	blx	r3
 800ac7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac7e:	e05d      	b.n	800ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fa97 	bl	800b1b6 <USBD_CtlError>
            err++;
 800ac88:	7afb      	ldrb	r3, [r7, #11]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac8e:	e055      	b.n	800ad3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00b      	beq.n	800acb4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	7c12      	ldrb	r2, [r2, #16]
 800aca8:	f107 0108 	add.w	r1, r7, #8
 800acac:	4610      	mov	r0, r2
 800acae:	4798      	blx	r3
 800acb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acb2:	e043      	b.n	800ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fa7d 	bl	800b1b6 <USBD_CtlError>
            err++;
 800acbc:	7afb      	ldrb	r3, [r7, #11]
 800acbe:	3301      	adds	r3, #1
 800acc0:	72fb      	strb	r3, [r7, #11]
          break;
 800acc2:	e03b      	b.n	800ad3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00b      	beq.n	800ace8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	7c12      	ldrb	r2, [r2, #16]
 800acdc:	f107 0108 	add.w	r1, r7, #8
 800ace0:	4610      	mov	r0, r2
 800ace2:	4798      	blx	r3
 800ace4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ace6:	e029      	b.n	800ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fa63 	bl	800b1b6 <USBD_CtlError>
            err++;
 800acf0:	7afb      	ldrb	r3, [r7, #11]
 800acf2:	3301      	adds	r3, #1
 800acf4:	72fb      	strb	r3, [r7, #11]
          break;
 800acf6:	e021      	b.n	800ad3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00b      	beq.n	800ad1c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	7c12      	ldrb	r2, [r2, #16]
 800ad10:	f107 0108 	add.w	r1, r7, #8
 800ad14:	4610      	mov	r0, r2
 800ad16:	4798      	blx	r3
 800ad18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad1a:	e00f      	b.n	800ad3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa49 	bl	800b1b6 <USBD_CtlError>
            err++;
 800ad24:	7afb      	ldrb	r3, [r7, #11]
 800ad26:	3301      	adds	r3, #1
 800ad28:	72fb      	strb	r3, [r7, #11]
          break;
 800ad2a:	e007      	b.n	800ad3c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad2c:	6839      	ldr	r1, [r7, #0]
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fa41 	bl	800b1b6 <USBD_CtlError>
          err++;
 800ad34:	7afb      	ldrb	r3, [r7, #11]
 800ad36:	3301      	adds	r3, #1
 800ad38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad3a:	bf00      	nop
      }
      break;
 800ad3c:	e037      	b.n	800adae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	7c1b      	ldrb	r3, [r3, #16]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d109      	bne.n	800ad5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad4e:	f107 0208 	add.w	r2, r7, #8
 800ad52:	4610      	mov	r0, r2
 800ad54:	4798      	blx	r3
 800ad56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad58:	e029      	b.n	800adae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fa2a 	bl	800b1b6 <USBD_CtlError>
        err++;
 800ad62:	7afb      	ldrb	r3, [r7, #11]
 800ad64:	3301      	adds	r3, #1
 800ad66:	72fb      	strb	r3, [r7, #11]
      break;
 800ad68:	e021      	b.n	800adae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	7c1b      	ldrb	r3, [r3, #16]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10d      	bne.n	800ad8e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad7a:	f107 0208 	add.w	r2, r7, #8
 800ad7e:	4610      	mov	r0, r2
 800ad80:	4798      	blx	r3
 800ad82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3301      	adds	r3, #1
 800ad88:	2207      	movs	r2, #7
 800ad8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad8c:	e00f      	b.n	800adae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fa10 	bl	800b1b6 <USBD_CtlError>
        err++;
 800ad96:	7afb      	ldrb	r3, [r7, #11]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	72fb      	strb	r3, [r7, #11]
      break;
 800ad9c:	e007      	b.n	800adae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fa08 	bl	800b1b6 <USBD_CtlError>
      err++;
 800ada6:	7afb      	ldrb	r3, [r7, #11]
 800ada8:	3301      	adds	r3, #1
 800adaa:	72fb      	strb	r3, [r7, #11]
      break;
 800adac:	bf00      	nop
  }

  if (err != 0U)
 800adae:	7afb      	ldrb	r3, [r7, #11]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d11e      	bne.n	800adf2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	88db      	ldrh	r3, [r3, #6]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d016      	beq.n	800adea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800adbc:	893b      	ldrh	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00e      	beq.n	800ade0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	88da      	ldrh	r2, [r3, #6]
 800adc6:	893b      	ldrh	r3, [r7, #8]
 800adc8:	4293      	cmp	r3, r2
 800adca:	bf28      	it	cs
 800adcc:	4613      	movcs	r3, r2
 800adce:	b29b      	uxth	r3, r3
 800add0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800add2:	893b      	ldrh	r3, [r7, #8]
 800add4:	461a      	mov	r2, r3
 800add6:	68f9      	ldr	r1, [r7, #12]
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 fa5d 	bl	800b298 <USBD_CtlSendData>
 800adde:	e009      	b.n	800adf4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ade0:	6839      	ldr	r1, [r7, #0]
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f9e7 	bl	800b1b6 <USBD_CtlError>
 800ade8:	e004      	b.n	800adf4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 faae 	bl	800b34c <USBD_CtlSendStatus>
 800adf0:	e000      	b.n	800adf4 <USBD_GetDescriptor+0x320>
    return;
 800adf2:	bf00      	nop
  }
}
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop

0800adfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	889b      	ldrh	r3, [r3, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d131      	bne.n	800ae72 <USBD_SetAddress+0x76>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	88db      	ldrh	r3, [r3, #6]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d12d      	bne.n	800ae72 <USBD_SetAddress+0x76>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	885b      	ldrh	r3, [r3, #2]
 800ae1a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae1c:	d829      	bhi.n	800ae72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	885b      	ldrh	r3, [r3, #2]
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	2b03      	cmp	r3, #3
 800ae34:	d104      	bne.n	800ae40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f9bc 	bl	800b1b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae3e:	e01d      	b.n	800ae7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	7bfa      	ldrb	r2, [r7, #15]
 800ae44:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 ffe1 	bl	800be14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fa7a 	bl	800b34c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d004      	beq.n	800ae68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2202      	movs	r2, #2
 800ae62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae66:	e009      	b.n	800ae7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae70:	e004      	b.n	800ae7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f99e 	bl	800b1b6 <USBD_CtlError>
  }
}
 800ae7a:	bf00      	nop
 800ae7c:	bf00      	nop
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	885b      	ldrh	r3, [r3, #2]
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	4b4e      	ldr	r3, [pc, #312]	@ (800afd4 <USBD_SetConfig+0x150>)
 800ae9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae9c:	4b4d      	ldr	r3, [pc, #308]	@ (800afd4 <USBD_SetConfig+0x150>)
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d905      	bls.n	800aeb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f985 	bl	800b1b6 <USBD_CtlError>
    return USBD_FAIL;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e08c      	b.n	800afca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d002      	beq.n	800aec2 <USBD_SetConfig+0x3e>
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d029      	beq.n	800af14 <USBD_SetConfig+0x90>
 800aec0:	e075      	b.n	800afae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aec2:	4b44      	ldr	r3, [pc, #272]	@ (800afd4 <USBD_SetConfig+0x150>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d020      	beq.n	800af0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aeca:	4b42      	ldr	r3, [pc, #264]	@ (800afd4 <USBD_SetConfig+0x150>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aed4:	4b3f      	ldr	r3, [pc, #252]	@ (800afd4 <USBD_SetConfig+0x150>)
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f7fe ffb9 	bl	8009e52 <USBD_SetClassConfig>
 800aee0:	4603      	mov	r3, r0
 800aee2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d008      	beq.n	800aefc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f962 	bl	800b1b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2202      	movs	r2, #2
 800aef6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aefa:	e065      	b.n	800afc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 fa25 	bl	800b34c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2203      	movs	r2, #3
 800af06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af0a:	e05d      	b.n	800afc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fa1d 	bl	800b34c <USBD_CtlSendStatus>
      break;
 800af12:	e059      	b.n	800afc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af14:	4b2f      	ldr	r3, [pc, #188]	@ (800afd4 <USBD_SetConfig+0x150>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d112      	bne.n	800af42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2202      	movs	r2, #2
 800af20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800af24:	4b2b      	ldr	r3, [pc, #172]	@ (800afd4 <USBD_SetConfig+0x150>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	461a      	mov	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af2e:	4b29      	ldr	r3, [pc, #164]	@ (800afd4 <USBD_SetConfig+0x150>)
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7fe ffa8 	bl	8009e8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa06 	bl	800b34c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af40:	e042      	b.n	800afc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af42:	4b24      	ldr	r3, [pc, #144]	@ (800afd4 <USBD_SetConfig+0x150>)
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d02a      	beq.n	800afa6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	b2db      	uxtb	r3, r3
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f7fe ff96 	bl	8009e8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af5e:	4b1d      	ldr	r3, [pc, #116]	@ (800afd4 <USBD_SetConfig+0x150>)
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af68:	4b1a      	ldr	r3, [pc, #104]	@ (800afd4 <USBD_SetConfig+0x150>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	4619      	mov	r1, r3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7fe ff6f 	bl	8009e52 <USBD_SetClassConfig>
 800af74:	4603      	mov	r3, r0
 800af76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af78:	7bfb      	ldrb	r3, [r7, #15]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00f      	beq.n	800af9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f918 	bl	800b1b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7fe ff7b 	bl	8009e8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2202      	movs	r2, #2
 800af98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af9c:	e014      	b.n	800afc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f9d4 	bl	800b34c <USBD_CtlSendStatus>
      break;
 800afa4:	e010      	b.n	800afc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f9d0 	bl	800b34c <USBD_CtlSendStatus>
      break;
 800afac:	e00c      	b.n	800afc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f900 	bl	800b1b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afb6:	4b07      	ldr	r3, [pc, #28]	@ (800afd4 <USBD_SetConfig+0x150>)
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7fe ff64 	bl	8009e8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800afc2:	2303      	movs	r3, #3
 800afc4:	73fb      	strb	r3, [r7, #15]
      break;
 800afc6:	bf00      	nop
  }

  return ret;
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	2000e970 	.word	0x2000e970

0800afd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	88db      	ldrh	r3, [r3, #6]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d004      	beq.n	800aff4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f8e2 	bl	800b1b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aff2:	e023      	b.n	800b03c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b02      	cmp	r3, #2
 800affe:	dc02      	bgt.n	800b006 <USBD_GetConfig+0x2e>
 800b000:	2b00      	cmp	r3, #0
 800b002:	dc03      	bgt.n	800b00c <USBD_GetConfig+0x34>
 800b004:	e015      	b.n	800b032 <USBD_GetConfig+0x5a>
 800b006:	2b03      	cmp	r3, #3
 800b008:	d00b      	beq.n	800b022 <USBD_GetConfig+0x4a>
 800b00a:	e012      	b.n	800b032 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	3308      	adds	r3, #8
 800b016:	2201      	movs	r2, #1
 800b018:	4619      	mov	r1, r3
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f93c 	bl	800b298 <USBD_CtlSendData>
        break;
 800b020:	e00c      	b.n	800b03c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	3304      	adds	r3, #4
 800b026:	2201      	movs	r2, #1
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f934 	bl	800b298 <USBD_CtlSendData>
        break;
 800b030:	e004      	b.n	800b03c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f8be 	bl	800b1b6 <USBD_CtlError>
        break;
 800b03a:	bf00      	nop
}
 800b03c:	bf00      	nop
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b054:	b2db      	uxtb	r3, r3
 800b056:	3b01      	subs	r3, #1
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d81e      	bhi.n	800b09a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	88db      	ldrh	r3, [r3, #6]
 800b060:	2b02      	cmp	r3, #2
 800b062:	d004      	beq.n	800b06e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f8a5 	bl	800b1b6 <USBD_CtlError>
        break;
 800b06c:	e01a      	b.n	800b0a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d005      	beq.n	800b08a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	f043 0202 	orr.w	r2, r3, #2
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	330c      	adds	r3, #12
 800b08e:	2202      	movs	r2, #2
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f900 	bl	800b298 <USBD_CtlSendData>
      break;
 800b098:	e004      	b.n	800b0a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b09a:	6839      	ldr	r1, [r7, #0]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f88a 	bl	800b1b6 <USBD_CtlError>
      break;
 800b0a2:	bf00      	nop
  }
}
 800b0a4:	bf00      	nop
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	885b      	ldrh	r3, [r3, #2]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d107      	bne.n	800b0ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f940 	bl	800b34c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b0cc:	e013      	b.n	800b0f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	885b      	ldrh	r3, [r3, #2]
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d10b      	bne.n	800b0ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	889b      	ldrh	r3, [r3, #4]
 800b0da:	0a1b      	lsrs	r3, r3, #8
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f930 	bl	800b34c <USBD_CtlSendStatus>
}
 800b0ec:	e003      	b.n	800b0f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f860 	bl	800b1b6 <USBD_CtlError>
}
 800b0f6:	bf00      	nop
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b082      	sub	sp, #8
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	3b01      	subs	r3, #1
 800b112:	2b02      	cmp	r3, #2
 800b114:	d80b      	bhi.n	800b12e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	885b      	ldrh	r3, [r3, #2]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d10c      	bne.n	800b138 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f910 	bl	800b34c <USBD_CtlSendStatus>
      }
      break;
 800b12c:	e004      	b.n	800b138 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f840 	bl	800b1b6 <USBD_CtlError>
      break;
 800b136:	e000      	b.n	800b13a <USBD_ClrFeature+0x3c>
      break;
 800b138:	bf00      	nop
  }
}
 800b13a:	bf00      	nop
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	781a      	ldrb	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3301      	adds	r3, #1
 800b15c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	781a      	ldrb	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3301      	adds	r3, #1
 800b16a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f7ff fa16 	bl	800a59e <SWAPBYTE>
 800b172:	4603      	mov	r3, r0
 800b174:	461a      	mov	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	3301      	adds	r3, #1
 800b17e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	3301      	adds	r3, #1
 800b184:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f7ff fa09 	bl	800a59e <SWAPBYTE>
 800b18c:	4603      	mov	r3, r0
 800b18e:	461a      	mov	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3301      	adds	r3, #1
 800b198:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3301      	adds	r3, #1
 800b19e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f7ff f9fc 	bl	800a59e <SWAPBYTE>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	80da      	strh	r2, [r3, #6]
}
 800b1ae:	bf00      	nop
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b082      	sub	sp, #8
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1c0:	2180      	movs	r1, #128	@ 0x80
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fd8e 	bl	800bce4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fd8a 	bl	800bce4 <USBD_LL_StallEP>
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d036      	beq.n	800b25c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b1f2:	6938      	ldr	r0, [r7, #16]
 800b1f4:	f000 f836 	bl	800b264 <USBD_GetLen>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	005b      	lsls	r3, r3, #1
 800b200:	b29a      	uxth	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	4413      	add	r3, r2
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	7812      	ldrb	r2, [r2, #0]
 800b210:	701a      	strb	r2, [r3, #0]
  idx++;
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	3301      	adds	r3, #1
 800b216:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b218:	7dfb      	ldrb	r3, [r7, #23]
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	4413      	add	r3, r2
 800b21e:	2203      	movs	r2, #3
 800b220:	701a      	strb	r2, [r3, #0]
  idx++;
 800b222:	7dfb      	ldrb	r3, [r7, #23]
 800b224:	3301      	adds	r3, #1
 800b226:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b228:	e013      	b.n	800b252 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	4413      	add	r3, r2
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	7812      	ldrb	r2, [r2, #0]
 800b234:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	3301      	adds	r3, #1
 800b23a:	613b      	str	r3, [r7, #16]
    idx++;
 800b23c:	7dfb      	ldrb	r3, [r7, #23]
 800b23e:	3301      	adds	r3, #1
 800b240:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b242:	7dfb      	ldrb	r3, [r7, #23]
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	4413      	add	r3, r2
 800b248:	2200      	movs	r2, #0
 800b24a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b24c:	7dfb      	ldrb	r3, [r7, #23]
 800b24e:	3301      	adds	r3, #1
 800b250:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1e7      	bne.n	800b22a <USBD_GetString+0x52>
 800b25a:	e000      	b.n	800b25e <USBD_GetString+0x86>
    return;
 800b25c:	bf00      	nop
  }
}
 800b25e:	3718      	adds	r7, #24
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b26c:	2300      	movs	r3, #0
 800b26e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b274:	e005      	b.n	800b282 <USBD_GetLen+0x1e>
  {
    len++;
 800b276:	7bfb      	ldrb	r3, [r7, #15]
 800b278:	3301      	adds	r3, #1
 800b27a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	3301      	adds	r3, #1
 800b280:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1f5      	bne.n	800b276 <USBD_GetLen+0x12>
  }

  return len;
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	2100      	movs	r1, #0
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f000 fdde 	bl	800be80 <USBD_LL_Transmit>

  return USBD_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	60f8      	str	r0, [r7, #12]
 800b2d6:	60b9      	str	r1, [r7, #8]
 800b2d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	2100      	movs	r1, #0
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f000 fdcd 	bl	800be80 <USBD_LL_Transmit>

  return USBD_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2203      	movs	r2, #3
 800b300:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	2100      	movs	r1, #0
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 fde8 	bl	800bef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b084      	sub	sp, #16
 800b32e:	af00      	add	r7, sp, #0
 800b330:	60f8      	str	r0, [r7, #12]
 800b332:	60b9      	str	r1, [r7, #8]
 800b334:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	2100      	movs	r1, #0
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f000 fdd7 	bl	800bef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2204      	movs	r2, #4
 800b358:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b35c:	2300      	movs	r3, #0
 800b35e:	2200      	movs	r2, #0
 800b360:	2100      	movs	r1, #0
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fd8c 	bl	800be80 <USBD_LL_Transmit>

  return USBD_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b082      	sub	sp, #8
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2205      	movs	r2, #5
 800b37e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b382:	2300      	movs	r3, #0
 800b384:	2200      	movs	r2, #0
 800b386:	2100      	movs	r1, #0
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fdb1 	bl	800bef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b39c:	2200      	movs	r2, #0
 800b39e:	4912      	ldr	r1, [pc, #72]	@ (800b3e8 <MX_USB_DEVICE_Init+0x50>)
 800b3a0:	4812      	ldr	r0, [pc, #72]	@ (800b3ec <MX_USB_DEVICE_Init+0x54>)
 800b3a2:	f7fe fcd9 	bl	8009d58 <USBD_Init>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b3ac:	f7f5 fe61 	bl	8001072 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b3b0:	490f      	ldr	r1, [pc, #60]	@ (800b3f0 <MX_USB_DEVICE_Init+0x58>)
 800b3b2:	480e      	ldr	r0, [pc, #56]	@ (800b3ec <MX_USB_DEVICE_Init+0x54>)
 800b3b4:	f7fe fd00 	bl	8009db8 <USBD_RegisterClass>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b3be:	f7f5 fe58 	bl	8001072 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b3c2:	490c      	ldr	r1, [pc, #48]	@ (800b3f4 <MX_USB_DEVICE_Init+0x5c>)
 800b3c4:	4809      	ldr	r0, [pc, #36]	@ (800b3ec <MX_USB_DEVICE_Init+0x54>)
 800b3c6:	f7fe fbf7 	bl	8009bb8 <USBD_CDC_RegisterInterface>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b3d0:	f7f5 fe4f 	bl	8001072 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b3d4:	4805      	ldr	r0, [pc, #20]	@ (800b3ec <MX_USB_DEVICE_Init+0x54>)
 800b3d6:	f7fe fd25 	bl	8009e24 <USBD_Start>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b3e0:	f7f5 fe47 	bl	8001072 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b3e4:	bf00      	nop
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	200000ac 	.word	0x200000ac
 800b3ec:	2000e974 	.word	0x2000e974
 800b3f0:	20000018 	.word	0x20000018
 800b3f4:	20000098 	.word	0x20000098

0800b3f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	4905      	ldr	r1, [pc, #20]	@ (800b414 <CDC_Init_FS+0x1c>)
 800b400:	4805      	ldr	r0, [pc, #20]	@ (800b418 <CDC_Init_FS+0x20>)
 800b402:	f7fe fbf3 	bl	8009bec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b406:	4905      	ldr	r1, [pc, #20]	@ (800b41c <CDC_Init_FS+0x24>)
 800b408:	4803      	ldr	r0, [pc, #12]	@ (800b418 <CDC_Init_FS+0x20>)
 800b40a:	f7fe fc11 	bl	8009c30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b40e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b410:	4618      	mov	r0, r3
 800b412:	bd80      	pop	{r7, pc}
 800b414:	2000f450 	.word	0x2000f450
 800b418:	2000e974 	.word	0x2000e974
 800b41c:	2000ec50 	.word	0x2000ec50

0800b420 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b420:	b480      	push	{r7}
 800b422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b424:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b426:	4618      	mov	r0, r3
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	4603      	mov	r3, r0
 800b438:	6039      	str	r1, [r7, #0]
 800b43a:	71fb      	strb	r3, [r7, #7]
 800b43c:	4613      	mov	r3, r2
 800b43e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	2b23      	cmp	r3, #35	@ 0x23
 800b444:	d84a      	bhi.n	800b4dc <CDC_Control_FS+0xac>
 800b446:	a201      	add	r2, pc, #4	@ (adr r2, 800b44c <CDC_Control_FS+0x1c>)
 800b448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44c:	0800b4dd 	.word	0x0800b4dd
 800b450:	0800b4dd 	.word	0x0800b4dd
 800b454:	0800b4dd 	.word	0x0800b4dd
 800b458:	0800b4dd 	.word	0x0800b4dd
 800b45c:	0800b4dd 	.word	0x0800b4dd
 800b460:	0800b4dd 	.word	0x0800b4dd
 800b464:	0800b4dd 	.word	0x0800b4dd
 800b468:	0800b4dd 	.word	0x0800b4dd
 800b46c:	0800b4dd 	.word	0x0800b4dd
 800b470:	0800b4dd 	.word	0x0800b4dd
 800b474:	0800b4dd 	.word	0x0800b4dd
 800b478:	0800b4dd 	.word	0x0800b4dd
 800b47c:	0800b4dd 	.word	0x0800b4dd
 800b480:	0800b4dd 	.word	0x0800b4dd
 800b484:	0800b4dd 	.word	0x0800b4dd
 800b488:	0800b4dd 	.word	0x0800b4dd
 800b48c:	0800b4dd 	.word	0x0800b4dd
 800b490:	0800b4dd 	.word	0x0800b4dd
 800b494:	0800b4dd 	.word	0x0800b4dd
 800b498:	0800b4dd 	.word	0x0800b4dd
 800b49c:	0800b4dd 	.word	0x0800b4dd
 800b4a0:	0800b4dd 	.word	0x0800b4dd
 800b4a4:	0800b4dd 	.word	0x0800b4dd
 800b4a8:	0800b4dd 	.word	0x0800b4dd
 800b4ac:	0800b4dd 	.word	0x0800b4dd
 800b4b0:	0800b4dd 	.word	0x0800b4dd
 800b4b4:	0800b4dd 	.word	0x0800b4dd
 800b4b8:	0800b4dd 	.word	0x0800b4dd
 800b4bc:	0800b4dd 	.word	0x0800b4dd
 800b4c0:	0800b4dd 	.word	0x0800b4dd
 800b4c4:	0800b4dd 	.word	0x0800b4dd
 800b4c8:	0800b4dd 	.word	0x0800b4dd
 800b4cc:	0800b4dd 	.word	0x0800b4dd
 800b4d0:	0800b4dd 	.word	0x0800b4dd
 800b4d4:	0800b4dd 	.word	0x0800b4dd
 800b4d8:	0800b4dd 	.word	0x0800b4dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b4dc:	bf00      	nop
  }

  return (USBD_OK);
 800b4de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	4808      	ldr	r0, [pc, #32]	@ (800b51c <CDC_Receive_FS+0x30>)
 800b4fa:	f7fe fb99 	bl	8009c30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b4fe:	4807      	ldr	r0, [pc, #28]	@ (800b51c <CDC_Receive_FS+0x30>)
 800b500:	f7fe fbf4 	bl	8009cec <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  USB_My_Receive(Buf, *Len);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4619      	mov	r1, r3
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7f5 fb68 	bl	8000be0 <USB_My_Receive>

  return (USBD_OK);
 800b510:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	2000e974 	.word	0x2000e974

0800b520 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b530:	4b0d      	ldr	r3, [pc, #52]	@ (800b568 <CDC_Transmit_FS+0x48>)
 800b532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b536:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b542:	2301      	movs	r3, #1
 800b544:	e00b      	b.n	800b55e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b546:	887b      	ldrh	r3, [r7, #2]
 800b548:	461a      	mov	r2, r3
 800b54a:	6879      	ldr	r1, [r7, #4]
 800b54c:	4806      	ldr	r0, [pc, #24]	@ (800b568 <CDC_Transmit_FS+0x48>)
 800b54e:	f7fe fb4d 	bl	8009bec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b552:	4805      	ldr	r0, [pc, #20]	@ (800b568 <CDC_Transmit_FS+0x48>)
 800b554:	f7fe fb8a 	bl	8009c6c <USBD_CDC_TransmitPacket>
 800b558:	4603      	mov	r3, r0
 800b55a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	2000e974 	.word	0x2000e974

0800b56c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	4613      	mov	r3, r2
 800b578:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b57e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b582:	4618      	mov	r0, r3
 800b584:	371c      	adds	r7, #28
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
	...

0800b590 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	4603      	mov	r3, r0
 800b598:	6039      	str	r1, [r7, #0]
 800b59a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2212      	movs	r2, #18
 800b5a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5a2:	4b03      	ldr	r3, [pc, #12]	@ (800b5b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	200000cc 	.word	0x200000cc

0800b5b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	6039      	str	r1, [r7, #0]
 800b5be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	2204      	movs	r2, #4
 800b5c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5c6:	4b03      	ldr	r3, [pc, #12]	@ (800b5d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	200000ec 	.word	0x200000ec

0800b5d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	4603      	mov	r3, r0
 800b5e0:	6039      	str	r1, [r7, #0]
 800b5e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5e4:	79fb      	ldrb	r3, [r7, #7]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d105      	bne.n	800b5f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	4907      	ldr	r1, [pc, #28]	@ (800b60c <USBD_FS_ProductStrDescriptor+0x34>)
 800b5ee:	4808      	ldr	r0, [pc, #32]	@ (800b610 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5f0:	f7ff fdf2 	bl	800b1d8 <USBD_GetString>
 800b5f4:	e004      	b.n	800b600 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	4904      	ldr	r1, [pc, #16]	@ (800b60c <USBD_FS_ProductStrDescriptor+0x34>)
 800b5fa:	4805      	ldr	r0, [pc, #20]	@ (800b610 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5fc:	f7ff fdec 	bl	800b1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b600:	4b02      	ldr	r3, [pc, #8]	@ (800b60c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b602:	4618      	mov	r0, r3
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	2000fc50 	.word	0x2000fc50
 800b610:	0800c0ec 	.word	0x0800c0ec

0800b614 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	4603      	mov	r3, r0
 800b61c:	6039      	str	r1, [r7, #0]
 800b61e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	4904      	ldr	r1, [pc, #16]	@ (800b634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b624:	4804      	ldr	r0, [pc, #16]	@ (800b638 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b626:	f7ff fdd7 	bl	800b1d8 <USBD_GetString>
  return USBD_StrDesc;
 800b62a:	4b02      	ldr	r3, [pc, #8]	@ (800b634 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3708      	adds	r7, #8
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	2000fc50 	.word	0x2000fc50
 800b638:	0800c104 	.word	0x0800c104

0800b63c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	4603      	mov	r3, r0
 800b644:	6039      	str	r1, [r7, #0]
 800b646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	221a      	movs	r2, #26
 800b64c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b64e:	f000 f855 	bl	800b6fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b652:	4b02      	ldr	r3, [pc, #8]	@ (800b65c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	200000f0 	.word	0x200000f0

0800b660 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	4603      	mov	r3, r0
 800b668:	6039      	str	r1, [r7, #0]
 800b66a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d105      	bne.n	800b67e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	4907      	ldr	r1, [pc, #28]	@ (800b694 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b676:	4808      	ldr	r0, [pc, #32]	@ (800b698 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b678:	f7ff fdae 	bl	800b1d8 <USBD_GetString>
 800b67c:	e004      	b.n	800b688 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	4904      	ldr	r1, [pc, #16]	@ (800b694 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b682:	4805      	ldr	r0, [pc, #20]	@ (800b698 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b684:	f7ff fda8 	bl	800b1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b688:	4b02      	ldr	r3, [pc, #8]	@ (800b694 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	2000fc50 	.word	0x2000fc50
 800b698:	0800c118 	.word	0x0800c118

0800b69c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	6039      	str	r1, [r7, #0]
 800b6a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6a8:	79fb      	ldrb	r3, [r7, #7]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d105      	bne.n	800b6ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	4907      	ldr	r1, [pc, #28]	@ (800b6d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6b2:	4808      	ldr	r0, [pc, #32]	@ (800b6d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6b4:	f7ff fd90 	bl	800b1d8 <USBD_GetString>
 800b6b8:	e004      	b.n	800b6c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	4904      	ldr	r1, [pc, #16]	@ (800b6d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6be:	4805      	ldr	r0, [pc, #20]	@ (800b6d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6c0:	f7ff fd8a 	bl	800b1d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6c4:	4b02      	ldr	r3, [pc, #8]	@ (800b6d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	2000fc50 	.word	0x2000fc50
 800b6d4:	0800c124 	.word	0x0800c124

0800b6d8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	6039      	str	r1, [r7, #0]
 800b6e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	220c      	movs	r2, #12
 800b6e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b6ea:	4b03      	ldr	r3, [pc, #12]	@ (800b6f8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	200000e0 	.word	0x200000e0

0800b6fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b702:	4b0f      	ldr	r3, [pc, #60]	@ (800b740 <Get_SerialNum+0x44>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b708:	4b0e      	ldr	r3, [pc, #56]	@ (800b744 <Get_SerialNum+0x48>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b70e:	4b0e      	ldr	r3, [pc, #56]	@ (800b748 <Get_SerialNum+0x4c>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4413      	add	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d009      	beq.n	800b736 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b722:	2208      	movs	r2, #8
 800b724:	4909      	ldr	r1, [pc, #36]	@ (800b74c <Get_SerialNum+0x50>)
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 f814 	bl	800b754 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b72c:	2204      	movs	r2, #4
 800b72e:	4908      	ldr	r1, [pc, #32]	@ (800b750 <Get_SerialNum+0x54>)
 800b730:	68b8      	ldr	r0, [r7, #8]
 800b732:	f000 f80f 	bl	800b754 <IntToUnicode>
  }
}
 800b736:	bf00      	nop
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	1fff7590 	.word	0x1fff7590
 800b744:	1fff7594 	.word	0x1fff7594
 800b748:	1fff7598 	.word	0x1fff7598
 800b74c:	200000f2 	.word	0x200000f2
 800b750:	20000102 	.word	0x20000102

0800b754 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b754:	b480      	push	{r7}
 800b756:	b087      	sub	sp, #28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	4613      	mov	r3, r2
 800b760:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b766:	2300      	movs	r3, #0
 800b768:	75fb      	strb	r3, [r7, #23]
 800b76a:	e027      	b.n	800b7bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	0f1b      	lsrs	r3, r3, #28
 800b770:	2b09      	cmp	r3, #9
 800b772:	d80b      	bhi.n	800b78c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	0f1b      	lsrs	r3, r3, #28
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	4619      	mov	r1, r3
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	440b      	add	r3, r1
 800b784:	3230      	adds	r2, #48	@ 0x30
 800b786:	b2d2      	uxtb	r2, r2
 800b788:	701a      	strb	r2, [r3, #0]
 800b78a:	e00a      	b.n	800b7a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	0f1b      	lsrs	r3, r3, #28
 800b790:	b2da      	uxtb	r2, r3
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	005b      	lsls	r3, r3, #1
 800b796:	4619      	mov	r1, r3
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	440b      	add	r3, r1
 800b79c:	3237      	adds	r2, #55	@ 0x37
 800b79e:	b2d2      	uxtb	r2, r2
 800b7a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	011b      	lsls	r3, r3, #4
 800b7a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7a8:	7dfb      	ldrb	r3, [r7, #23]
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	75fb      	strb	r3, [r7, #23]
 800b7bc:	7dfa      	ldrb	r2, [r7, #23]
 800b7be:	79fb      	ldrb	r3, [r7, #7]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d3d3      	bcc.n	800b76c <IntToUnicode+0x18>
  }
}
 800b7c4:	bf00      	nop
 800b7c6:	bf00      	nop
 800b7c8:	371c      	adds	r7, #28
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
	...

0800b7d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b0b0      	sub	sp, #192	@ 0xc0
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	601a      	str	r2, [r3, #0]
 800b7e4:	605a      	str	r2, [r3, #4]
 800b7e6:	609a      	str	r2, [r3, #8]
 800b7e8:	60da      	str	r2, [r3, #12]
 800b7ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b7ec:	f107 0318 	add.w	r3, r7, #24
 800b7f0:	2294      	movs	r2, #148	@ 0x94
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 fc33 	bl	800c060 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b802:	d174      	bne.n	800b8ee <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b804:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b808:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b80a:	2300      	movs	r3, #0
 800b80c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b810:	f107 0318 	add.w	r3, r7, #24
 800b814:	4618      	mov	r0, r3
 800b816:	f7fa faef 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b820:	f7f5 fc27 	bl	8001072 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b824:	4b34      	ldr	r3, [pc, #208]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b828:	4a33      	ldr	r2, [pc, #204]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b82a:	f043 0301 	orr.w	r3, r3, #1
 800b82e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b830:	4b31      	ldr	r3, [pc, #196]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	617b      	str	r3, [r7, #20]
 800b83a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b83c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800b840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b844:	2302      	movs	r3, #2
 800b846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b84a:	2300      	movs	r3, #0
 800b84c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b850:	2303      	movs	r3, #3
 800b852:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b856:	230a      	movs	r3, #10
 800b858:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b85c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b860:	4619      	mov	r1, r3
 800b862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b866:	f7f7 ff87 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b86a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b86e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b872:	2300      	movs	r3, #0
 800b874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b878:	2300      	movs	r3, #0
 800b87a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b87e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b882:	4619      	mov	r1, r3
 800b884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b888:	f7f7 ff76 	bl	8003778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b88c:	4b1a      	ldr	r3, [pc, #104]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b88e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b890:	4a19      	ldr	r2, [pc, #100]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b892:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b898:	4b17      	ldr	r3, [pc, #92]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b89a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b89c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b8a0:	613b      	str	r3, [r7, #16]
 800b8a2:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b8a4:	4b14      	ldr	r3, [pc, #80]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b8a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d114      	bne.n	800b8da <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b8b0:	4b11      	ldr	r3, [pc, #68]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b8b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8b4:	4a10      	ldr	r2, [pc, #64]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b8b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8ba:	6593      	str	r3, [r2, #88]	@ 0x58
 800b8bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b8be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8c4:	60fb      	str	r3, [r7, #12]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800b8c8:	f7f9 fb9e 	bl	8005008 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b8ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8d0:	4a09      	ldr	r2, [pc, #36]	@ (800b8f8 <HAL_PCD_MspInit+0x124>)
 800b8d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800b8d8:	e001      	b.n	800b8de <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b8da:	f7f9 fb95 	bl	8005008 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b8de:	2200      	movs	r2, #0
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	2043      	movs	r0, #67	@ 0x43
 800b8e4:	f7f7 fc57 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8e8:	2043      	movs	r0, #67	@ 0x43
 800b8ea:	f7f7 fc70 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8ee:	bf00      	nop
 800b8f0:	37c0      	adds	r7, #192	@ 0xc0
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	40021000 	.word	0x40021000

0800b8fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800b910:	4619      	mov	r1, r3
 800b912:	4610      	mov	r0, r2
 800b914:	f7fe fad3 	bl	8009ebe <USBD_LL_SetupStage>
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b932:	78fa      	ldrb	r2, [r7, #3]
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	4613      	mov	r3, r2
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	440b      	add	r3, r1
 800b940:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	78fb      	ldrb	r3, [r7, #3]
 800b948:	4619      	mov	r1, r3
 800b94a:	f7fe fb0d 	bl	8009f68 <USBD_LL_DataOutStage>
}
 800b94e:	bf00      	nop
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	460b      	mov	r3, r1
 800b960:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b968:	78fa      	ldrb	r2, [r7, #3]
 800b96a:	6879      	ldr	r1, [r7, #4]
 800b96c:	4613      	mov	r3, r2
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	440b      	add	r3, r1
 800b976:	3348      	adds	r3, #72	@ 0x48
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	78fb      	ldrb	r3, [r7, #3]
 800b97c:	4619      	mov	r1, r3
 800b97e:	f7fe fba6 	bl	800a0ce <USBD_LL_DataInStage>
}
 800b982:	bf00      	nop
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b082      	sub	sp, #8
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fe fce0 	bl	800a35e <USBD_LL_SOF>
}
 800b99e:	bf00      	nop
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b084      	sub	sp, #16
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d001      	beq.n	800b9be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9ba:	f7f5 fb5a 	bl	8001072 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b9c4:	7bfa      	ldrb	r2, [r7, #15]
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe fc84 	bl	800a2d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe fc2c 	bl	800a232 <USBD_LL_Reset>
}
 800b9da:	bf00      	nop
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
	...

0800b9e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	6812      	ldr	r2, [r2, #0]
 800b9fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b9fe:	f043 0301 	orr.w	r3, r3, #1
 800ba02:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe fc73 	bl	800a2f6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6a1b      	ldr	r3, [r3, #32]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d005      	beq.n	800ba24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba18:	4b04      	ldr	r3, [pc, #16]	@ (800ba2c <HAL_PCD_SuspendCallback+0x48>)
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	4a03      	ldr	r2, [pc, #12]	@ (800ba2c <HAL_PCD_SuspendCallback+0x48>)
 800ba1e:	f043 0306 	orr.w	r3, r3, #6
 800ba22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba24:	bf00      	nop
 800ba26:	3708      	adds	r7, #8
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	e000ed00 	.word	0xe000ed00

0800ba30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	6812      	ldr	r2, [r2, #0]
 800ba46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ba4a:	f023 0301 	bic.w	r3, r3, #1
 800ba4e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a1b      	ldr	r3, [r3, #32]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d007      	beq.n	800ba68 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba58:	4b08      	ldr	r3, [pc, #32]	@ (800ba7c <HAL_PCD_ResumeCallback+0x4c>)
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	4a07      	ldr	r2, [pc, #28]	@ (800ba7c <HAL_PCD_ResumeCallback+0x4c>)
 800ba5e:	f023 0306 	bic.w	r3, r3, #6
 800ba62:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ba64:	f000 faf6 	bl	800c054 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fe fc5d 	bl	800a32e <USBD_LL_Resume>
}
 800ba74:	bf00      	nop
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	e000ed00 	.word	0xe000ed00

0800ba80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800ba92:	78fa      	ldrb	r2, [r7, #3]
 800ba94:	4611      	mov	r1, r2
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fe fcb3 	bl	800a402 <USBD_LL_IsoOUTIncomplete>
}
 800ba9c:	bf00      	nop
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bab6:	78fa      	ldrb	r2, [r7, #3]
 800bab8:	4611      	mov	r1, r2
 800baba:	4618      	mov	r0, r3
 800babc:	f7fe fc6f 	bl	800a39e <USBD_LL_IsoINIncomplete>
}
 800bac0:	bf00      	nop
 800bac2:	3708      	adds	r7, #8
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fe fcc5 	bl	800a466 <USBD_LL_DevConnected>
}
 800badc:	bf00      	nop
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fe fcc2 	bl	800a47c <USBD_LL_DevDisconnected>
}
 800baf8:	bf00      	nop
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d13c      	bne.n	800bb8a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bb10:	4a20      	ldr	r2, [pc, #128]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a1e      	ldr	r2, [pc, #120]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb1c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb20:	4b1c      	ldr	r3, [pc, #112]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bb26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bb28:	4b1a      	ldr	r3, [pc, #104]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb2a:	2206      	movs	r2, #6
 800bb2c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bb2e:	4b19      	ldr	r3, [pc, #100]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb30:	2202      	movs	r2, #2
 800bb32:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb34:	4b17      	ldr	r3, [pc, #92]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb36:	2202      	movs	r2, #2
 800bb38:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb3a:	4b16      	ldr	r3, [pc, #88]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb40:	4b14      	ldr	r3, [pc, #80]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb46:	4b13      	ldr	r3, [pc, #76]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bb4c:	4b11      	ldr	r3, [pc, #68]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb52:	4b10      	ldr	r3, [pc, #64]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bb58:	4b0e      	ldr	r3, [pc, #56]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb5e:	480d      	ldr	r0, [pc, #52]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb60:	f7f7 ffe6 	bl	8003b30 <HAL_PCD_Init>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb6a:	f7f5 fa82 	bl	8001072 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bb6e:	2180      	movs	r1, #128	@ 0x80
 800bb70:	4808      	ldr	r0, [pc, #32]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb72:	f7f9 f950 	bl	8004e16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bb76:	2240      	movs	r2, #64	@ 0x40
 800bb78:	2100      	movs	r1, #0
 800bb7a:	4806      	ldr	r0, [pc, #24]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb7c:	f7f9 f904 	bl	8004d88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bb80:	2280      	movs	r2, #128	@ 0x80
 800bb82:	2101      	movs	r1, #1
 800bb84:	4803      	ldr	r0, [pc, #12]	@ (800bb94 <USBD_LL_Init+0x94>)
 800bb86:	f7f9 f8ff 	bl	8004d88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	2000fe50 	.word	0x2000fe50

0800bb98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7f8 f8e2 	bl	8003d78 <HAL_PCD_Start>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bbb8:	7bbb      	ldrb	r3, [r7, #14]
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	d816      	bhi.n	800bbec <USBD_LL_Start+0x54>
 800bbbe:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc4 <USBD_LL_Start+0x2c>)
 800bbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc4:	0800bbd5 	.word	0x0800bbd5
 800bbc8:	0800bbdb 	.word	0x0800bbdb
 800bbcc:	0800bbe1 	.word	0x0800bbe1
 800bbd0:	0800bbe7 	.word	0x0800bbe7
    case HAL_OK :
      usb_status = USBD_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd8:	e00b      	b.n	800bbf2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbde:	e008      	b.n	800bbf2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbe4:	e005      	b.n	800bbf2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	73fb      	strb	r3, [r7, #15]
    break;
 800bbea:	e002      	b.n	800bbf2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bbec:	2303      	movs	r3, #3
 800bbee:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf0:	bf00      	nop
  }
  return usb_status;
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	4608      	mov	r0, r1
 800bc06:	4611      	mov	r1, r2
 800bc08:	461a      	mov	r2, r3
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	70fb      	strb	r3, [r7, #3]
 800bc0e:	460b      	mov	r3, r1
 800bc10:	70bb      	strb	r3, [r7, #2]
 800bc12:	4613      	mov	r3, r2
 800bc14:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bc24:	78bb      	ldrb	r3, [r7, #2]
 800bc26:	883a      	ldrh	r2, [r7, #0]
 800bc28:	78f9      	ldrb	r1, [r7, #3]
 800bc2a:	f7f8 fd8c 	bl	8004746 <HAL_PCD_EP_Open>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc32:	7bbb      	ldrb	r3, [r7, #14]
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	d817      	bhi.n	800bc68 <USBD_LL_OpenEP+0x6c>
 800bc38:	a201      	add	r2, pc, #4	@ (adr r2, 800bc40 <USBD_LL_OpenEP+0x44>)
 800bc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3e:	bf00      	nop
 800bc40:	0800bc51 	.word	0x0800bc51
 800bc44:	0800bc57 	.word	0x0800bc57
 800bc48:	0800bc5d 	.word	0x0800bc5d
 800bc4c:	0800bc63 	.word	0x0800bc63
    case HAL_OK :
      usb_status = USBD_OK;
 800bc50:	2300      	movs	r3, #0
 800bc52:	73fb      	strb	r3, [r7, #15]
    break;
 800bc54:	e00b      	b.n	800bc6e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc56:	2303      	movs	r3, #3
 800bc58:	73fb      	strb	r3, [r7, #15]
    break;
 800bc5a:	e008      	b.n	800bc6e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc60:	e005      	b.n	800bc6e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc62:	2303      	movs	r3, #3
 800bc64:	73fb      	strb	r3, [r7, #15]
    break;
 800bc66:	e002      	b.n	800bc6e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc6c:	bf00      	nop
  }
  return usb_status;
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc92:	78fa      	ldrb	r2, [r7, #3]
 800bc94:	4611      	mov	r1, r2
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7f8 fdbd 	bl	8004816 <HAL_PCD_EP_Close>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bca0:	7bbb      	ldrb	r3, [r7, #14]
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d816      	bhi.n	800bcd4 <USBD_LL_CloseEP+0x5c>
 800bca6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcac <USBD_LL_CloseEP+0x34>)
 800bca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcac:	0800bcbd 	.word	0x0800bcbd
 800bcb0:	0800bcc3 	.word	0x0800bcc3
 800bcb4:	0800bcc9 	.word	0x0800bcc9
 800bcb8:	0800bccf 	.word	0x0800bccf
    case HAL_OK :
      usb_status = USBD_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc0:	e00b      	b.n	800bcda <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc6:	e008      	b.n	800bcda <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	73fb      	strb	r3, [r7, #15]
    break;
 800bccc:	e005      	b.n	800bcda <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd2:	e002      	b.n	800bcda <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcd8:	bf00      	nop
  }
  return usb_status;
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bcfe:	78fa      	ldrb	r2, [r7, #3]
 800bd00:	4611      	mov	r1, r2
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7f8 fe4c 	bl	80049a0 <HAL_PCD_EP_SetStall>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d816      	bhi.n	800bd40 <USBD_LL_StallEP+0x5c>
 800bd12:	a201      	add	r2, pc, #4	@ (adr r2, 800bd18 <USBD_LL_StallEP+0x34>)
 800bd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd18:	0800bd29 	.word	0x0800bd29
 800bd1c:	0800bd2f 	.word	0x0800bd2f
 800bd20:	0800bd35 	.word	0x0800bd35
 800bd24:	0800bd3b 	.word	0x0800bd3b
    case HAL_OK :
      usb_status = USBD_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd2c:	e00b      	b.n	800bd46 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	73fb      	strb	r3, [r7, #15]
    break;
 800bd32:	e008      	b.n	800bd46 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd34:	2301      	movs	r3, #1
 800bd36:	73fb      	strb	r3, [r7, #15]
    break;
 800bd38:	e005      	b.n	800bd46 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3e:	e002      	b.n	800bd46 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd40:	2303      	movs	r3, #3
 800bd42:	73fb      	strb	r3, [r7, #15]
    break;
 800bd44:	bf00      	nop
  }
  return usb_status;
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd60:	2300      	movs	r3, #0
 800bd62:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd6a:	78fa      	ldrb	r2, [r7, #3]
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7f8 fe78 	bl	8004a64 <HAL_PCD_EP_ClrStall>
 800bd74:	4603      	mov	r3, r0
 800bd76:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	2b03      	cmp	r3, #3
 800bd7c:	d816      	bhi.n	800bdac <USBD_LL_ClearStallEP+0x5c>
 800bd7e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd84 <USBD_LL_ClearStallEP+0x34>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800bd95 	.word	0x0800bd95
 800bd88:	0800bd9b 	.word	0x0800bd9b
 800bd8c:	0800bda1 	.word	0x0800bda1
 800bd90:	0800bda7 	.word	0x0800bda7
    case HAL_OK :
      usb_status = USBD_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	73fb      	strb	r3, [r7, #15]
    break;
 800bd98:	e00b      	b.n	800bdb2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd9e:	e008      	b.n	800bdb2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bda0:	2301      	movs	r3, #1
 800bda2:	73fb      	strb	r3, [r7, #15]
    break;
 800bda4:	e005      	b.n	800bdb2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bda6:	2303      	movs	r3, #3
 800bda8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdaa:	e002      	b.n	800bdb2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bdac:	2303      	movs	r3, #3
 800bdae:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb0:	bf00      	nop
  }
  return usb_status;
 800bdb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bdd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	da0b      	bge.n	800bdf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bdd8:	78fb      	ldrb	r3, [r7, #3]
 800bdda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdde:	68f9      	ldr	r1, [r7, #12]
 800bde0:	4613      	mov	r3, r2
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	440b      	add	r3, r1
 800bdea:	333e      	adds	r3, #62	@ 0x3e
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	e00b      	b.n	800be08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bdf0:	78fb      	ldrb	r3, [r7, #3]
 800bdf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdf6:	68f9      	ldr	r1, [r7, #12]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	4413      	add	r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	440b      	add	r3, r1
 800be02:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800be06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	460b      	mov	r3, r1
 800be1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be20:	2300      	movs	r3, #0
 800be22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be24:	2300      	movs	r3, #0
 800be26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be2e:	78fa      	ldrb	r2, [r7, #3]
 800be30:	4611      	mov	r1, r2
 800be32:	4618      	mov	r0, r3
 800be34:	f7f8 fc62 	bl	80046fc <HAL_PCD_SetAddress>
 800be38:	4603      	mov	r3, r0
 800be3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be3c:	7bbb      	ldrb	r3, [r7, #14]
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d816      	bhi.n	800be70 <USBD_LL_SetUSBAddress+0x5c>
 800be42:	a201      	add	r2, pc, #4	@ (adr r2, 800be48 <USBD_LL_SetUSBAddress+0x34>)
 800be44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be48:	0800be59 	.word	0x0800be59
 800be4c:	0800be5f 	.word	0x0800be5f
 800be50:	0800be65 	.word	0x0800be65
 800be54:	0800be6b 	.word	0x0800be6b
    case HAL_OK :
      usb_status = USBD_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	73fb      	strb	r3, [r7, #15]
    break;
 800be5c:	e00b      	b.n	800be76 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be5e:	2303      	movs	r3, #3
 800be60:	73fb      	strb	r3, [r7, #15]
    break;
 800be62:	e008      	b.n	800be76 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be64:	2301      	movs	r3, #1
 800be66:	73fb      	strb	r3, [r7, #15]
    break;
 800be68:	e005      	b.n	800be76 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be6a:	2303      	movs	r3, #3
 800be6c:	73fb      	strb	r3, [r7, #15]
    break;
 800be6e:	e002      	b.n	800be76 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800be70:	2303      	movs	r3, #3
 800be72:	73fb      	strb	r3, [r7, #15]
    break;
 800be74:	bf00      	nop
  }
  return usb_status;
 800be76:	7bfb      	ldrb	r3, [r7, #15]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	607a      	str	r2, [r7, #4]
 800be8a:	603b      	str	r3, [r7, #0]
 800be8c:	460b      	mov	r3, r1
 800be8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800be9e:	7af9      	ldrb	r1, [r7, #11]
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	f7f8 fd4b 	bl	800493e <HAL_PCD_EP_Transmit>
 800bea8:	4603      	mov	r3, r0
 800beaa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800beac:	7dbb      	ldrb	r3, [r7, #22]
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d816      	bhi.n	800bee0 <USBD_LL_Transmit+0x60>
 800beb2:	a201      	add	r2, pc, #4	@ (adr r2, 800beb8 <USBD_LL_Transmit+0x38>)
 800beb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb8:	0800bec9 	.word	0x0800bec9
 800bebc:	0800becf 	.word	0x0800becf
 800bec0:	0800bed5 	.word	0x0800bed5
 800bec4:	0800bedb 	.word	0x0800bedb
    case HAL_OK :
      usb_status = USBD_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	75fb      	strb	r3, [r7, #23]
    break;
 800becc:	e00b      	b.n	800bee6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bece:	2303      	movs	r3, #3
 800bed0:	75fb      	strb	r3, [r7, #23]
    break;
 800bed2:	e008      	b.n	800bee6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bed4:	2301      	movs	r3, #1
 800bed6:	75fb      	strb	r3, [r7, #23]
    break;
 800bed8:	e005      	b.n	800bee6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800beda:	2303      	movs	r3, #3
 800bedc:	75fb      	strb	r3, [r7, #23]
    break;
 800bede:	e002      	b.n	800bee6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bee0:	2303      	movs	r3, #3
 800bee2:	75fb      	strb	r3, [r7, #23]
    break;
 800bee4:	bf00      	nop
  }
  return usb_status;
 800bee6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3718      	adds	r7, #24
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	607a      	str	r2, [r7, #4]
 800befa:	603b      	str	r3, [r7, #0]
 800befc:	460b      	mov	r3, r1
 800befe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf0e:	7af9      	ldrb	r1, [r7, #11]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	f7f8 fcc9 	bl	80048aa <HAL_PCD_EP_Receive>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bf1c:	7dbb      	ldrb	r3, [r7, #22]
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	d816      	bhi.n	800bf50 <USBD_LL_PrepareReceive+0x60>
 800bf22:	a201      	add	r2, pc, #4	@ (adr r2, 800bf28 <USBD_LL_PrepareReceive+0x38>)
 800bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf28:	0800bf39 	.word	0x0800bf39
 800bf2c:	0800bf3f 	.word	0x0800bf3f
 800bf30:	0800bf45 	.word	0x0800bf45
 800bf34:	0800bf4b 	.word	0x0800bf4b
    case HAL_OK :
      usb_status = USBD_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	75fb      	strb	r3, [r7, #23]
    break;
 800bf3c:	e00b      	b.n	800bf56 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	75fb      	strb	r3, [r7, #23]
    break;
 800bf42:	e008      	b.n	800bf56 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf44:	2301      	movs	r3, #1
 800bf46:	75fb      	strb	r3, [r7, #23]
    break;
 800bf48:	e005      	b.n	800bf56 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	75fb      	strb	r3, [r7, #23]
    break;
 800bf4e:	e002      	b.n	800bf56 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bf50:	2303      	movs	r3, #3
 800bf52:	75fb      	strb	r3, [r7, #23]
    break;
 800bf54:	bf00      	nop
  }
  return usb_status;
 800bf56:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3718      	adds	r7, #24
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	460b      	mov	r3, r1
 800bf6a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf72:	78fa      	ldrb	r2, [r7, #3]
 800bf74:	4611      	mov	r1, r2
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7f8 fcc9 	bl	800490e <HAL_PCD_EP_GetRxCount>
 800bf7c:	4603      	mov	r3, r0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
	...

0800bf88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	460b      	mov	r3, r1
 800bf92:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d002      	beq.n	800bfa0 <HAL_PCDEx_LPM_Callback+0x18>
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d01f      	beq.n	800bfde <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bf9e:	e03b      	b.n	800c018 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a1b      	ldr	r3, [r3, #32]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d007      	beq.n	800bfb8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bfa8:	f000 f854 	bl	800c054 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfac:	4b1c      	ldr	r3, [pc, #112]	@ (800c020 <HAL_PCDEx_LPM_Callback+0x98>)
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	4a1b      	ldr	r2, [pc, #108]	@ (800c020 <HAL_PCDEx_LPM_Callback+0x98>)
 800bfb2:	f023 0306 	bic.w	r3, r3, #6
 800bfb6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	6812      	ldr	r2, [r2, #0]
 800bfc6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bfca:	f023 0301 	bic.w	r3, r3, #1
 800bfce:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fe f9a9 	bl	800a32e <USBD_LL_Resume>
    break;
 800bfdc:	e01c      	b.n	800c018 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	6812      	ldr	r2, [r2, #0]
 800bfec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bff0:	f043 0301 	orr.w	r3, r3, #1
 800bff4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fe f97a 	bl	800a2f6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a1b      	ldr	r3, [r3, #32]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d005      	beq.n	800c016 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c00a:	4b05      	ldr	r3, [pc, #20]	@ (800c020 <HAL_PCDEx_LPM_Callback+0x98>)
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	4a04      	ldr	r2, [pc, #16]	@ (800c020 <HAL_PCDEx_LPM_Callback+0x98>)
 800c010:	f043 0306 	orr.w	r3, r3, #6
 800c014:	6113      	str	r3, [r2, #16]
    break;
 800c016:	bf00      	nop
}
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	e000ed00 	.word	0xe000ed00

0800c024 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c02c:	4b03      	ldr	r3, [pc, #12]	@ (800c03c <USBD_static_malloc+0x18>)
}
 800c02e:	4618      	mov	r0, r3
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	2001035c 	.word	0x2001035c

0800c040 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]

}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c058:	f7f4 ffb8 	bl	8000fcc <SystemClock_Config>
}
 800c05c:	bf00      	nop
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <memset>:
 800c060:	4402      	add	r2, r0
 800c062:	4603      	mov	r3, r0
 800c064:	4293      	cmp	r3, r2
 800c066:	d100      	bne.n	800c06a <memset+0xa>
 800c068:	4770      	bx	lr
 800c06a:	f803 1b01 	strb.w	r1, [r3], #1
 800c06e:	e7f9      	b.n	800c064 <memset+0x4>

0800c070 <__libc_init_array>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	4d0d      	ldr	r5, [pc, #52]	@ (800c0a8 <__libc_init_array+0x38>)
 800c074:	4c0d      	ldr	r4, [pc, #52]	@ (800c0ac <__libc_init_array+0x3c>)
 800c076:	1b64      	subs	r4, r4, r5
 800c078:	10a4      	asrs	r4, r4, #2
 800c07a:	2600      	movs	r6, #0
 800c07c:	42a6      	cmp	r6, r4
 800c07e:	d109      	bne.n	800c094 <__libc_init_array+0x24>
 800c080:	4d0b      	ldr	r5, [pc, #44]	@ (800c0b0 <__libc_init_array+0x40>)
 800c082:	4c0c      	ldr	r4, [pc, #48]	@ (800c0b4 <__libc_init_array+0x44>)
 800c084:	f000 f826 	bl	800c0d4 <_init>
 800c088:	1b64      	subs	r4, r4, r5
 800c08a:	10a4      	asrs	r4, r4, #2
 800c08c:	2600      	movs	r6, #0
 800c08e:	42a6      	cmp	r6, r4
 800c090:	d105      	bne.n	800c09e <__libc_init_array+0x2e>
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	f855 3b04 	ldr.w	r3, [r5], #4
 800c098:	4798      	blx	r3
 800c09a:	3601      	adds	r6, #1
 800c09c:	e7ee      	b.n	800c07c <__libc_init_array+0xc>
 800c09e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0a2:	4798      	blx	r3
 800c0a4:	3601      	adds	r6, #1
 800c0a6:	e7f2      	b.n	800c08e <__libc_init_array+0x1e>
 800c0a8:	0800c1ac 	.word	0x0800c1ac
 800c0ac:	0800c1ac 	.word	0x0800c1ac
 800c0b0:	0800c1ac 	.word	0x0800c1ac
 800c0b4:	0800c1b0 	.word	0x0800c1b0

0800c0b8 <memcpy>:
 800c0b8:	440a      	add	r2, r1
 800c0ba:	4291      	cmp	r1, r2
 800c0bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c0c0:	d100      	bne.n	800c0c4 <memcpy+0xc>
 800c0c2:	4770      	bx	lr
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0ce:	4291      	cmp	r1, r2
 800c0d0:	d1f9      	bne.n	800c0c6 <memcpy+0xe>
 800c0d2:	bd10      	pop	{r4, pc}

0800c0d4 <_init>:
 800c0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d6:	bf00      	nop
 800c0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0da:	bc08      	pop	{r3}
 800c0dc:	469e      	mov	lr, r3
 800c0de:	4770      	bx	lr

0800c0e0 <_fini>:
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	bf00      	nop
 800c0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0e6:	bc08      	pop	{r3}
 800c0e8:	469e      	mov	lr, r3
 800c0ea:	4770      	bx	lr
