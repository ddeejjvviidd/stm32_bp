
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6e8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800d8a4  0800d8a4  0000e8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d95c  0800d95c  0000f10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d95c  0800d95c  0000e95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d964  0800d964  0000f10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d964  0800d964  0000e964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d968  0800d968  0000e968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800d96c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000507c  2000010c  0800da78  0000f10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005188  0800da78  0000f188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000245cf  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e18  00000000  00000000  0003370b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00038528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001605  00000000  00000000  0003a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff19  00000000  00000000  0003b785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000237e1  00000000  00000000  0006b69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d870  00000000  00000000  0008ee7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac6ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000777c  00000000  00000000  001ac734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b3eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800d88c 	.word	0x0800d88c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800d88c 	.word	0x0800d88c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2201      	movs	r2, #1
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fc5b 	bl	8001e24 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fe53 	bl	800121e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f001 ffd7 	bl	8002548 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fe3d 	bl	800121e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f001 ffc9 	bl	8002548 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 fe2f 	bl	800121e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00d f90d 	bl	800d818 <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fd81 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 fdeb 	bl	800121e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 fa15 	bl	8003ac0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 fe7f 	bl	80033d4 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 fd9f 	bl	800121e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 fe38 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 fe51 	bl	800339e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 fe22 	bl	80033d4 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fd42 	bl	800121e <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 fde1 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 fdfa 	bl	800339e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 fdd9 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 fdf2 	bl	800339e <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 fd87 	bl	8005370 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 faaf 	bl	8003de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 faaa 	bl	8003de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 faa5 	bl	8003de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f003 f905 	bl	8003ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f003 f8f6 	bl	8003ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f003 f8ea 	bl	8003ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f003 f8dc 	bl	8003ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f003 f8ce 	bl	8003ac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fd1c 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fd35 	bl	800339e <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d119      	bne.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000974:	f003 fa36 	bl	8003de4 <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000988:	f003 fa2c 	bl	8003de4 <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000250 	.word	0x20000250
 80009a0:	48000400 	.word	0x48000400

080009a4 <comms_reset_active_buffer>:
	DataValue data[255];
} CommsData;

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);

void comms_reset_active_buffer() {
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_active_buffer + 1)) = 0;
 80009a8:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <comms_reset_active_buffer+0x24>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	2200      	movs	r2, #0
 80009b0:	801a      	strh	r2, [r3, #0]
	//comms_active_buffer[1] = 0;
	comms_active_wr_pointer = comms_active_buffer + 3;
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <comms_reset_active_buffer+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3303      	adds	r3, #3
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <comms_reset_active_buffer+0x28>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000a54 	.word	0x20000a54
 80009cc:	20000a58 	.word	0x20000a58

080009d0 <comms_init>:

void comms_init() {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	comms_active_buffer = comms_tx_buffer1;
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <comms_init+0x24>)
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <comms_init+0x28>)
 80009d8:	601a      	str	r2, [r3, #0]
	comms_prepared_buffer = comms_tx_buffer2;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <comms_init+0x2c>)
 80009dc:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <comms_init+0x30>)
 80009de:	601a      	str	r2, [r3, #0]

	comms_reset_active_buffer();
 80009e0:	f7ff ffe0 	bl	80009a4 <comms_reset_active_buffer>
	comms_prepared_wr_pointer = comms_prepared_buffer + 3;
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <comms_init+0x2c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3303      	adds	r3, #3
 80009ea:	4a06      	ldr	r2, [pc, #24]	@ (8000a04 <comms_init+0x34>)
 80009ec:	6013      	str	r3, [r2, #0]
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000a54 	.word	0x20000a54
 80009f8:	20000254 	.word	0x20000254
 80009fc:	20000a5c 	.word	0x20000a5c
 8000a00:	20000654 	.word	0x20000654
 8000a04:	20000a60 	.word	0x20000a60

08000a08 <comms_purge_id_register>:

void comms_purge_id_register() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	memset(comms_id_register, NULL, sizeof(comms_id_register));
 8000a0c:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000a10:	2100      	movs	r1, #0
 8000a12:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <comms_purge_id_register+0x14>)
 8000a14:	f00c ff00 	bl	800d818 <memset>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000a64 	.word	0x20000a64

08000a20 <comms_find_existing_data>:

void* comms_find_existing_data(uint8_t data_id) {
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if (comms_id_register[data_id] != NULL) {
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <comms_find_existing_data+0x30>)
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <comms_find_existing_data+0x20>
		return comms_id_register[data_id];
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <comms_find_existing_data+0x30>)
 8000a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3e:	e000      	b.n	8000a42 <comms_find_existing_data+0x22>
	}
	return NULL;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000a64 	.word	0x20000a64

08000a54 <comms_increment_active_buffer_data>:

void comms_increment_active_buffer_data() {
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_active_buffer + 1)) += 1;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <comms_increment_active_buffer_data+0x24>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	881a      	ldrh	r2, [r3, #0]
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <comms_increment_active_buffer_data+0x24>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	3201      	adds	r2, #1
 8000a68:	b292      	uxth	r2, r2
 8000a6a:	801a      	strh	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000a54 	.word	0x20000a54

08000a7c <comms_append_int32>:

int comms_append_int32(uint8_t data_id, uint8_t data_count, int *data) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	603a      	str	r2, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	71bb      	strb	r3, [r7, #6]
	// dissable interrupts
//	uint32_t primask = __get_PRIMASK();
//	__disable_irq();

	//check tx_register for same data id, return if existing
	if (comms_find_existing_data(data_id) != NULL) {
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ffc6 	bl	8000a20 <comms_find_existing_data>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <comms_append_int32+0x22>
		return 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e02a      	b.n	8000af4 <comms_append_int32+0x78>
	}

	if (wr_status) {
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <comms_append_int32+0x80>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <comms_append_int32+0x2e>
		return COMMS_WR_LOCKED;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	e024      	b.n	8000af4 <comms_append_int32+0x78>
//	else {
//		wr_status = COMMS_INPROGRESS;
//	}

	// save the pointer to new data to register
	comms_id_register[data_id] = (void*) comms_active_wr_pointer;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <comms_append_int32+0x84>)
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	4914      	ldr	r1, [pc, #80]	@ (8000b04 <comms_append_int32+0x88>)
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_increment_active_buffer_data();
 8000ab6:	f7ff ffcd 	bl	8000a54 <comms_increment_active_buffer_data>

	// write id, bytes and count
	*comms_active_wr_pointer = data_id;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <comms_append_int32+0x84>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer + 1) = (uint8_t) sizeof(*data);
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <comms_append_int32+0x84>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	2204      	movs	r2, #4
 8000aca:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer + 2) = data_count;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <comms_append_int32+0x84>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	79ba      	ldrb	r2, [r7, #6]
 8000ad4:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int*) (comms_active_wr_pointer + 3)) = *data;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <comms_append_int32+0x84>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3303      	adds	r3, #3
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_active_wr_pointer = (comms_active_wr_pointer + 3 + sizeof(*data));
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <comms_append_int32+0x84>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3307      	adds	r3, #7
 8000ae8:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <comms_append_int32+0x84>)
 8000aea:	6013      	str	r3, [r2, #0]

	wr_status = COMMS_READY;
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <comms_append_int32+0x80>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]

	// restore interrupts
//	__set_PRIMASK(primask);

	return 0;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20001268 	.word	0x20001268
 8000b00:	20000a58 	.word	0x20000a58
 8000b04:	20000a64 	.word	0x20000a64

08000b08 <comms_switch_buffers>:

void comms_switch_buffers() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8000b12:	603b      	str	r3, [r7, #0]
  return(result);
 8000b14:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000b16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t *_temp = comms_prepared_buffer;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <comms_switch_buffers+0x4c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60bb      	str	r3, [r7, #8]
	comms_prepared_buffer = comms_active_buffer;
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <comms_switch_buffers+0x50>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a0b      	ldr	r2, [pc, #44]	@ (8000b54 <comms_switch_buffers+0x4c>)
 8000b28:	6013      	str	r3, [r2, #0]
	comms_active_buffer = _temp;
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b58 <comms_switch_buffers+0x50>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_prepared_wr_pointer = comms_active_wr_pointer;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <comms_switch_buffers+0x54>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <comms_switch_buffers+0x58>)
 8000b36:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_buffer();
 8000b38:	f7ff ff34 	bl	80009a4 <comms_reset_active_buffer>
	comms_purge_id_register();
 8000b3c:	f7ff ff64 	bl	8000a08 <comms_purge_id_register>
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f383 8810 	msr	PRIMASK, r3
}
 8000b4a:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000a5c 	.word	0x20000a5c
 8000b58:	20000a54 	.word	0x20000a54
 8000b5c:	20000a58 	.word	0x20000a58
 8000b60:	20000a60 	.word	0x20000a60

08000b64 <comms_send>:

int comms_send() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

	if (tx_status > 0) {
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <comms_send+0x84>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <comms_send+0x12>
		return COMMS_TX_LOCKED;
 8000b72:	2304      	movs	r3, #4
 8000b74:	e033      	b.n	8000bde <comms_send+0x7a>
	}

	tx_status = COMMS_INPROGRESS;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <comms_send+0x84>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]

	// need to switch buffers
	comms_switch_buffers();
 8000b7c:	f7ff ffc4 	bl	8000b08 <comms_switch_buffers>

	// buffer is empty
	if (comms_prepared_buffer[1] == 0) {
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <comms_send+0x88>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d109      	bne.n	8000ba0 <comms_send+0x3c>
		++empty;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <comms_send+0x8c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <comms_send+0x8c>)
 8000b94:	6013      	str	r3, [r2, #0]
		tx_status = COMMS_READY;
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <comms_send+0x84>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
		return COMMS_TX_BUFFER_EMPTY;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e01e      	b.n	8000bde <comms_send+0x7a>
	}

	// send data
	USBD_StatusTypeDef cdc_return = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_return = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	71bb      	strb	r3, [r7, #6]

	if(1){
		cdc_return = CDC_Transmit_FS(comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer);
 8000ba8:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <comms_send+0x88>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <comms_send+0x90>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <comms_send+0x88>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f00c f88d 	bl	800ccd8 <CDC_Transmit_FS>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	} else {
		uart_return = HAL_UART_Transmit(&hlpuart1, comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer, 100);
	}

	tx_status = COMMS_READY;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <comms_send+0x84>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

	if (cdc_return) {
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <comms_send+0x6e>
		return COMMS_TX_CDC_FAIL;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	e005      	b.n	8000bde <comms_send+0x7a>
	}

	if (uart_return) {
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <comms_send+0x78>
		return COMMS_TX_UART_FAIL;
 8000bd8:	2306      	movs	r3, #6
 8000bda:	e000      	b.n	8000bde <comms_send+0x7a>
	}

	return COMMS_SUCCESS;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20001269 	.word	0x20001269
 8000bec:	20000a5c 	.word	0x20000a5c
 8000bf0:	20001264 	.word	0x20001264
 8000bf4:	20000a60 	.word	0x20000a60

08000bf8 <comms_cdc_rx_callback>:

void comms_cdc_rx_callback(uint8_t *buffer, uint32_t length) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	// call this func inside of usbd_cdc_if.c in CDC_Receive_FS()

	if (rx_status) {
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <comms_cdc_rx_callback+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d111      	bne.n	8000c2e <comms_cdc_rx_callback+0x36>
		// not ready yet
		return;
	}

	if (length < 3) {
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d910      	bls.n	8000c32 <comms_cdc_rx_callback+0x3a>
		// invalid
		return;
	}

	rx_status = COMMS_INPROGRESS;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <comms_cdc_rx_callback+0x44>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]

	//comms_rx_buffer = buffer;
	memcpy(comms_rx_buffer1, buffer, length);
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <comms_cdc_rx_callback+0x48>)
 8000c1c:	f00c fe28 	bl	800d870 <memcpy>
	comms_rx_read_pointer = comms_rx_buffer1 + 3;
 8000c20:	4a08      	ldr	r2, [pc, #32]	@ (8000c44 <comms_cdc_rx_callback+0x4c>)
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <comms_cdc_rx_callback+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]

	rx_status = COMMS_RECEIVED;
 8000c26:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <comms_cdc_rx_callback+0x44>)
 8000c28:	2202      	movs	r2, #2
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	e002      	b.n	8000c34 <comms_cdc_rx_callback+0x3c>
		return;
 8000c2e:	bf00      	nop
 8000c30:	e000      	b.n	8000c34 <comms_cdc_rx_callback+0x3c>
		return;
 8000c32:	bf00      	nop
}
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000126a 	.word	0x2000126a
 8000c40:	20000e60 	.word	0x20000e60
 8000c44:	20000e63 	.word	0x20000e63
 8000c48:	20001260 	.word	0x20001260

08000c4c <comms_data_handler>:

__weak void comms_data_handler(CommsData *data) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

	if (data == NULL) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00c      	beq.n	8000c74 <comms_data_handler+0x28>
		return;
	}

	switch (data->data_id) {
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d10a      	bne.n	8000c78 <comms_data_handler+0x2c>
	case 5:
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
				(GPIO_PinState) (data->data[0].u8));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	791b      	ldrb	r3, [r3, #4]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
 8000c66:	461a      	mov	r2, r3
 8000c68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <comms_data_handler+0x34>)
 8000c6e:	f003 f8b9 	bl	8003de4 <HAL_GPIO_WritePin>
		break;
 8000c72:	e002      	b.n	8000c7a <comms_data_handler+0x2e>
		return;
 8000c74:	bf00      	nop
 8000c76:	e000      	b.n	8000c7a <comms_data_handler+0x2e>
	default:
		break;
 8000c78:	bf00      	nop
	}

}
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	48000400 	.word	0x48000400

08000c84 <comms_rx_process>:

void comms_rx_process() {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000c8a:	af00      	add	r7, sp, #0
	if (!rx_status) {
 8000c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8000dcc <comms_rx_process+0x148>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 8093 	beq.w	8000dbc <comms_rx_process+0x138>
		// no data yet
		return;
	}

	if (comms_rx_buffer1[0] == 0) {
 8000c96:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd0 <comms_rx_process+0x14c>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f040 808a 	bne.w	8000db4 <comms_rx_process+0x130>
		uint16_t elements = *((uint16_t*) (comms_rx_buffer1 + 1));
 8000ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd0 <comms_rx_process+0x14c>)
 8000ca2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000ca6:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406

		for (; elements > 0; --elements) {
 8000caa:	e07e      	b.n	8000daa <comms_rx_process+0x126>
			CommsData data;
			data.data_id = *comms_rx_read_pointer;
 8000cac:	4b49      	ldr	r3, [pc, #292]	@ (8000dd4 <comms_rx_process+0x150>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000cb6:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000cba:	701a      	strb	r2, [r3, #0]
			data.data_size = *(comms_rx_read_pointer + 1);
 8000cbc:	4b45      	ldr	r3, [pc, #276]	@ (8000dd4 <comms_rx_process+0x150>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	785a      	ldrb	r2, [r3, #1]
 8000cc2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000cc6:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000cca:	705a      	strb	r2, [r3, #1]
			data.data_count = *(comms_rx_read_pointer + 2);
 8000ccc:	4b41      	ldr	r3, [pc, #260]	@ (8000dd4 <comms_rx_process+0x150>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	789a      	ldrb	r2, [r3, #2]
 8000cd2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000cd6:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000cda:	709a      	strb	r2, [r3, #2]

			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000ce2:	e03d      	b.n	8000d60 <comms_rx_process+0xdc>
				switch (data.data_size) {
 8000ce4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000ce8:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000cec:	785b      	ldrb	r3, [r3, #1]
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	d023      	beq.n	8000d3a <comms_rx_process+0xb6>
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	dc64      	bgt.n	8000dc0 <comms_rx_process+0x13c>
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d002      	beq.n	8000d00 <comms_rx_process+0x7c>
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d00e      	beq.n	8000d1c <comms_rx_process+0x98>
				case 4:
					data.data[x].u32 =
							*((uint32_t*) (comms_rx_read_pointer + 3));
					break;
				default:
					return;
 8000cfe:	e05f      	b.n	8000dc0 <comms_rx_process+0x13c>
					data.data[x].u8 = *(comms_rx_read_pointer + 3);
 8000d00:	4b34      	ldr	r3, [pc, #208]	@ (8000dd4 <comms_rx_process+0x150>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d08:	78d1      	ldrb	r1, [r2, #3]
 8000d0a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000d0e:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	460a      	mov	r2, r1
 8000d18:	711a      	strb	r2, [r3, #4]
					break;
 8000d1a:	e01c      	b.n	8000d56 <comms_rx_process+0xd2>
					data.data[x].u16 =
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <comms_rx_process+0x150>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d24:	f8b2 1003 	ldrh.w	r1, [r2, #3]
 8000d28:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000d2c:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	460a      	mov	r2, r1
 8000d36:	809a      	strh	r2, [r3, #4]
					break;
 8000d38:	e00d      	b.n	8000d56 <comms_rx_process+0xd2>
					data.data[x].u32 =
 8000d3a:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <comms_rx_process+0x150>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d42:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8000d46:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000d4a:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	440b      	add	r3, r1
 8000d52:	605a      	str	r2, [r3, #4]
					break;
 8000d54:	bf00      	nop
			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000d56:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000d60:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d64:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d68:	789b      	ldrb	r3, [r3, #2]
 8000d6a:	f897 2405 	ldrb.w	r2, [r7, #1029]	@ 0x405
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d3b8      	bcc.n	8000ce4 <comms_rx_process+0x60>
				}
			}

			comms_data_handler(&data);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff69 	bl	8000c4c <comms_data_handler>

			comms_rx_read_pointer = (comms_rx_read_pointer + 3
					+ (data.data_size * data.data_count));
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <comms_rx_process+0x150>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d82:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d86:	785b      	ldrb	r3, [r3, #1]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d8e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d92:	789b      	ldrb	r3, [r3, #2]
 8000d94:	fb01 f303 	mul.w	r3, r1, r3
 8000d98:	3303      	adds	r3, #3
 8000d9a:	4413      	add	r3, r2
			comms_rx_read_pointer = (comms_rx_read_pointer + 3
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <comms_rx_process+0x150>)
 8000d9e:	6013      	str	r3, [r2, #0]
		for (; elements > 0; --elements) {
 8000da0:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000da4:	3b01      	subs	r3, #1
 8000da6:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
 8000daa:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f47f af7c 	bne.w	8000cac <comms_rx_process+0x28>
		}
	}

	rx_status = COMMS_READY;
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <comms_rx_process+0x148>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e002      	b.n	8000dc2 <comms_rx_process+0x13e>
		return;
 8000dbc:	bf00      	nop
 8000dbe:	e000      	b.n	8000dc2 <comms_rx_process+0x13e>
					return;
 8000dc0:	bf00      	nop
}
 8000dc2:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000126a 	.word	0x2000126a
 8000dd0:	20000e60 	.word	0x20000e60
 8000dd4:	20001260 	.word	0x20001260

08000dd8 <comms_uart_init>:

void comms_uart_init() {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_buffer1,
 8000dde:	2203      	movs	r2, #3
 8000de0:	4904      	ldr	r1, [pc, #16]	@ (8000df4 <comms_uart_init+0x1c>)
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <comms_uart_init+0x20>)
 8000de4:	f006 fc12 	bl	800760c <HAL_UART_Receive_IT>
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
			3);
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000e60 	.word	0x20000e60
 8000df8:	20003450 	.word	0x20003450

08000dfc <comms_lpuart_rx_callback>:

void comms_lpuart_rx_callback(UART_HandleTypeDef *huart) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	// FOR ELEMENT LOOP:
	//		load packet head
	//		load data
	static uint16_t elements = 0;

}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	// user defined __weak callback from stm32l4xx_hal_uart.c
	// uart loaded data
	if (huart == &hlpuart1) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <HAL_UART_RxCpltCallback+0x20>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d102      	bne.n	8000e26 <HAL_UART_RxCpltCallback+0x16>
		comms_lpuart_rx_callback(huart);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffeb 	bl	8000dfc <comms_lpuart_rx_callback>
	}
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20003450 	.word	0x20003450

08000e34 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d10d      	bne.n	8000e60 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e44:	2180      	movs	r1, #128	@ 0x80
 8000e46:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e48:	f002 ffe4 	bl	8003e14 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e54:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		comms_append_int32(1, 1, &periodical);
 8000e56:	4a06      	ldr	r2, [pc, #24]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff fe0e 	bl	8000a7c <comms_append_int32>
	}
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20003404 	.word	0x20003404
 8000e6c:	48000400 	.word	0x48000400
 8000e70:	2000126c 	.word	0x2000126c

08000e74 <myDmaFunction>:
////    }
//
//}

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <myDmaFunction+0x28>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e82:	4a07      	ldr	r2, [pc, #28]	@ (8000ea0 <myDmaFunction+0x2c>)
 8000e84:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000e86:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <myDmaFunction+0x28>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <myDmaFunction+0x30>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	200033b8 	.word	0x200033b8
 8000ea0:	20001278 	.word	0x20001278
 8000ea4:	2000127c 	.word	0x2000127c

08000ea8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);

    ++call_count;
 8000eb0:	4b58      	ldr	r3, [pc, #352]	@ (8001014 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	4a57      	ldr	r2, [pc, #348]	@ (8001014 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000eb8:	6013      	str	r3, [r2, #0]

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8000eba:	4b57      	ldr	r3, [pc, #348]	@ (8001018 <HAL_ADC_ConvCpltCallback+0x170>)
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 8000ec2:	4b56      	ldr	r3, [pc, #344]	@ (800101c <HAL_ADC_ConvCpltCallback+0x174>)
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 100; i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e027      	b.n	8000f20 <HAL_ADC_ConvCpltCallback+0x78>
        adcValue += dma_data_buffer[i + 100]; // Použití druhé poloviny DMA bufferu
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3364      	adds	r3, #100	@ 0x64
 8000ed4:	4a52      	ldr	r2, [pc, #328]	@ (8001020 <HAL_ADC_ConvCpltCallback+0x178>)
 8000ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8001018 <HAL_ADC_ConvCpltCallback+0x170>)
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eec:	4b4a      	ldr	r3, [pc, #296]	@ (8001018 <HAL_ADC_ConvCpltCallback+0x170>)
 8000eee:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 100];
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3365      	adds	r3, #101	@ 0x65
 8000ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8001020 <HAL_ADC_ConvCpltCallback+0x178>)
 8000ef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f04:	4b45      	ldr	r3, [pc, #276]	@ (800101c <HAL_ADC_ConvCpltCallback+0x174>)
 8000f06:	edd3 7a00 	vldr	s15, [r3]
 8000f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f0e:	4b43      	ldr	r3, [pc, #268]	@ (800101c <HAL_ADC_ConvCpltCallback+0x174>)
 8000f10:	edc3 7a00 	vstr	s15, [r3]
        i++;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 100; i++) {
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	2b63      	cmp	r3, #99	@ 0x63
 8000f24:	ddd4      	ble.n	8000ed0 <HAL_ADC_ConvCpltCallback+0x28>
    }
    adcValue /= 50.0f;
 8000f26:	4b3c      	ldr	r3, [pc, #240]	@ (8001018 <HAL_ADC_ConvCpltCallback+0x170>)
 8000f28:	ed93 7a00 	vldr	s14, [r3]
 8000f2c:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001024 <HAL_ADC_ConvCpltCallback+0x17c>
 8000f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f34:	4b38      	ldr	r3, [pc, #224]	@ (8001018 <HAL_ADC_ConvCpltCallback+0x170>)
 8000f36:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	@ (800101c <HAL_ADC_ConvCpltCallback+0x174>)
 8000f3c:	ed93 7a00 	vldr	s14, [r3]
 8000f40:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001024 <HAL_ADC_ConvCpltCallback+0x17c>
 8000f44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f48:	4b34      	ldr	r3, [pc, #208]	@ (800101c <HAL_ADC_ConvCpltCallback+0x174>)
 8000f4a:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8000f4e:	4b32      	ldr	r3, [pc, #200]	@ (8001018 <HAL_ADC_ConvCpltCallback+0x170>)
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001028 <HAL_ADC_ConvCpltCallback+0x180>
 8000f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800102c <HAL_ADC_ConvCpltCallback+0x184>
 8000f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f64:	edc7 7a04 	vstr	s15, [r7, #16]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8000f68:	4b31      	ldr	r3, [pc, #196]	@ (8001030 <HAL_ADC_ConvCpltCallback+0x188>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f74:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001028 <HAL_ADC_ConvCpltCallback+0x180>
 8000f78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f7c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800102c <HAL_ADC_ConvCpltCallback+0x184>
 8000f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f84:	edc7 7a03 	vstr	s15, [r7, #12]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8000f88:	4b2a      	ldr	r3, [pc, #168]	@ (8001034 <HAL_ADC_ConvCpltCallback+0x18c>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f94:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001028 <HAL_ADC_ConvCpltCallback+0x180>
 8000f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800102c <HAL_ADC_ConvCpltCallback+0x184>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	edc7 7a02 	vstr	s15, [r7, #8]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8000fa8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fac:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001038 <HAL_ADC_ConvCpltCallback+0x190>
 8000fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fbc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <HAL_ADC_ConvCpltCallback+0x194>)
 8000fc6:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <HAL_ADC_ConvCpltCallback+0x198>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001040 <HAL_ADC_ConvCpltCallback+0x198>)
 8000fd2:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    temperatureInt = (int)temperature;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	@ (800103c <HAL_ADC_ConvCpltCallback+0x194>)
 8000fd6:	edd3 7a00 	vldr	s15, [r3]
 8000fda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fde:	ee17 2a90 	vmov	r2, s15
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000fe4:	601a      	str	r2, [r3, #0]

    adcIn1Int = (int)adcIn1;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <HAL_ADC_ConvCpltCallback+0x174>)
 8000fe8:	edd3 7a00 	vldr	s15, [r3]
 8000fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff0:	ee17 2a90 	vmov	r2, s15
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8000ff6:	601a      	str	r2, [r3, #0]


    comms_append_int32(2, 1, &temperatureInt);
 8000ff8:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f7ff fd3d 	bl	8000a7c <comms_append_int32>
    comms_append_int32(23, 1, &adcIn1Int);
 8001002:	4a11      	ldr	r2, [pc, #68]	@ (8001048 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001004:	2101      	movs	r1, #1
 8001006:	2017      	movs	r0, #23
 8001008:	f7ff fd38 	bl	8000a7c <comms_append_int32>
}
 800100c:	bf00      	nop
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20003368 	.word	0x20003368
 8001018:	20003350 	.word	0x20003350
 800101c:	20003358 	.word	0x20003358
 8001020:	200031c0 	.word	0x200031c0
 8001024:	42480000 	.word	0x42480000
 8001028:	45800000 	.word	0x45800000
 800102c:	40533333 	.word	0x40533333
 8001030:	1fff75a8 	.word	0x1fff75a8
 8001034:	1fff75ca 	.word	0x1fff75ca
 8001038:	42a00000 	.word	0x42a00000
 800103c:	20003354 	.word	0x20003354
 8001040:	2000335c 	.word	0x2000335c
 8001044:	20003360 	.word	0x20003360
 8001048:	20003364 	.word	0x20003364

0800104c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
//		adcValue = adcValue + dma_data_buffer[i];
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001066:	f000 fc30 	bl	80018ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106a:	f000 f885 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106e:	f7ff fbaf 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001072:	f7ff fb51 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 8001076:	f000 fa29 	bl	80014cc <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 800107a:	f00b fd69 	bl	800cb50 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 800107e:	f000 f9d7 	bl	8001430 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001082:	f7ff fa33 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8001086:	f000 f985 	bl	8001394 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800108a:	f000 fafb 	bl	8001684 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 800108e:	f000 faab 	bl	80015e8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2180      	movs	r1, #128	@ 0x80
 8001096:	482b      	ldr	r0, [pc, #172]	@ (8001144 <main+0xe4>)
 8001098:	f002 fea4 	bl	8003de4 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 800109c:	482a      	ldr	r0, [pc, #168]	@ (8001148 <main+0xe8>)
 800109e:	f005 fe27 	bl	8006cf0 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 80010a2:	482a      	ldr	r0, [pc, #168]	@ (800114c <main+0xec>)
 80010a4:	f005 fdbc 	bl	8006c20 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	e00d      	b.n	80010ca <main+0x6a>
		dma[i] = i;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b8:	4a25      	ldr	r2, [pc, #148]	@ (8001150 <main+0xf0>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3301      	adds	r3, #1
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010d0:	dbed      	blt.n	80010ae <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 80010d2:	4a20      	ldr	r2, [pc, #128]	@ (8001154 <main+0xf4>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4820      	ldr	r0, [pc, #128]	@ (8001158 <main+0xf8>)
 80010d8:	f002 fc0a 	bl	80038f0 <HAL_DMA_RegisterCallback>
 80010dc:	4603      	mov	r3, r0
 80010de:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <main+0xec>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e6:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <main+0xfc>)
 80010e8:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 80010ea:	4919      	ldr	r1, [pc, #100]	@ (8001150 <main+0xf0>)
 80010ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <main+0x100>)
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	4819      	ldr	r0, [pc, #100]	@ (8001158 <main+0xf8>)
 80010f4:	f002 fa16 	bl	8003524 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <main+0xec>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fe:	4a19      	ldr	r2, [pc, #100]	@ (8001164 <main+0x104>)
 8001100:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 8001102:	4b12      	ldr	r3, [pc, #72]	@ (800114c <main+0xec>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <main+0x108>)
 800110a:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 800110c:	4817      	ldr	r0, [pc, #92]	@ (800116c <main+0x10c>)
 800110e:	f005 fdef 	bl	8006cf0 <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001112:	217f      	movs	r1, #127	@ 0x7f
 8001114:	4816      	ldr	r0, [pc, #88]	@ (8001170 <main+0x110>)
 8001116:	f001 ffb9 	bl	800308c <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 800111a:	2032      	movs	r0, #50	@ 0x32
 800111c:	f000 fc4a 	bl	80019b4 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 8001120:	22c8      	movs	r2, #200	@ 0xc8
 8001122:	4914      	ldr	r1, [pc, #80]	@ (8001174 <main+0x114>)
 8001124:	4812      	ldr	r0, [pc, #72]	@ (8001170 <main+0x110>)
 8001126:	f000 ffc3 	bl	80020b0 <HAL_ADC_Start_DMA>
 800112a:	4603      	mov	r3, r0
 800112c:	70bb      	strb	r3, [r7, #2]

	comms_init();
 800112e:	f7ff fc4f 	bl	80009d0 <comms_init>
	comms_uart_init();
 8001132:	f7ff fe51 	bl	8000dd8 <comms_uart_init>
//		memset(nazevpole2, NULL, 255*sizeof(void *));
//
//		comms_append_int32(1, 1, &periodical);
//	    comms_append_int32(2, 1, &temperatureInt);
//	    comms_append_int32(23, 1, &adcIn1Int);
		comms_send();
 8001136:	f7ff fd15 	bl	8000b64 <comms_send>

		//load_CPU();
		comms_rx_process();
 800113a:	f7ff fda3 	bl	8000c84 <comms_rx_process>
		comms_send();
 800113e:	bf00      	nop
 8001140:	e7f9      	b.n	8001136 <main+0xd6>
 8001142:	bf00      	nop
 8001144:	48000800 	.word	0x48000800
 8001148:	20003404 	.word	0x20003404
 800114c:	200033b8 	.word	0x200033b8
 8001150:	20001280 	.word	0x20001280
 8001154:	08000e75 	.word	0x08000e75
 8001158:	200001f0 	.word	0x200001f0
 800115c:	20001270 	.word	0x20001270
 8001160:	20002220 	.word	0x20002220
 8001164:	2000127c 	.word	0x2000127c
 8001168:	20001274 	.word	0x20001274
 800116c:	2000336c 	.word	0x2000336c
 8001170:	20000128 	.word	0x20000128
 8001174:	200031c0 	.word	0x200031c0

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b096      	sub	sp, #88	@ 0x58
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2244      	movs	r2, #68	@ 0x44
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f00c fb46 	bl	800d818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800119a:	2000      	movs	r0, #0
 800119c:	f004 f834 	bl	8005208 <HAL_PWREx_ControlVoltageScaling>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80011a6:	f000 f83a 	bl	800121e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80011aa:	2322      	movs	r3, #34	@ 0x22
 80011ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2340      	movs	r3, #64	@ 0x40
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c0:	2302      	movs	r3, #2
 80011c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80011c8:	231e      	movs	r3, #30
 80011ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4618      	mov	r0, r3
 80011de:	f004 f8d7 	bl	8005390 <HAL_RCC_OscConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011e8:	f000 f819 	bl	800121e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ec:	230f      	movs	r3, #15
 80011ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f0:	2303      	movs	r3, #3
 80011f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001202:	463b      	mov	r3, r7
 8001204:	2105      	movs	r1, #5
 8001206:	4618      	mov	r0, r3
 8001208:	f004 fcdc 	bl	8005bc4 <HAL_RCC_ClockConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001212:	f000 f804 	bl	800121e <Error_Handler>
  }
}
 8001216:	bf00      	nop
 8001218:	3758      	adds	r7, #88	@ 0x58
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001222:	b672      	cpsid	i
}
 8001224:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001226:	bf00      	nop
 8001228:	e7fd      	b.n	8001226 <Error_Handler+0x8>
	...

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <HAL_MspInit+0x44>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001236:	4a0e      	ldr	r2, [pc, #56]	@ (8001270 <HAL_MspInit+0x44>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6613      	str	r3, [r2, #96]	@ 0x60
 800123e:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <HAL_MspInit+0x44>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <HAL_MspInit+0x44>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124e:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <HAL_MspInit+0x44>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001254:	6593      	str	r3, [r2, #88]	@ 0x58
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_MspInit+0x44>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <NMI_Handler+0x4>

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <MemManage_Handler+0x4>

0800128c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <UsageFault_Handler+0x4>

0800129c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ca:	f000 fb53 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <DMA1_Channel1_IRQHandler+0x10>)
 80012da:	f002 fa59 	bl	8003790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000190 	.word	0x20000190

080012e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <DMA1_Channel2_IRQHandler+0x10>)
 80012ee:	f002 fa4f 	bl	8003790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001f0 	.word	0x200001f0

080012fc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <ADC1_IRQHandler+0x10>)
 8001302:	f000 ff59 	bl	80021b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000128 	.word	0x20000128

08001310 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <TIM3_IRQHandler+0x10>)
 8001316:	f005 fd5b 	bl	8006dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000336c 	.word	0x2000336c

08001324 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001328:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800132c:	f002 fd8c 	bl	8003e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <TIM6_DAC_IRQHandler+0x10>)
 800133a:	f005 fd49 	bl	8006dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20003404 	.word	0x20003404

08001348 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <OTG_FS_IRQHandler+0x10>)
 800134e:	f002 fee6 	bl	800411e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20004a5c 	.word	0x20004a5c

0800135c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001360:	4802      	ldr	r0, [pc, #8]	@ (800136c <LPUART1_IRQHandler+0x10>)
 8001362:	f006 f99f 	bl	80076a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20003450 	.word	0x20003450

08001370 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	@ (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_TIM3_Init+0x94>)
 80013b4:	4a1d      	ldr	r2, [pc, #116]	@ (800142c <MX_TIM3_Init+0x98>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <MX_TIM3_Init+0x94>)
 80013ba:	22c7      	movs	r2, #199	@ 0xc7
 80013bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_TIM3_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80013c4:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <MX_TIM3_Init+0x94>)
 80013c6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80013ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <MX_TIM3_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_TIM3_Init+0x94>)
 80013d4:	2280      	movs	r2, #128	@ 0x80
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013d8:	4813      	ldr	r0, [pc, #76]	@ (8001428 <MX_TIM3_Init+0x94>)
 80013da:	f005 fbc9 	bl	8006b70 <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013e4:	f7ff ff1b 	bl	800121e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	@ (8001428 <MX_TIM3_Init+0x94>)
 80013f6:	f005 fded 	bl	8006fd4 <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001400:	f7ff ff0d 	bl	800121e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001404:	2320      	movs	r3, #32
 8001406:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_TIM3_Init+0x94>)
 8001412:	f006 f805 	bl	8007420 <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800141c:	f7ff feff 	bl	800121e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000336c 	.word	0x2000336c
 800142c:	40000400 	.word	0x40000400

08001430 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800144e:	4b1d      	ldr	r3, [pc, #116]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001450:	4a1d      	ldr	r2, [pc, #116]	@ (80014c8 <MX_TIM5_Init+0x98>)
 8001452:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <MX_TIM5_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001462:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001466:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <MX_TIM5_Init+0x94>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001474:	4813      	ldr	r0, [pc, #76]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001476:	f005 fb7b 	bl	8006b70 <HAL_TIM_Base_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001480:	f7ff fecd 	bl	800121e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001488:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	4619      	mov	r1, r3
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001492:	f005 fd9f 	bl	8006fd4 <HAL_TIM_ConfigClockSource>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800149c:	f7ff febf 	bl	800121e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_TIM5_Init+0x94>)
 80014ae:	f005 ffb7 	bl	8007420 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014b8:	f7ff feb1 	bl	800121e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200033b8 	.word	0x200033b8
 80014c8:	40000c00 	.word	0x40000c00

080014cc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014dc:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <MX_TIM6_Init+0x68>)
 80014de:	4a16      	ldr	r2, [pc, #88]	@ (8001538 <MX_TIM6_Init+0x6c>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80014e2:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_TIM6_Init+0x68>)
 80014e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80014e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <MX_TIM6_Init+0x68>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 80014f0:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <MX_TIM6_Init+0x68>)
 80014f2:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80014f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_TIM6_Init+0x68>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014fe:	480d      	ldr	r0, [pc, #52]	@ (8001534 <MX_TIM6_Init+0x68>)
 8001500:	f005 fb36 	bl	8006b70 <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800150a:	f7ff fe88 	bl	800121e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	@ (8001534 <MX_TIM6_Init+0x68>)
 800151c:	f005 ff80 	bl	8007420 <HAL_TIMEx_MasterConfigSynchronization>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001526:	f7ff fe7a 	bl	800121e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20003404 	.word	0x20003404
 8001538:	40001000 	.word	0x40001000

0800153c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a23      	ldr	r2, [pc, #140]	@ (80015d8 <HAL_TIM_Base_MspInit+0x9c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d114      	bne.n	8001578 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_TIM_Base_MspInit+0xa0>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	4a22      	ldr	r2, [pc, #136]	@ (80015dc <HAL_TIM_Base_MspInit+0xa0>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6593      	str	r3, [r2, #88]	@ 0x58
 800155a:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <HAL_TIM_Base_MspInit+0xa0>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	201d      	movs	r0, #29
 800156c:	f001 fefb 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001570:	201d      	movs	r0, #29
 8001572:	f001 ff14 	bl	800339e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001576:	e02a      	b.n	80015ce <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a18      	ldr	r2, [pc, #96]	@ (80015e0 <HAL_TIM_Base_MspInit+0xa4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10c      	bne.n	800159c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <HAL_TIM_Base_MspInit+0xa0>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	4a15      	ldr	r2, [pc, #84]	@ (80015dc <HAL_TIM_Base_MspInit+0xa0>)
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	6593      	str	r3, [r2, #88]	@ 0x58
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <HAL_TIM_Base_MspInit+0xa0>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
}
 800159a:	e018      	b.n	80015ce <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <HAL_TIM_Base_MspInit+0xa8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d113      	bne.n	80015ce <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015a6:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <HAL_TIM_Base_MspInit+0xa0>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <HAL_TIM_Base_MspInit+0xa0>)
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_TIM_Base_MspInit+0xa0>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2036      	movs	r0, #54	@ 0x36
 80015c4:	f001 fecf 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c8:	2036      	movs	r0, #54	@ 0x36
 80015ca:	f001 fee8 	bl	800339e <HAL_NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40000400 	.word	0x40000400
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40000c00 	.word	0x40000c00
 80015e4:	40001000 	.word	0x40001000

080015e8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80015ec:	4b23      	ldr	r3, [pc, #140]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 80015ee:	4a24      	ldr	r2, [pc, #144]	@ (8001680 <MX_LPUART1_UART_Init+0x98>)
 80015f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80015f2:	4b22      	ldr	r3, [pc, #136]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 80015fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001600:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001602:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001608:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800160e:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 8001610:	220c      	movs	r2, #12
 8001612:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001614:	4b19      	ldr	r3, [pc, #100]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161a:	4b18      	ldr	r3, [pc, #96]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001620:	4b16      	ldr	r3, [pc, #88]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 800162e:	2200      	movs	r2, #0
 8001630:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001632:	4812      	ldr	r0, [pc, #72]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 8001634:	f005 ff9a 	bl	800756c <HAL_UART_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 800163e:	f7ff fdee 	bl	800121e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001642:	2100      	movs	r1, #0
 8001644:	480d      	ldr	r0, [pc, #52]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 8001646:	f007 ff66 	bl	8009516 <HAL_UARTEx_SetTxFifoThreshold>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001650:	f7ff fde5 	bl	800121e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	4809      	ldr	r0, [pc, #36]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 8001658:	f007 ff9b 	bl	8009592 <HAL_UARTEx_SetRxFifoThreshold>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001662:	f7ff fddc 	bl	800121e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	@ (800167c <MX_LPUART1_UART_Init+0x94>)
 8001668:	f007 ff1c 	bl	80094a4 <HAL_UARTEx_DisableFifoMode>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001672:	f7ff fdd4 	bl	800121e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20003450 	.word	0x20003450
 8001680:	40008000 	.word	0x40008000

08001684 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001688:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 800168a:	4a23      	ldr	r2, [pc, #140]	@ (8001718 <MX_USART3_UART_Init+0x94>)
 800168c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800168e:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ba:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c6:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016cc:	4811      	ldr	r0, [pc, #68]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 80016ce:	f005 ff4d 	bl	800756c <HAL_UART_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016d8:	f7ff fda1 	bl	800121e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016dc:	2100      	movs	r1, #0
 80016de:	480d      	ldr	r0, [pc, #52]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 80016e0:	f007 ff19 	bl	8009516 <HAL_UARTEx_SetTxFifoThreshold>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016ea:	f7ff fd98 	bl	800121e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ee:	2100      	movs	r1, #0
 80016f0:	4808      	ldr	r0, [pc, #32]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 80016f2:	f007 ff4e 	bl	8009592 <HAL_UARTEx_SetRxFifoThreshold>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016fc:	f7ff fd8f 	bl	800121e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	@ (8001714 <MX_USART3_UART_Init+0x90>)
 8001702:	f007 fecf 	bl	80094a4 <HAL_UARTEx_DisableFifoMode>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800170c:	f7ff fd87 	bl	800121e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200034e4 	.word	0x200034e4
 8001718:	40004800 	.word	0x40004800

0800171c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0b0      	sub	sp, #192	@ 0xc0
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001734:	f107 0318 	add.w	r3, r7, #24
 8001738:	2294      	movs	r2, #148	@ 0x94
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f00c f86b 	bl	800d818 <memset>
  if(uartHandle->Instance==LPUART1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a47      	ldr	r2, [pc, #284]	@ (8001864 <HAL_UART_MspInit+0x148>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d146      	bne.n	80017da <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800174c:	2320      	movs	r3, #32
 800174e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001750:	2300      	movs	r3, #0
 8001752:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001754:	f107 0318 	add.w	r3, r7, #24
 8001758:	4618      	mov	r0, r3
 800175a:	f004 fcf1 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001764:	f7ff fd5b 	bl	800121e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001768:	4b3f      	ldr	r3, [pc, #252]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 800176a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176c:	4a3e      	ldr	r2, [pc, #248]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001774:	4b3c      	ldr	r3, [pc, #240]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 8001776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001780:	4b39      	ldr	r3, [pc, #228]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001784:	4a38      	ldr	r2, [pc, #224]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 8001786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800178a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178c:	4b36      	ldr	r3, [pc, #216]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001798:	f003 fdea 	bl	8005370 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800179c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017b6:	2308      	movs	r3, #8
 80017b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017bc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017c0:	4619      	mov	r1, r3
 80017c2:	482a      	ldr	r0, [pc, #168]	@ (800186c <HAL_UART_MspInit+0x150>)
 80017c4:	f002 f97c 	bl	8003ac0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2046      	movs	r0, #70	@ 0x46
 80017ce:	f001 fdca 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80017d2:	2046      	movs	r0, #70	@ 0x46
 80017d4:	f001 fde3 	bl	800339e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017d8:	e040      	b.n	800185c <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a24      	ldr	r2, [pc, #144]	@ (8001870 <HAL_UART_MspInit+0x154>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d13b      	bne.n	800185c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017e4:	2304      	movs	r3, #4
 80017e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fca5 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80017fc:	f7ff fd0f 	bl	800121e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001800:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001804:	4a18      	ldr	r2, [pc, #96]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 8001806:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800180a:	6593      	str	r3, [r2, #88]	@ 0x58
 800180c:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001818:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181c:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001824:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <HAL_UART_MspInit+0x14c>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001830:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800184a:	2307      	movs	r3, #7
 800184c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001850:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001854:	4619      	mov	r1, r3
 8001856:	4807      	ldr	r0, [pc, #28]	@ (8001874 <HAL_UART_MspInit+0x158>)
 8001858:	f002 f932 	bl	8003ac0 <HAL_GPIO_Init>
}
 800185c:	bf00      	nop
 800185e:	37c0      	adds	r7, #192	@ 0xc0
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40008000 	.word	0x40008000
 8001868:	40021000 	.word	0x40021000
 800186c:	48001800 	.word	0x48001800
 8001870:	40004800 	.word	0x40004800
 8001874:	48000c00 	.word	0x48000c00

08001878 <Reset_Handler>:
 8001878:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018b0 <LoopForever+0x2>
 800187c:	f7ff fd78 	bl	8001370 <SystemInit>
 8001880:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <LoopForever+0x6>)
 8001882:	490d      	ldr	r1, [pc, #52]	@ (80018b8 <LoopForever+0xa>)
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <LoopForever+0xe>)
 8001886:	2300      	movs	r3, #0
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:
 800188a:	58d4      	ldr	r4, [r2, r3]
 800188c:	50c4      	str	r4, [r0, r3]
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:
 8001890:	18c4      	adds	r4, r0, r3
 8001892:	428c      	cmp	r4, r1
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <LoopForever+0x12>)
 8001898:	4c0a      	ldr	r4, [pc, #40]	@ (80018c4 <LoopForever+0x16>)
 800189a:	2300      	movs	r3, #0
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:
 80018a2:	42a2      	cmp	r2, r4
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>
 80018a6:	f00b ffbf 	bl	800d828 <__libc_init_array>
 80018aa:	f7ff fbd9 	bl	8001060 <main>

080018ae <LoopForever>:
 80018ae:	e7fe      	b.n	80018ae <LoopForever>
 80018b0:	200a0000 	.word	0x200a0000
 80018b4:	20000000 	.word	0x20000000
 80018b8:	2000010c 	.word	0x2000010c
 80018bc:	0800d96c 	.word	0x0800d96c
 80018c0:	2000010c 	.word	0x2000010c
 80018c4:	20005188 	.word	0x20005188

080018c8 <CAN1_RX0_IRQHandler>:
 80018c8:	e7fe      	b.n	80018c8 <CAN1_RX0_IRQHandler>

080018ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f001 fd3b 	bl	8003350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018da:	2000      	movs	r0, #0
 80018dc:	f000 f80e 	bl	80018fc <HAL_InitTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	71fb      	strb	r3, [r7, #7]
 80018ea:	e001      	b.n	80018f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018ec:	f7ff fc9e 	bl	800122c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018f0:	79fb      	ldrb	r3, [r7, #7]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001908:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <HAL_InitTick+0x6c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d023      	beq.n	8001958 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001910:	4b16      	ldr	r3, [pc, #88]	@ (800196c <HAL_InitTick+0x70>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <HAL_InitTick+0x6c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f001 fd47 	bl	80033ba <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10f      	bne.n	8001952 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d809      	bhi.n	800194c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001940:	f001 fd11 	bl	8003366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001944:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <HAL_InitTick+0x74>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e007      	b.n	800195c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e004      	b.n	800195c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e001      	b.n	800195c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_IncTick+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_IncTick+0x24>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <HAL_IncTick+0x24>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008
 8001998:	20003578 	.word	0x20003578

0800199c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b03      	ldr	r3, [pc, #12]	@ (80019b0 <HAL_GetTick+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20003578 	.word	0x20003578

080019b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff ffee 	bl	800199c <HAL_GetTick>
 80019c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019cc:	d005      	beq.n	80019da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019ce:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <HAL_Delay+0x44>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019da:	bf00      	nop
 80019dc:	f7ff ffde 	bl	800199c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d8f7      	bhi.n	80019dc <HAL_Delay+0x28>
  {
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000008 	.word	0x20000008

080019fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3360      	adds	r3, #96	@ 0x60
 8001a76:	461a      	mov	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <LL_ADC_SetOffset+0x44>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	4313      	orrs	r3, r2
 8001a94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a9c:	bf00      	nop
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	03fff000 	.word	0x03fff000

08001aac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3360      	adds	r3, #96	@ 0x60
 8001aba:	461a      	mov	r2, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3360      	adds	r3, #96	@ 0x60
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	615a      	str	r2, [r3, #20]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b087      	sub	sp, #28
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3330      	adds	r3, #48	@ 0x30
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	0a1b      	lsrs	r3, r3, #8
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	4413      	add	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	211f      	movs	r1, #31
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0e9b      	lsrs	r3, r3, #26
 8001b92:	f003 011f 	and.w	r1, r3, #31
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ba6:	bf00      	nop
 8001ba8:	371c      	adds	r7, #28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3314      	adds	r3, #20
 8001be8:	461a      	mov	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	0e5b      	lsrs	r3, r3, #25
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	0d1b      	lsrs	r3, r3, #20
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	2107      	movs	r1, #7
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	0d1b      	lsrs	r3, r3, #20
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c22:	bf00      	nop
 8001c24:	371c      	adds	r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0318 	and.w	r3, r3, #24
 8001c52:	4908      	ldr	r1, [pc, #32]	@ (8001c74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c54:	40d9      	lsrs	r1, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	400b      	ands	r3, r1
 8001c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	0007ffff 	.word	0x0007ffff

08001c78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6093      	str	r3, [r2, #8]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cb0:	d101      	bne.n	8001cb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cd8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d50:	f043 0202 	orr.w	r2, r3, #2
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <LL_ADC_IsEnabled+0x18>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <LL_ADC_IsEnabled+0x1a>
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d101      	bne.n	8001da2 <LL_ADC_IsDisableOngoing+0x18>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <LL_ADC_IsDisableOngoing+0x1a>
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dc4:	f043 0204 	orr.w	r2, r3, #4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d101      	bne.n	8001df0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d101      	bne.n	8001e16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e129      	b.n	8002092 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d109      	bne.n	8001e60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7fe fbc3 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff19 	bl	8001c9c <LL_ADC_IsDeepPowerDownEnabled>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff feff 	bl	8001c78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff34 	bl	8001cec <LL_ADC_IsInternalRegulatorEnabled>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d115      	bne.n	8001eb6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff18 	bl	8001cc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e94:	4b81      	ldr	r3, [pc, #516]	@ (800209c <HAL_ADC_Init+0x278>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	4a81      	ldr	r2, [pc, #516]	@ (80020a0 <HAL_ADC_Init+0x27c>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	099b      	lsrs	r3, r3, #6
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ea8:	e002      	b.n	8001eb0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f9      	bne.n	8001eaa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff16 	bl	8001cec <LL_ADC_IsInternalRegulatorEnabled>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10d      	bne.n	8001ee2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	f043 0210 	orr.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff76 	bl	8001dd8 <LL_ADC_REG_IsConversionOngoing>
 8001eec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 80c2 	bne.w	8002080 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 80be 	bne.w	8002080 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f0c:	f043 0202 	orr.w	r2, r3, #2
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff23 	bl	8001d64 <LL_ADC_IsEnabled>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10b      	bne.n	8001f3c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f24:	485f      	ldr	r0, [pc, #380]	@ (80020a4 <HAL_ADC_Init+0x280>)
 8001f26:	f7ff ff1d 	bl	8001d64 <LL_ADC_IsEnabled>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d105      	bne.n	8001f3c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4619      	mov	r1, r3
 8001f36:	485c      	ldr	r0, [pc, #368]	@ (80020a8 <HAL_ADC_Init+0x284>)
 8001f38:	f7ff fd60 	bl	80019fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7e5b      	ldrb	r3, [r3, #25]
 8001f40:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f46:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f4c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f52:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f5a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d106      	bne.n	8001f78 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	045b      	lsls	r3, r3, #17
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	4b44      	ldr	r3, [pc, #272]	@ (80020ac <HAL_ADC_Init+0x288>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff26 	bl	8001dfe <LL_ADC_INJ_IsConversionOngoing>
 8001fb2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d140      	bne.n	800203c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d13d      	bne.n	800203c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7e1b      	ldrb	r3, [r3, #24]
 8001fc8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fca:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fd2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fe2:	f023 0306 	bic.w	r3, r3, #6
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d118      	bne.n	800202c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002010:	4311      	orrs	r1, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002016:	4311      	orrs	r1, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800201c:	430a      	orrs	r2, r1
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	611a      	str	r2, [r3, #16]
 800202a:	e007      	b.n	800203c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10c      	bne.n	800205e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f023 010f 	bic.w	r1, r3, #15
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30
 800205c:	e007      	b.n	800206e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 020f 	bic.w	r2, r2, #15
 800206c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	659a      	str	r2, [r3, #88]	@ 0x58
 800207e:	e007      	b.n	8002090 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002084:	f043 0210 	orr.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002090:	7ffb      	ldrb	r3, [r7, #31]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000000 	.word	0x20000000
 80020a0:	053e2d63 	.word	0x053e2d63
 80020a4:	50040000 	.word	0x50040000
 80020a8:	50040300 	.word	0x50040300
 80020ac:	fff0c007 	.word	0xfff0c007

080020b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fe89 	bl	8001dd8 <LL_ADC_REG_IsConversionOngoing>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d167      	bne.n	800219c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Start_DMA+0x2a>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e063      	b.n	80021a2 <HAL_ADC_Start_DMA+0xf2>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fe2c 	bl	8002d40 <ADC_Enable>
 80020e8:	4603      	mov	r3, r0
 80020ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d14f      	bne.n	8002192 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d006      	beq.n	8002120 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002116:	f023 0206 	bic.w	r2, r3, #6
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800211e:	e002      	b.n	8002126 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212a:	4a20      	ldr	r2, [pc, #128]	@ (80021ac <HAL_ADC_Start_DMA+0xfc>)
 800212c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002132:	4a1f      	ldr	r2, [pc, #124]	@ (80021b0 <HAL_ADC_Start_DMA+0x100>)
 8002134:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800213a:	4a1e      	ldr	r2, [pc, #120]	@ (80021b4 <HAL_ADC_Start_DMA+0x104>)
 800213c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	221c      	movs	r2, #28
 8002144:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0210 	orr.w	r2, r2, #16
 800215c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	3340      	adds	r3, #64	@ 0x40
 8002178:	4619      	mov	r1, r3
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f001 f9d1 	bl	8003524 <HAL_DMA_Start_IT>
 8002182:	4603      	mov	r3, r0
 8002184:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fe10 	bl	8001db0 <LL_ADC_REG_StartConversion>
 8002190:	e006      	b.n	80021a0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800219a:	e001      	b.n	80021a0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800219c:	2302      	movs	r3, #2
 800219e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	08002f0b 	.word	0x08002f0b
 80021b0:	08002fe3 	.word	0x08002fe3
 80021b4:	08002fff 	.word	0x08002fff

080021b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d017      	beq.n	800220e <HAL_ADC_IRQHandler+0x56>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d012      	beq.n	800220e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 ffcb 	bl	800319c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2202      	movs	r2, #2
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <HAL_ADC_IRQHandler+0x6a>
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002228:	2b00      	cmp	r3, #0
 800222a:	d05e      	beq.n	80022ea <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d059      	beq.n	80022ea <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fc6e 	bl	8001b34 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d03e      	beq.n	80022dc <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d135      	bne.n	80022dc <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b08      	cmp	r3, #8
 800227c:	d12e      	bne.n	80022dc <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fda8 	bl	8001dd8 <LL_ADC_REG_IsConversionOngoing>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d11a      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 020c 	bic.w	r2, r2, #12
 800229c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d112      	bne.n	80022dc <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80022c2:	e00b      	b.n	80022dc <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	f043 0210 	orr.w	r2, r3, #16
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d4:	f043 0201 	orr.w	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7fe fde3 	bl	8000ea8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	220c      	movs	r2, #12
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <HAL_ADC_IRQHandler+0x146>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002304:	2b00      	cmp	r3, #0
 8002306:	d072      	beq.n	80023ee <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d06d      	beq.n	80023ee <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002322:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fc3f 	bl	8001bb2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002334:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fbfa 	bl	8001b34 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002340:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d047      	beq.n	80023e0 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_ADC_IRQHandler+0x1b2>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d03f      	beq.n	80023e0 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002366:	2b00      	cmp	r3, #0
 8002368:	d13a      	bne.n	80023e0 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002374:	2b40      	cmp	r3, #64	@ 0x40
 8002376:	d133      	bne.n	80023e0 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12e      	bne.n	80023e0 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fd39 	bl	8001dfe <LL_ADC_INJ_IsConversionOngoing>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d11a      	bne.n	80023c8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023a0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d112      	bne.n	80023e0 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023be:	f043 0201 	orr.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80023c6:	e00b      	b.n	80023e0 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023cc:	f043 0210 	orr.w	r2, r3, #16
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 feb3 	bl	800314c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2260      	movs	r2, #96	@ 0x60
 80023ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d011      	beq.n	800241c <HAL_ADC_IRQHandler+0x264>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00c      	beq.n	800241c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002406:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f886 	bl	8002520 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2280      	movs	r2, #128	@ 0x80
 800241a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d012      	beq.n	800244c <HAL_ADC_IRQHandler+0x294>
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00d      	beq.n	800244c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fe99 	bl	8003174 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800244a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <HAL_ADC_IRQHandler+0x2c4>
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00d      	beq.n	800247c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fe8b 	bl	8003188 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800247a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02a      	beq.n	80024dc <HAL_ADC_IRQHandler+0x324>
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d025      	beq.n	80024dc <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002498:	2301      	movs	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	e008      	b.n	80024b0 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80024ac:	2301      	movs	r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10e      	bne.n	80024d4 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c6:	f043 0202 	orr.w	r2, r3, #2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f830 	bl	8002534 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2210      	movs	r2, #16
 80024da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d018      	beq.n	8002518 <HAL_ADC_IRQHandler+0x360>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002500:	f043 0208 	orr.w	r2, r3, #8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002510:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fe24 	bl	8003160 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002518:	bf00      	nop
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b0b6      	sub	sp, #216	@ 0xd8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x22>
 8002566:	2302      	movs	r3, #2
 8002568:	e3d5      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x7ce>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fc2e 	bl	8001dd8 <LL_ADC_REG_IsConversionOngoing>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 83ba 	bne.w	8002cf8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d824      	bhi.n	80025de <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	3b02      	subs	r3, #2
 800259a:	2b03      	cmp	r3, #3
 800259c:	d81b      	bhi.n	80025d6 <HAL_ADC_ConfigChannel+0x8e>
 800259e:	a201      	add	r2, pc, #4	@ (adr r2, 80025a4 <HAL_ADC_ConfigChannel+0x5c>)
 80025a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a4:	080025b5 	.word	0x080025b5
 80025a8:	080025bd 	.word	0x080025bd
 80025ac:	080025c5 	.word	0x080025c5
 80025b0:	080025cd 	.word	0x080025cd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80025b4:	230c      	movs	r3, #12
 80025b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025ba:	e010      	b.n	80025de <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80025bc:	2312      	movs	r3, #18
 80025be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025c2:	e00c      	b.n	80025de <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80025c4:	2318      	movs	r3, #24
 80025c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025ca:	e008      	b.n	80025de <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80025cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025d4:	e003      	b.n	80025de <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80025d6:	2306      	movs	r3, #6
 80025d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025dc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80025ec:	f7ff fab5 	bl	8001b5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fbef 	bl	8001dd8 <LL_ADC_REG_IsConversionOngoing>
 80025fa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fbfb 	bl	8001dfe <LL_ADC_INJ_IsConversionOngoing>
 8002608:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800260c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002610:	2b00      	cmp	r3, #0
 8002612:	f040 81bf 	bne.w	8002994 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 81ba 	bne.w	8002994 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002628:	d10f      	bne.n	800264a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2200      	movs	r2, #0
 8002634:	4619      	mov	r1, r3
 8002636:	f7ff facf 	bl	8001bd8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fa63 	bl	8001b0e <LL_ADC_SetSamplingTimeCommonConfig>
 8002648:	e00e      	b.n	8002668 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6819      	ldr	r1, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	461a      	mov	r2, r3
 8002658:	f7ff fabe 	bl	8001bd8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fa53 	bl	8001b0e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	08db      	lsrs	r3, r3, #3
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b04      	cmp	r3, #4
 8002688:	d00a      	beq.n	80026a0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6919      	ldr	r1, [r3, #16]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800269a:	f7ff f9e3 	bl	8001a64 <LL_ADC_SetOffset>
 800269e:	e179      	b.n	8002994 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fa00 	bl	8001aac <LL_ADC_GetOffsetChannel>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10a      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x184>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f9f5 	bl	8001aac <LL_ADC_GetOffsetChannel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	f003 021f 	and.w	r2, r3, #31
 80026ca:	e01e      	b.n	800270a <HAL_ADC_ConfigChannel+0x1c2>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff f9ea 	bl	8001aac <LL_ADC_GetOffsetChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e004      	b.n	8002708 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80026fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002712:	2b00      	cmp	r3, #0
 8002714:	d105      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x1da>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	e018      	b.n	8002754 <HAL_ADC_ConfigChannel+0x20c>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800273a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800273e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002746:	2320      	movs	r3, #32
 8002748:	e004      	b.n	8002754 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800274a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2200      	movs	r2, #0
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff f9b9 	bl	8001ad8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2101      	movs	r1, #1
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff f99d 	bl	8001aac <LL_ADC_GetOffsetChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x24a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f992 	bl	8001aac <LL_ADC_GetOffsetChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	0e9b      	lsrs	r3, r3, #26
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	e01e      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x288>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2101      	movs	r1, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff f987 	bl	8001aac <LL_ADC_GetOffsetChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80027b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e004      	b.n	80027ce <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80027c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x2a0>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0e9b      	lsrs	r3, r3, #26
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	e018      	b.n	800281a <HAL_ADC_ConfigChannel+0x2d2>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80027fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e004      	b.n	800281a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002810:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800281a:	429a      	cmp	r2, r3
 800281c:	d106      	bne.n	800282c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2200      	movs	r2, #0
 8002824:	2101      	movs	r1, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff f956 	bl	8001ad8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2102      	movs	r1, #2
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff f93a 	bl	8001aac <LL_ADC_GetOffsetChannel>
 8002838:	4603      	mov	r3, r0
 800283a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10a      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x310>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2102      	movs	r1, #2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff f92f 	bl	8001aac <LL_ADC_GetOffsetChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	0e9b      	lsrs	r3, r3, #26
 8002852:	f003 021f 	and.w	r2, r3, #31
 8002856:	e01e      	b.n	8002896 <HAL_ADC_ConfigChannel+0x34e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2102      	movs	r1, #2
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff f924 	bl	8001aac <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002876:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800287a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800287e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002886:	2320      	movs	r3, #32
 8002888:	e004      	b.n	8002894 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800288a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x366>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	e014      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x390>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80028ca:	2320      	movs	r3, #32
 80028cc:	e004      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80028ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028d8:	429a      	cmp	r2, r3
 80028da:	d106      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2200      	movs	r2, #0
 80028e2:	2102      	movs	r1, #2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff f8f7 	bl	8001ad8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2103      	movs	r1, #3
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff f8db 	bl	8001aac <LL_ADC_GetOffsetChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x3ce>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2103      	movs	r1, #3
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff f8d0 	bl	8001aac <LL_ADC_GetOffsetChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	0e9b      	lsrs	r3, r3, #26
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	e017      	b.n	8002946 <HAL_ADC_ConfigChannel+0x3fe>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2103      	movs	r1, #3
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff f8c5 	bl	8001aac <LL_ADC_GetOffsetChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800292e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002930:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002938:	2320      	movs	r3, #32
 800293a:	e003      	b.n	8002944 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800293c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294e:	2b00      	cmp	r3, #0
 8002950:	d105      	bne.n	800295e <HAL_ADC_ConfigChannel+0x416>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	0e9b      	lsrs	r3, r3, #26
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	e011      	b.n	8002982 <HAL_ADC_ConfigChannel+0x43a>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800296c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800296e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002970:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e003      	b.n	8002982 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800297a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002982:	429a      	cmp	r2, r3
 8002984:	d106      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2200      	movs	r2, #0
 800298c:	2103      	movs	r1, #3
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff f8a2 	bl	8001ad8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f9e3 	bl	8001d64 <LL_ADC_IsEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 813f 	bne.w	8002c24 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6819      	ldr	r1, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f7ff f93c 	bl	8001c30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a8e      	ldr	r2, [pc, #568]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x6b0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	f040 8130 	bne.w	8002c24 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10b      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x4a4>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0e9b      	lsrs	r3, r3, #26
 80029da:	3301      	adds	r3, #1
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2b09      	cmp	r3, #9
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e019      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x4d8>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80029fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80029fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2b09      	cmp	r3, #9
 8002a18:	bf94      	ite	ls
 8002a1a:	2301      	movls	r3, #1
 8002a1c:	2300      	movhi	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d079      	beq.n	8002b18 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x4f8>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	3301      	adds	r3, #1
 8002a38:	069b      	lsls	r3, r3, #26
 8002a3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a3e:	e015      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x524>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a50:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002a58:	2320      	movs	r3, #32
 8002a5a:	e003      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	3301      	adds	r3, #1
 8002a66:	069b      	lsls	r3, r3, #26
 8002a68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x544>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	0e9b      	lsrs	r3, r3, #26
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2101      	movs	r1, #1
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	e017      	b.n	8002abc <HAL_ADC_ConfigChannel+0x574>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a9c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	e003      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	ea42 0103 	orr.w	r1, r2, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x59a>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	051b      	lsls	r3, r3, #20
 8002ae0:	e018      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x5cc>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e003      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b14:	430b      	orrs	r3, r1
 8002b16:	e080      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x5ec>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	069b      	lsls	r3, r3, #26
 8002b2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b32:	e015      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x618>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	069b      	lsls	r3, r3, #26
 8002b5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x638>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	3301      	adds	r3, #1
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	2101      	movs	r1, #1
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	e017      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x668>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	61bb      	str	r3, [r7, #24]
  return result;
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e003      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	ea42 0103 	orr.w	r1, r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10d      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x694>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 021f 	and.w	r2, r3, #31
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b1e      	subs	r3, #30
 8002bd4:	051b      	lsls	r3, r3, #20
 8002bd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	e01d      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x6d0>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	60fb      	str	r3, [r7, #12]
  return result;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	e005      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x6bc>
 8002bf8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3301      	adds	r3, #1
 8002c06:	f003 021f 	and.w	r2, r3, #31
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	3b1e      	subs	r3, #30
 8002c12:	051b      	lsls	r3, r3, #20
 8002c14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f7fe ffda 	bl	8001bd8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b3d      	ldr	r3, [pc, #244]	@ (8002d20 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d06c      	beq.n	8002d0a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c30:	483c      	ldr	r0, [pc, #240]	@ (8002d24 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c32:	f7fe ff09 	bl	8001a48 <LL_ADC_GetCommonPathInternalCh>
 8002c36:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d28 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d127      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d121      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a35      	ldr	r2, [pc, #212]	@ (8002d2c <HAL_ADC_ConfigChannel+0x7e4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d157      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c62:	4619      	mov	r1, r3
 8002c64:	482f      	ldr	r0, [pc, #188]	@ (8002d24 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c66:	f7fe fedc 	bl	8001a22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c6a:	4b31      	ldr	r3, [pc, #196]	@ (8002d30 <HAL_ADC_ConfigChannel+0x7e8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	4a30      	ldr	r2, [pc, #192]	@ (8002d34 <HAL_ADC_ConfigChannel+0x7ec>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c84:	e002      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f9      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c92:	e03a      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a27      	ldr	r2, [pc, #156]	@ (8002d38 <HAL_ADC_ConfigChannel+0x7f0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d113      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ca2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1f      	ldr	r2, [pc, #124]	@ (8002d2c <HAL_ADC_ConfigChannel+0x7e4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d12a      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4819      	ldr	r0, [pc, #100]	@ (8002d24 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cc0:	f7fe feaf 	bl	8001a22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cc4:	e021      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1c      	ldr	r2, [pc, #112]	@ (8002d3c <HAL_ADC_ConfigChannel+0x7f4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d11c      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d116      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a12      	ldr	r2, [pc, #72]	@ (8002d2c <HAL_ADC_ConfigChannel+0x7e4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d111      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cee:	4619      	mov	r1, r3
 8002cf0:	480c      	ldr	r0, [pc, #48]	@ (8002d24 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cf2:	f7fe fe96 	bl	8001a22 <LL_ADC_SetCommonPathInternalCh>
 8002cf6:	e008      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d12:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	37d8      	adds	r7, #216	@ 0xd8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	80080000 	.word	0x80080000
 8002d24:	50040300 	.word	0x50040300
 8002d28:	c7520000 	.word	0xc7520000
 8002d2c:	50040000 	.word	0x50040000
 8002d30:	20000000 	.word	0x20000000
 8002d34:	053e2d63 	.word	0x053e2d63
 8002d38:	cb840000 	.word	0xcb840000
 8002d3c:	80000001 	.word	0x80000001

08002d40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff f807 	bl	8001d64 <LL_ADC_IsEnabled>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d169      	bne.n	8002e30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	4b36      	ldr	r3, [pc, #216]	@ (8002e3c <ADC_Enable+0xfc>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00d      	beq.n	8002d86 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e055      	b.n	8002e32 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe ffc2 	bl	8001d14 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d90:	482b      	ldr	r0, [pc, #172]	@ (8002e40 <ADC_Enable+0x100>)
 8002d92:	f7fe fe59 	bl	8001a48 <LL_ADC_GetCommonPathInternalCh>
 8002d96:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002da0:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <ADC_Enable+0x104>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	4a28      	ldr	r2, [pc, #160]	@ (8002e48 <ADC_Enable+0x108>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dba:	e002      	b.n	8002dc2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f9      	bne.n	8002dbc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002dc8:	f7fe fde8 	bl	800199c <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dce:	e028      	b.n	8002e22 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe ffc5 	bl	8001d64 <LL_ADC_IsEnabled>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe ff95 	bl	8001d14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dea:	f7fe fdd7 	bl	800199c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d914      	bls.n	8002e22 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d00d      	beq.n	8002e22 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e007      	b.n	8002e32 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d1cf      	bne.n	8002dd0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	8000003f 	.word	0x8000003f
 8002e40:	50040300 	.word	0x50040300
 8002e44:	20000000 	.word	0x20000000
 8002e48:	053e2d63 	.word	0x053e2d63

08002e4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe ff96 	bl	8001d8a <LL_ADC_IsDisableOngoing>
 8002e5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe ff7d 	bl	8001d64 <LL_ADC_IsEnabled>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d047      	beq.n	8002f00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d144      	bne.n	8002f00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030d 	and.w	r3, r3, #13
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10c      	bne.n	8002e9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe ff57 	bl	8001d3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2203      	movs	r2, #3
 8002e94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e96:	f7fe fd81 	bl	800199c <HAL_GetTick>
 8002e9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e9c:	e029      	b.n	8002ef2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea2:	f043 0210 	orr.w	r2, r3, #16
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eae:	f043 0201 	orr.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e023      	b.n	8002f02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002eba:	f7fe fd6f 	bl	800199c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d914      	bls.n	8002ef2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	f043 0210 	orr.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e007      	b.n	8002f02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1dc      	bne.n	8002eba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d14b      	bne.n	8002fbc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d021      	beq.n	8002f82 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe fdf6 	bl	8001b34 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d032      	beq.n	8002fb4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d12b      	bne.n	8002fb4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11f      	bne.n	8002fb4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f80:	e018      	b.n	8002fb4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d111      	bne.n	8002fb4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fac:	f043 0201 	orr.w	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7fd ff77 	bl	8000ea8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fba:	e00e      	b.n	8002fda <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7ff fab3 	bl	8002534 <HAL_ADC_ErrorCallback>
}
 8002fce:	e004      	b.n	8002fda <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f7fe f82b 	bl	800104c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	f043 0204 	orr.w	r2, r3, #4
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff fa85 	bl	8002534 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <LL_ADC_StartCalibration>:
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003044:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800304e:	4313      	orrs	r3, r2
 8003050:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	609a      	str	r2, [r3, #8]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_IsCalibrationOnGoing>:
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003078:	d101      	bne.n	800307e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_ADCEx_Calibration_Start+0x1c>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e04d      	b.n	8003144 <HAL_ADCEx_Calibration_Start+0xb8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff fecb 	bl	8002e4c <ADC_Disable>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d136      	bne.n	800312e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030c8:	f023 0302 	bic.w	r3, r3, #2
 80030cc:	f043 0202 	orr.w	r2, r3, #2
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ffa9 	bl	8003032 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030e0:	e014      	b.n	800310c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80030ee:	d30d      	bcc.n	800310c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	f023 0312 	bic.w	r3, r3, #18
 80030f8:	f043 0210 	orr.w	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e01b      	b.n	8003144 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ffa7 	bl	8003064 <LL_ADC_IsCalibrationOnGoing>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e2      	bne.n	80030e2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003120:	f023 0303 	bic.w	r3, r3, #3
 8003124:	f043 0201 	orr.w	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	659a      	str	r2, [r3, #88]	@ 0x58
 800312c:	e005      	b.n	800313a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	f043 0210 	orr.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c0:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031cc:	4013      	ands	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e2:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	60d3      	str	r3, [r2, #12]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <__NVIC_GetPriorityGrouping+0x18>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 0307 	and.w	r3, r3, #7
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	2b00      	cmp	r3, #0
 8003224:	db0b      	blt.n	800323e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	f003 021f 	and.w	r2, r3, #31
 800322c:	4907      	ldr	r1, [pc, #28]	@ (800324c <__NVIC_EnableIRQ+0x38>)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2001      	movs	r0, #1
 8003236:	fa00 f202 	lsl.w	r2, r0, r2
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000e100 	.word	0xe000e100

08003250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	@ (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	@ (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	@ 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f1c3 0307 	rsb	r3, r3, #7
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf28      	it	cs
 80032c2:	2304      	movcs	r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d902      	bls.n	80032d4 <NVIC_EncodePriority+0x30>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	e000      	b.n	80032d6 <NVIC_EncodePriority+0x32>
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	4313      	orrs	r3, r2
         );
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	@ 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800331c:	d301      	bcc.n	8003322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003322:	4a0a      	ldr	r2, [pc, #40]	@ (800334c <SysTick_Config+0x40>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800332a:	210f      	movs	r1, #15
 800332c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003330:	f7ff ff8e 	bl	8003250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003334:	4b05      	ldr	r3, [pc, #20]	@ (800334c <SysTick_Config+0x40>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800333a:	4b04      	ldr	r3, [pc, #16]	@ (800334c <SysTick_Config+0x40>)
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000e010 	.word	0xe000e010

08003350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff29 	bl	80031b0 <__NVIC_SetPriorityGrouping>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003378:	f7ff ff3e 	bl	80031f8 <__NVIC_GetPriorityGrouping>
 800337c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	f7ff ff8e 	bl	80032a4 <NVIC_EncodePriority>
 8003388:	4602      	mov	r2, r0
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff5d 	bl	8003250 <__NVIC_SetPriority>
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff31 	bl	8003214 <__NVIC_EnableIRQ>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ffa2 	bl	800330c <SysTick_Config>
 80033c8:	4603      	mov	r3, r0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e08d      	b.n	8003502 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b47      	ldr	r3, [pc, #284]	@ (800350c <HAL_DMA_Init+0x138>)
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d80f      	bhi.n	8003412 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b45      	ldr	r3, [pc, #276]	@ (8003510 <HAL_DMA_Init+0x13c>)
 80033fa:	4413      	add	r3, r2
 80033fc:	4a45      	ldr	r2, [pc, #276]	@ (8003514 <HAL_DMA_Init+0x140>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	009a      	lsls	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a42      	ldr	r2, [pc, #264]	@ (8003518 <HAL_DMA_Init+0x144>)
 800340e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003410:	e00e      	b.n	8003430 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	4b40      	ldr	r3, [pc, #256]	@ (800351c <HAL_DMA_Init+0x148>)
 800341a:	4413      	add	r3, r2
 800341c:	4a3d      	ldr	r2, [pc, #244]	@ (8003514 <HAL_DMA_Init+0x140>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	009a      	lsls	r2, r3, #2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a3c      	ldr	r2, [pc, #240]	@ (8003520 <HAL_DMA_Init+0x14c>)
 800342e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800344a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 faba 	bl	80039fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003490:	d102      	bne.n	8003498 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d010      	beq.n	80034d8 <HAL_DMA_Init+0x104>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d80c      	bhi.n	80034d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fada 	bl	8003a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	e008      	b.n	80034ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40020407 	.word	0x40020407
 8003510:	bffdfff8 	.word	0xbffdfff8
 8003514:	cccccccd 	.word	0xcccccccd
 8003518:	40020000 	.word	0x40020000
 800351c:	bffdfbf8 	.word	0xbffdfbf8
 8003520:	40020400 	.word	0x40020400

08003524 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_DMA_Start_IT+0x20>
 8003540:	2302      	movs	r3, #2
 8003542:	e066      	b.n	8003612 <HAL_DMA_Start_IT+0xee>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d155      	bne.n	8003604 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f9ff 	bl	8003980 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 020e 	orr.w	r2, r2, #14
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e00f      	b.n	80035bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0204 	bic.w	r2, r2, #4
 80035aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 020a 	orr.w	r2, r2, #10
 80035ba:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035f0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	e005      	b.n	8003610 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800360c:	2302      	movs	r3, #2
 800360e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003610:	7dfb      	ldrb	r3, [r7, #23]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800361a:	b480      	push	{r7}
 800361c:	b085      	sub	sp, #20
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d008      	beq.n	8003644 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2204      	movs	r2, #4
 8003636:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e040      	b.n	80036c6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 020e 	bic.w	r2, r2, #14
 8003652:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003662:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003678:	f003 021c 	and.w	r2, r3, #28
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	2101      	movs	r1, #1
 8003682:	fa01 f202 	lsl.w	r2, r1, r2
 8003686:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003690:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00c      	beq.n	80036b4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d005      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2204      	movs	r2, #4
 80036ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e047      	b.n	8003786 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 020e 	bic.w	r2, r2, #14
 8003704:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003720:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003724:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	f003 021c 	and.w	r2, r3, #28
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2101      	movs	r1, #1
 8003734:	fa01 f202 	lsl.w	r2, r1, r2
 8003738:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003742:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00c      	beq.n	8003766 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003756:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800375a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003764:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
    }
  }
  return status;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ac:	f003 031c 	and.w	r3, r3, #28
 80037b0:	2204      	movs	r2, #4
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d026      	beq.n	800380a <HAL_DMA_IRQHandler+0x7a>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d021      	beq.n	800380a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d107      	bne.n	80037e4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0204 	bic.w	r2, r2, #4
 80037e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	f003 021c 	and.w	r2, r3, #28
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	2104      	movs	r1, #4
 80037f2:	fa01 f202 	lsl.w	r2, r1, r2
 80037f6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d071      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003808:	e06c      	b.n	80038e4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	f003 031c 	and.w	r3, r3, #28
 8003812:	2202      	movs	r2, #2
 8003814:	409a      	lsls	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d02e      	beq.n	800387c <HAL_DMA_IRQHandler+0xec>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d029      	beq.n	800387c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 020a 	bic.w	r2, r2, #10
 8003844:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003852:	f003 021c 	and.w	r2, r3, #28
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	2102      	movs	r1, #2
 800385c:	fa01 f202 	lsl.w	r2, r1, r2
 8003860:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d038      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800387a:	e033      	b.n	80038e4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003880:	f003 031c 	and.w	r3, r3, #28
 8003884:	2208      	movs	r2, #8
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d02a      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x156>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d025      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 020e 	bic.w	r2, r2, #14
 80038a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f003 021c 	and.w	r2, r3, #28
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f202 	lsl.w	r2, r1, r2
 80038bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
}
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	460b      	mov	r3, r1
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_DMA_RegisterCallback+0x20>
 800390c:	2302      	movs	r3, #2
 800390e:	e031      	b.n	8003974 <HAL_DMA_RegisterCallback+0x84>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d120      	bne.n	8003966 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003924:	7afb      	ldrb	r3, [r7, #11]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d81a      	bhi.n	8003960 <HAL_DMA_RegisterCallback+0x70>
 800392a:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <HAL_DMA_RegisterCallback+0x40>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003941 	.word	0x08003941
 8003934:	08003949 	.word	0x08003949
 8003938:	08003951 	.word	0x08003951
 800393c:	08003959 	.word	0x08003959
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003946:	e010      	b.n	800396a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 800394e:	e00c      	b.n	800396a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003956:	e008      	b.n	800396a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800395e:	e004      	b.n	800396a <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
        break;
 8003964:	e001      	b.n	800396a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003972:	7dfb      	ldrb	r3, [r7, #23]
}
 8003974:	4618      	mov	r0, r3
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003996:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039a8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	f003 021c 	and.w	r2, r3, #28
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	2101      	movs	r1, #1
 80039b8:	fa01 f202 	lsl.w	r2, r1, r2
 80039bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d108      	bne.n	80039e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039de:	e007      	b.n	80039f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4b17      	ldr	r3, [pc, #92]	@ (8003a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d80a      	bhi.n	8003a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a14:	089b      	lsrs	r3, r3, #2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a1c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a24:	e007      	b.n	8003a36 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	009a      	lsls	r2, r3, #2
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a30:	4413      	add	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	3b08      	subs	r3, #8
 8003a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2201      	movs	r2, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40020407 	.word	0x40020407
 8003a6c:	4002081c 	.word	0x4002081c
 8003a70:	cccccccd 	.word	0xcccccccd
 8003a74:	40020880 	.word	0x40020880

08003a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	461a      	mov	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a08      	ldr	r2, [pc, #32]	@ (8003abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a9a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	1000823f 	.word	0x1000823f
 8003abc:	40020940 	.word	0x40020940

08003ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ace:	e166      	b.n	8003d9e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	4013      	ands	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 8158 	beq.w	8003d98 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d005      	beq.n	8003b00 <HAL_GPIO_Init+0x40>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d130      	bne.n	8003b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4013      	ands	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b36:	2201      	movs	r2, #1
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4013      	ands	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f003 0201 	and.w	r2, r3, #1
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d017      	beq.n	8003b9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	2203      	movs	r2, #3
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d123      	bne.n	8003bf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	08da      	lsrs	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3208      	adds	r2, #8
 8003bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	08da      	lsrs	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3208      	adds	r2, #8
 8003bec:	6939      	ldr	r1, [r7, #16]
 8003bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0203 	and.w	r2, r3, #3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80b2 	beq.w	8003d98 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c34:	4b61      	ldr	r3, [pc, #388]	@ (8003dbc <HAL_GPIO_Init+0x2fc>)
 8003c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c38:	4a60      	ldr	r2, [pc, #384]	@ (8003dbc <HAL_GPIO_Init+0x2fc>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c40:	4b5e      	ldr	r3, [pc, #376]	@ (8003dbc <HAL_GPIO_Init+0x2fc>)
 8003c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c4c:	4a5c      	ldr	r2, [pc, #368]	@ (8003dc0 <HAL_GPIO_Init+0x300>)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	089b      	lsrs	r3, r3, #2
 8003c52:	3302      	adds	r3, #2
 8003c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	220f      	movs	r2, #15
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c76:	d02b      	beq.n	8003cd0 <HAL_GPIO_Init+0x210>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a52      	ldr	r2, [pc, #328]	@ (8003dc4 <HAL_GPIO_Init+0x304>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d025      	beq.n	8003ccc <HAL_GPIO_Init+0x20c>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a51      	ldr	r2, [pc, #324]	@ (8003dc8 <HAL_GPIO_Init+0x308>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d01f      	beq.n	8003cc8 <HAL_GPIO_Init+0x208>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a50      	ldr	r2, [pc, #320]	@ (8003dcc <HAL_GPIO_Init+0x30c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d019      	beq.n	8003cc4 <HAL_GPIO_Init+0x204>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd0 <HAL_GPIO_Init+0x310>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d013      	beq.n	8003cc0 <HAL_GPIO_Init+0x200>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a4e      	ldr	r2, [pc, #312]	@ (8003dd4 <HAL_GPIO_Init+0x314>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00d      	beq.n	8003cbc <HAL_GPIO_Init+0x1fc>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a4d      	ldr	r2, [pc, #308]	@ (8003dd8 <HAL_GPIO_Init+0x318>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <HAL_GPIO_Init+0x1f8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a4c      	ldr	r2, [pc, #304]	@ (8003ddc <HAL_GPIO_Init+0x31c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d101      	bne.n	8003cb4 <HAL_GPIO_Init+0x1f4>
 8003cb0:	2307      	movs	r3, #7
 8003cb2:	e00e      	b.n	8003cd2 <HAL_GPIO_Init+0x212>
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	e00c      	b.n	8003cd2 <HAL_GPIO_Init+0x212>
 8003cb8:	2306      	movs	r3, #6
 8003cba:	e00a      	b.n	8003cd2 <HAL_GPIO_Init+0x212>
 8003cbc:	2305      	movs	r3, #5
 8003cbe:	e008      	b.n	8003cd2 <HAL_GPIO_Init+0x212>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	e006      	b.n	8003cd2 <HAL_GPIO_Init+0x212>
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e004      	b.n	8003cd2 <HAL_GPIO_Init+0x212>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e002      	b.n	8003cd2 <HAL_GPIO_Init+0x212>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <HAL_GPIO_Init+0x212>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	f002 0203 	and.w	r2, r2, #3
 8003cd8:	0092      	lsls	r2, r2, #2
 8003cda:	4093      	lsls	r3, r2
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ce2:	4937      	ldr	r1, [pc, #220]	@ (8003dc0 <HAL_GPIO_Init+0x300>)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	3302      	adds	r3, #2
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8003de0 <HAL_GPIO_Init+0x320>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d14:	4a32      	ldr	r2, [pc, #200]	@ (8003de0 <HAL_GPIO_Init+0x320>)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d1a:	4b31      	ldr	r3, [pc, #196]	@ (8003de0 <HAL_GPIO_Init+0x320>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	43db      	mvns	r3, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4013      	ands	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d3e:	4a28      	ldr	r2, [pc, #160]	@ (8003de0 <HAL_GPIO_Init+0x320>)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d44:	4b26      	ldr	r3, [pc, #152]	@ (8003de0 <HAL_GPIO_Init+0x320>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d68:	4a1d      	ldr	r2, [pc, #116]	@ (8003de0 <HAL_GPIO_Init+0x320>)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003de0 <HAL_GPIO_Init+0x320>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d92:	4a13      	ldr	r2, [pc, #76]	@ (8003de0 <HAL_GPIO_Init+0x320>)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f47f ae91 	bne.w	8003ad0 <HAL_GPIO_Init+0x10>
  }
}
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	48000400 	.word	0x48000400
 8003dc8:	48000800 	.word	0x48000800
 8003dcc:	48000c00 	.word	0x48000c00
 8003dd0:	48001000 	.word	0x48001000
 8003dd4:	48001400 	.word	0x48001400
 8003dd8:	48001800 	.word	0x48001800
 8003ddc:	48001c00 	.word	0x48001c00
 8003de0:	40010400 	.word	0x40010400

08003de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	807b      	strh	r3, [r7, #2]
 8003df0:	4613      	mov	r3, r2
 8003df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003df4:	787b      	ldrb	r3, [r7, #1]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dfa:	887a      	ldrh	r2, [r7, #2]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e00:	e002      	b.n	8003e08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e02:	887a      	ldrh	r2, [r7, #2]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e26:	887a      	ldrh	r2, [r7, #2]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	041a      	lsls	r2, r3, #16
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	43d9      	mvns	r1, r3
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	400b      	ands	r3, r1
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	619a      	str	r2, [r3, #24]
}
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e52:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d006      	beq.n	8003e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e5e:	4a05      	ldr	r2, [pc, #20]	@ (8003e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fc fd70 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40010400 	.word	0x40010400

08003e78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7a:	b08f      	sub	sp, #60	@ 0x3c
 8003e7c:	af0a      	add	r7, sp, #40	@ 0x28
 8003e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e116      	b.n	80040b8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f009 f871 	bl	800cf8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2203      	movs	r2, #3
 8003eae:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d102      	bne.n	8003ec4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f005 fcc8 	bl	800985e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	687e      	ldr	r6, [r7, #4]
 8003ed6:	466d      	mov	r5, sp
 8003ed8:	f106 0410 	add.w	r4, r6, #16
 8003edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ee8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eec:	1d33      	adds	r3, r6, #4
 8003eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ef0:	6838      	ldr	r0, [r7, #0]
 8003ef2:	f005 fbdb 	bl	80096ac <USB_CoreInit>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0d7      	b.n	80040b8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f005 fcb6 	bl	8009880 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	73fb      	strb	r3, [r7, #15]
 8003f18:	e04a      	b.n	8003fb0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	333d      	adds	r3, #61	@ 0x3d
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f2e:	7bfa      	ldrb	r2, [r7, #15]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	333c      	adds	r3, #60	@ 0x3c
 8003f3e:	7bfa      	ldrb	r2, [r7, #15]
 8003f40:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f42:	7bfa      	ldrb	r2, [r7, #15]
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	b298      	uxth	r0, r3
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	3356      	adds	r3, #86	@ 0x56
 8003f56:	4602      	mov	r2, r0
 8003f58:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f5a:	7bfa      	ldrb	r2, [r7, #15]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	3340      	adds	r3, #64	@ 0x40
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3344      	adds	r3, #68	@ 0x44
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	3348      	adds	r3, #72	@ 0x48
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	334c      	adds	r3, #76	@ 0x4c
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	3301      	adds	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d3af      	bcc.n	8003f1a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	e044      	b.n	800404a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fec:	7bfa      	ldrb	r2, [r7, #15]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	3301      	adds	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	429a      	cmp	r2, r3
 8004052:	d3b5      	bcc.n	8003fc0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	687e      	ldr	r6, [r7, #4]
 800405c:	466d      	mov	r5, sp
 800405e:	f106 0410 	add.w	r4, r6, #16
 8004062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800406a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800406e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004072:	1d33      	adds	r3, r6, #4
 8004074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004076:	6838      	ldr	r0, [r7, #0]
 8004078:	f005 fc4e 	bl	8009918 <USB_DevInit>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e014      	b.n	80040b8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d102      	bne.n	80040ac <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f001 f86a 	bl	8005180 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f006 fbfc 	bl	800a8ae <USB_DevDisconnect>

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_PCD_Start+0x1c>
 80040d8:	2302      	movs	r3, #2
 80040da:	e01c      	b.n	8004116 <HAL_PCD_Start+0x56>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f005 fb9d 	bl	800983c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f006 fbb0 	bl	800a86c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800411e:	b590      	push	{r4, r7, lr}
 8004120:	b08d      	sub	sp, #52	@ 0x34
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f006 fc6e 	bl	800aa16 <USB_GetMode>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	f040 847e 	bne.w	8004a3e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f006 fbd2 	bl	800a8f0 <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8474 	beq.w	8004a3c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f006 fbbf 	bl	800a8f0 <USB_ReadInterrupts>
 8004172:	4603      	mov	r3, r0
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	d107      	bne.n	800418c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f002 0202 	and.w	r2, r2, #2
 800418a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f006 fbad 	bl	800a8f0 <USB_ReadInterrupts>
 8004196:	4603      	mov	r3, r0
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b10      	cmp	r3, #16
 800419e:	d161      	bne.n	8004264 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0210 	bic.w	r2, r2, #16
 80041ae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f003 020f 	and.w	r2, r3, #15
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	0c5b      	lsrs	r3, r3, #17
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d124      	bne.n	8004226 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d035      	beq.n	8004254 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	6a38      	ldr	r0, [r7, #32]
 80041fc:	f006 f9e4 	bl	800a5c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800420c:	441a      	add	r2, r3
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800421e:	441a      	add	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	615a      	str	r2, [r3, #20]
 8004224:	e016      	b.n	8004254 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	0c5b      	lsrs	r3, r3, #17
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	2b06      	cmp	r3, #6
 8004230:	d110      	bne.n	8004254 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004238:	2208      	movs	r2, #8
 800423a:	4619      	mov	r1, r3
 800423c:	6a38      	ldr	r0, [r7, #32]
 800423e:	f006 f9c3 	bl	800a5c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800424e:	441a      	add	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0210 	orr.w	r2, r2, #16
 8004262:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f006 fb41 	bl	800a8f0 <USB_ReadInterrupts>
 800426e:	4603      	mov	r3, r0
 8004270:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004274:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004278:	f040 80a7 	bne.w	80043ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f006 fb46 	bl	800a916 <USB_ReadDevAllOutEpInterrupt>
 800428a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800428c:	e099      	b.n	80043c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 808e 	beq.w	80043b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f006 fb6a 	bl	800a97e <USB_ReadDevOutEPInterrupt>
 80042aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00c      	beq.n	80042d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c2:	461a      	mov	r2, r3
 80042c4:	2301      	movs	r3, #1
 80042c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80042c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fe7e 	bl	8004fcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e6:	461a      	mov	r2, r3
 80042e8:	2308      	movs	r3, #8
 80042ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80042ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 feba 	bl	8005068 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430a:	461a      	mov	r2, r3
 800430c:	2310      	movs	r3, #16
 800430e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d030      	beq.n	800437c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004322:	2b80      	cmp	r3, #128	@ 0x80
 8004324:	d109      	bne.n	800433a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004334:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004338:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800433a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	78db      	ldrb	r3, [r3, #3]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d108      	bne.n	800436a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2200      	movs	r2, #0
 800435c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	b2db      	uxtb	r3, r3
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f008 ff67 	bl	800d238 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004376:	461a      	mov	r2, r3
 8004378:	2302      	movs	r3, #2
 800437a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004392:	461a      	mov	r2, r3
 8004394:	2320      	movs	r3, #32
 8004396:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ae:	461a      	mov	r2, r3
 80043b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	3301      	adds	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f47f af62 	bne.w	800428e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f006 fa8e 	bl	800a8f0 <USB_ReadInterrupts>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043de:	f040 80a4 	bne.w	800452a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f006 faaf 	bl	800a94a <USB_ReadDevAllInEpInterrupt>
 80043ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80043f2:	e096      	b.n	8004522 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80043f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 808b 	beq.w	8004516 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f006 fad5 	bl	800a9ba <USB_ReadDevInEPInterrupt>
 8004410:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d020      	beq.n	800445e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	2201      	movs	r2, #1
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	43db      	mvns	r3, r3
 8004436:	69f9      	ldr	r1, [r7, #28]
 8004438:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800443c:	4013      	ands	r3, r2
 800443e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444c:	461a      	mov	r2, r3
 800444e:	2301      	movs	r3, #1
 8004450:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	b2db      	uxtb	r3, r3
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f008 fe58 	bl	800d10e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004474:	461a      	mov	r2, r3
 8004476:	2308      	movs	r3, #8
 8004478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004490:	461a      	mov	r2, r3
 8004492:	2310      	movs	r3, #16
 8004494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ac:	461a      	mov	r2, r3
 80044ae:	2340      	movs	r3, #64	@ 0x40
 80044b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d023      	beq.n	8004504 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80044bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044be:	6a38      	ldr	r0, [r7, #32]
 80044c0:	f005 fb6c 	bl	8009b9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80044c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	3338      	adds	r3, #56	@ 0x38
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	4413      	add	r3, r2
 80044d4:	3304      	adds	r3, #4
 80044d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	78db      	ldrb	r3, [r3, #3]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d108      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2200      	movs	r2, #0
 80044e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f008 feb5 	bl	800d25c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044fe:	461a      	mov	r2, r3
 8004500:	2302      	movs	r3, #2
 8004502:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800450e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fcd2 	bl	8004eba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	3301      	adds	r3, #1
 800451a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800451c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	f47f af65 	bne.w	80043f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f006 f9de 	bl	800a8f0 <USB_ReadInterrupts>
 8004534:	4603      	mov	r3, r0
 8004536:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800453a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800453e:	d122      	bne.n	8004586 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800455a:	2b01      	cmp	r3, #1
 800455c:	d108      	bne.n	8004570 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004566:	2100      	movs	r1, #0
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f009 f8e9 	bl	800d740 <HAL_PCDEx_LPM_Callback>
 800456e:	e002      	b.n	8004576 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f008 fe39 	bl	800d1e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f006 f9b0 	bl	800a8f0 <USB_ReadInterrupts>
 8004590:	4603      	mov	r3, r0
 8004592:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004596:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800459a:	d112      	bne.n	80045c2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d102      	bne.n	80045b2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f008 fdf5 	bl	800d19c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80045c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f006 f992 	bl	800a8f0 <USB_ReadInterrupts>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045d6:	d121      	bne.n	800461c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80045e6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d111      	bne.n	8004616 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	f003 020f 	and.w	r2, r3, #15
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800460c:	2101      	movs	r1, #1
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f009 f896 	bl	800d740 <HAL_PCDEx_LPM_Callback>
 8004614:	e002      	b.n	800461c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f008 fdc0 	bl	800d19c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f006 f965 	bl	800a8f0 <USB_ReadInterrupts>
 8004626:	4603      	mov	r3, r0
 8004628:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800462c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004630:	f040 80b5 	bne.w	800479e <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2110      	movs	r1, #16
 800464e:	4618      	mov	r0, r3
 8004650:	f005 faa4 	bl	8009b9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004658:	e046      	b.n	80046e8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800465a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004666:	461a      	mov	r2, r3
 8004668:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800466c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800466e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	440a      	add	r2, r1
 8004684:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004688:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800468c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800468e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800469a:	461a      	mov	r2, r3
 800469c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046b2:	0151      	lsls	r1, r2, #5
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	440a      	add	r2, r1
 80046b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e4:	3301      	adds	r3, #1
 80046e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d3b3      	bcc.n	800465a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004700:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004704:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	2b00      	cmp	r3, #0
 800470c:	d016      	beq.n	800473c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800471e:	f043 030b 	orr.w	r3, r3, #11
 8004722:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004734:	f043 030b 	orr.w	r3, r3, #11
 8004738:	6453      	str	r3, [r2, #68]	@ 0x44
 800473a:	e015      	b.n	8004768 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800474a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800474e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004752:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004762:	f043 030b 	orr.w	r3, r3, #11
 8004766:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004776:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800477a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f006 f975 	bl	800aa78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800479c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f006 f8a4 	bl	800a8f0 <USB_ReadInterrupts>
 80047a8:	4603      	mov	r3, r0
 80047aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b2:	d124      	bne.n	80047fe <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f006 f93a 	bl	800aa32 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f005 fa67 	bl	8009c96 <USB_GetDevSpeed>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681c      	ldr	r4, [r3, #0]
 80047d4:	f001 fbbc 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 80047d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	4620      	mov	r0, r4
 80047e4:	f004 ff8e 	bl	8009704 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f008 fcb8 	bl	800d15e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80047fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f006 f874 	bl	800a8f0 <USB_ReadInterrupts>
 8004808:	4603      	mov	r3, r0
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b08      	cmp	r3, #8
 8004810:	d10a      	bne.n	8004828 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f008 fc95 	bl	800d142 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f002 0208 	and.w	r2, r2, #8
 8004826:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f006 f85f 	bl	800a8f0 <USB_ReadInterrupts>
 8004832:	4603      	mov	r3, r0
 8004834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004838:	2b80      	cmp	r3, #128	@ 0x80
 800483a:	d122      	bne.n	8004882 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004848:	2301      	movs	r3, #1
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
 800484c:	e014      	b.n	8004878 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004852:	4613      	mov	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d105      	bne.n	8004872 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	b2db      	uxtb	r3, r3
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 faf3 	bl	8004e58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	3301      	adds	r3, #1
 8004876:	627b      	str	r3, [r7, #36]	@ 0x24
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800487e:	429a      	cmp	r2, r3
 8004880:	d3e5      	bcc.n	800484e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f006 f832 	bl	800a8f0 <USB_ReadInterrupts>
 800488c:	4603      	mov	r3, r0
 800488e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004896:	d13b      	bne.n	8004910 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004898:	2301      	movs	r3, #1
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24
 800489c:	e02b      	b.n	80048f6 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b2:	4613      	mov	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	3340      	adds	r3, #64	@ 0x40
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d115      	bne.n	80048f0 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80048c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	da12      	bge.n	80048f0 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	333f      	adds	r3, #63	@ 0x3f
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	4619      	mov	r1, r3
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fab4 	bl	8004e58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	3301      	adds	r3, #1
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d3ce      	bcc.n	800489e <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800490e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f005 ffeb 	bl	800a8f0 <USB_ReadInterrupts>
 800491a:	4603      	mov	r3, r0
 800491c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004920:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004924:	d155      	bne.n	80049d2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004926:	2301      	movs	r3, #1
 8004928:	627b      	str	r3, [r7, #36]	@ 0x24
 800492a:	e045      	b.n	80049b8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d12e      	bne.n	80049b2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004954:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004956:	2b00      	cmp	r3, #0
 8004958:	da2b      	bge.n	80049b2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004966:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800496a:	429a      	cmp	r2, r3
 800496c:	d121      	bne.n	80049b2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004980:	2201      	movs	r2, #1
 8004982:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049ae:	6053      	str	r3, [r2, #4]
            break;
 80049b0:	e007      	b.n	80049c2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	3301      	adds	r3, #1
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049be:	429a      	cmp	r2, r3
 80049c0:	d3b4      	bcc.n	800492c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80049d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f005 ff8a 	bl	800a8f0 <USB_ReadInterrupts>
 80049dc:	4603      	mov	r3, r0
 80049de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80049e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e6:	d10a      	bne.n	80049fe <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f008 fc49 	bl	800d280 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80049fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f005 ff74 	bl	800a8f0 <USB_ReadInterrupts>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d115      	bne.n	8004a3e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f008 fc39 	bl	800d29c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
 8004a3a:	e000      	b.n	8004a3e <HAL_PCD_IRQHandler+0x920>
      return;
 8004a3c:	bf00      	nop
    }
  }
}
 8004a3e:	3734      	adds	r7, #52	@ 0x34
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd90      	pop	{r4, r7, pc}

08004a44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_PCD_SetAddress+0x1a>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e013      	b.n	8004a86 <HAL_PCD_SetAddress+0x42>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	4611      	mov	r1, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f005 fed2 	bl	800a820 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	4608      	mov	r0, r1
 8004a98:	4611      	mov	r1, r2
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	70fb      	strb	r3, [r7, #3]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	803b      	strh	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	da0f      	bge.n	8004ad4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	f003 020f 	and.w	r2, r3, #15
 8004aba:	4613      	mov	r3, r2
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	3338      	adds	r3, #56	@ 0x38
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3304      	adds	r3, #4
 8004aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	705a      	strb	r2, [r3, #1]
 8004ad2:	e00f      	b.n	8004af4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	f003 020f 	and.w	r2, r3, #15
 8004ada:	4613      	mov	r3, r2
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	3304      	adds	r3, #4
 8004aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b00:	883a      	ldrh	r2, [r7, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	78ba      	ldrb	r2, [r7, #2]
 8004b0a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b1e:	78bb      	ldrb	r3, [r7, #2]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d102      	bne.n	8004b2a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_PCD_EP_Open+0xaa>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e00e      	b.n	8004b56 <HAL_PCD_EP_Open+0xc8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68f9      	ldr	r1, [r7, #12]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f005 f8c4 	bl	8009cd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004b54:	7afb      	ldrb	r3, [r7, #11]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	da0f      	bge.n	8004b92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	f003 020f 	and.w	r2, r3, #15
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	3338      	adds	r3, #56	@ 0x38
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	4413      	add	r3, r2
 8004b86:	3304      	adds	r3, #4
 8004b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	705a      	strb	r2, [r3, #1]
 8004b90:	e00f      	b.n	8004bb2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	f003 020f 	and.w	r2, r3, #15
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3304      	adds	r3, #4
 8004baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_PCD_EP_Close+0x6e>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e00e      	b.n	8004bea <HAL_PCD_EP_Close+0x8c>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68f9      	ldr	r1, [r7, #12]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f005 f902 	bl	8009de4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b086      	sub	sp, #24
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c02:	7afb      	ldrb	r3, [r7, #11]
 8004c04:	f003 020f 	and.w	r2, r3, #15
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	3304      	adds	r3, #4
 8004c1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c34:	7afb      	ldrb	r3, [r7, #11]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6979      	ldr	r1, [r7, #20]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f005 f9a8 	bl	8009f9c <USB_EPStartXfer>

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	f003 020f 	and.w	r2, r3, #15
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004c78:	681b      	ldr	r3, [r3, #0]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b086      	sub	sp, #24
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	460b      	mov	r3, r1
 8004c94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c96:	7afb      	ldrb	r3, [r7, #11]
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	3338      	adds	r3, #56	@ 0x38
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	3304      	adds	r3, #4
 8004cac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cc6:	7afb      	ldrb	r3, [r7, #11]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6979      	ldr	r1, [r7, #20]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f005 f95f 	bl	8009f9c <USB_EPStartXfer>

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	f003 020f 	and.w	r2, r3, #15
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d901      	bls.n	8004d06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e04e      	b.n	8004da4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da0f      	bge.n	8004d2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	f003 020f 	and.w	r2, r3, #15
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	3338      	adds	r3, #56	@ 0x38
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	3304      	adds	r3, #4
 8004d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	705a      	strb	r2, [r3, #1]
 8004d2c:	e00d      	b.n	8004d4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	4613      	mov	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	3304      	adds	r3, #4
 8004d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_PCD_EP_SetStall+0x82>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e01c      	b.n	8004da4 <HAL_PCD_EP_SetStall+0xbc>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f005 fc7d 	bl	800a678 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d108      	bne.n	8004d9a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f005 fe6f 	bl	800aa78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	f003 020f 	and.w	r2, r3, #15
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d901      	bls.n	8004dca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e042      	b.n	8004e50 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	da0f      	bge.n	8004df2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	f003 020f 	and.w	r2, r3, #15
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	3338      	adds	r3, #56	@ 0x38
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	3304      	adds	r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	705a      	strb	r2, [r3, #1]
 8004df0:	e00f      	b.n	8004e12 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	f003 020f 	and.w	r2, r3, #15
 8004df8:	4613      	mov	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	4413      	add	r3, r2
 8004e08:	3304      	adds	r3, #4
 8004e0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_PCD_EP_ClrStall+0x86>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e00e      	b.n	8004e50 <HAL_PCD_EP_ClrStall+0xa4>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68f9      	ldr	r1, [r7, #12]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f005 fc87 	bl	800a754 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	da0c      	bge.n	8004e86 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	f003 020f 	and.w	r2, r3, #15
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	3338      	adds	r3, #56	@ 0x38
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	3304      	adds	r3, #4
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e00c      	b.n	8004ea0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	f003 020f 	and.w	r2, r3, #15
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68f9      	ldr	r1, [r7, #12]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f005 faaa 	bl	800a400 <USB_EPStopXfer>
 8004eac:	4603      	mov	r3, r0
 8004eae:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004eb0:	7afb      	ldrb	r3, [r7, #11]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b088      	sub	sp, #32
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	3338      	adds	r3, #56	@ 0x38
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	3304      	adds	r3, #4
 8004ee0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d901      	bls.n	8004ef2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e067      	b.n	8004fc2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d902      	bls.n	8004f0e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3303      	adds	r3, #3
 8004f12:	089b      	lsrs	r3, r3, #2
 8004f14:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f16:	e026      	b.n	8004f66 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d902      	bls.n	8004f34 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	3303      	adds	r3, #3
 8004f38:	089b      	lsrs	r3, r3, #2
 8004f3a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68d9      	ldr	r1, [r3, #12]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	6978      	ldr	r0, [r7, #20]
 8004f4a:	f005 fb03 	bl	800a554 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	441a      	add	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	695a      	ldr	r2, [r3, #20]
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	441a      	add	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d809      	bhi.n	8004f90 <PCD_WriteEmptyTxFifo+0xd6>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d203      	bcs.n	8004f90 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1c3      	bne.n	8004f18 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d811      	bhi.n	8004fc0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	6939      	ldr	r1, [r7, #16]
 8004fb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3720      	adds	r7, #32
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	333c      	adds	r3, #60	@ 0x3c
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a19      	ldr	r2, [pc, #100]	@ (8005064 <PCD_EP_OutXfrComplete_int+0x98>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d124      	bne.n	800504c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005018:	461a      	mov	r2, r3
 800501a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800501e:	6093      	str	r3, [r2, #8]
 8005020:	e01a      	b.n	8005058 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005038:	461a      	mov	r2, r3
 800503a:	2320      	movs	r3, #32
 800503c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f008 f847 	bl	800d0d8 <HAL_PCD_DataOutStageCallback>
 800504a:	e005      	b.n	8005058 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f008 f840 	bl	800d0d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	4f54310a 	.word	0x4f54310a

08005068 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	333c      	adds	r3, #60	@ 0x3c
 8005080:	3304      	adds	r3, #4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a0c      	ldr	r2, [pc, #48]	@ (80050cc <PCD_EP_OutSetupPacket_int+0x64>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d90e      	bls.n	80050bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d009      	beq.n	80050bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b4:	461a      	mov	r2, r3
 80050b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f007 fff9 	bl	800d0b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	4f54300a 	.word	0x4f54300a

080050d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
 80050dc:	4613      	mov	r3, r2
 80050de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d107      	bne.n	80050fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050ee:	883b      	ldrh	r3, [r7, #0]
 80050f0:	0419      	lsls	r1, r3, #16
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80050fc:	e028      	b.n	8005150 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	4413      	add	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800510c:	2300      	movs	r3, #0
 800510e:	73fb      	strb	r3, [r7, #15]
 8005110:	e00d      	b.n	800512e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	3340      	adds	r3, #64	@ 0x40
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	0c1b      	lsrs	r3, r3, #16
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	4413      	add	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	3301      	adds	r3, #1
 800512c:	73fb      	strb	r3, [r7, #15]
 800512e:	7bfa      	ldrb	r2, [r7, #15]
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	3b01      	subs	r3, #1
 8005134:	429a      	cmp	r2, r3
 8005136:	d3ec      	bcc.n	8005112 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005138:	883b      	ldrh	r3, [r7, #0]
 800513a:	0418      	lsls	r0, r3, #16
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	3b01      	subs	r3, #1
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	4302      	orrs	r2, r0
 8005148:	3340      	adds	r3, #64	@ 0x40
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	460b      	mov	r3, r1
 8005168:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	887a      	ldrh	r2, [r7, #2]
 8005170:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b2:	f043 0303 	orr.w	r3, r3, #3
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <HAL_PWREx_GetVoltageRange+0x3c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d8:	d102      	bne.n	80051e0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80051da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051de:	e00b      	b.n	80051f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80051e0:	4b08      	ldr	r3, [pc, #32]	@ (8005204 <HAL_PWREx_GetVoltageRange+0x3c>)
 80051e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ee:	d102      	bne.n	80051f6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80051f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051f4:	e000      	b.n	80051f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80051f6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40007000 	.word	0x40007000

08005208 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d141      	bne.n	800529a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005216:	4b4b      	ldr	r3, [pc, #300]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800521e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005222:	d131      	bne.n	8005288 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005224:	4b47      	ldr	r3, [pc, #284]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800522a:	4a46      	ldr	r2, [pc, #280]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800522c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005230:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005234:	4b43      	ldr	r3, [pc, #268]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800523c:	4a41      	ldr	r2, [pc, #260]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005242:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005244:	4b40      	ldr	r3, [pc, #256]	@ (8005348 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2232      	movs	r2, #50	@ 0x32
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	4a3f      	ldr	r2, [pc, #252]	@ (800534c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	0c9b      	lsrs	r3, r3, #18
 8005256:	3301      	adds	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800525a:	e002      	b.n	8005262 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3b01      	subs	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005262:	4b38      	ldr	r3, [pc, #224]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526e:	d102      	bne.n	8005276 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f2      	bne.n	800525c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005276:	4b33      	ldr	r3, [pc, #204]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800527e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005282:	d158      	bne.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e057      	b.n	8005338 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005288:	4b2e      	ldr	r3, [pc, #184]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800528e:	4a2d      	ldr	r2, [pc, #180]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005294:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005298:	e04d      	b.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052a0:	d141      	bne.n	8005326 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052a2:	4b28      	ldr	r3, [pc, #160]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ae:	d131      	bne.n	8005314 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052b0:	4b24      	ldr	r3, [pc, #144]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b6:	4a23      	ldr	r2, [pc, #140]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052c0:	4b20      	ldr	r3, [pc, #128]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052c8:	4a1e      	ldr	r2, [pc, #120]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80052d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2232      	movs	r2, #50	@ 0x32
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	4a1c      	ldr	r2, [pc, #112]	@ (800534c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	0c9b      	lsrs	r3, r3, #18
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052e6:	e002      	b.n	80052ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ee:	4b15      	ldr	r3, [pc, #84]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fa:	d102      	bne.n	8005302 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f2      	bne.n	80052e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005302:	4b10      	ldr	r3, [pc, #64]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800530a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800530e:	d112      	bne.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e011      	b.n	8005338 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005314:	4b0b      	ldr	r3, [pc, #44]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800531a:	4a0a      	ldr	r2, [pc, #40]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005320:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005324:	e007      	b.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005326:	4b07      	ldr	r3, [pc, #28]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800532e:	4a05      	ldr	r2, [pc, #20]	@ (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005330:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005334:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40007000 	.word	0x40007000
 8005348:	20000000 	.word	0x20000000
 800534c:	431bde83 	.word	0x431bde83

08005350 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005354:	4b05      	ldr	r3, [pc, #20]	@ (800536c <HAL_PWREx_EnableVddUSB+0x1c>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4a04      	ldr	r2, [pc, #16]	@ (800536c <HAL_PWREx_EnableVddUSB+0x1c>)
 800535a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800535e:	6053      	str	r3, [r2, #4]
}
 8005360:	bf00      	nop
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40007000 	.word	0x40007000

08005370 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005374:	4b05      	ldr	r3, [pc, #20]	@ (800538c <HAL_PWREx_EnableVddIO2+0x1c>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4a04      	ldr	r2, [pc, #16]	@ (800538c <HAL_PWREx_EnableVddIO2+0x1c>)
 800537a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800537e:	6053      	str	r3, [r2, #4]
}
 8005380:	bf00      	nop
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40007000 	.word	0x40007000

08005390 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f000 bc08 	b.w	8005bb4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a4:	4b96      	ldr	r3, [pc, #600]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 030c 	and.w	r3, r3, #12
 80053ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053ae:	4b94      	ldr	r3, [pc, #592]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 80e4 	beq.w	800558e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <HAL_RCC_OscConfig+0x4c>
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b0c      	cmp	r3, #12
 80053d0:	f040 808b 	bne.w	80054ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	f040 8087 	bne.w	80054ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053dc:	4b88      	ldr	r3, [pc, #544]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_OscConfig+0x64>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e3df      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1a      	ldr	r2, [r3, #32]
 80053f8:	4b81      	ldr	r3, [pc, #516]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <HAL_RCC_OscConfig+0x7e>
 8005404:	4b7e      	ldr	r3, [pc, #504]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800540c:	e005      	b.n	800541a <HAL_RCC_OscConfig+0x8a>
 800540e:	4b7c      	ldr	r3, [pc, #496]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005410:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005414:	091b      	lsrs	r3, r3, #4
 8005416:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800541a:	4293      	cmp	r3, r2
 800541c:	d223      	bcs.n	8005466 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fdcc 	bl	8005fc0 <RCC_SetFlashLatencyFromMSIRange>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e3c0      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005432:	4b73      	ldr	r3, [pc, #460]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a72      	ldr	r2, [pc, #456]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005438:	f043 0308 	orr.w	r3, r3, #8
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4b70      	ldr	r3, [pc, #448]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	496d      	ldr	r1, [pc, #436]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 800544c:	4313      	orrs	r3, r2
 800544e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005450:	4b6b      	ldr	r3, [pc, #428]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	4968      	ldr	r1, [pc, #416]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005460:	4313      	orrs	r3, r2
 8005462:	604b      	str	r3, [r1, #4]
 8005464:	e025      	b.n	80054b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005466:	4b66      	ldr	r3, [pc, #408]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a65      	ldr	r2, [pc, #404]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 800546c:	f043 0308 	orr.w	r3, r3, #8
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	4b63      	ldr	r3, [pc, #396]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	4960      	ldr	r1, [pc, #384]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005480:	4313      	orrs	r3, r2
 8005482:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005484:	4b5e      	ldr	r3, [pc, #376]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	495b      	ldr	r1, [pc, #364]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005494:	4313      	orrs	r3, r2
 8005496:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fd8c 	bl	8005fc0 <RCC_SetFlashLatencyFromMSIRange>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e380      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054b2:	f000 fcc1 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 80054b6:	4602      	mov	r2, r0
 80054b8:	4b51      	ldr	r3, [pc, #324]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	4950      	ldr	r1, [pc, #320]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80054c4:	5ccb      	ldrb	r3, [r1, r3]
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	4a4e      	ldr	r2, [pc, #312]	@ (8005608 <HAL_RCC_OscConfig+0x278>)
 80054d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054d2:	4b4e      	ldr	r3, [pc, #312]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fc fa10 	bl	80018fc <HAL_InitTick>
 80054dc:	4603      	mov	r3, r0
 80054de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d052      	beq.n	800558c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	e364      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d032      	beq.n	8005558 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054f2:	4b43      	ldr	r3, [pc, #268]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a42      	ldr	r2, [pc, #264]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054fe:	f7fc fa4d 	bl	800199c <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005506:	f7fc fa49 	bl	800199c <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e34d      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005518:	4b39      	ldr	r3, [pc, #228]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0f0      	beq.n	8005506 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005524:	4b36      	ldr	r3, [pc, #216]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a35      	ldr	r2, [pc, #212]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 800552a:	f043 0308 	orr.w	r3, r3, #8
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b33      	ldr	r3, [pc, #204]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	4930      	ldr	r1, [pc, #192]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005542:	4b2f      	ldr	r3, [pc, #188]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	492b      	ldr	r1, [pc, #172]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005552:	4313      	orrs	r3, r2
 8005554:	604b      	str	r3, [r1, #4]
 8005556:	e01a      	b.n	800558e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005558:	4b29      	ldr	r3, [pc, #164]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a28      	ldr	r2, [pc, #160]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 800555e:	f023 0301 	bic.w	r3, r3, #1
 8005562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005564:	f7fc fa1a 	bl	800199c <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800556c:	f7fc fa16 	bl	800199c <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e31a      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800557e:	4b20      	ldr	r3, [pc, #128]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x1dc>
 800558a:	e000      	b.n	800558e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800558c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d073      	beq.n	8005682 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b08      	cmp	r3, #8
 800559e:	d005      	beq.n	80055ac <HAL_RCC_OscConfig+0x21c>
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b0c      	cmp	r3, #12
 80055a4:	d10e      	bne.n	80055c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d10b      	bne.n	80055c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ac:	4b14      	ldr	r3, [pc, #80]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d063      	beq.n	8005680 <HAL_RCC_OscConfig+0x2f0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d15f      	bne.n	8005680 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e2f7      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055cc:	d106      	bne.n	80055dc <HAL_RCC_OscConfig+0x24c>
 80055ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a0b      	ldr	r2, [pc, #44]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80055d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e025      	b.n	8005628 <HAL_RCC_OscConfig+0x298>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055e4:	d114      	bne.n	8005610 <HAL_RCC_OscConfig+0x280>
 80055e6:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a05      	ldr	r2, [pc, #20]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80055ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	4b03      	ldr	r3, [pc, #12]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a02      	ldr	r2, [pc, #8]	@ (8005600 <HAL_RCC_OscConfig+0x270>)
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e013      	b.n	8005628 <HAL_RCC_OscConfig+0x298>
 8005600:	40021000 	.word	0x40021000
 8005604:	0800d8ec 	.word	0x0800d8ec
 8005608:	20000000 	.word	0x20000000
 800560c:	20000004 	.word	0x20000004
 8005610:	4ba0      	ldr	r3, [pc, #640]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a9f      	ldr	r2, [pc, #636]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	4b9d      	ldr	r3, [pc, #628]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a9c      	ldr	r2, [pc, #624]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d013      	beq.n	8005658 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005630:	f7fc f9b4 	bl	800199c <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005638:	f7fc f9b0 	bl	800199c <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b64      	cmp	r3, #100	@ 0x64
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e2b4      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800564a:	4b92      	ldr	r3, [pc, #584]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f0      	beq.n	8005638 <HAL_RCC_OscConfig+0x2a8>
 8005656:	e014      	b.n	8005682 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005658:	f7fc f9a0 	bl	800199c <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005660:	f7fc f99c 	bl	800199c <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b64      	cmp	r3, #100	@ 0x64
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e2a0      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005672:	4b88      	ldr	r3, [pc, #544]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1f0      	bne.n	8005660 <HAL_RCC_OscConfig+0x2d0>
 800567e:	e000      	b.n	8005682 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d060      	beq.n	8005750 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b04      	cmp	r3, #4
 8005692:	d005      	beq.n	80056a0 <HAL_RCC_OscConfig+0x310>
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	2b0c      	cmp	r3, #12
 8005698:	d119      	bne.n	80056ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d116      	bne.n	80056ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056a0:	4b7c      	ldr	r3, [pc, #496]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_RCC_OscConfig+0x328>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e27d      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b8:	4b76      	ldr	r3, [pc, #472]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	061b      	lsls	r3, r3, #24
 80056c6:	4973      	ldr	r1, [pc, #460]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056cc:	e040      	b.n	8005750 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d023      	beq.n	800571e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d6:	4b6f      	ldr	r3, [pc, #444]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a6e      	ldr	r2, [pc, #440]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80056dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e2:	f7fc f95b 	bl	800199c <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ea:	f7fc f957 	bl	800199c <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e25b      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056fc:	4b65      	ldr	r3, [pc, #404]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005708:	4b62      	ldr	r3, [pc, #392]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	061b      	lsls	r3, r3, #24
 8005716:	495f      	ldr	r1, [pc, #380]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005718:	4313      	orrs	r3, r2
 800571a:	604b      	str	r3, [r1, #4]
 800571c:	e018      	b.n	8005750 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800571e:	4b5d      	ldr	r3, [pc, #372]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a5c      	ldr	r2, [pc, #368]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572a:	f7fc f937 	bl	800199c <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005732:	f7fc f933 	bl	800199c <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e237      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005744:	4b53      	ldr	r3, [pc, #332]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f0      	bne.n	8005732 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d03c      	beq.n	80057d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01c      	beq.n	800579e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005764:	4b4b      	ldr	r3, [pc, #300]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800576a:	4a4a      	ldr	r2, [pc, #296]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005774:	f7fc f912 	bl	800199c <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800577c:	f7fc f90e 	bl	800199c <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e212      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800578e:	4b41      	ldr	r3, [pc, #260]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005790:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0ef      	beq.n	800577c <HAL_RCC_OscConfig+0x3ec>
 800579c:	e01b      	b.n	80057d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800579e:	4b3d      	ldr	r3, [pc, #244]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80057a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057a4:	4a3b      	ldr	r2, [pc, #236]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ae:	f7fc f8f5 	bl	800199c <HAL_GetTick>
 80057b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057b4:	e008      	b.n	80057c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b6:	f7fc f8f1 	bl	800199c <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e1f5      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057c8:	4b32      	ldr	r3, [pc, #200]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80057ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1ef      	bne.n	80057b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80a6 	beq.w	8005930 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057e4:	2300      	movs	r3, #0
 80057e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057e8:	4b2a      	ldr	r3, [pc, #168]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80057ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10d      	bne.n	8005810 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057f4:	4b27      	ldr	r3, [pc, #156]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80057f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f8:	4a26      	ldr	r2, [pc, #152]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 80057fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005800:	4b24      	ldr	r3, [pc, #144]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800580c:	2301      	movs	r3, #1
 800580e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005810:	4b21      	ldr	r3, [pc, #132]	@ (8005898 <HAL_RCC_OscConfig+0x508>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005818:	2b00      	cmp	r3, #0
 800581a:	d118      	bne.n	800584e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800581c:	4b1e      	ldr	r3, [pc, #120]	@ (8005898 <HAL_RCC_OscConfig+0x508>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1d      	ldr	r2, [pc, #116]	@ (8005898 <HAL_RCC_OscConfig+0x508>)
 8005822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005828:	f7fc f8b8 	bl	800199c <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005830:	f7fc f8b4 	bl	800199c <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e1b8      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005842:	4b15      	ldr	r3, [pc, #84]	@ (8005898 <HAL_RCC_OscConfig+0x508>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f0      	beq.n	8005830 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d108      	bne.n	8005868 <HAL_RCC_OscConfig+0x4d8>
 8005856:	4b0f      	ldr	r3, [pc, #60]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585c:	4a0d      	ldr	r2, [pc, #52]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005866:	e029      	b.n	80058bc <HAL_RCC_OscConfig+0x52c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b05      	cmp	r3, #5
 800586e:	d115      	bne.n	800589c <HAL_RCC_OscConfig+0x50c>
 8005870:	4b08      	ldr	r3, [pc, #32]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005876:	4a07      	ldr	r2, [pc, #28]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005878:	f043 0304 	orr.w	r3, r3, #4
 800587c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005880:	4b04      	ldr	r3, [pc, #16]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005886:	4a03      	ldr	r2, [pc, #12]	@ (8005894 <HAL_RCC_OscConfig+0x504>)
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005890:	e014      	b.n	80058bc <HAL_RCC_OscConfig+0x52c>
 8005892:	bf00      	nop
 8005894:	40021000 	.word	0x40021000
 8005898:	40007000 	.word	0x40007000
 800589c:	4b9d      	ldr	r3, [pc, #628]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a2:	4a9c      	ldr	r2, [pc, #624]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058ac:	4b99      	ldr	r3, [pc, #612]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b2:	4a98      	ldr	r2, [pc, #608]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 80058b4:	f023 0304 	bic.w	r3, r3, #4
 80058b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d016      	beq.n	80058f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c4:	f7fc f86a 	bl	800199c <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ca:	e00a      	b.n	80058e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058cc:	f7fc f866 	bl	800199c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e168      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e2:	4b8c      	ldr	r3, [pc, #560]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ed      	beq.n	80058cc <HAL_RCC_OscConfig+0x53c>
 80058f0:	e015      	b.n	800591e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f2:	f7fc f853 	bl	800199c <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fc f84f 	bl	800199c <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e151      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005910:	4b80      	ldr	r3, [pc, #512]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1ed      	bne.n	80058fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800591e:	7ffb      	ldrb	r3, [r7, #31]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d105      	bne.n	8005930 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005924:	4b7b      	ldr	r3, [pc, #492]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005928:	4a7a      	ldr	r2, [pc, #488]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 800592a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800592e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d03c      	beq.n	80059b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01c      	beq.n	800597e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005944:	4b73      	ldr	r3, [pc, #460]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800594a:	4a72      	ldr	r2, [pc, #456]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 800594c:	f043 0301 	orr.w	r3, r3, #1
 8005950:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005954:	f7fc f822 	bl	800199c <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800595c:	f7fc f81e 	bl	800199c <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e122      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800596e:	4b69      	ldr	r3, [pc, #420]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005970:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0ef      	beq.n	800595c <HAL_RCC_OscConfig+0x5cc>
 800597c:	e01b      	b.n	80059b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800597e:	4b65      	ldr	r3, [pc, #404]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005980:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005984:	4a63      	ldr	r2, [pc, #396]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005986:	f023 0301 	bic.w	r3, r3, #1
 800598a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598e:	f7fc f805 	bl	800199c <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005996:	f7fc f801 	bl	800199c <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e105      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 80059aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1ef      	bne.n	8005996 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80f9 	beq.w	8005bb2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f040 80cf 	bne.w	8005b68 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059ca:	4b52      	ldr	r3, [pc, #328]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f003 0203 	and.w	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	429a      	cmp	r2, r3
 80059dc:	d12c      	bne.n	8005a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e8:	3b01      	subs	r3, #1
 80059ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d123      	bne.n	8005a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d11b      	bne.n	8005a38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d113      	bne.n	8005a38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d109      	bne.n	8005a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	3b01      	subs	r3, #1
 8005a32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d071      	beq.n	8005b1c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b0c      	cmp	r3, #12
 8005a3c:	d068      	beq.n	8005b10 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a3e:	4b35      	ldr	r3, [pc, #212]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d105      	bne.n	8005a56 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a4a:	4b32      	ldr	r3, [pc, #200]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e0ac      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005a60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a66:	f7fb ff99 	bl	800199c <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6e:	f7fb ff95 	bl	800199c <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e099      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a80:	4b24      	ldr	r3, [pc, #144]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f0      	bne.n	8005a6e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a8c:	4b21      	ldr	r3, [pc, #132]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	4b21      	ldr	r3, [pc, #132]	@ (8005b18 <HAL_RCC_OscConfig+0x788>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a9c:	3a01      	subs	r2, #1
 8005a9e:	0112      	lsls	r2, r2, #4
 8005aa0:	4311      	orrs	r1, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005aa6:	0212      	lsls	r2, r2, #8
 8005aa8:	4311      	orrs	r1, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005aae:	0852      	lsrs	r2, r2, #1
 8005ab0:	3a01      	subs	r2, #1
 8005ab2:	0552      	lsls	r2, r2, #21
 8005ab4:	4311      	orrs	r1, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005aba:	0852      	lsrs	r2, r2, #1
 8005abc:	3a01      	subs	r2, #1
 8005abe:	0652      	lsls	r2, r2, #25
 8005ac0:	4311      	orrs	r1, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ac6:	06d2      	lsls	r2, r2, #27
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	4912      	ldr	r1, [pc, #72]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ad0:	4b10      	ldr	r3, [pc, #64]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ada:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005adc:	4b0d      	ldr	r3, [pc, #52]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ae6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ae8:	f7fb ff58 	bl	800199c <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af0:	f7fb ff54 	bl	800199c <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e058      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b02:	4b04      	ldr	r3, [pc, #16]	@ (8005b14 <HAL_RCC_OscConfig+0x784>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0f0      	beq.n	8005af0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b0e:	e050      	b.n	8005bb2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e04f      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
 8005b14:	40021000 	.word	0x40021000
 8005b18:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b1c:	4b27      	ldr	r3, [pc, #156]	@ (8005bbc <HAL_RCC_OscConfig+0x82c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d144      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b28:	4b24      	ldr	r3, [pc, #144]	@ (8005bbc <HAL_RCC_OscConfig+0x82c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a23      	ldr	r2, [pc, #140]	@ (8005bbc <HAL_RCC_OscConfig+0x82c>)
 8005b2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b34:	4b21      	ldr	r3, [pc, #132]	@ (8005bbc <HAL_RCC_OscConfig+0x82c>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	4a20      	ldr	r2, [pc, #128]	@ (8005bbc <HAL_RCC_OscConfig+0x82c>)
 8005b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b40:	f7fb ff2c 	bl	800199c <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b48:	f7fb ff28 	bl	800199c <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e02c      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b5a:	4b18      	ldr	r3, [pc, #96]	@ (8005bbc <HAL_RCC_OscConfig+0x82c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0f0      	beq.n	8005b48 <HAL_RCC_OscConfig+0x7b8>
 8005b66:	e024      	b.n	8005bb2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	2b0c      	cmp	r3, #12
 8005b6c:	d01f      	beq.n	8005bae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b6e:	4b13      	ldr	r3, [pc, #76]	@ (8005bbc <HAL_RCC_OscConfig+0x82c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a12      	ldr	r2, [pc, #72]	@ (8005bbc <HAL_RCC_OscConfig+0x82c>)
 8005b74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7a:	f7fb ff0f 	bl	800199c <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b82:	f7fb ff0b 	bl	800199c <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e00f      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b94:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <HAL_RCC_OscConfig+0x82c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1f0      	bne.n	8005b82 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005ba0:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <HAL_RCC_OscConfig+0x82c>)
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	4905      	ldr	r1, [pc, #20]	@ (8005bbc <HAL_RCC_OscConfig+0x82c>)
 8005ba6:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <HAL_RCC_OscConfig+0x830>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	60cb      	str	r3, [r1, #12]
 8005bac:	e001      	b.n	8005bb2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	feeefffc 	.word	0xfeeefffc

08005bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e11d      	b.n	8005e18 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bdc:	4b90      	ldr	r3, [pc, #576]	@ (8005e20 <HAL_RCC_ClockConfig+0x25c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d910      	bls.n	8005c0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bea:	4b8d      	ldr	r3, [pc, #564]	@ (8005e20 <HAL_RCC_ClockConfig+0x25c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 020f 	bic.w	r2, r3, #15
 8005bf2:	498b      	ldr	r1, [pc, #556]	@ (8005e20 <HAL_RCC_ClockConfig+0x25c>)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfa:	4b89      	ldr	r3, [pc, #548]	@ (8005e20 <HAL_RCC_ClockConfig+0x25c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d001      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e105      	b.n	8005e18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d010      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	4b81      	ldr	r3, [pc, #516]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d908      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c28:	4b7e      	ldr	r3, [pc, #504]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	497b      	ldr	r1, [pc, #492]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d079      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d11e      	bne.n	8005c8c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c4e:	4b75      	ldr	r3, [pc, #468]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e0dc      	b.n	8005e18 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005c5e:	f000 fa09 	bl	8006074 <RCC_GetSysClockFreqFromPLLSource>
 8005c62:	4603      	mov	r3, r0
 8005c64:	4a70      	ldr	r2, [pc, #448]	@ (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d946      	bls.n	8005cf8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c6a:	4b6e      	ldr	r3, [pc, #440]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d140      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c76:	4b6b      	ldr	r3, [pc, #428]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c7e:	4a69      	ldr	r2, [pc, #420]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c86:	2380      	movs	r3, #128	@ 0x80
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	e035      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d107      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c94:	4b63      	ldr	r3, [pc, #396]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d115      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0b9      	b.n	8005e18 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d107      	bne.n	8005cbc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cac:	4b5d      	ldr	r3, [pc, #372]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0ad      	b.n	8005e18 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cbc:	4b59      	ldr	r3, [pc, #356]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0a5      	b.n	8005e18 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005ccc:	f000 f8b4 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	4a55      	ldr	r2, [pc, #340]	@ (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d90f      	bls.n	8005cf8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005cd8:	4b52      	ldr	r3, [pc, #328]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d109      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cec:	4a4d      	ldr	r2, [pc, #308]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cf2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cf8:	4b4a      	ldr	r3, [pc, #296]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f023 0203 	bic.w	r2, r3, #3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4947      	ldr	r1, [pc, #284]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d0a:	f7fb fe47 	bl	800199c <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d10:	e00a      	b.n	8005d28 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d12:	f7fb fe43 	bl	800199c <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e077      	b.n	8005e18 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d28:	4b3e      	ldr	r3, [pc, #248]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 020c 	and.w	r2, r3, #12
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d1eb      	bne.n	8005d12 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b80      	cmp	r3, #128	@ 0x80
 8005d3e:	d105      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d40:	4b38      	ldr	r3, [pc, #224]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4a37      	ldr	r2, [pc, #220]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d4a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d010      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	4b31      	ldr	r3, [pc, #196]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d208      	bcs.n	8005d7a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d68:	4b2e      	ldr	r3, [pc, #184]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	492b      	ldr	r1, [pc, #172]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d7a:	4b29      	ldr	r3, [pc, #164]	@ (8005e20 <HAL_RCC_ClockConfig+0x25c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d210      	bcs.n	8005daa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d88:	4b25      	ldr	r3, [pc, #148]	@ (8005e20 <HAL_RCC_ClockConfig+0x25c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f023 020f 	bic.w	r2, r3, #15
 8005d90:	4923      	ldr	r1, [pc, #140]	@ (8005e20 <HAL_RCC_ClockConfig+0x25c>)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d98:	4b21      	ldr	r3, [pc, #132]	@ (8005e20 <HAL_RCC_ClockConfig+0x25c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d001      	beq.n	8005daa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e036      	b.n	8005e18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	4918      	ldr	r1, [pc, #96]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d009      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dd4:	4b13      	ldr	r3, [pc, #76]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	4910      	ldr	r1, [pc, #64]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005de8:	f000 f826 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8005dec:	4602      	mov	r2, r0
 8005dee:	4b0d      	ldr	r3, [pc, #52]	@ (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	091b      	lsrs	r3, r3, #4
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	490c      	ldr	r1, [pc, #48]	@ (8005e2c <HAL_RCC_ClockConfig+0x268>)
 8005dfa:	5ccb      	ldrb	r3, [r1, r3]
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
 8005e04:	4a0a      	ldr	r2, [pc, #40]	@ (8005e30 <HAL_RCC_ClockConfig+0x26c>)
 8005e06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e08:	4b0a      	ldr	r3, [pc, #40]	@ (8005e34 <HAL_RCC_ClockConfig+0x270>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fb fd75 	bl	80018fc <HAL_InitTick>
 8005e12:	4603      	mov	r3, r0
 8005e14:	73fb      	strb	r3, [r7, #15]

  return status;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40022000 	.word	0x40022000
 8005e24:	40021000 	.word	0x40021000
 8005e28:	04c4b400 	.word	0x04c4b400
 8005e2c:	0800d8ec 	.word	0x0800d8ec
 8005e30:	20000000 	.word	0x20000000
 8005e34:	20000004 	.word	0x20000004

08005e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b089      	sub	sp, #36	@ 0x24
 8005e3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e46:	4b3e      	ldr	r3, [pc, #248]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e50:	4b3b      	ldr	r3, [pc, #236]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x34>
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	2b0c      	cmp	r3, #12
 8005e64:	d121      	bne.n	8005eaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d11e      	bne.n	8005eaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e6c:	4b34      	ldr	r3, [pc, #208]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d107      	bne.n	8005e88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e78:	4b31      	ldr	r3, [pc, #196]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e7e:	0a1b      	lsrs	r3, r3, #8
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	e005      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e88:	4b2d      	ldr	r3, [pc, #180]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e94:	4a2b      	ldr	r2, [pc, #172]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10d      	bne.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ea8:	e00a      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d102      	bne.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005eb0:	4b25      	ldr	r3, [pc, #148]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8005eb2:	61bb      	str	r3, [r7, #24]
 8005eb4:	e004      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d101      	bne.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ebc:	4b23      	ldr	r3, [pc, #140]	@ (8005f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8005ebe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2b0c      	cmp	r3, #12
 8005ec4:	d134      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d003      	beq.n	8005ede <HAL_RCC_GetSysClockFreq+0xa6>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d003      	beq.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xac>
 8005edc:	e005      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ede:	4b1a      	ldr	r3, [pc, #104]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ee0:	617b      	str	r3, [r7, #20]
      break;
 8005ee2:	e005      	b.n	8005ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ee4:	4b19      	ldr	r3, [pc, #100]	@ (8005f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8005ee6:	617b      	str	r3, [r7, #20]
      break;
 8005ee8:	e002      	b.n	8005ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	617b      	str	r3, [r7, #20]
      break;
 8005eee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ef0:	4b13      	ldr	r3, [pc, #76]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	3301      	adds	r3, #1
 8005efc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005efe:	4b10      	ldr	r3, [pc, #64]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	fb03 f202 	mul.w	r2, r3, r2
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f16:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	0e5b      	lsrs	r3, r3, #25
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	3301      	adds	r3, #1
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f30:	69bb      	ldr	r3, [r7, #24]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3724      	adds	r7, #36	@ 0x24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40021000 	.word	0x40021000
 8005f44:	0800d904 	.word	0x0800d904
 8005f48:	00f42400 	.word	0x00f42400
 8005f4c:	007a1200 	.word	0x007a1200

08005f50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f54:	4b03      	ldr	r3, [pc, #12]	@ (8005f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f56:	681b      	ldr	r3, [r3, #0]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20000000 	.word	0x20000000

08005f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f6c:	f7ff fff0 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 8005f70:	4602      	mov	r2, r0
 8005f72:	4b06      	ldr	r3, [pc, #24]	@ (8005f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	0a1b      	lsrs	r3, r3, #8
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	4904      	ldr	r1, [pc, #16]	@ (8005f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f7e:	5ccb      	ldrb	r3, [r1, r3]
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	0800d8fc 	.word	0x0800d8fc

08005f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f98:	f7ff ffda 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	4b06      	ldr	r3, [pc, #24]	@ (8005fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	0adb      	lsrs	r3, r3, #11
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	4904      	ldr	r1, [pc, #16]	@ (8005fbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005faa:	5ccb      	ldrb	r3, [r1, r3]
 8005fac:	f003 031f 	and.w	r3, r3, #31
 8005fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	0800d8fc 	.word	0x0800d8fc

08005fc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005fcc:	4b27      	ldr	r3, [pc, #156]	@ (800606c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005fd8:	f7ff f8f6 	bl	80051c8 <HAL_PWREx_GetVoltageRange>
 8005fdc:	6178      	str	r0, [r7, #20]
 8005fde:	e014      	b.n	800600a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fe0:	4b22      	ldr	r3, [pc, #136]	@ (800606c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe4:	4a21      	ldr	r2, [pc, #132]	@ (800606c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fec:	4b1f      	ldr	r3, [pc, #124]	@ (800606c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ff8:	f7ff f8e6 	bl	80051c8 <HAL_PWREx_GetVoltageRange>
 8005ffc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800606c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006002:	4a1a      	ldr	r2, [pc, #104]	@ (800606c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006008:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006010:	d10b      	bne.n	800602a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b80      	cmp	r3, #128	@ 0x80
 8006016:	d913      	bls.n	8006040 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2ba0      	cmp	r3, #160	@ 0xa0
 800601c:	d902      	bls.n	8006024 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800601e:	2302      	movs	r3, #2
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	e00d      	b.n	8006040 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006024:	2301      	movs	r3, #1
 8006026:	613b      	str	r3, [r7, #16]
 8006028:	e00a      	b.n	8006040 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b7f      	cmp	r3, #127	@ 0x7f
 800602e:	d902      	bls.n	8006036 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006030:	2302      	movs	r3, #2
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	e004      	b.n	8006040 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b70      	cmp	r3, #112	@ 0x70
 800603a:	d101      	bne.n	8006040 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800603c:	2301      	movs	r3, #1
 800603e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006040:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 020f 	bic.w	r2, r3, #15
 8006048:	4909      	ldr	r1, [pc, #36]	@ (8006070 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006050:	4b07      	ldr	r3, [pc, #28]	@ (8006070 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 030f 	and.w	r3, r3, #15
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	429a      	cmp	r2, r3
 800605c:	d001      	beq.n	8006062 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40021000 	.word	0x40021000
 8006070:	40022000 	.word	0x40022000

08006074 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800607a:	4b2d      	ldr	r3, [pc, #180]	@ (8006130 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b03      	cmp	r3, #3
 8006088:	d00b      	beq.n	80060a2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d825      	bhi.n	80060dc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d008      	beq.n	80060a8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d11f      	bne.n	80060dc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800609c:	4b25      	ldr	r3, [pc, #148]	@ (8006134 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800609e:	613b      	str	r3, [r7, #16]
    break;
 80060a0:	e01f      	b.n	80060e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80060a2:	4b25      	ldr	r3, [pc, #148]	@ (8006138 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80060a4:	613b      	str	r3, [r7, #16]
    break;
 80060a6:	e01c      	b.n	80060e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060a8:	4b21      	ldr	r3, [pc, #132]	@ (8006130 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d107      	bne.n	80060c4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80060b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006130 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ba:	0a1b      	lsrs	r3, r3, #8
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	e005      	b.n	80060d0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80060c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006130 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80060d0:	4a1a      	ldr	r2, [pc, #104]	@ (800613c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d8:	613b      	str	r3, [r7, #16]
    break;
 80060da:	e002      	b.n	80060e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
    break;
 80060e0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060e2:	4b13      	ldr	r3, [pc, #76]	@ (8006130 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	091b      	lsrs	r3, r3, #4
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	3301      	adds	r3, #1
 80060ee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80060f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006130 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	fb03 f202 	mul.w	r2, r3, r2
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	fbb2 f3f3 	udiv	r3, r2, r3
 8006106:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006108:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	0e5b      	lsrs	r3, r3, #25
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	3301      	adds	r3, #1
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006120:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006122:	683b      	ldr	r3, [r7, #0]
}
 8006124:	4618      	mov	r0, r3
 8006126:	371c      	adds	r7, #28
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	40021000 	.word	0x40021000
 8006134:	00f42400 	.word	0x00f42400
 8006138:	007a1200 	.word	0x007a1200
 800613c:	0800d904 	.word	0x0800d904

08006140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006148:	2300      	movs	r3, #0
 800614a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800614c:	2300      	movs	r3, #0
 800614e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006158:	2b00      	cmp	r3, #0
 800615a:	d040      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006160:	2b80      	cmp	r3, #128	@ 0x80
 8006162:	d02a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006164:	2b80      	cmp	r3, #128	@ 0x80
 8006166:	d825      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006168:	2b60      	cmp	r3, #96	@ 0x60
 800616a:	d026      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800616c:	2b60      	cmp	r3, #96	@ 0x60
 800616e:	d821      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006170:	2b40      	cmp	r3, #64	@ 0x40
 8006172:	d006      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006174:	2b40      	cmp	r3, #64	@ 0x40
 8006176:	d81d      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d009      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800617c:	2b20      	cmp	r3, #32
 800617e:	d010      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006180:	e018      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006182:	4b89      	ldr	r3, [pc, #548]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	4a88      	ldr	r2, [pc, #544]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800618c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800618e:	e015      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3304      	adds	r3, #4
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fb02 	bl	80067a0 <RCCEx_PLLSAI1_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061a0:	e00c      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3320      	adds	r3, #32
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fbed 	bl	8006988 <RCCEx_PLLSAI2_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061b2:	e003      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	74fb      	strb	r3, [r7, #19]
      break;
 80061b8:	e000      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80061ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061bc:	7cfb      	ldrb	r3, [r7, #19]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061c2:	4b79      	ldr	r3, [pc, #484]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061c8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061d0:	4975      	ldr	r1, [pc, #468]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80061d8:	e001      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061da:	7cfb      	ldrb	r3, [r7, #19]
 80061dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d047      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f2:	d030      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80061f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f8:	d82a      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80061fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061fe:	d02a      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006204:	d824      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800620a:	d008      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800620c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006210:	d81e      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800621a:	d010      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800621c:	e018      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800621e:	4b62      	ldr	r3, [pc, #392]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	4a61      	ldr	r2, [pc, #388]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006228:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800622a:	e015      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3304      	adds	r3, #4
 8006230:	2100      	movs	r1, #0
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fab4 	bl	80067a0 <RCCEx_PLLSAI1_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800623c:	e00c      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3320      	adds	r3, #32
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fb9f 	bl	8006988 <RCCEx_PLLSAI2_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800624e:	e003      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	74fb      	strb	r3, [r7, #19]
      break;
 8006254:	e000      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006258:	7cfb      	ldrb	r3, [r7, #19]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10b      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800625e:	4b52      	ldr	r3, [pc, #328]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006260:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006264:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626c:	494e      	ldr	r1, [pc, #312]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006274:	e001      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006276:	7cfb      	ldrb	r3, [r7, #19]
 8006278:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 809f 	beq.w	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006288:	2300      	movs	r3, #0
 800628a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800628c:	4b46      	ldr	r3, [pc, #280]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800628e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800629c:	2300      	movs	r3, #0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00d      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a2:	4b41      	ldr	r3, [pc, #260]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a6:	4a40      	ldr	r2, [pc, #256]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80062ae:	4b3e      	ldr	r3, [pc, #248]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ba:	2301      	movs	r3, #1
 80062bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062be:	4b3b      	ldr	r3, [pc, #236]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a3a      	ldr	r2, [pc, #232]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062ca:	f7fb fb67 	bl	800199c <HAL_GetTick>
 80062ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062d0:	e009      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d2:	f7fb fb63 	bl	800199c <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d902      	bls.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	74fb      	strb	r3, [r7, #19]
        break;
 80062e4:	e005      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062e6:	4b31      	ldr	r3, [pc, #196]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0ef      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80062f2:	7cfb      	ldrb	r3, [r7, #19]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d15b      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062f8:	4b2b      	ldr	r3, [pc, #172]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006302:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01f      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	429a      	cmp	r2, r3
 8006314:	d019      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006316:	4b24      	ldr	r3, [pc, #144]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800631c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006320:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006322:	4b21      	ldr	r3, [pc, #132]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006328:	4a1f      	ldr	r2, [pc, #124]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800632a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800632e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006332:	4b1d      	ldr	r3, [pc, #116]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006338:	4a1b      	ldr	r2, [pc, #108]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800633a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800633e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006342:	4a19      	ldr	r2, [pc, #100]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d016      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fb fb22 	bl	800199c <HAL_GetTick>
 8006358:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800635a:	e00b      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800635c:	f7fb fb1e 	bl	800199c <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800636a:	4293      	cmp	r3, r2
 800636c:	d902      	bls.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	74fb      	strb	r3, [r7, #19]
            break;
 8006372:	e006      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006374:	4b0c      	ldr	r3, [pc, #48]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0ec      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006382:	7cfb      	ldrb	r3, [r7, #19]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10c      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006388:	4b07      	ldr	r3, [pc, #28]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006398:	4903      	ldr	r1, [pc, #12]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80063a0:	e008      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063a2:	7cfb      	ldrb	r3, [r7, #19]
 80063a4:	74bb      	strb	r3, [r7, #18]
 80063a6:	e005      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80063a8:	40021000 	.word	0x40021000
 80063ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	7cfb      	ldrb	r3, [r7, #19]
 80063b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063b4:	7c7b      	ldrb	r3, [r7, #17]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d105      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ba:	4ba0      	ldr	r3, [pc, #640]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063be:	4a9f      	ldr	r2, [pc, #636]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063d2:	4b9a      	ldr	r3, [pc, #616]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d8:	f023 0203 	bic.w	r2, r3, #3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e0:	4996      	ldr	r1, [pc, #600]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063f4:	4b91      	ldr	r3, [pc, #580]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fa:	f023 020c 	bic.w	r2, r3, #12
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006402:	498e      	ldr	r1, [pc, #568]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006416:	4b89      	ldr	r3, [pc, #548]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006424:	4985      	ldr	r1, [pc, #532]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006438:	4b80      	ldr	r3, [pc, #512]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006446:	497d      	ldr	r1, [pc, #500]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800645a:	4b78      	ldr	r3, [pc, #480]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006460:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006468:	4974      	ldr	r1, [pc, #464]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800647c:	4b6f      	ldr	r3, [pc, #444]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006482:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648a:	496c      	ldr	r1, [pc, #432]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800649e:	4b67      	ldr	r3, [pc, #412]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064ac:	4963      	ldr	r1, [pc, #396]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064c0:	4b5e      	ldr	r3, [pc, #376]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064ce:	495b      	ldr	r1, [pc, #364]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064e2:	4b56      	ldr	r3, [pc, #344]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f0:	4952      	ldr	r1, [pc, #328]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006504:	4b4d      	ldr	r3, [pc, #308]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006512:	494a      	ldr	r1, [pc, #296]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006526:	4b45      	ldr	r3, [pc, #276]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006534:	4941      	ldr	r1, [pc, #260]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006548:	4b3c      	ldr	r3, [pc, #240]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800654a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800654e:	f023 0203 	bic.w	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006556:	4939      	ldr	r1, [pc, #228]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d028      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800656a:	4b34      	ldr	r3, [pc, #208]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006570:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006578:	4930      	ldr	r1, [pc, #192]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006588:	d106      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800658a:	4b2c      	ldr	r3, [pc, #176]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	4a2b      	ldr	r2, [pc, #172]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006594:	60d3      	str	r3, [r2, #12]
 8006596:	e011      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800659c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065a0:	d10c      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3304      	adds	r3, #4
 80065a6:	2101      	movs	r1, #1
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f8f9 	bl	80067a0 <RCCEx_PLLSAI1_Config>
 80065ae:	4603      	mov	r3, r0
 80065b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065b2:	7cfb      	ldrb	r3, [r7, #19]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80065b8:	7cfb      	ldrb	r3, [r7, #19]
 80065ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d04d      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065d0:	d108      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80065d2:	4b1a      	ldr	r3, [pc, #104]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065d8:	4a18      	ldr	r2, [pc, #96]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065de:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80065e2:	e012      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80065e4:	4b15      	ldr	r3, [pc, #84]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065ea:	4a14      	ldr	r2, [pc, #80]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065f0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80065f4:	4b11      	ldr	r3, [pc, #68]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006602:	490e      	ldr	r1, [pc, #56]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006604:	4313      	orrs	r3, r2
 8006606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800660e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006612:	d106      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006614:	4b09      	ldr	r3, [pc, #36]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	4a08      	ldr	r2, [pc, #32]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800661a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800661e:	60d3      	str	r3, [r2, #12]
 8006620:	e020      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800662a:	d109      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800662c:	4b03      	ldr	r3, [pc, #12]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4a02      	ldr	r2, [pc, #8]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006636:	60d3      	str	r3, [r2, #12]
 8006638:	e014      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800663a:	bf00      	nop
 800663c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006644:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006648:	d10c      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3304      	adds	r3, #4
 800664e:	2101      	movs	r1, #1
 8006650:	4618      	mov	r0, r3
 8006652:	f000 f8a5 	bl	80067a0 <RCCEx_PLLSAI1_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800665a:	7cfb      	ldrb	r3, [r7, #19]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006660:	7cfb      	ldrb	r3, [r7, #19]
 8006662:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d028      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006670:	4b4a      	ldr	r3, [pc, #296]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006676:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800667e:	4947      	ldr	r1, [pc, #284]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800668a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800668e:	d106      	bne.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006690:	4b42      	ldr	r3, [pc, #264]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	4a41      	ldr	r2, [pc, #260]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800669a:	60d3      	str	r3, [r2, #12]
 800669c:	e011      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066a6:	d10c      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3304      	adds	r3, #4
 80066ac:	2101      	movs	r1, #1
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f876 	bl	80067a0 <RCCEx_PLLSAI1_Config>
 80066b4:	4603      	mov	r3, r0
 80066b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066b8:	7cfb      	ldrb	r3, [r7, #19]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80066be:	7cfb      	ldrb	r3, [r7, #19]
 80066c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01e      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066ce:	4b33      	ldr	r3, [pc, #204]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066de:	492f      	ldr	r1, [pc, #188]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066f0:	d10c      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3304      	adds	r3, #4
 80066f6:	2102      	movs	r1, #2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 f851 	bl	80067a0 <RCCEx_PLLSAI1_Config>
 80066fe:	4603      	mov	r3, r0
 8006700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006702:	7cfb      	ldrb	r3, [r7, #19]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006708:	7cfb      	ldrb	r3, [r7, #19]
 800670a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006718:	4b20      	ldr	r3, [pc, #128]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800671a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800671e:	f023 0204 	bic.w	r2, r3, #4
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006728:	491c      	ldr	r1, [pc, #112]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800673c:	4b17      	ldr	r3, [pc, #92]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800673e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006742:	f023 0218 	bic.w	r2, r3, #24
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674c:	4913      	ldr	r1, [pc, #76]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800674e:	4313      	orrs	r3, r2
 8006750:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d017      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006760:	4b0e      	ldr	r3, [pc, #56]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006762:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006766:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006770:	490a      	ldr	r1, [pc, #40]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800677e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006782:	d105      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006784:	4b05      	ldr	r3, [pc, #20]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	4a04      	ldr	r2, [pc, #16]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800678a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800678e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006790:	7cbb      	ldrb	r3, [r7, #18]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40021000 	.word	0x40021000

080067a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067ae:	4b72      	ldr	r3, [pc, #456]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00e      	beq.n	80067d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067ba:	4b6f      	ldr	r3, [pc, #444]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f003 0203 	and.w	r2, r3, #3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d103      	bne.n	80067d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
       ||
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d142      	bne.n	8006858 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	73fb      	strb	r3, [r7, #15]
 80067d6:	e03f      	b.n	8006858 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d018      	beq.n	8006812 <RCCEx_PLLSAI1_Config+0x72>
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d825      	bhi.n	8006830 <RCCEx_PLLSAI1_Config+0x90>
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d002      	beq.n	80067ee <RCCEx_PLLSAI1_Config+0x4e>
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d009      	beq.n	8006800 <RCCEx_PLLSAI1_Config+0x60>
 80067ec:	e020      	b.n	8006830 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067ee:	4b62      	ldr	r3, [pc, #392]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d11d      	bne.n	8006836 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067fe:	e01a      	b.n	8006836 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006800:	4b5d      	ldr	r3, [pc, #372]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006808:	2b00      	cmp	r3, #0
 800680a:	d116      	bne.n	800683a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006810:	e013      	b.n	800683a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006812:	4b59      	ldr	r3, [pc, #356]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10f      	bne.n	800683e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800681e:	4b56      	ldr	r3, [pc, #344]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d109      	bne.n	800683e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800682e:	e006      	b.n	800683e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
      break;
 8006834:	e004      	b.n	8006840 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006836:	bf00      	nop
 8006838:	e002      	b.n	8006840 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800683e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d108      	bne.n	8006858 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006846:	4b4c      	ldr	r3, [pc, #304]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f023 0203 	bic.w	r2, r3, #3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4949      	ldr	r1, [pc, #292]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006854:	4313      	orrs	r3, r2
 8006856:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f040 8086 	bne.w	800696c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006860:	4b45      	ldr	r3, [pc, #276]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a44      	ldr	r2, [pc, #272]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006866:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800686a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800686c:	f7fb f896 	bl	800199c <HAL_GetTick>
 8006870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006872:	e009      	b.n	8006888 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006874:	f7fb f892 	bl	800199c <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d902      	bls.n	8006888 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	73fb      	strb	r3, [r7, #15]
        break;
 8006886:	e005      	b.n	8006894 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006888:	4b3b      	ldr	r3, [pc, #236]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1ef      	bne.n	8006874 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d168      	bne.n	800696c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d113      	bne.n	80068c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068a0:	4b35      	ldr	r3, [pc, #212]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	4b35      	ldr	r3, [pc, #212]	@ (800697c <RCCEx_PLLSAI1_Config+0x1dc>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6892      	ldr	r2, [r2, #8]
 80068ac:	0211      	lsls	r1, r2, #8
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	68d2      	ldr	r2, [r2, #12]
 80068b2:	06d2      	lsls	r2, r2, #27
 80068b4:	4311      	orrs	r1, r2
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6852      	ldr	r2, [r2, #4]
 80068ba:	3a01      	subs	r2, #1
 80068bc:	0112      	lsls	r2, r2, #4
 80068be:	430a      	orrs	r2, r1
 80068c0:	492d      	ldr	r1, [pc, #180]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	610b      	str	r3, [r1, #16]
 80068c6:	e02d      	b.n	8006924 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d115      	bne.n	80068fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068d0:	691a      	ldr	r2, [r3, #16]
 80068d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006980 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6892      	ldr	r2, [r2, #8]
 80068da:	0211      	lsls	r1, r2, #8
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6912      	ldr	r2, [r2, #16]
 80068e0:	0852      	lsrs	r2, r2, #1
 80068e2:	3a01      	subs	r2, #1
 80068e4:	0552      	lsls	r2, r2, #21
 80068e6:	4311      	orrs	r1, r2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6852      	ldr	r2, [r2, #4]
 80068ec:	3a01      	subs	r2, #1
 80068ee:	0112      	lsls	r2, r2, #4
 80068f0:	430a      	orrs	r2, r1
 80068f2:	4921      	ldr	r1, [pc, #132]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	610b      	str	r3, [r1, #16]
 80068f8:	e014      	b.n	8006924 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	4b21      	ldr	r3, [pc, #132]	@ (8006984 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006900:	4013      	ands	r3, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6892      	ldr	r2, [r2, #8]
 8006906:	0211      	lsls	r1, r2, #8
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6952      	ldr	r2, [r2, #20]
 800690c:	0852      	lsrs	r2, r2, #1
 800690e:	3a01      	subs	r2, #1
 8006910:	0652      	lsls	r2, r2, #25
 8006912:	4311      	orrs	r1, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6852      	ldr	r2, [r2, #4]
 8006918:	3a01      	subs	r2, #1
 800691a:	0112      	lsls	r2, r2, #4
 800691c:	430a      	orrs	r2, r1
 800691e:	4916      	ldr	r1, [pc, #88]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006920:	4313      	orrs	r3, r2
 8006922:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006924:	4b14      	ldr	r3, [pc, #80]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a13      	ldr	r2, [pc, #76]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 800692a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800692e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006930:	f7fb f834 	bl	800199c <HAL_GetTick>
 8006934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006936:	e009      	b.n	800694c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006938:	f7fb f830 	bl	800199c <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d902      	bls.n	800694c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	73fb      	strb	r3, [r7, #15]
          break;
 800694a:	e005      	b.n	8006958 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800694c:	4b0a      	ldr	r3, [pc, #40]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0ef      	beq.n	8006938 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800695e:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	4904      	ldr	r1, [pc, #16]	@ (8006978 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006968:	4313      	orrs	r3, r2
 800696a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	40021000 	.word	0x40021000
 800697c:	07ff800f 	.word	0x07ff800f
 8006980:	ff9f800f 	.word	0xff9f800f
 8006984:	f9ff800f 	.word	0xf9ff800f

08006988 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006996:	4b72      	ldr	r3, [pc, #456]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00e      	beq.n	80069c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069a2:	4b6f      	ldr	r3, [pc, #444]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f003 0203 	and.w	r2, r3, #3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d103      	bne.n	80069ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
       ||
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d142      	bne.n	8006a40 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	73fb      	strb	r3, [r7, #15]
 80069be:	e03f      	b.n	8006a40 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d018      	beq.n	80069fa <RCCEx_PLLSAI2_Config+0x72>
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d825      	bhi.n	8006a18 <RCCEx_PLLSAI2_Config+0x90>
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d002      	beq.n	80069d6 <RCCEx_PLLSAI2_Config+0x4e>
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d009      	beq.n	80069e8 <RCCEx_PLLSAI2_Config+0x60>
 80069d4:	e020      	b.n	8006a18 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069d6:	4b62      	ldr	r3, [pc, #392]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d11d      	bne.n	8006a1e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069e6:	e01a      	b.n	8006a1e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069e8:	4b5d      	ldr	r3, [pc, #372]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d116      	bne.n	8006a22 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069f8:	e013      	b.n	8006a22 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069fa:	4b59      	ldr	r3, [pc, #356]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10f      	bne.n	8006a26 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a06:	4b56      	ldr	r3, [pc, #344]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d109      	bne.n	8006a26 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a16:	e006      	b.n	8006a26 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a1c:	e004      	b.n	8006a28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a1e:	bf00      	nop
 8006a20:	e002      	b.n	8006a28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a22:	bf00      	nop
 8006a24:	e000      	b.n	8006a28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a26:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d108      	bne.n	8006a40 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f023 0203 	bic.w	r2, r3, #3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4949      	ldr	r1, [pc, #292]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f040 8086 	bne.w	8006b54 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a48:	4b45      	ldr	r3, [pc, #276]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a44      	ldr	r2, [pc, #272]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a54:	f7fa ffa2 	bl	800199c <HAL_GetTick>
 8006a58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a5a:	e009      	b.n	8006a70 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a5c:	f7fa ff9e 	bl	800199c <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d902      	bls.n	8006a70 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8006a6e:	e005      	b.n	8006a7c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a70:	4b3b      	ldr	r3, [pc, #236]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1ef      	bne.n	8006a5c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d168      	bne.n	8006b54 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d113      	bne.n	8006ab0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a88:	4b35      	ldr	r3, [pc, #212]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a8a:	695a      	ldr	r2, [r3, #20]
 8006a8c:	4b35      	ldr	r3, [pc, #212]	@ (8006b64 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6892      	ldr	r2, [r2, #8]
 8006a94:	0211      	lsls	r1, r2, #8
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68d2      	ldr	r2, [r2, #12]
 8006a9a:	06d2      	lsls	r2, r2, #27
 8006a9c:	4311      	orrs	r1, r2
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6852      	ldr	r2, [r2, #4]
 8006aa2:	3a01      	subs	r2, #1
 8006aa4:	0112      	lsls	r2, r2, #4
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	492d      	ldr	r1, [pc, #180]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	614b      	str	r3, [r1, #20]
 8006aae:	e02d      	b.n	8006b0c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d115      	bne.n	8006ae2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ab8:	695a      	ldr	r2, [r3, #20]
 8006aba:	4b2b      	ldr	r3, [pc, #172]	@ (8006b68 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6892      	ldr	r2, [r2, #8]
 8006ac2:	0211      	lsls	r1, r2, #8
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6912      	ldr	r2, [r2, #16]
 8006ac8:	0852      	lsrs	r2, r2, #1
 8006aca:	3a01      	subs	r2, #1
 8006acc:	0552      	lsls	r2, r2, #21
 8006ace:	4311      	orrs	r1, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6852      	ldr	r2, [r2, #4]
 8006ad4:	3a01      	subs	r2, #1
 8006ad6:	0112      	lsls	r2, r2, #4
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	4921      	ldr	r1, [pc, #132]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	614b      	str	r3, [r1, #20]
 8006ae0:	e014      	b.n	8006b0c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae4:	695a      	ldr	r2, [r3, #20]
 8006ae6:	4b21      	ldr	r3, [pc, #132]	@ (8006b6c <RCCEx_PLLSAI2_Config+0x1e4>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6892      	ldr	r2, [r2, #8]
 8006aee:	0211      	lsls	r1, r2, #8
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6952      	ldr	r2, [r2, #20]
 8006af4:	0852      	lsrs	r2, r2, #1
 8006af6:	3a01      	subs	r2, #1
 8006af8:	0652      	lsls	r2, r2, #25
 8006afa:	4311      	orrs	r1, r2
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6852      	ldr	r2, [r2, #4]
 8006b00:	3a01      	subs	r2, #1
 8006b02:	0112      	lsls	r2, r2, #4
 8006b04:	430a      	orrs	r2, r1
 8006b06:	4916      	ldr	r1, [pc, #88]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b0c:	4b14      	ldr	r3, [pc, #80]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a13      	ldr	r2, [pc, #76]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b18:	f7fa ff40 	bl	800199c <HAL_GetTick>
 8006b1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b1e:	e009      	b.n	8006b34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b20:	f7fa ff3c 	bl	800199c <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d902      	bls.n	8006b34 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	73fb      	strb	r3, [r7, #15]
          break;
 8006b32:	e005      	b.n	8006b40 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b34:	4b0a      	ldr	r3, [pc, #40]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0ef      	beq.n	8006b20 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b46:	4b06      	ldr	r3, [pc, #24]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b48:	695a      	ldr	r2, [r3, #20]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	4904      	ldr	r1, [pc, #16]	@ (8006b60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40021000 	.word	0x40021000
 8006b64:	07ff800f 	.word	0x07ff800f
 8006b68:	ff9f800f 	.word	0xff9f800f
 8006b6c:	f9ff800f 	.word	0xf9ff800f

08006b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e049      	b.n	8006c16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fa fcd0 	bl	800153c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f000 fb02 	bl	80071b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d001      	beq.n	8006c38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e047      	b.n	8006cc8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a23      	ldr	r2, [pc, #140]	@ (8006cd4 <HAL_TIM_Base_Start+0xb4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d01d      	beq.n	8006c86 <HAL_TIM_Base_Start+0x66>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c52:	d018      	beq.n	8006c86 <HAL_TIM_Base_Start+0x66>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1f      	ldr	r2, [pc, #124]	@ (8006cd8 <HAL_TIM_Base_Start+0xb8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <HAL_TIM_Base_Start+0x66>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1e      	ldr	r2, [pc, #120]	@ (8006cdc <HAL_TIM_Base_Start+0xbc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00e      	beq.n	8006c86 <HAL_TIM_Base_Start+0x66>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ce0 <HAL_TIM_Base_Start+0xc0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d009      	beq.n	8006c86 <HAL_TIM_Base_Start+0x66>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1b      	ldr	r2, [pc, #108]	@ (8006ce4 <HAL_TIM_Base_Start+0xc4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d004      	beq.n	8006c86 <HAL_TIM_Base_Start+0x66>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a19      	ldr	r2, [pc, #100]	@ (8006ce8 <HAL_TIM_Base_Start+0xc8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d115      	bne.n	8006cb2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	4b17      	ldr	r3, [pc, #92]	@ (8006cec <HAL_TIM_Base_Start+0xcc>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b06      	cmp	r3, #6
 8006c96:	d015      	beq.n	8006cc4 <HAL_TIM_Base_Start+0xa4>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c9e:	d011      	beq.n	8006cc4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb0:	e008      	b.n	8006cc4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0201 	orr.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	e000      	b.n	8006cc6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40012c00 	.word	0x40012c00
 8006cd8:	40000400 	.word	0x40000400
 8006cdc:	40000800 	.word	0x40000800
 8006ce0:	40000c00 	.word	0x40000c00
 8006ce4:	40013400 	.word	0x40013400
 8006ce8:	40014000 	.word	0x40014000
 8006cec:	00010007 	.word	0x00010007

08006cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d001      	beq.n	8006d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e04f      	b.n	8006da8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a23      	ldr	r2, [pc, #140]	@ (8006db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d01d      	beq.n	8006d66 <HAL_TIM_Base_Start_IT+0x76>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d32:	d018      	beq.n	8006d66 <HAL_TIM_Base_Start_IT+0x76>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1f      	ldr	r2, [pc, #124]	@ (8006db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d013      	beq.n	8006d66 <HAL_TIM_Base_Start_IT+0x76>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1e      	ldr	r2, [pc, #120]	@ (8006dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00e      	beq.n	8006d66 <HAL_TIM_Base_Start_IT+0x76>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d009      	beq.n	8006d66 <HAL_TIM_Base_Start_IT+0x76>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1b      	ldr	r2, [pc, #108]	@ (8006dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <HAL_TIM_Base_Start_IT+0x76>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a19      	ldr	r2, [pc, #100]	@ (8006dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d115      	bne.n	8006d92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	4b17      	ldr	r3, [pc, #92]	@ (8006dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8006d6e:	4013      	ands	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b06      	cmp	r3, #6
 8006d76:	d015      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0xb4>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d7e:	d011      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d90:	e008      	b.n	8006da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0201 	orr.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	e000      	b.n	8006da6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40000800 	.word	0x40000800
 8006dc0:	40000c00 	.word	0x40000c00
 8006dc4:	40013400 	.word	0x40013400
 8006dc8:	40014000 	.word	0x40014000
 8006dcc:	00010007 	.word	0x00010007

08006dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d020      	beq.n	8006e34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01b      	beq.n	8006e34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f06f 0202 	mvn.w	r2, #2
 8006e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f9ad 	bl	800717a <HAL_TIM_IC_CaptureCallback>
 8006e20:	e005      	b.n	8006e2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f99f 	bl	8007166 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f9b0 	bl	800718e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d020      	beq.n	8006e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01b      	beq.n	8006e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0204 	mvn.w	r2, #4
 8006e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2202      	movs	r2, #2
 8006e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f987 	bl	800717a <HAL_TIM_IC_CaptureCallback>
 8006e6c:	e005      	b.n	8006e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f979 	bl	8007166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f98a 	bl	800718e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d020      	beq.n	8006ecc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f003 0308 	and.w	r3, r3, #8
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01b      	beq.n	8006ecc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0208 	mvn.w	r2, #8
 8006e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f961 	bl	800717a <HAL_TIM_IC_CaptureCallback>
 8006eb8:	e005      	b.n	8006ec6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f953 	bl	8007166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f964 	bl	800718e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 0310 	and.w	r3, r3, #16
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d020      	beq.n	8006f18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f003 0310 	and.w	r3, r3, #16
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01b      	beq.n	8006f18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0210 	mvn.w	r2, #16
 8006ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2208      	movs	r2, #8
 8006eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f93b 	bl	800717a <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f92d 	bl	8007166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f93e 	bl	800718e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00c      	beq.n	8006f3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0201 	mvn.w	r2, #1
 8006f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7f9 ff7c 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 faf2 	bl	8007544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00c      	beq.n	8006f84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d007      	beq.n	8006f84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 faea 	bl	8007558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00c      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d007      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f8fd 	bl	80071a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00c      	beq.n	8006fcc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0220 	mvn.w	r2, #32
 8006fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fab2 	bl	8007530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fcc:	bf00      	nop
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e0b6      	b.n	800715e <HAL_TIM_ConfigClockSource+0x18a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800700e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800701a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800702c:	d03e      	beq.n	80070ac <HAL_TIM_ConfigClockSource+0xd8>
 800702e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007032:	f200 8087 	bhi.w	8007144 <HAL_TIM_ConfigClockSource+0x170>
 8007036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800703a:	f000 8086 	beq.w	800714a <HAL_TIM_ConfigClockSource+0x176>
 800703e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007042:	d87f      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x170>
 8007044:	2b70      	cmp	r3, #112	@ 0x70
 8007046:	d01a      	beq.n	800707e <HAL_TIM_ConfigClockSource+0xaa>
 8007048:	2b70      	cmp	r3, #112	@ 0x70
 800704a:	d87b      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x170>
 800704c:	2b60      	cmp	r3, #96	@ 0x60
 800704e:	d050      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x11e>
 8007050:	2b60      	cmp	r3, #96	@ 0x60
 8007052:	d877      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x170>
 8007054:	2b50      	cmp	r3, #80	@ 0x50
 8007056:	d03c      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0xfe>
 8007058:	2b50      	cmp	r3, #80	@ 0x50
 800705a:	d873      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x170>
 800705c:	2b40      	cmp	r3, #64	@ 0x40
 800705e:	d058      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x13e>
 8007060:	2b40      	cmp	r3, #64	@ 0x40
 8007062:	d86f      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x170>
 8007064:	2b30      	cmp	r3, #48	@ 0x30
 8007066:	d064      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x15e>
 8007068:	2b30      	cmp	r3, #48	@ 0x30
 800706a:	d86b      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x170>
 800706c:	2b20      	cmp	r3, #32
 800706e:	d060      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x15e>
 8007070:	2b20      	cmp	r3, #32
 8007072:	d867      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x170>
 8007074:	2b00      	cmp	r3, #0
 8007076:	d05c      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x15e>
 8007078:	2b10      	cmp	r3, #16
 800707a:	d05a      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x15e>
 800707c:	e062      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800708e:	f000 f9a7 	bl	80073e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	609a      	str	r2, [r3, #8]
      break;
 80070aa:	e04f      	b.n	800714c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070bc:	f000 f990 	bl	80073e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070ce:	609a      	str	r2, [r3, #8]
      break;
 80070d0:	e03c      	b.n	800714c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070de:	461a      	mov	r2, r3
 80070e0:	f000 f904 	bl	80072ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2150      	movs	r1, #80	@ 0x50
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f95d 	bl	80073aa <TIM_ITRx_SetConfig>
      break;
 80070f0:	e02c      	b.n	800714c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070fe:	461a      	mov	r2, r3
 8007100:	f000 f923 	bl	800734a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2160      	movs	r1, #96	@ 0x60
 800710a:	4618      	mov	r0, r3
 800710c:	f000 f94d 	bl	80073aa <TIM_ITRx_SetConfig>
      break;
 8007110:	e01c      	b.n	800714c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800711e:	461a      	mov	r2, r3
 8007120:	f000 f8e4 	bl	80072ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2140      	movs	r1, #64	@ 0x40
 800712a:	4618      	mov	r0, r3
 800712c:	f000 f93d 	bl	80073aa <TIM_ITRx_SetConfig>
      break;
 8007130:	e00c      	b.n	800714c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f000 f934 	bl	80073aa <TIM_ITRx_SetConfig>
      break;
 8007142:	e003      	b.n	800714c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
      break;
 8007148:	e000      	b.n	800714c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800714a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007166:	b480      	push	{r7}
 8007168:	b083      	sub	sp, #12
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
	...

080071b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a40      	ldr	r2, [pc, #256]	@ (80072cc <TIM_Base_SetConfig+0x114>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d013      	beq.n	80071f8 <TIM_Base_SetConfig+0x40>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d6:	d00f      	beq.n	80071f8 <TIM_Base_SetConfig+0x40>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a3d      	ldr	r2, [pc, #244]	@ (80072d0 <TIM_Base_SetConfig+0x118>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00b      	beq.n	80071f8 <TIM_Base_SetConfig+0x40>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a3c      	ldr	r2, [pc, #240]	@ (80072d4 <TIM_Base_SetConfig+0x11c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d007      	beq.n	80071f8 <TIM_Base_SetConfig+0x40>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a3b      	ldr	r2, [pc, #236]	@ (80072d8 <TIM_Base_SetConfig+0x120>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_Base_SetConfig+0x40>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a3a      	ldr	r2, [pc, #232]	@ (80072dc <TIM_Base_SetConfig+0x124>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d108      	bne.n	800720a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a2f      	ldr	r2, [pc, #188]	@ (80072cc <TIM_Base_SetConfig+0x114>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01f      	beq.n	8007252 <TIM_Base_SetConfig+0x9a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007218:	d01b      	beq.n	8007252 <TIM_Base_SetConfig+0x9a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a2c      	ldr	r2, [pc, #176]	@ (80072d0 <TIM_Base_SetConfig+0x118>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d017      	beq.n	8007252 <TIM_Base_SetConfig+0x9a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a2b      	ldr	r2, [pc, #172]	@ (80072d4 <TIM_Base_SetConfig+0x11c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <TIM_Base_SetConfig+0x9a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a2a      	ldr	r2, [pc, #168]	@ (80072d8 <TIM_Base_SetConfig+0x120>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00f      	beq.n	8007252 <TIM_Base_SetConfig+0x9a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a29      	ldr	r2, [pc, #164]	@ (80072dc <TIM_Base_SetConfig+0x124>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00b      	beq.n	8007252 <TIM_Base_SetConfig+0x9a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a28      	ldr	r2, [pc, #160]	@ (80072e0 <TIM_Base_SetConfig+0x128>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d007      	beq.n	8007252 <TIM_Base_SetConfig+0x9a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a27      	ldr	r2, [pc, #156]	@ (80072e4 <TIM_Base_SetConfig+0x12c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d003      	beq.n	8007252 <TIM_Base_SetConfig+0x9a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a26      	ldr	r2, [pc, #152]	@ (80072e8 <TIM_Base_SetConfig+0x130>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d108      	bne.n	8007264 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a10      	ldr	r2, [pc, #64]	@ (80072cc <TIM_Base_SetConfig+0x114>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00f      	beq.n	80072b0 <TIM_Base_SetConfig+0xf8>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a12      	ldr	r2, [pc, #72]	@ (80072dc <TIM_Base_SetConfig+0x124>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00b      	beq.n	80072b0 <TIM_Base_SetConfig+0xf8>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a11      	ldr	r2, [pc, #68]	@ (80072e0 <TIM_Base_SetConfig+0x128>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d007      	beq.n	80072b0 <TIM_Base_SetConfig+0xf8>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a10      	ldr	r2, [pc, #64]	@ (80072e4 <TIM_Base_SetConfig+0x12c>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <TIM_Base_SetConfig+0xf8>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a0f      	ldr	r2, [pc, #60]	@ (80072e8 <TIM_Base_SetConfig+0x130>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d103      	bne.n	80072b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	615a      	str	r2, [r3, #20]
}
 80072be:	bf00      	nop
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40000400 	.word	0x40000400
 80072d4:	40000800 	.word	0x40000800
 80072d8:	40000c00 	.word	0x40000c00
 80072dc:	40013400 	.word	0x40013400
 80072e0:	40014000 	.word	0x40014000
 80072e4:	40014400 	.word	0x40014400
 80072e8:	40014800 	.word	0x40014800

080072ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f023 0201 	bic.w	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f023 030a 	bic.w	r3, r3, #10
 8007328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4313      	orrs	r3, r2
 8007330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	621a      	str	r2, [r3, #32]
}
 800733e:	bf00      	nop
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800734a:	b480      	push	{r7}
 800734c:	b087      	sub	sp, #28
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f023 0210 	bic.w	r2, r3, #16
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007374:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	031b      	lsls	r3, r3, #12
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007386:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	621a      	str	r2, [r3, #32]
}
 800739e:	bf00      	nop
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b085      	sub	sp, #20
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f043 0307 	orr.w	r3, r3, #7
 80073cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	609a      	str	r2, [r3, #8]
}
 80073d4:	bf00      	nop
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	021a      	lsls	r2, r3, #8
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	431a      	orrs	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4313      	orrs	r3, r2
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	609a      	str	r2, [r3, #8]
}
 8007414:	bf00      	nop
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007434:	2302      	movs	r3, #2
 8007436:	e068      	b.n	800750a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a2e      	ldr	r2, [pc, #184]	@ (8007518 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d004      	beq.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2d      	ldr	r2, [pc, #180]	@ (800751c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d108      	bne.n	800747e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007472:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007484:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a1e      	ldr	r2, [pc, #120]	@ (8007518 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01d      	beq.n	80074de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074aa:	d018      	beq.n	80074de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007520 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007524 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00e      	beq.n	80074de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a18      	ldr	r2, [pc, #96]	@ (8007528 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d009      	beq.n	80074de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a13      	ldr	r2, [pc, #76]	@ (800751c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d004      	beq.n	80074de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a14      	ldr	r2, [pc, #80]	@ (800752c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d10c      	bne.n	80074f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40012c00 	.word	0x40012c00
 800751c:	40013400 	.word	0x40013400
 8007520:	40000400 	.word	0x40000400
 8007524:	40000800 	.word	0x40000800
 8007528:	40000c00 	.word	0x40000c00
 800752c:	40014000 	.word	0x40014000

08007530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e042      	b.n	8007604 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7fa f8c3 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2224      	movs	r2, #36	@ 0x24
 800759a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0201 	bic.w	r2, r2, #1
 80075ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 feb4 	bl	8008324 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fbb5 	bl	8007d2c <UART_SetConfig>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e01b      	b.n	8007604 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 ff33 	bl	8008468 <UART_CheckIdleState>
 8007602:	4603      	mov	r3, r0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08a      	sub	sp, #40	@ 0x28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007620:	2b20      	cmp	r3, #32
 8007622:	d137      	bne.n	8007694 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <HAL_UART_Receive_IT+0x24>
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e030      	b.n	8007696 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a18      	ldr	r2, [pc, #96]	@ (80076a0 <HAL_UART_Receive_IT+0x94>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d01f      	beq.n	8007684 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d018      	beq.n	8007684 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	613b      	str	r3, [r7, #16]
   return(result);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	623b      	str	r3, [r7, #32]
 8007672:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	69f9      	ldr	r1, [r7, #28]
 8007676:	6a3a      	ldr	r2, [r7, #32]
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	61bb      	str	r3, [r7, #24]
   return(result);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e6      	bne.n	8007652 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007684:	88fb      	ldrh	r3, [r7, #6]
 8007686:	461a      	mov	r2, r3
 8007688:	68b9      	ldr	r1, [r7, #8]
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fffe 	bl	800868c <UART_Start_Receive_IT>
 8007690:	4603      	mov	r3, r0
 8007692:	e000      	b.n	8007696 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
  }
}
 8007696:	4618      	mov	r0, r3
 8007698:	3728      	adds	r7, #40	@ 0x28
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40008000 	.word	0x40008000

080076a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b0ba      	sub	sp, #232	@ 0xe8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80076ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80076d2:	4013      	ands	r3, r2
 80076d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80076d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d11b      	bne.n	8007718 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d015      	beq.n	8007718 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d105      	bne.n	8007704 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d009      	beq.n	8007718 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 82e3 	beq.w	8007cd4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
      }
      return;
 8007716:	e2dd      	b.n	8007cd4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 8123 	beq.w	8007968 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007722:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007726:	4b8d      	ldr	r3, [pc, #564]	@ (800795c <HAL_UART_IRQHandler+0x2b8>)
 8007728:	4013      	ands	r3, r2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800772e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007732:	4b8b      	ldr	r3, [pc, #556]	@ (8007960 <HAL_UART_IRQHandler+0x2bc>)
 8007734:	4013      	ands	r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 8116 	beq.w	8007968 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800773c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d011      	beq.n	800776c <HAL_UART_IRQHandler+0xc8>
 8007748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800774c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2201      	movs	r2, #1
 800775a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007762:	f043 0201 	orr.w	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800776c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d011      	beq.n	800779c <HAL_UART_IRQHandler+0xf8>
 8007778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2202      	movs	r2, #2
 800778a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007792:	f043 0204 	orr.w	r2, r3, #4
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d011      	beq.n	80077cc <HAL_UART_IRQHandler+0x128>
 80077a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2204      	movs	r2, #4
 80077ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c2:	f043 0202 	orr.w	r2, r3, #2
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d017      	beq.n	8007808 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d105      	bne.n	80077f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80077e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80077e8:	4b5c      	ldr	r3, [pc, #368]	@ (800795c <HAL_UART_IRQHandler+0x2b8>)
 80077ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2208      	movs	r2, #8
 80077f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077fe:	f043 0208 	orr.w	r2, r3, #8
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800780c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007810:	2b00      	cmp	r3, #0
 8007812:	d012      	beq.n	800783a <HAL_UART_IRQHandler+0x196>
 8007814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007818:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00c      	beq.n	800783a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007830:	f043 0220 	orr.w	r2, r3, #32
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 8249 	beq.w	8007cd8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d013      	beq.n	800787a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007856:	f003 0320 	and.w	r3, r3, #32
 800785a:	2b00      	cmp	r3, #0
 800785c:	d105      	bne.n	800786a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800785e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007880:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800788e:	2b40      	cmp	r3, #64	@ 0x40
 8007890:	d005      	beq.n	800789e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007896:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800789a:	2b00      	cmp	r3, #0
 800789c:	d054      	beq.n	8007948 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 f816 	bl	80088d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ae:	2b40      	cmp	r3, #64	@ 0x40
 80078b0:	d146      	bne.n	8007940 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3308      	adds	r3, #8
 80078b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3308      	adds	r3, #8
 80078da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80078de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80078e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1d9      	bne.n	80078b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007904:	2b00      	cmp	r3, #0
 8007906:	d017      	beq.n	8007938 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790e:	4a15      	ldr	r2, [pc, #84]	@ (8007964 <HAL_UART_IRQHandler+0x2c0>)
 8007910:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007918:	4618      	mov	r0, r3
 800791a:	f7fb feda 	bl	80036d2 <HAL_DMA_Abort_IT>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d019      	beq.n	8007958 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800792a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007932:	4610      	mov	r0, r2
 8007934:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007936:	e00f      	b.n	8007958 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f9e1 	bl	8007d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793e:	e00b      	b.n	8007958 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f9dd 	bl	8007d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007946:	e007      	b.n	8007958 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f9d9 	bl	8007d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007956:	e1bf      	b.n	8007cd8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	bf00      	nop
    return;
 800795a:	e1bd      	b.n	8007cd8 <HAL_UART_IRQHandler+0x634>
 800795c:	10000001 	.word	0x10000001
 8007960:	04000120 	.word	0x04000120
 8007964:	0800899d 	.word	0x0800899d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800796c:	2b01      	cmp	r3, #1
 800796e:	f040 8153 	bne.w	8007c18 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007976:	f003 0310 	and.w	r3, r3, #16
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 814c 	beq.w	8007c18 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8145 	beq.w	8007c18 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2210      	movs	r2, #16
 8007994:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a0:	2b40      	cmp	r3, #64	@ 0x40
 80079a2:	f040 80bb 	bne.w	8007b1c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 818f 	beq.w	8007cdc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079c8:	429a      	cmp	r2, r3
 80079ca:	f080 8187 	bcs.w	8007cdc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f040 8087 	bne.w	8007afa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1da      	bne.n	80079ec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3308      	adds	r3, #8
 8007a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e1      	bne.n	8007a36 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3308      	adds	r3, #8
 8007a78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3308      	adds	r3, #8
 8007a92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007aa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e3      	bne.n	8007a72 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ac8:	f023 0310 	bic.w	r3, r3, #16
 8007acc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ada:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007adc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ae0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e4      	bne.n	8007ab8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fb fd90 	bl	800361a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2202      	movs	r2, #2
 8007afe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f8fd 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b1a:	e0df      	b.n	8007cdc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80d1 	beq.w	8007ce0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007b3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 80cc 	beq.w	8007ce0 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b6c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e4      	bne.n	8007b48 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ba6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e1      	bne.n	8007b7e <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0310 	bic.w	r3, r3, #16
 8007be2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007bf0:	61fb      	str	r3, [r7, #28]
 8007bf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	69b9      	ldr	r1, [r7, #24]
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e4      	bne.n	8007bce <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f87f 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c16:	e063      	b.n	8007ce0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00e      	beq.n	8007c42 <HAL_UART_IRQHandler+0x59e>
 8007c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d008      	beq.n	8007c42 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007c38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fc14 	bl	8009468 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c40:	e051      	b.n	8007ce6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d014      	beq.n	8007c78 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d105      	bne.n	8007c66 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d008      	beq.n	8007c78 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d03a      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
    }
    return;
 8007c76:	e035      	b.n	8007ce4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d009      	beq.n	8007c98 <HAL_UART_IRQHandler+0x5f4>
 8007c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fe99 	bl	80089c8 <UART_EndTransmit_IT>
    return;
 8007c96:	e026      	b.n	8007ce6 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d009      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x614>
 8007ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ca8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 fbed 	bl	8009490 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cb6:	e016      	b.n	8007ce6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d010      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x642>
 8007cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	da0c      	bge.n	8007ce6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fbd5 	bl	800947c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cd2:	e008      	b.n	8007ce6 <HAL_UART_IRQHandler+0x642>
      return;
 8007cd4:	bf00      	nop
 8007cd6:	e006      	b.n	8007ce6 <HAL_UART_IRQHandler+0x642>
    return;
 8007cd8:	bf00      	nop
 8007cda:	e004      	b.n	8007ce6 <HAL_UART_IRQHandler+0x642>
      return;
 8007cdc:	bf00      	nop
 8007cde:	e002      	b.n	8007ce6 <HAL_UART_IRQHandler+0x642>
      return;
 8007ce0:	bf00      	nop
 8007ce2:	e000      	b.n	8007ce6 <HAL_UART_IRQHandler+0x642>
    return;
 8007ce4:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007ce6:	37e8      	adds	r7, #232	@ 0xe8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d30:	b08c      	sub	sp, #48	@ 0x30
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	431a      	orrs	r2, r3
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	4baa      	ldr	r3, [pc, #680]	@ (8008004 <UART_SetConfig+0x2d8>)
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	6812      	ldr	r2, [r2, #0]
 8007d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d64:	430b      	orrs	r3, r1
 8007d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a9f      	ldr	r2, [pc, #636]	@ (8008008 <UART_SetConfig+0x2dc>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d004      	beq.n	8007d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d94:	4313      	orrs	r3, r2
 8007d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007da2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dac:	430b      	orrs	r3, r1
 8007dae:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db6:	f023 010f 	bic.w	r1, r3, #15
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a90      	ldr	r2, [pc, #576]	@ (800800c <UART_SetConfig+0x2e0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d125      	bne.n	8007e1c <UART_SetConfig+0xf0>
 8007dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8008010 <UART_SetConfig+0x2e4>)
 8007dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d81a      	bhi.n	8007e14 <UART_SetConfig+0xe8>
 8007dde:	a201      	add	r2, pc, #4	@ (adr r2, 8007de4 <UART_SetConfig+0xb8>)
 8007de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de4:	08007df5 	.word	0x08007df5
 8007de8:	08007e05 	.word	0x08007e05
 8007dec:	08007dfd 	.word	0x08007dfd
 8007df0:	08007e0d 	.word	0x08007e0d
 8007df4:	2301      	movs	r3, #1
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dfa:	e116      	b.n	800802a <UART_SetConfig+0x2fe>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e02:	e112      	b.n	800802a <UART_SetConfig+0x2fe>
 8007e04:	2304      	movs	r3, #4
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e0a:	e10e      	b.n	800802a <UART_SetConfig+0x2fe>
 8007e0c:	2308      	movs	r3, #8
 8007e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e12:	e10a      	b.n	800802a <UART_SetConfig+0x2fe>
 8007e14:	2310      	movs	r3, #16
 8007e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e1a:	e106      	b.n	800802a <UART_SetConfig+0x2fe>
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a7c      	ldr	r2, [pc, #496]	@ (8008014 <UART_SetConfig+0x2e8>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d138      	bne.n	8007e98 <UART_SetConfig+0x16c>
 8007e26:	4b7a      	ldr	r3, [pc, #488]	@ (8008010 <UART_SetConfig+0x2e4>)
 8007e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e2c:	f003 030c 	and.w	r3, r3, #12
 8007e30:	2b0c      	cmp	r3, #12
 8007e32:	d82d      	bhi.n	8007e90 <UART_SetConfig+0x164>
 8007e34:	a201      	add	r2, pc, #4	@ (adr r2, 8007e3c <UART_SetConfig+0x110>)
 8007e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3a:	bf00      	nop
 8007e3c:	08007e71 	.word	0x08007e71
 8007e40:	08007e91 	.word	0x08007e91
 8007e44:	08007e91 	.word	0x08007e91
 8007e48:	08007e91 	.word	0x08007e91
 8007e4c:	08007e81 	.word	0x08007e81
 8007e50:	08007e91 	.word	0x08007e91
 8007e54:	08007e91 	.word	0x08007e91
 8007e58:	08007e91 	.word	0x08007e91
 8007e5c:	08007e79 	.word	0x08007e79
 8007e60:	08007e91 	.word	0x08007e91
 8007e64:	08007e91 	.word	0x08007e91
 8007e68:	08007e91 	.word	0x08007e91
 8007e6c:	08007e89 	.word	0x08007e89
 8007e70:	2300      	movs	r3, #0
 8007e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e76:	e0d8      	b.n	800802a <UART_SetConfig+0x2fe>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e7e:	e0d4      	b.n	800802a <UART_SetConfig+0x2fe>
 8007e80:	2304      	movs	r3, #4
 8007e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e86:	e0d0      	b.n	800802a <UART_SetConfig+0x2fe>
 8007e88:	2308      	movs	r3, #8
 8007e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e8e:	e0cc      	b.n	800802a <UART_SetConfig+0x2fe>
 8007e90:	2310      	movs	r3, #16
 8007e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e96:	e0c8      	b.n	800802a <UART_SetConfig+0x2fe>
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8008018 <UART_SetConfig+0x2ec>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d125      	bne.n	8007eee <UART_SetConfig+0x1c2>
 8007ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8008010 <UART_SetConfig+0x2e4>)
 8007ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007eac:	2b30      	cmp	r3, #48	@ 0x30
 8007eae:	d016      	beq.n	8007ede <UART_SetConfig+0x1b2>
 8007eb0:	2b30      	cmp	r3, #48	@ 0x30
 8007eb2:	d818      	bhi.n	8007ee6 <UART_SetConfig+0x1ba>
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	d00a      	beq.n	8007ece <UART_SetConfig+0x1a2>
 8007eb8:	2b20      	cmp	r3, #32
 8007eba:	d814      	bhi.n	8007ee6 <UART_SetConfig+0x1ba>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <UART_SetConfig+0x19a>
 8007ec0:	2b10      	cmp	r3, #16
 8007ec2:	d008      	beq.n	8007ed6 <UART_SetConfig+0x1aa>
 8007ec4:	e00f      	b.n	8007ee6 <UART_SetConfig+0x1ba>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ecc:	e0ad      	b.n	800802a <UART_SetConfig+0x2fe>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed4:	e0a9      	b.n	800802a <UART_SetConfig+0x2fe>
 8007ed6:	2304      	movs	r3, #4
 8007ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007edc:	e0a5      	b.n	800802a <UART_SetConfig+0x2fe>
 8007ede:	2308      	movs	r3, #8
 8007ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ee4:	e0a1      	b.n	800802a <UART_SetConfig+0x2fe>
 8007ee6:	2310      	movs	r3, #16
 8007ee8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eec:	e09d      	b.n	800802a <UART_SetConfig+0x2fe>
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800801c <UART_SetConfig+0x2f0>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d125      	bne.n	8007f44 <UART_SetConfig+0x218>
 8007ef8:	4b45      	ldr	r3, [pc, #276]	@ (8008010 <UART_SetConfig+0x2e4>)
 8007efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f04:	d016      	beq.n	8007f34 <UART_SetConfig+0x208>
 8007f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f08:	d818      	bhi.n	8007f3c <UART_SetConfig+0x210>
 8007f0a:	2b80      	cmp	r3, #128	@ 0x80
 8007f0c:	d00a      	beq.n	8007f24 <UART_SetConfig+0x1f8>
 8007f0e:	2b80      	cmp	r3, #128	@ 0x80
 8007f10:	d814      	bhi.n	8007f3c <UART_SetConfig+0x210>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <UART_SetConfig+0x1f0>
 8007f16:	2b40      	cmp	r3, #64	@ 0x40
 8007f18:	d008      	beq.n	8007f2c <UART_SetConfig+0x200>
 8007f1a:	e00f      	b.n	8007f3c <UART_SetConfig+0x210>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f22:	e082      	b.n	800802a <UART_SetConfig+0x2fe>
 8007f24:	2302      	movs	r3, #2
 8007f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f2a:	e07e      	b.n	800802a <UART_SetConfig+0x2fe>
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f32:	e07a      	b.n	800802a <UART_SetConfig+0x2fe>
 8007f34:	2308      	movs	r3, #8
 8007f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f3a:	e076      	b.n	800802a <UART_SetConfig+0x2fe>
 8007f3c:	2310      	movs	r3, #16
 8007f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f42:	e072      	b.n	800802a <UART_SetConfig+0x2fe>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a35      	ldr	r2, [pc, #212]	@ (8008020 <UART_SetConfig+0x2f4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d12a      	bne.n	8007fa4 <UART_SetConfig+0x278>
 8007f4e:	4b30      	ldr	r3, [pc, #192]	@ (8008010 <UART_SetConfig+0x2e4>)
 8007f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f5c:	d01a      	beq.n	8007f94 <UART_SetConfig+0x268>
 8007f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f62:	d81b      	bhi.n	8007f9c <UART_SetConfig+0x270>
 8007f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f68:	d00c      	beq.n	8007f84 <UART_SetConfig+0x258>
 8007f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f6e:	d815      	bhi.n	8007f9c <UART_SetConfig+0x270>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <UART_SetConfig+0x250>
 8007f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f78:	d008      	beq.n	8007f8c <UART_SetConfig+0x260>
 8007f7a:	e00f      	b.n	8007f9c <UART_SetConfig+0x270>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f82:	e052      	b.n	800802a <UART_SetConfig+0x2fe>
 8007f84:	2302      	movs	r3, #2
 8007f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8a:	e04e      	b.n	800802a <UART_SetConfig+0x2fe>
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f92:	e04a      	b.n	800802a <UART_SetConfig+0x2fe>
 8007f94:	2308      	movs	r3, #8
 8007f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9a:	e046      	b.n	800802a <UART_SetConfig+0x2fe>
 8007f9c:	2310      	movs	r3, #16
 8007f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa2:	e042      	b.n	800802a <UART_SetConfig+0x2fe>
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a17      	ldr	r2, [pc, #92]	@ (8008008 <UART_SetConfig+0x2dc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d13a      	bne.n	8008024 <UART_SetConfig+0x2f8>
 8007fae:	4b18      	ldr	r3, [pc, #96]	@ (8008010 <UART_SetConfig+0x2e4>)
 8007fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007fb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fbc:	d01a      	beq.n	8007ff4 <UART_SetConfig+0x2c8>
 8007fbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fc2:	d81b      	bhi.n	8007ffc <UART_SetConfig+0x2d0>
 8007fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fc8:	d00c      	beq.n	8007fe4 <UART_SetConfig+0x2b8>
 8007fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fce:	d815      	bhi.n	8007ffc <UART_SetConfig+0x2d0>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <UART_SetConfig+0x2b0>
 8007fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fd8:	d008      	beq.n	8007fec <UART_SetConfig+0x2c0>
 8007fda:	e00f      	b.n	8007ffc <UART_SetConfig+0x2d0>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe2:	e022      	b.n	800802a <UART_SetConfig+0x2fe>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fea:	e01e      	b.n	800802a <UART_SetConfig+0x2fe>
 8007fec:	2304      	movs	r3, #4
 8007fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff2:	e01a      	b.n	800802a <UART_SetConfig+0x2fe>
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffa:	e016      	b.n	800802a <UART_SetConfig+0x2fe>
 8007ffc:	2310      	movs	r3, #16
 8007ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008002:	e012      	b.n	800802a <UART_SetConfig+0x2fe>
 8008004:	cfff69f3 	.word	0xcfff69f3
 8008008:	40008000 	.word	0x40008000
 800800c:	40013800 	.word	0x40013800
 8008010:	40021000 	.word	0x40021000
 8008014:	40004400 	.word	0x40004400
 8008018:	40004800 	.word	0x40004800
 800801c:	40004c00 	.word	0x40004c00
 8008020:	40005000 	.word	0x40005000
 8008024:	2310      	movs	r3, #16
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4aae      	ldr	r2, [pc, #696]	@ (80082e8 <UART_SetConfig+0x5bc>)
 8008030:	4293      	cmp	r3, r2
 8008032:	f040 8097 	bne.w	8008164 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008036:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800803a:	2b08      	cmp	r3, #8
 800803c:	d823      	bhi.n	8008086 <UART_SetConfig+0x35a>
 800803e:	a201      	add	r2, pc, #4	@ (adr r2, 8008044 <UART_SetConfig+0x318>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008069 	.word	0x08008069
 8008048:	08008087 	.word	0x08008087
 800804c:	08008071 	.word	0x08008071
 8008050:	08008087 	.word	0x08008087
 8008054:	08008077 	.word	0x08008077
 8008058:	08008087 	.word	0x08008087
 800805c:	08008087 	.word	0x08008087
 8008060:	08008087 	.word	0x08008087
 8008064:	0800807f 	.word	0x0800807f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008068:	f7fd ff7e 	bl	8005f68 <HAL_RCC_GetPCLK1Freq>
 800806c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800806e:	e010      	b.n	8008092 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008070:	4b9e      	ldr	r3, [pc, #632]	@ (80082ec <UART_SetConfig+0x5c0>)
 8008072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008074:	e00d      	b.n	8008092 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008076:	f7fd fedf 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 800807a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800807c:	e009      	b.n	8008092 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800807e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008084:	e005      	b.n	8008092 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008090:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 8130 	beq.w	80082fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809e:	4a94      	ldr	r2, [pc, #592]	@ (80082f0 <UART_SetConfig+0x5c4>)
 80080a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	4613      	mov	r3, r2
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	4413      	add	r3, r2
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d305      	bcc.n	80080ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d903      	bls.n	80080d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080d0:	e113      	b.n	80082fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d4:	2200      	movs	r2, #0
 80080d6:	60bb      	str	r3, [r7, #8]
 80080d8:	60fa      	str	r2, [r7, #12]
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080de:	4a84      	ldr	r2, [pc, #528]	@ (80082f0 <UART_SetConfig+0x5c4>)
 80080e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2200      	movs	r2, #0
 80080e8:	603b      	str	r3, [r7, #0]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080f4:	f7f8 f882 	bl	80001fc <__aeabi_uldivmod>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4610      	mov	r0, r2
 80080fe:	4619      	mov	r1, r3
 8008100:	f04f 0200 	mov.w	r2, #0
 8008104:	f04f 0300 	mov.w	r3, #0
 8008108:	020b      	lsls	r3, r1, #8
 800810a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800810e:	0202      	lsls	r2, r0, #8
 8008110:	6979      	ldr	r1, [r7, #20]
 8008112:	6849      	ldr	r1, [r1, #4]
 8008114:	0849      	lsrs	r1, r1, #1
 8008116:	2000      	movs	r0, #0
 8008118:	460c      	mov	r4, r1
 800811a:	4605      	mov	r5, r0
 800811c:	eb12 0804 	adds.w	r8, r2, r4
 8008120:	eb43 0905 	adc.w	r9, r3, r5
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	469a      	mov	sl, r3
 800812c:	4693      	mov	fp, r2
 800812e:	4652      	mov	r2, sl
 8008130:	465b      	mov	r3, fp
 8008132:	4640      	mov	r0, r8
 8008134:	4649      	mov	r1, r9
 8008136:	f7f8 f861 	bl	80001fc <__aeabi_uldivmod>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4613      	mov	r3, r2
 8008140:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008148:	d308      	bcc.n	800815c <UART_SetConfig+0x430>
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008150:	d204      	bcs.n	800815c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6a3a      	ldr	r2, [r7, #32]
 8008158:	60da      	str	r2, [r3, #12]
 800815a:	e0ce      	b.n	80082fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008162:	e0ca      	b.n	80082fa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800816c:	d166      	bne.n	800823c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800816e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008172:	2b08      	cmp	r3, #8
 8008174:	d827      	bhi.n	80081c6 <UART_SetConfig+0x49a>
 8008176:	a201      	add	r2, pc, #4	@ (adr r2, 800817c <UART_SetConfig+0x450>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	080081a1 	.word	0x080081a1
 8008180:	080081a9 	.word	0x080081a9
 8008184:	080081b1 	.word	0x080081b1
 8008188:	080081c7 	.word	0x080081c7
 800818c:	080081b7 	.word	0x080081b7
 8008190:	080081c7 	.word	0x080081c7
 8008194:	080081c7 	.word	0x080081c7
 8008198:	080081c7 	.word	0x080081c7
 800819c:	080081bf 	.word	0x080081bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081a0:	f7fd fee2 	bl	8005f68 <HAL_RCC_GetPCLK1Freq>
 80081a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081a6:	e014      	b.n	80081d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081a8:	f7fd fef4 	bl	8005f94 <HAL_RCC_GetPCLK2Freq>
 80081ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081ae:	e010      	b.n	80081d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081b0:	4b4e      	ldr	r3, [pc, #312]	@ (80082ec <UART_SetConfig+0x5c0>)
 80081b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081b4:	e00d      	b.n	80081d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081b6:	f7fd fe3f 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 80081ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081bc:	e009      	b.n	80081d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081c4:	e005      	b.n	80081d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 8090 	beq.w	80082fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081de:	4a44      	ldr	r2, [pc, #272]	@ (80082f0 <UART_SetConfig+0x5c4>)
 80081e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e4:	461a      	mov	r2, r3
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ec:	005a      	lsls	r2, r3, #1
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	085b      	lsrs	r3, r3, #1
 80081f4:	441a      	add	r2, r3
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	2b0f      	cmp	r3, #15
 8008204:	d916      	bls.n	8008234 <UART_SetConfig+0x508>
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800820c:	d212      	bcs.n	8008234 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	b29b      	uxth	r3, r3
 8008212:	f023 030f 	bic.w	r3, r3, #15
 8008216:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	085b      	lsrs	r3, r3, #1
 800821c:	b29b      	uxth	r3, r3
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	b29a      	uxth	r2, r3
 8008224:	8bfb      	ldrh	r3, [r7, #30]
 8008226:	4313      	orrs	r3, r2
 8008228:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	8bfa      	ldrh	r2, [r7, #30]
 8008230:	60da      	str	r2, [r3, #12]
 8008232:	e062      	b.n	80082fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800823a:	e05e      	b.n	80082fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800823c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008240:	2b08      	cmp	r3, #8
 8008242:	d828      	bhi.n	8008296 <UART_SetConfig+0x56a>
 8008244:	a201      	add	r2, pc, #4	@ (adr r2, 800824c <UART_SetConfig+0x520>)
 8008246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824a:	bf00      	nop
 800824c:	08008271 	.word	0x08008271
 8008250:	08008279 	.word	0x08008279
 8008254:	08008281 	.word	0x08008281
 8008258:	08008297 	.word	0x08008297
 800825c:	08008287 	.word	0x08008287
 8008260:	08008297 	.word	0x08008297
 8008264:	08008297 	.word	0x08008297
 8008268:	08008297 	.word	0x08008297
 800826c:	0800828f 	.word	0x0800828f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008270:	f7fd fe7a 	bl	8005f68 <HAL_RCC_GetPCLK1Freq>
 8008274:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008276:	e014      	b.n	80082a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008278:	f7fd fe8c 	bl	8005f94 <HAL_RCC_GetPCLK2Freq>
 800827c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800827e:	e010      	b.n	80082a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008280:	4b1a      	ldr	r3, [pc, #104]	@ (80082ec <UART_SetConfig+0x5c0>)
 8008282:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008284:	e00d      	b.n	80082a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008286:	f7fd fdd7 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 800828a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800828c:	e009      	b.n	80082a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800828e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008292:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008294:	e005      	b.n	80082a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082a0:	bf00      	nop
    }

    if (pclk != 0U)
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d028      	beq.n	80082fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ac:	4a10      	ldr	r2, [pc, #64]	@ (80082f0 <UART_SetConfig+0x5c4>)
 80082ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b2:	461a      	mov	r2, r3
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	441a      	add	r2, r3
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	2b0f      	cmp	r3, #15
 80082d0:	d910      	bls.n	80082f4 <UART_SetConfig+0x5c8>
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082d8:	d20c      	bcs.n	80082f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	b29a      	uxth	r2, r3
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60da      	str	r2, [r3, #12]
 80082e4:	e009      	b.n	80082fa <UART_SetConfig+0x5ce>
 80082e6:	bf00      	nop
 80082e8:	40008000 	.word	0x40008000
 80082ec:	00f42400 	.word	0x00f42400
 80082f0:	0800d934 	.word	0x0800d934
      }
      else
      {
        ret = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2201      	movs	r2, #1
 8008306:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2200      	movs	r2, #0
 800830e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2200      	movs	r2, #0
 8008314:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008316:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800831a:	4618      	mov	r0, r3
 800831c:	3730      	adds	r7, #48	@ 0x30
 800831e:	46bd      	mov	sp, r7
 8008320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008330:	f003 0308 	and.w	r3, r3, #8
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b8:	f003 0310 	and.w	r3, r3, #16
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01a      	beq.n	800843a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800841e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008422:	d10a      	bne.n	800843a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	605a      	str	r2, [r3, #4]
  }
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b098      	sub	sp, #96	@ 0x60
 800846c:	af02      	add	r7, sp, #8
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008478:	f7f9 fa90 	bl	800199c <HAL_GetTick>
 800847c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b08      	cmp	r3, #8
 800848a:	d12f      	bne.n	80084ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800848c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008494:	2200      	movs	r2, #0
 8008496:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f88e 	bl	80085bc <UART_WaitOnFlagUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d022      	beq.n	80084ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e6      	bne.n	80084a6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e063      	b.n	80085b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d149      	bne.n	800858e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008502:	2200      	movs	r2, #0
 8008504:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f857 	bl	80085bc <UART_WaitOnFlagUntilTimeout>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d03c      	beq.n	800858e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	623b      	str	r3, [r7, #32]
   return(result);
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008532:	633b      	str	r3, [r7, #48]	@ 0x30
 8008534:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e6      	bne.n	8008514 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3308      	adds	r3, #8
 800854c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	60fb      	str	r3, [r7, #12]
   return(result);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f023 0301 	bic.w	r3, r3, #1
 800855c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3308      	adds	r3, #8
 8008564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008566:	61fa      	str	r2, [r7, #28]
 8008568:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	69b9      	ldr	r1, [r7, #24]
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	617b      	str	r3, [r7, #20]
   return(result);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e5      	bne.n	8008546 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2220      	movs	r2, #32
 800857e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e012      	b.n	80085b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3758      	adds	r7, #88	@ 0x58
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	4613      	mov	r3, r2
 80085ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085cc:	e049      	b.n	8008662 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085d4:	d045      	beq.n	8008662 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085d6:	f7f9 f9e1 	bl	800199c <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d302      	bcc.n	80085ec <UART_WaitOnFlagUntilTimeout+0x30>
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e048      	b.n	8008682 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0304 	and.w	r3, r3, #4
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d031      	beq.n	8008662 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b08      	cmp	r3, #8
 800860a:	d110      	bne.n	800862e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2208      	movs	r2, #8
 8008612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 f95b 	bl	80088d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2208      	movs	r2, #8
 800861e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e029      	b.n	8008682 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800863c:	d111      	bne.n	8008662 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f941 	bl	80088d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2220      	movs	r2, #32
 8008652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e00f      	b.n	8008682 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69da      	ldr	r2, [r3, #28]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	4013      	ands	r3, r2
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	429a      	cmp	r2, r3
 8008670:	bf0c      	ite	eq
 8008672:	2301      	moveq	r3, #1
 8008674:	2300      	movne	r3, #0
 8008676:	b2db      	uxtb	r3, r3
 8008678:	461a      	mov	r2, r3
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	429a      	cmp	r2, r3
 800867e:	d0a6      	beq.n	80085ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800868c:	b480      	push	{r7}
 800868e:	b0a3      	sub	sp, #140	@ 0x8c
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	88fa      	ldrh	r2, [r7, #6]
 80086ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086be:	d10e      	bne.n	80086de <UART_Start_Receive_IT+0x52>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d105      	bne.n	80086d4 <UART_Start_Receive_IT+0x48>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80086ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086d2:	e02d      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	22ff      	movs	r2, #255	@ 0xff
 80086d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086dc:	e028      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10d      	bne.n	8008702 <UART_Start_Receive_IT+0x76>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d104      	bne.n	80086f8 <UART_Start_Receive_IT+0x6c>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	22ff      	movs	r2, #255	@ 0xff
 80086f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086f6:	e01b      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	227f      	movs	r2, #127	@ 0x7f
 80086fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008700:	e016      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800870a:	d10d      	bne.n	8008728 <UART_Start_Receive_IT+0x9c>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d104      	bne.n	800871e <UART_Start_Receive_IT+0x92>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	227f      	movs	r2, #127	@ 0x7f
 8008718:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800871c:	e008      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	223f      	movs	r2, #63	@ 0x3f
 8008722:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008726:	e003      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2222      	movs	r2, #34	@ 0x22
 800873c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3308      	adds	r3, #8
 8008746:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008752:	f043 0301 	orr.w	r3, r3, #1
 8008756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008764:	673a      	str	r2, [r7, #112]	@ 0x70
 8008766:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800876a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008772:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e3      	bne.n	8008740 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800877c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008780:	d14f      	bne.n	8008822 <UART_Start_Receive_IT+0x196>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008788:	88fa      	ldrh	r2, [r7, #6]
 800878a:	429a      	cmp	r2, r3
 800878c:	d349      	bcc.n	8008822 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008796:	d107      	bne.n	80087a8 <UART_Start_Receive_IT+0x11c>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d103      	bne.n	80087a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4a47      	ldr	r2, [pc, #284]	@ (80088c0 <UART_Start_Receive_IT+0x234>)
 80087a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80087a6:	e002      	b.n	80087ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4a46      	ldr	r2, [pc, #280]	@ (80088c4 <UART_Start_Receive_IT+0x238>)
 80087ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01a      	beq.n	80087ec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80087c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80087d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087da:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80087e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e4      	bne.n	80087b6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3308      	adds	r3, #8
 80087f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087f6:	e853 3f00 	ldrex	r3, [r3]
 80087fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008802:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3308      	adds	r3, #8
 800880a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800880c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800880e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008810:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008812:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008814:	e841 2300 	strex	r3, r2, [r1]
 8008818:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800881a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e5      	bne.n	80087ec <UART_Start_Receive_IT+0x160>
 8008820:	e046      	b.n	80088b0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800882a:	d107      	bne.n	800883c <UART_Start_Receive_IT+0x1b0>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d103      	bne.n	800883c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4a24      	ldr	r2, [pc, #144]	@ (80088c8 <UART_Start_Receive_IT+0x23c>)
 8008838:	675a      	str	r2, [r3, #116]	@ 0x74
 800883a:	e002      	b.n	8008842 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4a23      	ldr	r2, [pc, #140]	@ (80088cc <UART_Start_Receive_IT+0x240>)
 8008840:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d019      	beq.n	800887e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008852:	e853 3f00 	ldrex	r3, [r3]
 8008856:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800885e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008868:	637b      	str	r3, [r7, #52]	@ 0x34
 800886a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800886e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008870:	e841 2300 	strex	r3, r2, [r1]
 8008874:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e6      	bne.n	800884a <UART_Start_Receive_IT+0x1be>
 800887c:	e018      	b.n	80088b0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	613b      	str	r3, [r7, #16]
   return(result);
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f043 0320 	orr.w	r3, r3, #32
 8008892:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800889c:	623b      	str	r3, [r7, #32]
 800889e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	69f9      	ldr	r1, [r7, #28]
 80088a2:	6a3a      	ldr	r2, [r7, #32]
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e6      	bne.n	800887e <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	378c      	adds	r7, #140	@ 0x8c
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	080090fd 	.word	0x080090fd
 80088c4:	08008d99 	.word	0x08008d99
 80088c8:	08008bdd 	.word	0x08008bdd
 80088cc:	08008a21 	.word	0x08008a21

080088d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b095      	sub	sp, #84	@ 0x54
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80088f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e6      	bne.n	80088d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3308      	adds	r3, #8
 8008910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	61fb      	str	r3, [r7, #28]
   return(result);
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3308      	adds	r3, #8
 800892c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800892e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008930:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800893c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e3      	bne.n	800890a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008946:	2b01      	cmp	r3, #1
 8008948:	d118      	bne.n	800897c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	60bb      	str	r3, [r7, #8]
   return(result);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f023 0310 	bic.w	r3, r3, #16
 800895e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008968:	61bb      	str	r3, [r7, #24]
 800896a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6979      	ldr	r1, [r7, #20]
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	613b      	str	r3, [r7, #16]
   return(result);
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e6      	bne.n	800894a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008990:	bf00      	nop
 8008992:	3754      	adds	r7, #84	@ 0x54
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f7ff f9a0 	bl	8007d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b088      	sub	sp, #32
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089e4:	61fb      	str	r3, [r7, #28]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f2:	6979      	ldr	r1, [r7, #20]
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	613b      	str	r3, [r7, #16]
   return(result);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1e6      	bne.n	80089d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2220      	movs	r2, #32
 8008a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff f96b 	bl	8007cec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a16:	bf00      	nop
 8008a18:	3720      	adds	r7, #32
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b09c      	sub	sp, #112	@ 0x70
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a38:	2b22      	cmp	r3, #34	@ 0x22
 8008a3a:	f040 80be 	bne.w	8008bba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008a44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a4c:	b2d9      	uxtb	r1, r3
 8008a4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a58:	400a      	ands	r2, r1
 8008a5a:	b2d2      	uxtb	r2, r2
 8008a5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	3b01      	subs	r3, #1
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f040 80a3 	bne.w	8008bce <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008aa8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008aac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e6      	bne.n	8008a88 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008acc:	f023 0301 	bic.w	r3, r3, #1
 8008ad0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008ada:	647a      	str	r2, [r7, #68]	@ 0x44
 8008adc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ae0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e5      	bne.n	8008aba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a34      	ldr	r2, [pc, #208]	@ (8008bd8 <UART_RxISR_8BIT+0x1b8>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d01f      	beq.n	8008b4c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d018      	beq.n	8008b4c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b22:	e853 3f00 	ldrex	r3, [r3]
 8008b26:	623b      	str	r3, [r7, #32]
   return(result);
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	461a      	mov	r2, r3
 8008b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e6      	bne.n	8008b1a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d12e      	bne.n	8008bb2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0310 	bic.w	r3, r3, #16
 8008b6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b78:	61fb      	str	r3, [r7, #28]
 8008b7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	69b9      	ldr	r1, [r7, #24]
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	617b      	str	r3, [r7, #20]
   return(result);
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e6      	bne.n	8008b5a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	f003 0310 	and.w	r3, r3, #16
 8008b96:	2b10      	cmp	r3, #16
 8008b98:	d103      	bne.n	8008ba2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2210      	movs	r2, #16
 8008ba0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff f8b2 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bb0:	e00d      	b.n	8008bce <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7f8 f92c 	bl	8000e10 <HAL_UART_RxCpltCallback>
}
 8008bb8:	e009      	b.n	8008bce <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	8b1b      	ldrh	r3, [r3, #24]
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f042 0208 	orr.w	r2, r2, #8
 8008bca:	b292      	uxth	r2, r2
 8008bcc:	831a      	strh	r2, [r3, #24]
}
 8008bce:	bf00      	nop
 8008bd0:	3770      	adds	r7, #112	@ 0x70
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	40008000 	.word	0x40008000

08008bdc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b09c      	sub	sp, #112	@ 0x70
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bf4:	2b22      	cmp	r3, #34	@ 0x22
 8008bf6:	f040 80be 	bne.w	8008d76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008c00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c08:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008c0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c12:	4013      	ands	r3, r2
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c1e:	1c9a      	adds	r2, r3, #2
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f040 80a3 	bne.w	8008d8a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c58:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c62:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c64:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e6      	bne.n	8008c44 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c88:	f023 0301 	bic.w	r3, r3, #1
 8008c8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3308      	adds	r3, #8
 8008c94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008c96:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e5      	bne.n	8008c76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a34      	ldr	r2, [pc, #208]	@ (8008d94 <UART_RxISR_16BIT+0x1b8>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d01f      	beq.n	8008d08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d018      	beq.n	8008d08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	e853 3f00 	ldrex	r3, [r3]
 8008ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cf6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cfc:	e841 2300 	strex	r3, r2, [r1]
 8008d00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e6      	bne.n	8008cd6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d12e      	bne.n	8008d6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	e853 3f00 	ldrex	r3, [r3]
 8008d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f023 0310 	bic.w	r3, r3, #16
 8008d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	461a      	mov	r2, r3
 8008d32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d34:	61bb      	str	r3, [r7, #24]
 8008d36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6979      	ldr	r1, [r7, #20]
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	613b      	str	r3, [r7, #16]
   return(result);
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e6      	bne.n	8008d16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	f003 0310 	and.w	r3, r3, #16
 8008d52:	2b10      	cmp	r3, #16
 8008d54:	d103      	bne.n	8008d5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2210      	movs	r2, #16
 8008d5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7fe ffd4 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d6c:	e00d      	b.n	8008d8a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7f8 f84e 	bl	8000e10 <HAL_UART_RxCpltCallback>
}
 8008d74:	e009      	b.n	8008d8a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	8b1b      	ldrh	r3, [r3, #24]
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0208 	orr.w	r2, r2, #8
 8008d86:	b292      	uxth	r2, r2
 8008d88:	831a      	strh	r2, [r3, #24]
}
 8008d8a:	bf00      	nop
 8008d8c:	3770      	adds	r7, #112	@ 0x70
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	40008000 	.word	0x40008000

08008d98 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b0ac      	sub	sp, #176	@ 0xb0
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008da6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dce:	2b22      	cmp	r3, #34	@ 0x22
 8008dd0:	f040 8182 	bne.w	80090d8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008dda:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dde:	e125      	b.n	800902c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008de6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008dea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008dee:	b2d9      	uxtb	r1, r3
 8008df0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dfa:	400a      	ands	r2, r1
 8008dfc:	b2d2      	uxtb	r2, r2
 8008dfe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e04:	1c5a      	adds	r2, r3, #1
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	3b01      	subs	r3, #1
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e2a:	f003 0307 	and.w	r3, r3, #7
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d053      	beq.n	8008eda <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d011      	beq.n	8008e62 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00b      	beq.n	8008e62 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e58:	f043 0201 	orr.w	r2, r3, #1
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d011      	beq.n	8008e92 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e88:	f043 0204 	orr.w	r2, r3, #4
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d011      	beq.n	8008ec2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00b      	beq.n	8008ec2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2204      	movs	r2, #4
 8008eb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eb8:	f043 0202 	orr.w	r2, r3, #2
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d006      	beq.n	8008eda <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7fe ff17 	bl	8007d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f040 80a2 	bne.w	800902c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008efc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f0c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008f10:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008f18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e4      	bne.n	8008ee8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008f2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f34:	f023 0301 	bic.w	r3, r3, #1
 8008f38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3308      	adds	r3, #8
 8008f42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f46:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008f48:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008f4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e1      	bne.n	8008f1e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a60      	ldr	r2, [pc, #384]	@ (80090f4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d021      	beq.n	8008fbc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d01a      	beq.n	8008fbc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f8e:	e853 3f00 	ldrex	r3, [r3]
 8008f92:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008fa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008faa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fb0:	e841 2300 	strex	r3, r2, [r1]
 8008fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e4      	bne.n	8008f86 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d130      	bne.n	8009026 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd2:	e853 3f00 	ldrex	r3, [r3]
 8008fd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fda:	f023 0310 	bic.w	r3, r3, #16
 8008fde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ff2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ff4:	e841 2300 	strex	r3, r2, [r1]
 8008ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e4      	bne.n	8008fca <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	f003 0310 	and.w	r3, r3, #16
 800900a:	2b10      	cmp	r3, #16
 800900c:	d103      	bne.n	8009016 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2210      	movs	r2, #16
 8009014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7fe fe78 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
 8009024:	e002      	b.n	800902c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7f7 fef2 	bl	8000e10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800902c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009030:	2b00      	cmp	r3, #0
 8009032:	d006      	beq.n	8009042 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009038:	f003 0320 	and.w	r3, r3, #32
 800903c:	2b00      	cmp	r3, #0
 800903e:	f47f aecf 	bne.w	8008de0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009048:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800904c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009050:	2b00      	cmp	r3, #0
 8009052:	d04b      	beq.n	80090ec <UART_RxISR_8BIT_FIFOEN+0x354>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800905a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800905e:	429a      	cmp	r2, r3
 8009060:	d244      	bcs.n	80090ec <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	61fb      	str	r3, [r7, #28]
   return(result);
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3308      	adds	r3, #8
 8009082:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009086:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009088:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800908c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e3      	bne.n	8009062 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a16      	ldr	r2, [pc, #88]	@ (80090f8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800909e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f043 0320 	orr.w	r3, r3, #32
 80090b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	461a      	mov	r2, r3
 80090be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090c2:	61bb      	str	r3, [r7, #24]
 80090c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	6979      	ldr	r1, [r7, #20]
 80090c8:	69ba      	ldr	r2, [r7, #24]
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	613b      	str	r3, [r7, #16]
   return(result);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e4      	bne.n	80090a0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090d6:	e009      	b.n	80090ec <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	8b1b      	ldrh	r3, [r3, #24]
 80090de:	b29a      	uxth	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f042 0208 	orr.w	r2, r2, #8
 80090e8:	b292      	uxth	r2, r2
 80090ea:	831a      	strh	r2, [r3, #24]
}
 80090ec:	bf00      	nop
 80090ee:	37b0      	adds	r7, #176	@ 0xb0
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	40008000 	.word	0x40008000
 80090f8:	08008a21 	.word	0x08008a21

080090fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b0ae      	sub	sp, #184	@ 0xb8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800910a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009132:	2b22      	cmp	r3, #34	@ 0x22
 8009134:	f040 8186 	bne.w	8009444 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800913e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009142:	e129      	b.n	8009398 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800914a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009156:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800915a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800915e:	4013      	ands	r3, r2
 8009160:	b29a      	uxth	r2, r3
 8009162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009166:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800916c:	1c9a      	adds	r2, r3, #2
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800918e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	2b00      	cmp	r3, #0
 8009198:	d053      	beq.n	8009242 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800919a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d011      	beq.n	80091ca <UART_RxISR_16BIT_FIFOEN+0xce>
 80091a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00b      	beq.n	80091ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2201      	movs	r2, #1
 80091b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091c0:	f043 0201 	orr.w	r2, r3, #1
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d011      	beq.n	80091fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 80091d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00b      	beq.n	80091fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2202      	movs	r2, #2
 80091e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f0:	f043 0204 	orr.w	r2, r3, #4
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091fe:	f003 0304 	and.w	r3, r3, #4
 8009202:	2b00      	cmp	r3, #0
 8009204:	d011      	beq.n	800922a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00b      	beq.n	800922a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2204      	movs	r2, #4
 8009218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009220:	f043 0202 	orr.w	r2, r3, #2
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009230:	2b00      	cmp	r3, #0
 8009232:	d006      	beq.n	8009242 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f7fe fd63 	bl	8007d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009248:	b29b      	uxth	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	f040 80a4 	bne.w	8009398 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800925e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009264:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	461a      	mov	r2, r3
 800926e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009272:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009276:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800927a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800927e:	e841 2300 	strex	r3, r2, [r1]
 8009282:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1e2      	bne.n	8009250 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3308      	adds	r3, #8
 8009290:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009292:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009294:	e853 3f00 	ldrex	r3, [r3]
 8009298:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800929a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800929c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092a0:	f023 0301 	bic.w	r3, r3, #1
 80092a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3308      	adds	r3, #8
 80092ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80092b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e1      	bne.n	800928a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a60      	ldr	r2, [pc, #384]	@ (8009460 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d021      	beq.n	8009328 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d01a      	beq.n	8009328 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009302:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	461a      	mov	r2, r3
 8009310:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009314:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009316:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800931a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800931c:	e841 2300 	strex	r3, r2, [r1]
 8009320:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e4      	bne.n	80092f2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800932c:	2b01      	cmp	r3, #1
 800932e:	d130      	bne.n	8009392 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009346:	f023 0310 	bic.w	r3, r3, #16
 800934a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009358:	647b      	str	r3, [r7, #68]	@ 0x44
 800935a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800935e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009360:	e841 2300 	strex	r3, r2, [r1]
 8009364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1e4      	bne.n	8009336 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	f003 0310 	and.w	r3, r3, #16
 8009376:	2b10      	cmp	r3, #16
 8009378:	d103      	bne.n	8009382 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2210      	movs	r2, #16
 8009380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7fe fcc2 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
 8009390:	e002      	b.n	8009398 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7f7 fd3c 	bl	8000e10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009398:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800939c:	2b00      	cmp	r3, #0
 800939e:	d006      	beq.n	80093ae <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80093a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093a4:	f003 0320 	and.w	r3, r3, #32
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f47f aecb 	bne.w	8009144 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093b4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d04b      	beq.n	8009458 <UART_RxISR_16BIT_FIFOEN+0x35c>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093c6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d244      	bcs.n	8009458 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3308      	adds	r3, #8
 80093d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	623b      	str	r3, [r7, #32]
   return(result);
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3308      	adds	r3, #8
 80093ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80093f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80093f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e3      	bne.n	80093ce <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a16      	ldr	r2, [pc, #88]	@ (8009464 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800940a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	e853 3f00 	ldrex	r3, [r3]
 8009418:	60fb      	str	r3, [r7, #12]
   return(result);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f043 0320 	orr.w	r3, r3, #32
 8009420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	461a      	mov	r2, r3
 800942a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800942e:	61fb      	str	r3, [r7, #28]
 8009430:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	69b9      	ldr	r1, [r7, #24]
 8009434:	69fa      	ldr	r2, [r7, #28]
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	617b      	str	r3, [r7, #20]
   return(result);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e4      	bne.n	800940c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009442:	e009      	b.n	8009458 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	8b1b      	ldrh	r3, [r3, #24]
 800944a:	b29a      	uxth	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f042 0208 	orr.w	r2, r2, #8
 8009454:	b292      	uxth	r2, r2
 8009456:	831a      	strh	r2, [r3, #24]
}
 8009458:	bf00      	nop
 800945a:	37b8      	adds	r7, #184	@ 0xb8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	40008000 	.word	0x40008000
 8009464:	08008bdd 	.word	0x08008bdd

08009468 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d101      	bne.n	80094ba <HAL_UARTEx_DisableFifoMode+0x16>
 80094b6:	2302      	movs	r3, #2
 80094b8:	e027      	b.n	800950a <HAL_UARTEx_DisableFifoMode+0x66>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2224      	movs	r2, #36	@ 0x24
 80094c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 0201 	bic.w	r2, r2, #1
 80094e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009526:	2b01      	cmp	r3, #1
 8009528:	d101      	bne.n	800952e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800952a:	2302      	movs	r3, #2
 800952c:	e02d      	b.n	800958a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2224      	movs	r2, #36	@ 0x24
 800953a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 0201 	bic.w	r2, r2, #1
 8009554:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f850 	bl	8009610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2220      	movs	r2, #32
 800957c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d101      	bne.n	80095aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095a6:	2302      	movs	r3, #2
 80095a8:	e02d      	b.n	8009606 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2224      	movs	r2, #36	@ 0x24
 80095b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0201 	bic.w	r2, r2, #1
 80095d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f812 	bl	8009610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800961c:	2b00      	cmp	r3, #0
 800961e:	d108      	bne.n	8009632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009630:	e031      	b.n	8009696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009632:	2308      	movs	r3, #8
 8009634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009636:	2308      	movs	r3, #8
 8009638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	0e5b      	lsrs	r3, r3, #25
 8009642:	b2db      	uxtb	r3, r3
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	0f5b      	lsrs	r3, r3, #29
 8009652:	b2db      	uxtb	r3, r3
 8009654:	f003 0307 	and.w	r3, r3, #7
 8009658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	7b3a      	ldrb	r2, [r7, #12]
 800965e:	4911      	ldr	r1, [pc, #68]	@ (80096a4 <UARTEx_SetNbDataToProcess+0x94>)
 8009660:	5c8a      	ldrb	r2, [r1, r2]
 8009662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009666:	7b3a      	ldrb	r2, [r7, #12]
 8009668:	490f      	ldr	r1, [pc, #60]	@ (80096a8 <UARTEx_SetNbDataToProcess+0x98>)
 800966a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800966c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009670:	b29a      	uxth	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	7b7a      	ldrb	r2, [r7, #13]
 800967c:	4909      	ldr	r1, [pc, #36]	@ (80096a4 <UARTEx_SetNbDataToProcess+0x94>)
 800967e:	5c8a      	ldrb	r2, [r1, r2]
 8009680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009684:	7b7a      	ldrb	r2, [r7, #13]
 8009686:	4908      	ldr	r1, [pc, #32]	@ (80096a8 <UARTEx_SetNbDataToProcess+0x98>)
 8009688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800968a:	fb93 f3f2 	sdiv	r3, r3, r2
 800968e:	b29a      	uxth	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009696:	bf00      	nop
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	0800d94c 	.word	0x0800d94c
 80096a8:	0800d954 	.word	0x0800d954

080096ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096ac:	b084      	sub	sp, #16
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	f107 001c 	add.w	r0, r7, #28
 80096ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f001 fa1c 	bl	800ab08 <USB_CoreReset>
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80096d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d106      	bne.n	80096e8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80096e6:	e005      	b.n	80096f4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009700:	b004      	add	sp, #16
 8009702:	4770      	bx	lr

08009704 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	2b02      	cmp	r3, #2
 8009716:	d165      	bne.n	80097e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	4a3e      	ldr	r2, [pc, #248]	@ (8009814 <USB_SetTurnaroundTime+0x110>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d906      	bls.n	800972e <USB_SetTurnaroundTime+0x2a>
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	4a3d      	ldr	r2, [pc, #244]	@ (8009818 <USB_SetTurnaroundTime+0x114>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d202      	bcs.n	800972e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009728:	230f      	movs	r3, #15
 800972a:	617b      	str	r3, [r7, #20]
 800972c:	e05c      	b.n	80097e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	4a39      	ldr	r2, [pc, #228]	@ (8009818 <USB_SetTurnaroundTime+0x114>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d306      	bcc.n	8009744 <USB_SetTurnaroundTime+0x40>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	4a38      	ldr	r2, [pc, #224]	@ (800981c <USB_SetTurnaroundTime+0x118>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d202      	bcs.n	8009744 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800973e:	230e      	movs	r3, #14
 8009740:	617b      	str	r3, [r7, #20]
 8009742:	e051      	b.n	80097e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	4a35      	ldr	r2, [pc, #212]	@ (800981c <USB_SetTurnaroundTime+0x118>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d306      	bcc.n	800975a <USB_SetTurnaroundTime+0x56>
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	4a34      	ldr	r2, [pc, #208]	@ (8009820 <USB_SetTurnaroundTime+0x11c>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d202      	bcs.n	800975a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009754:	230d      	movs	r3, #13
 8009756:	617b      	str	r3, [r7, #20]
 8009758:	e046      	b.n	80097e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	4a30      	ldr	r2, [pc, #192]	@ (8009820 <USB_SetTurnaroundTime+0x11c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d306      	bcc.n	8009770 <USB_SetTurnaroundTime+0x6c>
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	4a2f      	ldr	r2, [pc, #188]	@ (8009824 <USB_SetTurnaroundTime+0x120>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d802      	bhi.n	8009770 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800976a:	230c      	movs	r3, #12
 800976c:	617b      	str	r3, [r7, #20]
 800976e:	e03b      	b.n	80097e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	4a2c      	ldr	r2, [pc, #176]	@ (8009824 <USB_SetTurnaroundTime+0x120>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d906      	bls.n	8009786 <USB_SetTurnaroundTime+0x82>
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	4a2b      	ldr	r2, [pc, #172]	@ (8009828 <USB_SetTurnaroundTime+0x124>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d802      	bhi.n	8009786 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009780:	230b      	movs	r3, #11
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	e030      	b.n	80097e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	4a27      	ldr	r2, [pc, #156]	@ (8009828 <USB_SetTurnaroundTime+0x124>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d906      	bls.n	800979c <USB_SetTurnaroundTime+0x98>
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	4a26      	ldr	r2, [pc, #152]	@ (800982c <USB_SetTurnaroundTime+0x128>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d802      	bhi.n	800979c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009796:	230a      	movs	r3, #10
 8009798:	617b      	str	r3, [r7, #20]
 800979a:	e025      	b.n	80097e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	4a23      	ldr	r2, [pc, #140]	@ (800982c <USB_SetTurnaroundTime+0x128>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d906      	bls.n	80097b2 <USB_SetTurnaroundTime+0xae>
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4a22      	ldr	r2, [pc, #136]	@ (8009830 <USB_SetTurnaroundTime+0x12c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d202      	bcs.n	80097b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80097ac:	2309      	movs	r3, #9
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	e01a      	b.n	80097e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	4a1e      	ldr	r2, [pc, #120]	@ (8009830 <USB_SetTurnaroundTime+0x12c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d306      	bcc.n	80097c8 <USB_SetTurnaroundTime+0xc4>
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009834 <USB_SetTurnaroundTime+0x130>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d802      	bhi.n	80097c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80097c2:	2308      	movs	r3, #8
 80097c4:	617b      	str	r3, [r7, #20]
 80097c6:	e00f      	b.n	80097e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009834 <USB_SetTurnaroundTime+0x130>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d906      	bls.n	80097de <USB_SetTurnaroundTime+0xda>
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	4a19      	ldr	r2, [pc, #100]	@ (8009838 <USB_SetTurnaroundTime+0x134>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d202      	bcs.n	80097de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80097d8:	2307      	movs	r3, #7
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	e004      	b.n	80097e8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80097de:	2306      	movs	r3, #6
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	e001      	b.n	80097e8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80097e4:	2309      	movs	r3, #9
 80097e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	68da      	ldr	r2, [r3, #12]
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	029b      	lsls	r3, r3, #10
 80097fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009800:	431a      	orrs	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	371c      	adds	r7, #28
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	00d8acbf 	.word	0x00d8acbf
 8009818:	00e4e1c0 	.word	0x00e4e1c0
 800981c:	00f42400 	.word	0x00f42400
 8009820:	01067380 	.word	0x01067380
 8009824:	011a499f 	.word	0x011a499f
 8009828:	01312cff 	.word	0x01312cff
 800982c:	014ca43f 	.word	0x014ca43f
 8009830:	016e3600 	.word	0x016e3600
 8009834:	01a6ab1f 	.word	0x01a6ab1f
 8009838:	01e84800 	.word	0x01e84800

0800983c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f043 0201 	orr.w	r2, r3, #1
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f023 0201 	bic.w	r2, r3, #1
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800988c:	2300      	movs	r3, #0
 800988e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d115      	bne.n	80098ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098ae:	2001      	movs	r0, #1
 80098b0:	f7f8 f880 	bl	80019b4 <HAL_Delay>
      ms++;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	3301      	adds	r3, #1
 80098b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f001 f8ab 	bl	800aa16 <USB_GetMode>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d01e      	beq.n	8009904 <USB_SetCurrentMode+0x84>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2b31      	cmp	r3, #49	@ 0x31
 80098ca:	d9f0      	bls.n	80098ae <USB_SetCurrentMode+0x2e>
 80098cc:	e01a      	b.n	8009904 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d115      	bne.n	8009900 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098e0:	2001      	movs	r0, #1
 80098e2:	f7f8 f867 	bl	80019b4 <HAL_Delay>
      ms++;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3301      	adds	r3, #1
 80098ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f001 f892 	bl	800aa16 <USB_GetMode>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d005      	beq.n	8009904 <USB_SetCurrentMode+0x84>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2b31      	cmp	r3, #49	@ 0x31
 80098fc:	d9f0      	bls.n	80098e0 <USB_SetCurrentMode+0x60>
 80098fe:	e001      	b.n	8009904 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e005      	b.n	8009910 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b32      	cmp	r3, #50	@ 0x32
 8009908:	d101      	bne.n	800990e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e000      	b.n	8009910 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009918:	b084      	sub	sp, #16
 800991a:	b580      	push	{r7, lr}
 800991c:	b086      	sub	sp, #24
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009932:	2300      	movs	r3, #0
 8009934:	613b      	str	r3, [r7, #16]
 8009936:	e009      	b.n	800994c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	3340      	adds	r3, #64	@ 0x40
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	2200      	movs	r2, #0
 8009944:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	3301      	adds	r3, #1
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	2b0e      	cmp	r3, #14
 8009950:	d9f2      	bls.n	8009938 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009954:	2b00      	cmp	r3, #0
 8009956:	d11c      	bne.n	8009992 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009966:	f043 0302 	orr.w	r3, r3, #2
 800996a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009970:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	e005      	b.n	800999e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009996:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099a4:	461a      	mov	r2, r3
 80099a6:	2300      	movs	r3, #0
 80099a8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099aa:	2103      	movs	r1, #3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f959 	bl	8009c64 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099b2:	2110      	movs	r1, #16
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f8f1 	bl	8009b9c <USB_FlushTxFifo>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f91d 	bl	8009c04 <USB_FlushRxFifo>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099da:	461a      	mov	r2, r3
 80099dc:	2300      	movs	r3, #0
 80099de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099e6:	461a      	mov	r2, r3
 80099e8:	2300      	movs	r3, #0
 80099ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099f2:	461a      	mov	r2, r3
 80099f4:	2300      	movs	r3, #0
 80099f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099f8:	2300      	movs	r3, #0
 80099fa:	613b      	str	r3, [r7, #16]
 80099fc:	e043      	b.n	8009a86 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a14:	d118      	bne.n	8009a48 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a28:	461a      	mov	r2, r3
 8009a2a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	e013      	b.n	8009a5a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	015a      	lsls	r2, r3, #5
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a44:	6013      	str	r3, [r2, #0]
 8009a46:	e008      	b.n	8009a5a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a54:	461a      	mov	r2, r3
 8009a56:	2300      	movs	r3, #0
 8009a58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a66:	461a      	mov	r2, r3
 8009a68:	2300      	movs	r3, #0
 8009a6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a78:	461a      	mov	r2, r3
 8009a7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	3301      	adds	r3, #1
 8009a84:	613b      	str	r3, [r7, #16]
 8009a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d3b7      	bcc.n	80099fe <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a8e:	2300      	movs	r3, #0
 8009a90:	613b      	str	r3, [r7, #16]
 8009a92:	e043      	b.n	8009b1c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009aaa:	d118      	bne.n	8009ade <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10a      	bne.n	8009ac8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	015a      	lsls	r2, r3, #5
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	4413      	add	r3, r2
 8009aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	e013      	b.n	8009af0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	e008      	b.n	8009af0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aea:	461a      	mov	r2, r3
 8009aec:	2300      	movs	r3, #0
 8009aee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009afc:	461a      	mov	r2, r3
 8009afe:	2300      	movs	r3, #0
 8009b00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	613b      	str	r3, [r7, #16]
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d3b7      	bcc.n	8009a94 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009b44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	f043 0210 	orr.w	r2, r3, #16
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	699a      	ldr	r2, [r3, #24]
 8009b56:	4b10      	ldr	r3, [pc, #64]	@ (8009b98 <USB_DevInit+0x280>)
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d005      	beq.n	8009b70 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	f043 0208 	orr.w	r2, r3, #8
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d107      	bne.n	8009b86 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b7e:	f043 0304 	orr.w	r3, r3, #4
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3718      	adds	r7, #24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b92:	b004      	add	sp, #16
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	803c3800 	.word	0x803c3800

08009b9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3301      	adds	r3, #1
 8009bae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4a13      	ldr	r2, [pc, #76]	@ (8009c00 <USB_FlushTxFifo+0x64>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d901      	bls.n	8009bbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e01b      	b.n	8009bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	daf2      	bge.n	8009baa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	019b      	lsls	r3, r3, #6
 8009bcc:	f043 0220 	orr.w	r2, r3, #32
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4a08      	ldr	r2, [pc, #32]	@ (8009c00 <USB_FlushTxFifo+0x64>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d901      	bls.n	8009be6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e006      	b.n	8009bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b20      	cmp	r3, #32
 8009bf0:	d0f0      	beq.n	8009bd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	00030d40 	.word	0x00030d40

08009c04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3301      	adds	r3, #1
 8009c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4a11      	ldr	r2, [pc, #68]	@ (8009c60 <USB_FlushRxFifo+0x5c>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d901      	bls.n	8009c22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e018      	b.n	8009c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	daf2      	bge.n	8009c10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2210      	movs	r2, #16
 8009c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4a08      	ldr	r2, [pc, #32]	@ (8009c60 <USB_FlushRxFifo+0x5c>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d901      	bls.n	8009c46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e006      	b.n	8009c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0310 	and.w	r3, r3, #16
 8009c4e:	2b10      	cmp	r3, #16
 8009c50:	d0f0      	beq.n	8009c34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	00030d40 	.word	0x00030d40

08009c64 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c84:	4313      	orrs	r3, r2
 8009c86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b087      	sub	sp, #28
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f003 0306 	and.w	r3, r3, #6
 8009cae:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d002      	beq.n	8009cbc <USB_GetDevSpeed+0x26>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b06      	cmp	r3, #6
 8009cba:	d102      	bne.n	8009cc2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	75fb      	strb	r3, [r7, #23]
 8009cc0:	e001      	b.n	8009cc6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009cc2:	230f      	movs	r3, #15
 8009cc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	371c      	adds	r7, #28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	785b      	ldrb	r3, [r3, #1]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d13a      	bne.n	8009d66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cf6:	69da      	ldr	r2, [r3, #28]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	f003 030f 	and.w	r3, r3, #15
 8009d00:	2101      	movs	r1, #1
 8009d02:	fa01 f303 	lsl.w	r3, r1, r3
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	68f9      	ldr	r1, [r7, #12]
 8009d0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d155      	bne.n	8009dd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	791b      	ldrb	r3, [r3, #4]
 8009d42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	059b      	lsls	r3, r3, #22
 8009d4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	0151      	lsls	r1, r2, #5
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	440a      	add	r2, r1
 8009d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d62:	6013      	str	r3, [r2, #0]
 8009d64:	e036      	b.n	8009dd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d6c:	69da      	ldr	r2, [r3, #28]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	f003 030f 	and.w	r3, r3, #15
 8009d76:	2101      	movs	r1, #1
 8009d78:	fa01 f303 	lsl.w	r3, r1, r3
 8009d7c:	041b      	lsls	r3, r3, #16
 8009d7e:	68f9      	ldr	r1, [r7, #12]
 8009d80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d84:	4313      	orrs	r3, r2
 8009d86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d11a      	bne.n	8009dd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	791b      	ldrb	r3, [r3, #4]
 8009db8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	0151      	lsls	r1, r2, #5
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	440a      	add	r2, r1
 8009dc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
	...

08009de4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	785b      	ldrb	r3, [r3, #1]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d161      	bne.n	8009ec4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e16:	d11f      	bne.n	8009e58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	0151      	lsls	r1, r2, #5
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	440a      	add	r2, r1
 8009e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	0151      	lsls	r1, r2, #5
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	440a      	add	r2, r1
 8009e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	2101      	movs	r1, #1
 8009e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	43db      	mvns	r3, r3
 8009e72:	68f9      	ldr	r1, [r7, #12]
 8009e74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e78:	4013      	ands	r3, r2
 8009e7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	f003 030f 	and.w	r3, r3, #15
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	43db      	mvns	r3, r3
 8009e96:	68f9      	ldr	r1, [r7, #12]
 8009e98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	015a      	lsls	r2, r3, #5
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	0159      	lsls	r1, r3, #5
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	440b      	add	r3, r1
 8009eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4b35      	ldr	r3, [pc, #212]	@ (8009f94 <USB_DeactivateEndpoint+0x1b0>)
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	600b      	str	r3, [r1, #0]
 8009ec2:	e060      	b.n	8009f86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	015a      	lsls	r2, r3, #5
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009eda:	d11f      	bne.n	8009f1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	0151      	lsls	r1, r2, #5
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	440a      	add	r2, r1
 8009ef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ef6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009efa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	0151      	lsls	r1, r2, #5
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	440a      	add	r2, r1
 8009f12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	f003 030f 	and.w	r3, r3, #15
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f32:	041b      	lsls	r3, r3, #16
 8009f34:	43db      	mvns	r3, r3
 8009f36:	68f9      	ldr	r1, [r7, #12]
 8009f38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f46:	69da      	ldr	r2, [r3, #28]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	f003 030f 	and.w	r3, r3, #15
 8009f50:	2101      	movs	r1, #1
 8009f52:	fa01 f303 	lsl.w	r3, r1, r3
 8009f56:	041b      	lsls	r3, r3, #16
 8009f58:	43db      	mvns	r3, r3
 8009f5a:	68f9      	ldr	r1, [r7, #12]
 8009f5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f60:	4013      	ands	r3, r2
 8009f62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	0159      	lsls	r1, r3, #5
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	440b      	add	r3, r1
 8009f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f7e:	4619      	mov	r1, r3
 8009f80:	4b05      	ldr	r3, [pc, #20]	@ (8009f98 <USB_DeactivateEndpoint+0x1b4>)
 8009f82:	4013      	ands	r3, r2
 8009f84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	ec337800 	.word	0xec337800
 8009f98:	eff37800 	.word	0xeff37800

08009f9c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	785b      	ldrb	r3, [r3, #1]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	f040 8128 	bne.w	800a20a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d132      	bne.n	800a028 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	0151      	lsls	r1, r2, #5
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	440a      	add	r2, r1
 8009fd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fdc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009fe0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009fe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	0151      	lsls	r1, r2, #5
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	440a      	add	r2, r1
 8009ffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a000:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	0151      	lsls	r1, r2, #5
 800a018:	697a      	ldr	r2, [r7, #20]
 800a01a:	440a      	add	r2, r1
 800a01c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a020:	0cdb      	lsrs	r3, r3, #19
 800a022:	04db      	lsls	r3, r3, #19
 800a024:	6113      	str	r3, [r2, #16]
 800a026:	e092      	b.n	800a14e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	0151      	lsls	r1, r2, #5
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	440a      	add	r2, r1
 800a03e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a042:	0cdb      	lsrs	r3, r3, #19
 800a044:	04db      	lsls	r3, r3, #19
 800a046:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	0151      	lsls	r1, r2, #5
 800a05a:	697a      	ldr	r2, [r7, #20]
 800a05c:	440a      	add	r2, r1
 800a05e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a062:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a066:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a06a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d11a      	bne.n	800a0a8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	691a      	ldr	r2, [r3, #16]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d903      	bls.n	800a086 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	0151      	lsls	r1, r2, #5
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	440a      	add	r2, r1
 800a09c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0a4:	6113      	str	r3, [r2, #16]
 800a0a6:	e01b      	b.n	800a0e0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	6919      	ldr	r1, [r3, #16]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	440b      	add	r3, r1
 800a0c0:	1e59      	subs	r1, r3, #1
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0ca:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0cc:	4b8d      	ldr	r3, [pc, #564]	@ (800a304 <USB_EPStartXfer+0x368>)
 800a0ce:	400b      	ands	r3, r1
 800a0d0:	6939      	ldr	r1, [r7, #16]
 800a0d2:	0148      	lsls	r0, r1, #5
 800a0d4:	6979      	ldr	r1, [r7, #20]
 800a0d6:	4401      	add	r1, r0
 800a0d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	015a      	lsls	r2, r3, #5
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ec:	691a      	ldr	r2, [r3, #16]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0f6:	6939      	ldr	r1, [r7, #16]
 800a0f8:	0148      	lsls	r0, r1, #5
 800a0fa:	6979      	ldr	r1, [r7, #20]
 800a0fc:	4401      	add	r1, r0
 800a0fe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a102:	4313      	orrs	r3, r2
 800a104:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	791b      	ldrb	r3, [r3, #4]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d11f      	bne.n	800a14e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	0151      	lsls	r1, r2, #5
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	440a      	add	r2, r1
 800a124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a128:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a12c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	0151      	lsls	r1, r2, #5
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	440a      	add	r2, r1
 800a144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a148:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a14c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	015a      	lsls	r2, r3, #5
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	4413      	add	r3, r2
 800a156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	0151      	lsls	r1, r2, #5
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	440a      	add	r2, r1
 800a164:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a168:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a16c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	791b      	ldrb	r3, [r3, #4]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d015      	beq.n	800a1a2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f000 8139 	beq.w	800a3f2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a186:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	f003 030f 	and.w	r3, r3, #15
 800a190:	2101      	movs	r1, #1
 800a192:	fa01 f303 	lsl.w	r3, r1, r3
 800a196:	6979      	ldr	r1, [r7, #20]
 800a198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a19c:	4313      	orrs	r3, r2
 800a19e:	634b      	str	r3, [r1, #52]	@ 0x34
 800a1a0:	e127      	b.n	800a3f2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d110      	bne.n	800a1d4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	0151      	lsls	r1, r2, #5
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	440a      	add	r2, r1
 800a1c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a1d0:	6013      	str	r3, [r2, #0]
 800a1d2:	e00f      	b.n	800a1f4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	0151      	lsls	r1, r2, #5
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	440a      	add	r2, r1
 800a1ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1f2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	68d9      	ldr	r1, [r3, #12]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781a      	ldrb	r2, [r3, #0]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	b29b      	uxth	r3, r3
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f9a6 	bl	800a554 <USB_WritePacket>
 800a208:	e0f3      	b.n	800a3f2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	4413      	add	r3, r2
 800a212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	0151      	lsls	r1, r2, #5
 800a21c:	697a      	ldr	r2, [r7, #20]
 800a21e:	440a      	add	r2, r1
 800a220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a224:	0cdb      	lsrs	r3, r3, #19
 800a226:	04db      	lsls	r3, r3, #19
 800a228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	015a      	lsls	r2, r3, #5
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	4413      	add	r3, r2
 800a232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	0151      	lsls	r1, r2, #5
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	440a      	add	r2, r1
 800a240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a244:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a248:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a24c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d12f      	bne.n	800a2b4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a278:	691a      	ldr	r2, [r3, #16]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a282:	6939      	ldr	r1, [r7, #16]
 800a284:	0148      	lsls	r0, r1, #5
 800a286:	6979      	ldr	r1, [r7, #20]
 800a288:	4401      	add	r1, r0
 800a28a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a28e:	4313      	orrs	r3, r2
 800a290:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	015a      	lsls	r2, r3, #5
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	4413      	add	r3, r2
 800a29a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	0151      	lsls	r1, r2, #5
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	440a      	add	r2, r1
 800a2a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2b0:	6113      	str	r3, [r2, #16]
 800a2b2:	e061      	b.n	800a378 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d125      	bne.n	800a308 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2c8:	691a      	ldr	r2, [r3, #16]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2d2:	6939      	ldr	r1, [r7, #16]
 800a2d4:	0148      	lsls	r0, r1, #5
 800a2d6:	6979      	ldr	r1, [r7, #20]
 800a2d8:	4401      	add	r1, r0
 800a2da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	015a      	lsls	r2, r3, #5
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	0151      	lsls	r1, r2, #5
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	440a      	add	r2, r1
 800a2f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a300:	6113      	str	r3, [r2, #16]
 800a302:	e039      	b.n	800a378 <USB_EPStartXfer+0x3dc>
 800a304:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	691a      	ldr	r2, [r3, #16]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	4413      	add	r3, r2
 800a312:	1e5a      	subs	r2, r3, #1
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	fbb2 f3f3 	udiv	r3, r2, r3
 800a31c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	89fa      	ldrh	r2, [r7, #14]
 800a324:	fb03 f202 	mul.w	r2, r3, r2
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	015a      	lsls	r2, r3, #5
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	4413      	add	r3, r2
 800a334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a338:	691a      	ldr	r2, [r3, #16]
 800a33a:	89fb      	ldrh	r3, [r7, #14]
 800a33c:	04d9      	lsls	r1, r3, #19
 800a33e:	4b2f      	ldr	r3, [pc, #188]	@ (800a3fc <USB_EPStartXfer+0x460>)
 800a340:	400b      	ands	r3, r1
 800a342:	6939      	ldr	r1, [r7, #16]
 800a344:	0148      	lsls	r0, r1, #5
 800a346:	6979      	ldr	r1, [r7, #20]
 800a348:	4401      	add	r1, r0
 800a34a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a34e:	4313      	orrs	r3, r2
 800a350:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	015a      	lsls	r2, r3, #5
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	4413      	add	r3, r2
 800a35a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a35e:	691a      	ldr	r2, [r3, #16]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	6a1b      	ldr	r3, [r3, #32]
 800a364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a368:	6939      	ldr	r1, [r7, #16]
 800a36a:	0148      	lsls	r0, r1, #5
 800a36c:	6979      	ldr	r1, [r7, #20]
 800a36e:	4401      	add	r1, r0
 800a370:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a374:	4313      	orrs	r3, r2
 800a376:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	791b      	ldrb	r3, [r3, #4]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d128      	bne.n	800a3d2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d110      	bne.n	800a3b2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	0151      	lsls	r1, r2, #5
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	440a      	add	r2, r1
 800a3a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3ae:	6013      	str	r3, [r2, #0]
 800a3b0:	e00f      	b.n	800a3d2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	015a      	lsls	r2, r3, #5
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	0151      	lsls	r1, r2, #5
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	440a      	add	r2, r1
 800a3c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3d0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	0151      	lsls	r1, r2, #5
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	440a      	add	r2, r1
 800a3e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a3f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3718      	adds	r7, #24
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	1ff80000 	.word	0x1ff80000

0800a400 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a400:	b480      	push	{r7}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	785b      	ldrb	r3, [r3, #1]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d14a      	bne.n	800a4b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	015a      	lsls	r2, r3, #5
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	4413      	add	r3, r2
 800a428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a432:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a436:	f040 8086 	bne.w	800a546 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	7812      	ldrb	r2, [r2, #0]
 800a44e:	0151      	lsls	r1, r2, #5
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	440a      	add	r2, r1
 800a454:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a458:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a45c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	015a      	lsls	r2, r3, #5
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	4413      	add	r3, r2
 800a468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	7812      	ldrb	r2, [r2, #0]
 800a472:	0151      	lsls	r1, r2, #5
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	440a      	add	r2, r1
 800a478:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a47c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a480:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	3301      	adds	r3, #1
 800a486:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a48e:	4293      	cmp	r3, r2
 800a490:	d902      	bls.n	800a498 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	75fb      	strb	r3, [r7, #23]
          break;
 800a496:	e056      	b.n	800a546 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	015a      	lsls	r2, r3, #5
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4b0:	d0e7      	beq.n	800a482 <USB_EPStopXfer+0x82>
 800a4b2:	e048      	b.n	800a546 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4cc:	d13b      	bne.n	800a546 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	7812      	ldrb	r2, [r2, #0]
 800a4e2:	0151      	lsls	r1, r2, #5
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	440a      	add	r2, r1
 800a4e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a4f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	7812      	ldrb	r2, [r2, #0]
 800a506:	0151      	lsls	r1, r2, #5
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	440a      	add	r2, r1
 800a50c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a514:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3301      	adds	r3, #1
 800a51a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a522:	4293      	cmp	r3, r2
 800a524:	d902      	bls.n	800a52c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	75fb      	strb	r3, [r7, #23]
          break;
 800a52a:	e00c      	b.n	800a546 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	015a      	lsls	r2, r3, #5
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	4413      	add	r3, r2
 800a536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a540:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a544:	d0e7      	beq.n	800a516 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a546:	7dfb      	ldrb	r3, [r7, #23]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	371c      	adds	r7, #28
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a554:	b480      	push	{r7}
 800a556:	b089      	sub	sp, #36	@ 0x24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	4611      	mov	r1, r2
 800a560:	461a      	mov	r2, r3
 800a562:	460b      	mov	r3, r1
 800a564:	71fb      	strb	r3, [r7, #7]
 800a566:	4613      	mov	r3, r2
 800a568:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a572:	88bb      	ldrh	r3, [r7, #4]
 800a574:	3303      	adds	r3, #3
 800a576:	089b      	lsrs	r3, r3, #2
 800a578:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a57a:	2300      	movs	r3, #0
 800a57c:	61bb      	str	r3, [r7, #24]
 800a57e:	e018      	b.n	800a5b2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	031a      	lsls	r2, r3, #12
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	4413      	add	r3, r2
 800a588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a58c:	461a      	mov	r2, r3
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	3301      	adds	r3, #1
 800a598:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	3301      	adds	r3, #1
 800a59e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	61bb      	str	r3, [r7, #24]
 800a5b2:	69ba      	ldr	r2, [r7, #24]
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d3e2      	bcc.n	800a580 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3724      	adds	r7, #36	@ 0x24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b08b      	sub	sp, #44	@ 0x2c
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	4613      	mov	r3, r2
 800a5d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a5de:	88fb      	ldrh	r3, [r7, #6]
 800a5e0:	089b      	lsrs	r3, r3, #2
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a5e6:	88fb      	ldrh	r3, [r7, #6]
 800a5e8:	f003 0303 	and.w	r3, r3, #3
 800a5ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	623b      	str	r3, [r7, #32]
 800a5f2:	e014      	b.n	800a61e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fe:	601a      	str	r2, [r3, #0]
    pDest++;
 800a600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a602:	3301      	adds	r3, #1
 800a604:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a608:	3301      	adds	r3, #1
 800a60a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60e:	3301      	adds	r3, #1
 800a610:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a614:	3301      	adds	r3, #1
 800a616:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	3301      	adds	r3, #1
 800a61c:	623b      	str	r3, [r7, #32]
 800a61e:	6a3a      	ldr	r2, [r7, #32]
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	429a      	cmp	r2, r3
 800a624:	d3e6      	bcc.n	800a5f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a626:	8bfb      	ldrh	r3, [r7, #30]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d01e      	beq.n	800a66a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a636:	461a      	mov	r2, r3
 800a638:	f107 0310 	add.w	r3, r7, #16
 800a63c:	6812      	ldr	r2, [r2, #0]
 800a63e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	b2db      	uxtb	r3, r3
 800a646:	00db      	lsls	r3, r3, #3
 800a648:	fa22 f303 	lsr.w	r3, r2, r3
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a650:	701a      	strb	r2, [r3, #0]
      i++;
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	3301      	adds	r3, #1
 800a656:	623b      	str	r3, [r7, #32]
      pDest++;
 800a658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65a:	3301      	adds	r3, #1
 800a65c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a65e:	8bfb      	ldrh	r3, [r7, #30]
 800a660:	3b01      	subs	r3, #1
 800a662:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a664:	8bfb      	ldrh	r3, [r7, #30]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1ea      	bne.n	800a640 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	372c      	adds	r7, #44	@ 0x2c
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d12c      	bne.n	800a6ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	db12      	blt.n	800a6cc <USB_EPSetStall+0x54>
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00f      	beq.n	800a6cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	0151      	lsls	r1, r2, #5
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	440a      	add	r2, r1
 800a6c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	0151      	lsls	r1, r2, #5
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	440a      	add	r2, r1
 800a6e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a6ea:	6013      	str	r3, [r2, #0]
 800a6ec:	e02b      	b.n	800a746 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	015a      	lsls	r2, r3, #5
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	db12      	blt.n	800a726 <USB_EPSetStall+0xae>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00f      	beq.n	800a726 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	0151      	lsls	r1, r2, #5
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	440a      	add	r2, r1
 800a71c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a720:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a724:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	015a      	lsls	r2, r3, #5
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	4413      	add	r3, r2
 800a72e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	0151      	lsls	r1, r2, #5
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	440a      	add	r2, r1
 800a73c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a740:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a744:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	785b      	ldrb	r3, [r3, #1]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d128      	bne.n	800a7c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	0151      	lsls	r1, r2, #5
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	440a      	add	r2, r1
 800a786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a78a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a78e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	791b      	ldrb	r3, [r3, #4]
 800a794:	2b03      	cmp	r3, #3
 800a796:	d003      	beq.n	800a7a0 <USB_EPClearStall+0x4c>
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	791b      	ldrb	r3, [r3, #4]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d138      	bne.n	800a812 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	0151      	lsls	r1, r2, #5
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	440a      	add	r2, r1
 800a7b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	e027      	b.n	800a812 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	0151      	lsls	r1, r2, #5
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	440a      	add	r2, r1
 800a7d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	791b      	ldrb	r3, [r3, #4]
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d003      	beq.n	800a7f2 <USB_EPClearStall+0x9e>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	791b      	ldrb	r3, [r3, #4]
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d10f      	bne.n	800a812 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	015a      	lsls	r2, r3, #5
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	0151      	lsls	r1, r2, #5
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	440a      	add	r2, r1
 800a808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a80c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a810:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a83e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a842:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	78fb      	ldrb	r3, [r7, #3]
 800a84e:	011b      	lsls	r3, r3, #4
 800a850:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a854:	68f9      	ldr	r1, [r7, #12]
 800a856:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a85a:	4313      	orrs	r3, r2
 800a85c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a886:	f023 0303 	bic.w	r3, r3, #3
 800a88a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a89a:	f023 0302 	bic.w	r3, r3, #2
 800a89e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8ae:	b480      	push	{r7}
 800a8b0:	b085      	sub	sp, #20
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8c8:	f023 0303 	bic.w	r3, r3, #3
 800a8cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8dc:	f043 0302 	orr.w	r3, r3, #2
 800a8e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	695b      	ldr	r3, [r3, #20]
 800a8fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	4013      	ands	r3, r2
 800a906:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a908:	68fb      	ldr	r3, [r7, #12]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a916:	b480      	push	{r7}
 800a918:	b085      	sub	sp, #20
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a932:	69db      	ldr	r3, [r3, #28]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	4013      	ands	r3, r2
 800a938:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	0c1b      	lsrs	r3, r3, #16
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b085      	sub	sp, #20
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	4013      	ands	r3, r2
 800a96c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	b29b      	uxth	r3, r3
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	460b      	mov	r3, r1
 800a988:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a98e:	78fb      	ldrb	r3, [r7, #3]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3714      	adds	r7, #20
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b087      	sub	sp, #28
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a9de:	78fb      	ldrb	r3, [r7, #3]
 800a9e0:	f003 030f 	and.w	r3, r3, #15
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ea:	01db      	lsls	r3, r3, #7
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	4013      	ands	r3, r2
 800aa06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa08:	68bb      	ldr	r3, [r7, #8]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	371c      	adds	r7, #28
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa16:	b480      	push	{r7}
 800aa18:	b083      	sub	sp, #12
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	f003 0301 	and.w	r3, r3, #1
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b085      	sub	sp, #20
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aa50:	f023 0307 	bic.w	r3, r3, #7
 800aa54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	333c      	adds	r3, #60	@ 0x3c
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	4a1c      	ldr	r2, [pc, #112]	@ (800ab04 <USB_EP0_OutStart+0x8c>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d90a      	bls.n	800aaae <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aaa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaa8:	d101      	bne.n	800aaae <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	e024      	b.n	800aaf8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab4:	461a      	mov	r2, r3
 800aab6:	2300      	movs	r3, #0
 800aab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aac8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aacc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aadc:	f043 0318 	orr.w	r3, r3, #24
 800aae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaf0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aaf4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	4f54300a 	.word	0x4f54300a

0800ab08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	3301      	adds	r3, #1
 800ab18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	4a13      	ldr	r2, [pc, #76]	@ (800ab6c <USB_CoreReset+0x64>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d901      	bls.n	800ab26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e01b      	b.n	800ab5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	daf2      	bge.n	800ab14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	f043 0201 	orr.w	r2, r3, #1
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3301      	adds	r3, #1
 800ab42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4a09      	ldr	r2, [pc, #36]	@ (800ab6c <USB_CoreReset+0x64>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d901      	bls.n	800ab50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e006      	b.n	800ab5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d0f0      	beq.n	800ab3e <USB_CoreReset+0x36>

  return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	00030d40 	.word	0x00030d40

0800ab70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab7c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ab80:	f002 fe2c 	bl	800d7dc <USBD_static_malloc>
 800ab84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d109      	bne.n	800aba0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	32b0      	adds	r2, #176	@ 0xb0
 800ab96:	2100      	movs	r1, #0
 800ab98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	e0d4      	b.n	800ad4a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aba0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aba4:	2100      	movs	r1, #0
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f002 fe36 	bl	800d818 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	32b0      	adds	r2, #176	@ 0xb0
 800abb6:	68f9      	ldr	r1, [r7, #12]
 800abb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	32b0      	adds	r2, #176	@ 0xb0
 800abc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	7c1b      	ldrb	r3, [r3, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d138      	bne.n	800ac4a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abd8:	4b5e      	ldr	r3, [pc, #376]	@ (800ad54 <USBD_CDC_Init+0x1e4>)
 800abda:	7819      	ldrb	r1, [r3, #0]
 800abdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abe0:	2202      	movs	r2, #2
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f002 fbe6 	bl	800d3b4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abe8:	4b5a      	ldr	r3, [pc, #360]	@ (800ad54 <USBD_CDC_Init+0x1e4>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	f003 020f 	and.w	r2, r3, #15
 800abf0:	6879      	ldr	r1, [r7, #4]
 800abf2:	4613      	mov	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	440b      	add	r3, r1
 800abfc:	3324      	adds	r3, #36	@ 0x24
 800abfe:	2201      	movs	r2, #1
 800ac00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac02:	4b55      	ldr	r3, [pc, #340]	@ (800ad58 <USBD_CDC_Init+0x1e8>)
 800ac04:	7819      	ldrb	r1, [r3, #0]
 800ac06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f002 fbd1 	bl	800d3b4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac12:	4b51      	ldr	r3, [pc, #324]	@ (800ad58 <USBD_CDC_Init+0x1e8>)
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	f003 020f 	and.w	r2, r3, #15
 800ac1a:	6879      	ldr	r1, [r7, #4]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	440b      	add	r3, r1
 800ac26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac2e:	4b4b      	ldr	r3, [pc, #300]	@ (800ad5c <USBD_CDC_Init+0x1ec>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	f003 020f 	and.w	r2, r3, #15
 800ac36:	6879      	ldr	r1, [r7, #4]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	440b      	add	r3, r1
 800ac42:	3326      	adds	r3, #38	@ 0x26
 800ac44:	2210      	movs	r2, #16
 800ac46:	801a      	strh	r2, [r3, #0]
 800ac48:	e035      	b.n	800acb6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac4a:	4b42      	ldr	r3, [pc, #264]	@ (800ad54 <USBD_CDC_Init+0x1e4>)
 800ac4c:	7819      	ldrb	r1, [r3, #0]
 800ac4e:	2340      	movs	r3, #64	@ 0x40
 800ac50:	2202      	movs	r2, #2
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f002 fbae 	bl	800d3b4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac58:	4b3e      	ldr	r3, [pc, #248]	@ (800ad54 <USBD_CDC_Init+0x1e4>)
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	f003 020f 	and.w	r2, r3, #15
 800ac60:	6879      	ldr	r1, [r7, #4]
 800ac62:	4613      	mov	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	440b      	add	r3, r1
 800ac6c:	3324      	adds	r3, #36	@ 0x24
 800ac6e:	2201      	movs	r2, #1
 800ac70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac72:	4b39      	ldr	r3, [pc, #228]	@ (800ad58 <USBD_CDC_Init+0x1e8>)
 800ac74:	7819      	ldrb	r1, [r3, #0]
 800ac76:	2340      	movs	r3, #64	@ 0x40
 800ac78:	2202      	movs	r2, #2
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f002 fb9a 	bl	800d3b4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac80:	4b35      	ldr	r3, [pc, #212]	@ (800ad58 <USBD_CDC_Init+0x1e8>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	f003 020f 	and.w	r2, r3, #15
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	440b      	add	r3, r1
 800ac94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac98:	2201      	movs	r2, #1
 800ac9a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ac9c:	4b2f      	ldr	r3, [pc, #188]	@ (800ad5c <USBD_CDC_Init+0x1ec>)
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	f003 020f 	and.w	r2, r3, #15
 800aca4:	6879      	ldr	r1, [r7, #4]
 800aca6:	4613      	mov	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	440b      	add	r3, r1
 800acb0:	3326      	adds	r3, #38	@ 0x26
 800acb2:	2210      	movs	r2, #16
 800acb4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acb6:	4b29      	ldr	r3, [pc, #164]	@ (800ad5c <USBD_CDC_Init+0x1ec>)
 800acb8:	7819      	ldrb	r1, [r3, #0]
 800acba:	2308      	movs	r3, #8
 800acbc:	2203      	movs	r2, #3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f002 fb78 	bl	800d3b4 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800acc4:	4b25      	ldr	r3, [pc, #148]	@ (800ad5c <USBD_CDC_Init+0x1ec>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	f003 020f 	and.w	r2, r3, #15
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	440b      	add	r3, r1
 800acd8:	3324      	adds	r3, #36	@ 0x24
 800acda:	2201      	movs	r2, #1
 800acdc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	33b0      	adds	r3, #176	@ 0xb0
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad14:	2302      	movs	r3, #2
 800ad16:	e018      	b.n	800ad4a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	7c1b      	ldrb	r3, [r3, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10a      	bne.n	800ad36 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad20:	4b0d      	ldr	r3, [pc, #52]	@ (800ad58 <USBD_CDC_Init+0x1e8>)
 800ad22:	7819      	ldrb	r1, [r3, #0]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f002 fcba 	bl	800d6a8 <USBD_LL_PrepareReceive>
 800ad34:	e008      	b.n	800ad48 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad36:	4b08      	ldr	r3, [pc, #32]	@ (800ad58 <USBD_CDC_Init+0x1e8>)
 800ad38:	7819      	ldrb	r1, [r3, #0]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad40:	2340      	movs	r3, #64	@ 0x40
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f002 fcb0 	bl	800d6a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	20000093 	.word	0x20000093
 800ad58:	20000094 	.word	0x20000094
 800ad5c:	20000095 	.word	0x20000095

0800ad60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad6c:	4b3a      	ldr	r3, [pc, #232]	@ (800ae58 <USBD_CDC_DeInit+0xf8>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f002 fb5c 	bl	800d430 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad78:	4b37      	ldr	r3, [pc, #220]	@ (800ae58 <USBD_CDC_DeInit+0xf8>)
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	f003 020f 	and.w	r2, r3, #15
 800ad80:	6879      	ldr	r1, [r7, #4]
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	440b      	add	r3, r1
 800ad8c:	3324      	adds	r3, #36	@ 0x24
 800ad8e:	2200      	movs	r2, #0
 800ad90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ad92:	4b32      	ldr	r3, [pc, #200]	@ (800ae5c <USBD_CDC_DeInit+0xfc>)
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f002 fb49 	bl	800d430 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ad9e:	4b2f      	ldr	r3, [pc, #188]	@ (800ae5c <USBD_CDC_DeInit+0xfc>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	f003 020f 	and.w	r2, r3, #15
 800ada6:	6879      	ldr	r1, [r7, #4]
 800ada8:	4613      	mov	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	4413      	add	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	440b      	add	r3, r1
 800adb2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800adb6:	2200      	movs	r2, #0
 800adb8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800adba:	4b29      	ldr	r3, [pc, #164]	@ (800ae60 <USBD_CDC_DeInit+0x100>)
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f002 fb35 	bl	800d430 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800adc6:	4b26      	ldr	r3, [pc, #152]	@ (800ae60 <USBD_CDC_DeInit+0x100>)
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	f003 020f 	and.w	r2, r3, #15
 800adce:	6879      	ldr	r1, [r7, #4]
 800add0:	4613      	mov	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	440b      	add	r3, r1
 800adda:	3324      	adds	r3, #36	@ 0x24
 800addc:	2200      	movs	r2, #0
 800adde:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ade0:	4b1f      	ldr	r3, [pc, #124]	@ (800ae60 <USBD_CDC_DeInit+0x100>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	f003 020f 	and.w	r2, r3, #15
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	440b      	add	r3, r1
 800adf4:	3326      	adds	r3, #38	@ 0x26
 800adf6:	2200      	movs	r2, #0
 800adf8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	32b0      	adds	r2, #176	@ 0xb0
 800ae04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d01f      	beq.n	800ae4c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	33b0      	adds	r3, #176	@ 0xb0
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	32b0      	adds	r2, #176	@ 0xb0
 800ae2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f002 fce2 	bl	800d7f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	32b0      	adds	r2, #176	@ 0xb0
 800ae3e:	2100      	movs	r1, #0
 800ae40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20000093 	.word	0x20000093
 800ae5c:	20000094 	.word	0x20000094
 800ae60:	20000095 	.word	0x20000095

0800ae64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	32b0      	adds	r2, #176	@ 0xb0
 800ae78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e0bf      	b.n	800b014 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d050      	beq.n	800af42 <USBD_CDC_Setup+0xde>
 800aea0:	2b20      	cmp	r3, #32
 800aea2:	f040 80af 	bne.w	800b004 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	88db      	ldrh	r3, [r3, #6]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d03a      	beq.n	800af24 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	b25b      	sxtb	r3, r3
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	da1b      	bge.n	800aef0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	33b0      	adds	r3, #176	@ 0xb0
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4413      	add	r3, r2
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aece:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	88d2      	ldrh	r2, [r2, #6]
 800aed4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	88db      	ldrh	r3, [r3, #6]
 800aeda:	2b07      	cmp	r3, #7
 800aedc:	bf28      	it	cs
 800aede:	2307      	movcs	r3, #7
 800aee0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	89fa      	ldrh	r2, [r7, #14]
 800aee6:	4619      	mov	r1, r3
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f001 fdb1 	bl	800ca50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aeee:	e090      	b.n	800b012 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	785a      	ldrb	r2, [r3, #1]
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	88db      	ldrh	r3, [r3, #6]
 800aefe:	2b3f      	cmp	r3, #63	@ 0x3f
 800af00:	d803      	bhi.n	800af0a <USBD_CDC_Setup+0xa6>
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	88db      	ldrh	r3, [r3, #6]
 800af06:	b2da      	uxtb	r2, r3
 800af08:	e000      	b.n	800af0c <USBD_CDC_Setup+0xa8>
 800af0a:	2240      	movs	r2, #64	@ 0x40
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af12:	6939      	ldr	r1, [r7, #16]
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800af1a:	461a      	mov	r2, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f001 fdc3 	bl	800caa8 <USBD_CtlPrepareRx>
      break;
 800af22:	e076      	b.n	800b012 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	33b0      	adds	r3, #176	@ 0xb0
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	7850      	ldrb	r0, [r2, #1]
 800af3a:	2200      	movs	r2, #0
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	4798      	blx	r3
      break;
 800af40:	e067      	b.n	800b012 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	785b      	ldrb	r3, [r3, #1]
 800af46:	2b0b      	cmp	r3, #11
 800af48:	d851      	bhi.n	800afee <USBD_CDC_Setup+0x18a>
 800af4a:	a201      	add	r2, pc, #4	@ (adr r2, 800af50 <USBD_CDC_Setup+0xec>)
 800af4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af50:	0800af81 	.word	0x0800af81
 800af54:	0800affd 	.word	0x0800affd
 800af58:	0800afef 	.word	0x0800afef
 800af5c:	0800afef 	.word	0x0800afef
 800af60:	0800afef 	.word	0x0800afef
 800af64:	0800afef 	.word	0x0800afef
 800af68:	0800afef 	.word	0x0800afef
 800af6c:	0800afef 	.word	0x0800afef
 800af70:	0800afef 	.word	0x0800afef
 800af74:	0800afef 	.word	0x0800afef
 800af78:	0800afab 	.word	0x0800afab
 800af7c:	0800afd5 	.word	0x0800afd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af86:	b2db      	uxtb	r3, r3
 800af88:	2b03      	cmp	r3, #3
 800af8a:	d107      	bne.n	800af9c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af8c:	f107 030a 	add.w	r3, r7, #10
 800af90:	2202      	movs	r2, #2
 800af92:	4619      	mov	r1, r3
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 fd5b 	bl	800ca50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af9a:	e032      	b.n	800b002 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f001 fce5 	bl	800c96e <USBD_CtlError>
            ret = USBD_FAIL;
 800afa4:	2303      	movs	r3, #3
 800afa6:	75fb      	strb	r3, [r7, #23]
          break;
 800afa8:	e02b      	b.n	800b002 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	d107      	bne.n	800afc6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800afb6:	f107 030d 	add.w	r3, r7, #13
 800afba:	2201      	movs	r2, #1
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f001 fd46 	bl	800ca50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afc4:	e01d      	b.n	800b002 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f001 fcd0 	bl	800c96e <USBD_CtlError>
            ret = USBD_FAIL;
 800afce:	2303      	movs	r3, #3
 800afd0:	75fb      	strb	r3, [r7, #23]
          break;
 800afd2:	e016      	b.n	800b002 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d00f      	beq.n	800b000 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f001 fcc3 	bl	800c96e <USBD_CtlError>
            ret = USBD_FAIL;
 800afe8:	2303      	movs	r3, #3
 800afea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800afec:	e008      	b.n	800b000 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f001 fcbc 	bl	800c96e <USBD_CtlError>
          ret = USBD_FAIL;
 800aff6:	2303      	movs	r3, #3
 800aff8:	75fb      	strb	r3, [r7, #23]
          break;
 800affa:	e002      	b.n	800b002 <USBD_CDC_Setup+0x19e>
          break;
 800affc:	bf00      	nop
 800affe:	e008      	b.n	800b012 <USBD_CDC_Setup+0x1ae>
          break;
 800b000:	bf00      	nop
      }
      break;
 800b002:	e006      	b.n	800b012 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b004:	6839      	ldr	r1, [r7, #0]
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f001 fcb1 	bl	800c96e <USBD_CtlError>
      ret = USBD_FAIL;
 800b00c:	2303      	movs	r3, #3
 800b00e:	75fb      	strb	r3, [r7, #23]
      break;
 800b010:	bf00      	nop
  }

  return (uint8_t)ret;
 800b012:	7dfb      	ldrb	r3, [r7, #23]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b02e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	32b0      	adds	r2, #176	@ 0xb0
 800b03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b042:	2303      	movs	r3, #3
 800b044:	e065      	b.n	800b112 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	32b0      	adds	r2, #176	@ 0xb0
 800b050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b054:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b056:	78fb      	ldrb	r3, [r7, #3]
 800b058:	f003 020f 	and.w	r2, r3, #15
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	4613      	mov	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	440b      	add	r3, r1
 800b068:	3318      	adds	r3, #24
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d02f      	beq.n	800b0d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	f003 020f 	and.w	r2, r3, #15
 800b076:	6879      	ldr	r1, [r7, #4]
 800b078:	4613      	mov	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4413      	add	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	440b      	add	r3, r1
 800b082:	3318      	adds	r3, #24
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	78fb      	ldrb	r3, [r7, #3]
 800b088:	f003 010f 	and.w	r1, r3, #15
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	460b      	mov	r3, r1
 800b090:	00db      	lsls	r3, r3, #3
 800b092:	440b      	add	r3, r1
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4403      	add	r3, r0
 800b098:	3344      	adds	r3, #68	@ 0x44
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0a0:	fb01 f303 	mul.w	r3, r1, r3
 800b0a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d112      	bne.n	800b0d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0aa:	78fb      	ldrb	r3, [r7, #3]
 800b0ac:	f003 020f 	and.w	r2, r3, #15
 800b0b0:	6879      	ldr	r1, [r7, #4]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	440b      	add	r3, r1
 800b0bc:	3318      	adds	r3, #24
 800b0be:	2200      	movs	r2, #0
 800b0c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0c2:	78f9      	ldrb	r1, [r7, #3]
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f002 fab5 	bl	800d638 <USBD_LL_Transmit>
 800b0ce:	e01f      	b.n	800b110 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	33b0      	adds	r3, #176	@ 0xb0
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d010      	beq.n	800b110 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	33b0      	adds	r3, #176	@ 0xb0
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	4413      	add	r3, r2
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b10c:	78fa      	ldrb	r2, [r7, #3]
 800b10e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b084      	sub	sp, #16
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	460b      	mov	r3, r1
 800b124:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	32b0      	adds	r2, #176	@ 0xb0
 800b130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b134:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	32b0      	adds	r2, #176	@ 0xb0
 800b140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b148:	2303      	movs	r3, #3
 800b14a:	e01a      	b.n	800b182 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b14c:	78fb      	ldrb	r3, [r7, #3]
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f002 fae1 	bl	800d718 <USBD_LL_GetRxDataSize>
 800b156:	4602      	mov	r2, r0
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	33b0      	adds	r3, #176	@ 0xb0
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4413      	add	r3, r2
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b17c:	4611      	mov	r1, r2
 800b17e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b084      	sub	sp, #16
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	32b0      	adds	r2, #176	@ 0xb0
 800b19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e024      	b.n	800b1f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	33b0      	adds	r3, #176	@ 0xb0
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d019      	beq.n	800b1f4 <USBD_CDC_EP0_RxReady+0x6a>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b1c6:	2bff      	cmp	r3, #255	@ 0xff
 800b1c8:	d014      	beq.n	800b1f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	33b0      	adds	r3, #176	@ 0xb0
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4413      	add	r3, r2
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b1e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	22ff      	movs	r2, #255	@ 0xff
 800b1f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
	...

0800b200 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b208:	2182      	movs	r1, #130	@ 0x82
 800b20a:	4818      	ldr	r0, [pc, #96]	@ (800b26c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b20c:	f000 fd4f 	bl	800bcae <USBD_GetEpDesc>
 800b210:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b212:	2101      	movs	r1, #1
 800b214:	4815      	ldr	r0, [pc, #84]	@ (800b26c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b216:	f000 fd4a 	bl	800bcae <USBD_GetEpDesc>
 800b21a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b21c:	2181      	movs	r1, #129	@ 0x81
 800b21e:	4813      	ldr	r0, [pc, #76]	@ (800b26c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b220:	f000 fd45 	bl	800bcae <USBD_GetEpDesc>
 800b224:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	2210      	movs	r2, #16
 800b230:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d006      	beq.n	800b246 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b240:	711a      	strb	r2, [r3, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d006      	beq.n	800b25a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b254:	711a      	strb	r2, [r3, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2243      	movs	r2, #67	@ 0x43
 800b25e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b260:	4b02      	ldr	r3, [pc, #8]	@ (800b26c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b262:	4618      	mov	r0, r3
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20000050 	.word	0x20000050

0800b270 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b278:	2182      	movs	r1, #130	@ 0x82
 800b27a:	4818      	ldr	r0, [pc, #96]	@ (800b2dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b27c:	f000 fd17 	bl	800bcae <USBD_GetEpDesc>
 800b280:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b282:	2101      	movs	r1, #1
 800b284:	4815      	ldr	r0, [pc, #84]	@ (800b2dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b286:	f000 fd12 	bl	800bcae <USBD_GetEpDesc>
 800b28a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b28c:	2181      	movs	r1, #129	@ 0x81
 800b28e:	4813      	ldr	r0, [pc, #76]	@ (800b2dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b290:	f000 fd0d 	bl	800bcae <USBD_GetEpDesc>
 800b294:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2210      	movs	r2, #16
 800b2a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d006      	beq.n	800b2b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	711a      	strb	r2, [r3, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f042 0202 	orr.w	r2, r2, #2
 800b2b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d006      	beq.n	800b2ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	711a      	strb	r2, [r3, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f042 0202 	orr.w	r2, r2, #2
 800b2c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2243      	movs	r2, #67	@ 0x43
 800b2ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2d0:	4b02      	ldr	r3, [pc, #8]	@ (800b2dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20000050 	.word	0x20000050

0800b2e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2e8:	2182      	movs	r1, #130	@ 0x82
 800b2ea:	4818      	ldr	r0, [pc, #96]	@ (800b34c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2ec:	f000 fcdf 	bl	800bcae <USBD_GetEpDesc>
 800b2f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	4815      	ldr	r0, [pc, #84]	@ (800b34c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2f6:	f000 fcda 	bl	800bcae <USBD_GetEpDesc>
 800b2fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2fc:	2181      	movs	r1, #129	@ 0x81
 800b2fe:	4813      	ldr	r0, [pc, #76]	@ (800b34c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b300:	f000 fcd5 	bl	800bcae <USBD_GetEpDesc>
 800b304:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	2210      	movs	r2, #16
 800b310:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d006      	beq.n	800b326 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b320:	711a      	strb	r2, [r3, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d006      	beq.n	800b33a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b334:	711a      	strb	r2, [r3, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2243      	movs	r2, #67	@ 0x43
 800b33e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b340:	4b02      	ldr	r3, [pc, #8]	@ (800b34c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b342:	4618      	mov	r0, r3
 800b344:	3718      	adds	r7, #24
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	20000050 	.word	0x20000050

0800b350 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	220a      	movs	r2, #10
 800b35c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b35e:	4b03      	ldr	r3, [pc, #12]	@ (800b36c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b360:	4618      	mov	r0, r3
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	2000000c 	.word	0x2000000c

0800b370 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b380:	2303      	movs	r3, #3
 800b382:	e009      	b.n	800b398 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	33b0      	adds	r3, #176	@ 0xb0
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	32b0      	adds	r2, #176	@ 0xb0
 800b3ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	e008      	b.n	800b3dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	371c      	adds	r7, #28
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	32b0      	adds	r2, #176	@ 0xb0
 800b3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b400:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b408:	2303      	movs	r3, #3
 800b40a:	e004      	b.n	800b416 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
	...

0800b424 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	32b0      	adds	r2, #176	@ 0xb0
 800b436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b43c:	2301      	movs	r3, #1
 800b43e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d101      	bne.n	800b44a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b446:	2303      	movs	r3, #3
 800b448:	e025      	b.n	800b496 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b450:	2b00      	cmp	r3, #0
 800b452:	d11f      	bne.n	800b494 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2201      	movs	r2, #1
 800b458:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b45c:	4b10      	ldr	r3, [pc, #64]	@ (800b4a0 <USBD_CDC_TransmitPacket+0x7c>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	f003 020f 	and.w	r2, r3, #15
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	4613      	mov	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4403      	add	r3, r0
 800b476:	3318      	adds	r3, #24
 800b478:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b47a:	4b09      	ldr	r3, [pc, #36]	@ (800b4a0 <USBD_CDC_TransmitPacket+0x7c>)
 800b47c:	7819      	ldrb	r1, [r3, #0]
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f002 f8d4 	bl	800d638 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b494:	7bfb      	ldrb	r3, [r7, #15]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	20000093 	.word	0x20000093

0800b4a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	32b0      	adds	r2, #176	@ 0xb0
 800b4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	32b0      	adds	r2, #176	@ 0xb0
 800b4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b4ce:	2303      	movs	r3, #3
 800b4d0:	e018      	b.n	800b504 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7c1b      	ldrb	r3, [r3, #16]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10a      	bne.n	800b4f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4da:	4b0c      	ldr	r3, [pc, #48]	@ (800b50c <USBD_CDC_ReceivePacket+0x68>)
 800b4dc:	7819      	ldrb	r1, [r3, #0]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f002 f8dd 	bl	800d6a8 <USBD_LL_PrepareReceive>
 800b4ee:	e008      	b.n	800b502 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4f0:	4b06      	ldr	r3, [pc, #24]	@ (800b50c <USBD_CDC_ReceivePacket+0x68>)
 800b4f2:	7819      	ldrb	r1, [r3, #0]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4fa:	2340      	movs	r3, #64	@ 0x40
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f002 f8d3 	bl	800d6a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	20000094 	.word	0x20000094

0800b510 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	4613      	mov	r3, r2
 800b51c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b524:	2303      	movs	r3, #3
 800b526:	e01f      	b.n	800b568 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d003      	beq.n	800b54e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	79fa      	ldrb	r2, [r7, #7]
 800b55a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f001 feab 	bl	800d2b8 <USBD_LL_Init>
 800b562:	4603      	mov	r3, r0
 800b564:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b566:	7dfb      	ldrb	r3, [r7, #23]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b584:	2303      	movs	r3, #3
 800b586:	e025      	b.n	800b5d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	32ae      	adds	r2, #174	@ 0xae
 800b59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00f      	beq.n	800b5c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	32ae      	adds	r2, #174	@ 0xae
 800b5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b4:	f107 020e 	add.w	r2, r7, #14
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	4798      	blx	r3
 800b5bc:	4602      	mov	r2, r0
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f001 feb3 	bl	800d350 <USBD_LL_Start>
 800b5ea:	4603      	mov	r3, r0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b084      	sub	sp, #16
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	460b      	mov	r3, r1
 800b614:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b620:	2b00      	cmp	r3, #0
 800b622:	d009      	beq.n	800b638 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	78fa      	ldrb	r2, [r7, #3]
 800b62e:	4611      	mov	r1, r2
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	4798      	blx	r3
 800b634:	4603      	mov	r3, r0
 800b636:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b638:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b084      	sub	sp, #16
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	460b      	mov	r3, r1
 800b64c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	78fa      	ldrb	r2, [r7, #3]
 800b65c:	4611      	mov	r1, r2
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	4798      	blx	r3
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b668:	2303      	movs	r3, #3
 800b66a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	4618      	mov	r0, r3
 800b68a:	f001 f936 	bl	800c8fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b69c:	461a      	mov	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6aa:	f003 031f 	and.w	r3, r3, #31
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d01a      	beq.n	800b6e8 <USBD_LL_SetupStage+0x72>
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d822      	bhi.n	800b6fc <USBD_LL_SetupStage+0x86>
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <USBD_LL_SetupStage+0x4a>
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d00a      	beq.n	800b6d4 <USBD_LL_SetupStage+0x5e>
 800b6be:	e01d      	b.n	800b6fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fb63 	bl	800bd94 <USBD_StdDevReq>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d2:	e020      	b.n	800b716 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fbcb 	bl	800be78 <USBD_StdItfReq>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b6e6:	e016      	b.n	800b716 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fc2d 	bl	800bf50 <USBD_StdEPReq>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6fa:	e00c      	b.n	800b716 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b702:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b706:	b2db      	uxtb	r3, r3
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f001 fec6 	bl	800d49c <USBD_LL_StallEP>
 800b710:	4603      	mov	r3, r0
 800b712:	73fb      	strb	r3, [r7, #15]
      break;
 800b714:	bf00      	nop
  }

  return ret;
 800b716:	7bfb      	ldrb	r3, [r7, #15]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	460b      	mov	r3, r1
 800b72a:	607a      	str	r2, [r7, #4]
 800b72c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b732:	7afb      	ldrb	r3, [r7, #11]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d16e      	bne.n	800b816 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b73e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b746:	2b03      	cmp	r3, #3
 800b748:	f040 8098 	bne.w	800b87c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	689a      	ldr	r2, [r3, #8]
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	429a      	cmp	r2, r3
 800b756:	d913      	bls.n	800b780 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	689a      	ldr	r2, [r3, #8]
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	1ad2      	subs	r2, r2, r3
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	68da      	ldr	r2, [r3, #12]
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	4293      	cmp	r3, r2
 800b770:	bf28      	it	cs
 800b772:	4613      	movcs	r3, r2
 800b774:	461a      	mov	r2, r3
 800b776:	6879      	ldr	r1, [r7, #4]
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f001 f9b2 	bl	800cae2 <USBD_CtlContinueRx>
 800b77e:	e07d      	b.n	800b87c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b786:	f003 031f 	and.w	r3, r3, #31
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d014      	beq.n	800b7b8 <USBD_LL_DataOutStage+0x98>
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d81d      	bhi.n	800b7ce <USBD_LL_DataOutStage+0xae>
 800b792:	2b00      	cmp	r3, #0
 800b794:	d002      	beq.n	800b79c <USBD_LL_DataOutStage+0x7c>
 800b796:	2b01      	cmp	r3, #1
 800b798:	d003      	beq.n	800b7a2 <USBD_LL_DataOutStage+0x82>
 800b79a:	e018      	b.n	800b7ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b79c:	2300      	movs	r3, #0
 800b79e:	75bb      	strb	r3, [r7, #22]
            break;
 800b7a0:	e018      	b.n	800b7d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 fa64 	bl	800bc7a <USBD_CoreFindIF>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	75bb      	strb	r3, [r7, #22]
            break;
 800b7b6:	e00d      	b.n	800b7d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f000 fa66 	bl	800bc94 <USBD_CoreFindEP>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	75bb      	strb	r3, [r7, #22]
            break;
 800b7cc:	e002      	b.n	800b7d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	75bb      	strb	r3, [r7, #22]
            break;
 800b7d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b7d4:	7dbb      	ldrb	r3, [r7, #22]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d119      	bne.n	800b80e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d113      	bne.n	800b80e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b7e6:	7dba      	ldrb	r2, [r7, #22]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	32ae      	adds	r2, #174	@ 0xae
 800b7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00b      	beq.n	800b80e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b7f6:	7dba      	ldrb	r2, [r7, #22]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b7fe:	7dba      	ldrb	r2, [r7, #22]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	32ae      	adds	r2, #174	@ 0xae
 800b804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f001 f978 	bl	800cb04 <USBD_CtlSendStatus>
 800b814:	e032      	b.n	800b87c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b816:	7afb      	ldrb	r3, [r7, #11]
 800b818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	4619      	mov	r1, r3
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 fa37 	bl	800bc94 <USBD_CoreFindEP>
 800b826:	4603      	mov	r3, r0
 800b828:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b82a:	7dbb      	ldrb	r3, [r7, #22]
 800b82c:	2bff      	cmp	r3, #255	@ 0xff
 800b82e:	d025      	beq.n	800b87c <USBD_LL_DataOutStage+0x15c>
 800b830:	7dbb      	ldrb	r3, [r7, #22]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d122      	bne.n	800b87c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d117      	bne.n	800b872 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b842:	7dba      	ldrb	r2, [r7, #22]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	32ae      	adds	r2, #174	@ 0xae
 800b848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00f      	beq.n	800b872 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b852:	7dba      	ldrb	r2, [r7, #22]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b85a:	7dba      	ldrb	r2, [r7, #22]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	32ae      	adds	r2, #174	@ 0xae
 800b860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	7afa      	ldrb	r2, [r7, #11]
 800b868:	4611      	mov	r1, r2
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	4798      	blx	r3
 800b86e:	4603      	mov	r3, r0
 800b870:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b872:	7dfb      	ldrb	r3, [r7, #23]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b878:	7dfb      	ldrb	r3, [r7, #23]
 800b87a:	e000      	b.n	800b87e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b086      	sub	sp, #24
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	60f8      	str	r0, [r7, #12]
 800b88e:	460b      	mov	r3, r1
 800b890:	607a      	str	r2, [r7, #4]
 800b892:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d16f      	bne.n	800b97a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	3314      	adds	r3, #20
 800b89e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d15a      	bne.n	800b960 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	689a      	ldr	r2, [r3, #8]
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d914      	bls.n	800b8e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	689a      	ldr	r2, [r3, #8]
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	1ad2      	subs	r2, r2, r3
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	6879      	ldr	r1, [r7, #4]
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f001 f8da 	bl	800ca86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f001 fee5 	bl	800d6a8 <USBD_LL_PrepareReceive>
 800b8de:	e03f      	b.n	800b960 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	68da      	ldr	r2, [r3, #12]
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d11c      	bne.n	800b926 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	685a      	ldr	r2, [r3, #4]
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d316      	bcc.n	800b926 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b902:	429a      	cmp	r2, r3
 800b904:	d20f      	bcs.n	800b926 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b906:	2200      	movs	r2, #0
 800b908:	2100      	movs	r1, #0
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f001 f8bb 	bl	800ca86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2200      	movs	r2, #0
 800b914:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b918:	2300      	movs	r3, #0
 800b91a:	2200      	movs	r2, #0
 800b91c:	2100      	movs	r1, #0
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f001 fec2 	bl	800d6a8 <USBD_LL_PrepareReceive>
 800b924:	e01c      	b.n	800b960 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b03      	cmp	r3, #3
 800b930:	d10f      	bne.n	800b952 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d009      	beq.n	800b952 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b952:	2180      	movs	r1, #128	@ 0x80
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f001 fda1 	bl	800d49c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f001 f8e5 	bl	800cb2a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d03a      	beq.n	800b9e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f7ff fe42 	bl	800b5f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b978:	e032      	b.n	800b9e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b97a:	7afb      	ldrb	r3, [r7, #11]
 800b97c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b980:	b2db      	uxtb	r3, r3
 800b982:	4619      	mov	r1, r3
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 f985 	bl	800bc94 <USBD_CoreFindEP>
 800b98a:	4603      	mov	r3, r0
 800b98c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b98e:	7dfb      	ldrb	r3, [r7, #23]
 800b990:	2bff      	cmp	r3, #255	@ 0xff
 800b992:	d025      	beq.n	800b9e0 <USBD_LL_DataInStage+0x15a>
 800b994:	7dfb      	ldrb	r3, [r7, #23]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d122      	bne.n	800b9e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d11c      	bne.n	800b9e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9a6:	7dfa      	ldrb	r2, [r7, #23]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	32ae      	adds	r2, #174	@ 0xae
 800b9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d014      	beq.n	800b9e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9b6:	7dfa      	ldrb	r2, [r7, #23]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9be:	7dfa      	ldrb	r2, [r7, #23]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	32ae      	adds	r2, #174	@ 0xae
 800b9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	7afa      	ldrb	r2, [r7, #11]
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	4798      	blx	r3
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b9d6:	7dbb      	ldrb	r3, [r7, #22]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b9dc:	7dbb      	ldrb	r3, [r7, #22]
 800b9de:	e000      	b.n	800b9e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d014      	beq.n	800ba50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00e      	beq.n	800ba50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	6852      	ldr	r2, [r2, #4]
 800ba3e:	b2d2      	uxtb	r2, r2
 800ba40:	4611      	mov	r1, r2
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	4798      	blx	r3
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d001      	beq.n	800ba50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba50:	2340      	movs	r3, #64	@ 0x40
 800ba52:	2200      	movs	r2, #0
 800ba54:	2100      	movs	r1, #0
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f001 fcac 	bl	800d3b4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2240      	movs	r2, #64	@ 0x40
 800ba68:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba6c:	2340      	movs	r3, #64	@ 0x40
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2180      	movs	r1, #128	@ 0x80
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f001 fc9e 	bl	800d3b4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2240      	movs	r2, #64	@ 0x40
 800ba82:	621a      	str	r2, [r3, #32]

  return ret;
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba8e:	b480      	push	{r7}
 800ba90:	b083      	sub	sp, #12
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
 800ba96:	460b      	mov	r3, r1
 800ba98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	78fa      	ldrb	r2, [r7, #3]
 800ba9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800baae:	b480      	push	{r7}
 800bab0:	b083      	sub	sp, #12
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800babc:	b2db      	uxtb	r3, r3
 800babe:	2b04      	cmp	r3, #4
 800bac0:	d006      	beq.n	800bad0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2204      	movs	r2, #4
 800bad4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b083      	sub	sp, #12
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	2b04      	cmp	r3, #4
 800baf8:	d106      	bne.n	800bb08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b082      	sub	sp, #8
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	d110      	bne.n	800bb4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00b      	beq.n	800bb4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d005      	beq.n	800bb4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb46:	69db      	ldr	r3, [r3, #28]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b082      	sub	sp, #8
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
 800bb5e:	460b      	mov	r3, r1
 800bb60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	32ae      	adds	r2, #174	@ 0xae
 800bb6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb74:	2303      	movs	r3, #3
 800bb76:	e01c      	b.n	800bbb2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	d115      	bne.n	800bbb0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	32ae      	adds	r2, #174	@ 0xae
 800bb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb92:	6a1b      	ldr	r3, [r3, #32]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00b      	beq.n	800bbb0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	32ae      	adds	r2, #174	@ 0xae
 800bba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba6:	6a1b      	ldr	r3, [r3, #32]
 800bba8:	78fa      	ldrb	r2, [r7, #3]
 800bbaa:	4611      	mov	r1, r2
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b082      	sub	sp, #8
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	32ae      	adds	r2, #174	@ 0xae
 800bbd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d101      	bne.n	800bbdc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e01c      	b.n	800bc16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	2b03      	cmp	r3, #3
 800bbe6:	d115      	bne.n	800bc14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	32ae      	adds	r2, #174	@ 0xae
 800bbf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00b      	beq.n	800bc14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	32ae      	adds	r2, #174	@ 0xae
 800bc06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc0c:	78fa      	ldrb	r2, [r7, #3]
 800bc0e:	4611      	mov	r1, r2
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b083      	sub	sp, #12
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00e      	beq.n	800bc70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	6852      	ldr	r2, [r2, #4]
 800bc5e:	b2d2      	uxtb	r2, r2
 800bc60:	4611      	mov	r1, r2
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	4798      	blx	r3
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b083      	sub	sp, #12
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	460b      	mov	r3, r1
 800bc84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bca0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b086      	sub	sp, #24
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	885b      	ldrh	r3, [r3, #2]
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	7812      	ldrb	r2, [r2, #0]
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d91f      	bls.n	800bd14 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bcda:	e013      	b.n	800bd04 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bcdc:	f107 030a 	add.w	r3, r7, #10
 800bce0:	4619      	mov	r1, r3
 800bce2:	6978      	ldr	r0, [r7, #20]
 800bce4:	f000 f81b 	bl	800bd1e <USBD_GetNextDesc>
 800bce8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	785b      	ldrb	r3, [r3, #1]
 800bcee:	2b05      	cmp	r3, #5
 800bcf0:	d108      	bne.n	800bd04 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	789b      	ldrb	r3, [r3, #2]
 800bcfa:	78fa      	ldrb	r2, [r7, #3]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d008      	beq.n	800bd12 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd00:	2300      	movs	r3, #0
 800bd02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	885b      	ldrh	r3, [r3, #2]
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	897b      	ldrh	r3, [r7, #10]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d8e5      	bhi.n	800bcdc <USBD_GetEpDesc+0x2e>
 800bd10:	e000      	b.n	800bd14 <USBD_GetEpDesc+0x66>
          break;
 800bd12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd14:	693b      	ldr	r3, [r7, #16]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b085      	sub	sp, #20
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	881b      	ldrh	r3, [r3, #0]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	7812      	ldrb	r2, [r2, #0]
 800bd34:	4413      	add	r3, r2
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	461a      	mov	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4413      	add	r3, r2
 800bd46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd48:	68fb      	ldr	r3, [r7, #12]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b087      	sub	sp, #28
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd74:	8a3b      	ldrh	r3, [r7, #16]
 800bd76:	021b      	lsls	r3, r3, #8
 800bd78:	b21a      	sxth	r2, r3
 800bd7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	b21b      	sxth	r3, r3
 800bd82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd84:	89fb      	ldrh	r3, [r7, #14]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
	...

0800bd94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdaa:	2b40      	cmp	r3, #64	@ 0x40
 800bdac:	d005      	beq.n	800bdba <USBD_StdDevReq+0x26>
 800bdae:	2b40      	cmp	r3, #64	@ 0x40
 800bdb0:	d857      	bhi.n	800be62 <USBD_StdDevReq+0xce>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00f      	beq.n	800bdd6 <USBD_StdDevReq+0x42>
 800bdb6:	2b20      	cmp	r3, #32
 800bdb8:	d153      	bne.n	800be62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	32ae      	adds	r2, #174	@ 0xae
 800bdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	4798      	blx	r3
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73fb      	strb	r3, [r7, #15]
      break;
 800bdd4:	e04a      	b.n	800be6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	785b      	ldrb	r3, [r3, #1]
 800bdda:	2b09      	cmp	r3, #9
 800bddc:	d83b      	bhi.n	800be56 <USBD_StdDevReq+0xc2>
 800bdde:	a201      	add	r2, pc, #4	@ (adr r2, 800bde4 <USBD_StdDevReq+0x50>)
 800bde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde4:	0800be39 	.word	0x0800be39
 800bde8:	0800be4d 	.word	0x0800be4d
 800bdec:	0800be57 	.word	0x0800be57
 800bdf0:	0800be43 	.word	0x0800be43
 800bdf4:	0800be57 	.word	0x0800be57
 800bdf8:	0800be17 	.word	0x0800be17
 800bdfc:	0800be0d 	.word	0x0800be0d
 800be00:	0800be57 	.word	0x0800be57
 800be04:	0800be2f 	.word	0x0800be2f
 800be08:	0800be21 	.word	0x0800be21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fa3c 	bl	800c28c <USBD_GetDescriptor>
          break;
 800be14:	e024      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be16:	6839      	ldr	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fbcb 	bl	800c5b4 <USBD_SetAddress>
          break;
 800be1e:	e01f      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fc0a 	bl	800c63c <USBD_SetConfig>
 800be28:	4603      	mov	r3, r0
 800be2a:	73fb      	strb	r3, [r7, #15]
          break;
 800be2c:	e018      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fcad 	bl	800c790 <USBD_GetConfig>
          break;
 800be36:	e013      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fcde 	bl	800c7fc <USBD_GetStatus>
          break;
 800be40:	e00e      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fd0d 	bl	800c864 <USBD_SetFeature>
          break;
 800be4a:	e009      	b.n	800be60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fd31 	bl	800c8b6 <USBD_ClrFeature>
          break;
 800be54:	e004      	b.n	800be60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fd88 	bl	800c96e <USBD_CtlError>
          break;
 800be5e:	bf00      	nop
      }
      break;
 800be60:	e004      	b.n	800be6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fd82 	bl	800c96e <USBD_CtlError>
      break;
 800be6a:	bf00      	nop
  }

  return ret;
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop

0800be78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be8e:	2b40      	cmp	r3, #64	@ 0x40
 800be90:	d005      	beq.n	800be9e <USBD_StdItfReq+0x26>
 800be92:	2b40      	cmp	r3, #64	@ 0x40
 800be94:	d852      	bhi.n	800bf3c <USBD_StdItfReq+0xc4>
 800be96:	2b00      	cmp	r3, #0
 800be98:	d001      	beq.n	800be9e <USBD_StdItfReq+0x26>
 800be9a:	2b20      	cmp	r3, #32
 800be9c:	d14e      	bne.n	800bf3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	3b01      	subs	r3, #1
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d840      	bhi.n	800bf2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	889b      	ldrh	r3, [r3, #4]
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d836      	bhi.n	800bf24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	889b      	ldrh	r3, [r3, #4]
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	4619      	mov	r1, r3
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff fedb 	bl	800bc7a <USBD_CoreFindIF>
 800bec4:	4603      	mov	r3, r0
 800bec6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
 800beca:	2bff      	cmp	r3, #255	@ 0xff
 800becc:	d01d      	beq.n	800bf0a <USBD_StdItfReq+0x92>
 800bece:	7bbb      	ldrb	r3, [r7, #14]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d11a      	bne.n	800bf0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bed4:	7bba      	ldrb	r2, [r7, #14]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	32ae      	adds	r2, #174	@ 0xae
 800beda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00f      	beq.n	800bf04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bee4:	7bba      	ldrb	r2, [r7, #14]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800beec:	7bba      	ldrb	r2, [r7, #14]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	32ae      	adds	r2, #174	@ 0xae
 800bef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	4798      	blx	r3
 800befe:	4603      	mov	r3, r0
 800bf00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf02:	e004      	b.n	800bf0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf04:	2303      	movs	r3, #3
 800bf06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf08:	e001      	b.n	800bf0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	88db      	ldrh	r3, [r3, #6]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d110      	bne.n	800bf38 <USBD_StdItfReq+0xc0>
 800bf16:	7bfb      	ldrb	r3, [r7, #15]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d10d      	bne.n	800bf38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fdf1 	bl	800cb04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf22:	e009      	b.n	800bf38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fd21 	bl	800c96e <USBD_CtlError>
          break;
 800bf2c:	e004      	b.n	800bf38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fd1c 	bl	800c96e <USBD_CtlError>
          break;
 800bf36:	e000      	b.n	800bf3a <USBD_StdItfReq+0xc2>
          break;
 800bf38:	bf00      	nop
      }
      break;
 800bf3a:	e004      	b.n	800bf46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fd15 	bl	800c96e <USBD_CtlError>
      break;
 800bf44:	bf00      	nop
  }

  return ret;
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	889b      	ldrh	r3, [r3, #4]
 800bf62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf6c:	2b40      	cmp	r3, #64	@ 0x40
 800bf6e:	d007      	beq.n	800bf80 <USBD_StdEPReq+0x30>
 800bf70:	2b40      	cmp	r3, #64	@ 0x40
 800bf72:	f200 817f 	bhi.w	800c274 <USBD_StdEPReq+0x324>
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d02a      	beq.n	800bfd0 <USBD_StdEPReq+0x80>
 800bf7a:	2b20      	cmp	r3, #32
 800bf7c:	f040 817a 	bne.w	800c274 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff fe85 	bl	800bc94 <USBD_CoreFindEP>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf8e:	7b7b      	ldrb	r3, [r7, #13]
 800bf90:	2bff      	cmp	r3, #255	@ 0xff
 800bf92:	f000 8174 	beq.w	800c27e <USBD_StdEPReq+0x32e>
 800bf96:	7b7b      	ldrb	r3, [r7, #13]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f040 8170 	bne.w	800c27e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bf9e:	7b7a      	ldrb	r2, [r7, #13]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfa6:	7b7a      	ldrb	r2, [r7, #13]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	32ae      	adds	r2, #174	@ 0xae
 800bfac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f000 8163 	beq.w	800c27e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bfb8:	7b7a      	ldrb	r2, [r7, #13]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	32ae      	adds	r2, #174	@ 0xae
 800bfbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	4798      	blx	r3
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bfce:	e156      	b.n	800c27e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	785b      	ldrb	r3, [r3, #1]
 800bfd4:	2b03      	cmp	r3, #3
 800bfd6:	d008      	beq.n	800bfea <USBD_StdEPReq+0x9a>
 800bfd8:	2b03      	cmp	r3, #3
 800bfda:	f300 8145 	bgt.w	800c268 <USBD_StdEPReq+0x318>
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f000 809b 	beq.w	800c11a <USBD_StdEPReq+0x1ca>
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d03c      	beq.n	800c062 <USBD_StdEPReq+0x112>
 800bfe8:	e13e      	b.n	800c268 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	d002      	beq.n	800bffc <USBD_StdEPReq+0xac>
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	d016      	beq.n	800c028 <USBD_StdEPReq+0xd8>
 800bffa:	e02c      	b.n	800c056 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bffc:	7bbb      	ldrb	r3, [r7, #14]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00d      	beq.n	800c01e <USBD_StdEPReq+0xce>
 800c002:	7bbb      	ldrb	r3, [r7, #14]
 800c004:	2b80      	cmp	r3, #128	@ 0x80
 800c006:	d00a      	beq.n	800c01e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f001 fa45 	bl	800d49c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c012:	2180      	movs	r1, #128	@ 0x80
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f001 fa41 	bl	800d49c <USBD_LL_StallEP>
 800c01a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c01c:	e020      	b.n	800c060 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fca4 	bl	800c96e <USBD_CtlError>
              break;
 800c026:	e01b      	b.n	800c060 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	885b      	ldrh	r3, [r3, #2]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10e      	bne.n	800c04e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c030:	7bbb      	ldrb	r3, [r7, #14]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00b      	beq.n	800c04e <USBD_StdEPReq+0xfe>
 800c036:	7bbb      	ldrb	r3, [r7, #14]
 800c038:	2b80      	cmp	r3, #128	@ 0x80
 800c03a:	d008      	beq.n	800c04e <USBD_StdEPReq+0xfe>
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	88db      	ldrh	r3, [r3, #6]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d104      	bne.n	800c04e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f001 fa27 	bl	800d49c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 fd58 	bl	800cb04 <USBD_CtlSendStatus>

              break;
 800c054:	e004      	b.n	800c060 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fc88 	bl	800c96e <USBD_CtlError>
              break;
 800c05e:	bf00      	nop
          }
          break;
 800c060:	e107      	b.n	800c272 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d002      	beq.n	800c074 <USBD_StdEPReq+0x124>
 800c06e:	2b03      	cmp	r3, #3
 800c070:	d016      	beq.n	800c0a0 <USBD_StdEPReq+0x150>
 800c072:	e04b      	b.n	800c10c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00d      	beq.n	800c096 <USBD_StdEPReq+0x146>
 800c07a:	7bbb      	ldrb	r3, [r7, #14]
 800c07c:	2b80      	cmp	r3, #128	@ 0x80
 800c07e:	d00a      	beq.n	800c096 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f001 fa09 	bl	800d49c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c08a:	2180      	movs	r1, #128	@ 0x80
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f001 fa05 	bl	800d49c <USBD_LL_StallEP>
 800c092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c094:	e040      	b.n	800c118 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fc68 	bl	800c96e <USBD_CtlError>
              break;
 800c09e:	e03b      	b.n	800c118 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	885b      	ldrh	r3, [r3, #2]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d136      	bne.n	800c116 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d004      	beq.n	800c0bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f001 fa26 	bl	800d508 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fd21 	bl	800cb04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff fde4 	bl	800bc94 <USBD_CoreFindEP>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0d0:	7b7b      	ldrb	r3, [r7, #13]
 800c0d2:	2bff      	cmp	r3, #255	@ 0xff
 800c0d4:	d01f      	beq.n	800c116 <USBD_StdEPReq+0x1c6>
 800c0d6:	7b7b      	ldrb	r3, [r7, #13]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d11c      	bne.n	800c116 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c0dc:	7b7a      	ldrb	r2, [r7, #13]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c0e4:	7b7a      	ldrb	r2, [r7, #13]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	32ae      	adds	r2, #174	@ 0xae
 800c0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d010      	beq.n	800c116 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c0f4:	7b7a      	ldrb	r2, [r7, #13]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	32ae      	adds	r2, #174	@ 0xae
 800c0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	4798      	blx	r3
 800c106:	4603      	mov	r3, r0
 800c108:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c10a:	e004      	b.n	800c116 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fc2d 	bl	800c96e <USBD_CtlError>
              break;
 800c114:	e000      	b.n	800c118 <USBD_StdEPReq+0x1c8>
              break;
 800c116:	bf00      	nop
          }
          break;
 800c118:	e0ab      	b.n	800c272 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b02      	cmp	r3, #2
 800c124:	d002      	beq.n	800c12c <USBD_StdEPReq+0x1dc>
 800c126:	2b03      	cmp	r3, #3
 800c128:	d032      	beq.n	800c190 <USBD_StdEPReq+0x240>
 800c12a:	e097      	b.n	800c25c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d007      	beq.n	800c142 <USBD_StdEPReq+0x1f2>
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	2b80      	cmp	r3, #128	@ 0x80
 800c136:	d004      	beq.n	800c142 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 fc17 	bl	800c96e <USBD_CtlError>
                break;
 800c140:	e091      	b.n	800c266 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c146:	2b00      	cmp	r3, #0
 800c148:	da0b      	bge.n	800c162 <USBD_StdEPReq+0x212>
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c150:	4613      	mov	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	3310      	adds	r3, #16
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	4413      	add	r3, r2
 800c15e:	3304      	adds	r3, #4
 800c160:	e00b      	b.n	800c17a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c162:	7bbb      	ldrb	r3, [r7, #14]
 800c164:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c168:	4613      	mov	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	4413      	add	r3, r2
 800c178:	3304      	adds	r3, #4
 800c17a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	2202      	movs	r2, #2
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fc61 	bl	800ca50 <USBD_CtlSendData>
              break;
 800c18e:	e06a      	b.n	800c266 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c194:	2b00      	cmp	r3, #0
 800c196:	da11      	bge.n	800c1bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c198:	7bbb      	ldrb	r3, [r7, #14]
 800c19a:	f003 020f 	and.w	r2, r3, #15
 800c19e:	6879      	ldr	r1, [r7, #4]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	440b      	add	r3, r1
 800c1aa:	3324      	adds	r3, #36	@ 0x24
 800c1ac:	881b      	ldrh	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d117      	bne.n	800c1e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1b2:	6839      	ldr	r1, [r7, #0]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fbda 	bl	800c96e <USBD_CtlError>
                  break;
 800c1ba:	e054      	b.n	800c266 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1bc:	7bbb      	ldrb	r3, [r7, #14]
 800c1be:	f003 020f 	and.w	r2, r3, #15
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4413      	add	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	440b      	add	r3, r1
 800c1ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c1d2:	881b      	ldrh	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d104      	bne.n	800c1e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fbc7 	bl	800c96e <USBD_CtlError>
                  break;
 800c1e0:	e041      	b.n	800c266 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	da0b      	bge.n	800c202 <USBD_StdEPReq+0x2b2>
 800c1ea:	7bbb      	ldrb	r3, [r7, #14]
 800c1ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	3310      	adds	r3, #16
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	3304      	adds	r3, #4
 800c200:	e00b      	b.n	800c21a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c202:	7bbb      	ldrb	r3, [r7, #14]
 800c204:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c208:	4613      	mov	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	4413      	add	r3, r2
 800c218:	3304      	adds	r3, #4
 800c21a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d002      	beq.n	800c228 <USBD_StdEPReq+0x2d8>
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	2b80      	cmp	r3, #128	@ 0x80
 800c226:	d103      	bne.n	800c230 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	2200      	movs	r2, #0
 800c22c:	601a      	str	r2, [r3, #0]
 800c22e:	e00e      	b.n	800c24e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f001 f99d 	bl	800d574 <USBD_LL_IsStallEP>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d003      	beq.n	800c248 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	2201      	movs	r2, #1
 800c244:	601a      	str	r2, [r3, #0]
 800c246:	e002      	b.n	800c24e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	2200      	movs	r2, #0
 800c24c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	2202      	movs	r2, #2
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fbfb 	bl	800ca50 <USBD_CtlSendData>
              break;
 800c25a:	e004      	b.n	800c266 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fb85 	bl	800c96e <USBD_CtlError>
              break;
 800c264:	bf00      	nop
          }
          break;
 800c266:	e004      	b.n	800c272 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fb7f 	bl	800c96e <USBD_CtlError>
          break;
 800c270:	bf00      	nop
      }
      break;
 800c272:	e005      	b.n	800c280 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c274:	6839      	ldr	r1, [r7, #0]
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fb79 	bl	800c96e <USBD_CtlError>
      break;
 800c27c:	e000      	b.n	800c280 <USBD_StdEPReq+0x330>
      break;
 800c27e:	bf00      	nop
  }

  return ret;
 800c280:	7bfb      	ldrb	r3, [r7, #15]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c296:	2300      	movs	r3, #0
 800c298:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	885b      	ldrh	r3, [r3, #2]
 800c2a6:	0a1b      	lsrs	r3, r3, #8
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	2b0e      	cmp	r3, #14
 800c2ae:	f200 8152 	bhi.w	800c556 <USBD_GetDescriptor+0x2ca>
 800c2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2b8 <USBD_GetDescriptor+0x2c>)
 800c2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b8:	0800c329 	.word	0x0800c329
 800c2bc:	0800c341 	.word	0x0800c341
 800c2c0:	0800c381 	.word	0x0800c381
 800c2c4:	0800c557 	.word	0x0800c557
 800c2c8:	0800c557 	.word	0x0800c557
 800c2cc:	0800c4f7 	.word	0x0800c4f7
 800c2d0:	0800c523 	.word	0x0800c523
 800c2d4:	0800c557 	.word	0x0800c557
 800c2d8:	0800c557 	.word	0x0800c557
 800c2dc:	0800c557 	.word	0x0800c557
 800c2e0:	0800c557 	.word	0x0800c557
 800c2e4:	0800c557 	.word	0x0800c557
 800c2e8:	0800c557 	.word	0x0800c557
 800c2ec:	0800c557 	.word	0x0800c557
 800c2f0:	0800c2f5 	.word	0x0800c2f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c306:	69db      	ldr	r3, [r3, #28]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	7c12      	ldrb	r2, [r2, #16]
 800c30c:	f107 0108 	add.w	r1, r7, #8
 800c310:	4610      	mov	r0, r2
 800c312:	4798      	blx	r3
 800c314:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c316:	e126      	b.n	800c566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c318:	6839      	ldr	r1, [r7, #0]
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fb27 	bl	800c96e <USBD_CtlError>
        err++;
 800c320:	7afb      	ldrb	r3, [r7, #11]
 800c322:	3301      	adds	r3, #1
 800c324:	72fb      	strb	r3, [r7, #11]
      break;
 800c326:	e11e      	b.n	800c566 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	7c12      	ldrb	r2, [r2, #16]
 800c334:	f107 0108 	add.w	r1, r7, #8
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	60f8      	str	r0, [r7, #12]
      break;
 800c33e:	e112      	b.n	800c566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	7c1b      	ldrb	r3, [r3, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10d      	bne.n	800c364 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c34e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c350:	f107 0208 	add.w	r2, r7, #8
 800c354:	4610      	mov	r0, r2
 800c356:	4798      	blx	r3
 800c358:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3301      	adds	r3, #1
 800c35e:	2202      	movs	r2, #2
 800c360:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c362:	e100      	b.n	800c566 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c36c:	f107 0208 	add.w	r2, r7, #8
 800c370:	4610      	mov	r0, r2
 800c372:	4798      	blx	r3
 800c374:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3301      	adds	r3, #1
 800c37a:	2202      	movs	r2, #2
 800c37c:	701a      	strb	r2, [r3, #0]
      break;
 800c37e:	e0f2      	b.n	800c566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	885b      	ldrh	r3, [r3, #2]
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b05      	cmp	r3, #5
 800c388:	f200 80ac 	bhi.w	800c4e4 <USBD_GetDescriptor+0x258>
 800c38c:	a201      	add	r2, pc, #4	@ (adr r2, 800c394 <USBD_GetDescriptor+0x108>)
 800c38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c392:	bf00      	nop
 800c394:	0800c3ad 	.word	0x0800c3ad
 800c398:	0800c3e1 	.word	0x0800c3e1
 800c39c:	0800c415 	.word	0x0800c415
 800c3a0:	0800c449 	.word	0x0800c449
 800c3a4:	0800c47d 	.word	0x0800c47d
 800c3a8:	0800c4b1 	.word	0x0800c4b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00b      	beq.n	800c3d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	7c12      	ldrb	r2, [r2, #16]
 800c3c4:	f107 0108 	add.w	r1, r7, #8
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	4798      	blx	r3
 800c3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ce:	e091      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 facb 	bl	800c96e <USBD_CtlError>
            err++;
 800c3d8:	7afb      	ldrb	r3, [r7, #11]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c3de:	e089      	b.n	800c4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00b      	beq.n	800c404 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	7c12      	ldrb	r2, [r2, #16]
 800c3f8:	f107 0108 	add.w	r1, r7, #8
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	4798      	blx	r3
 800c400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c402:	e077      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fab1 	bl	800c96e <USBD_CtlError>
            err++;
 800c40c:	7afb      	ldrb	r3, [r7, #11]
 800c40e:	3301      	adds	r3, #1
 800c410:	72fb      	strb	r3, [r7, #11]
          break;
 800c412:	e06f      	b.n	800c4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00b      	beq.n	800c438 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	7c12      	ldrb	r2, [r2, #16]
 800c42c:	f107 0108 	add.w	r1, r7, #8
 800c430:	4610      	mov	r0, r2
 800c432:	4798      	blx	r3
 800c434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c436:	e05d      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fa97 	bl	800c96e <USBD_CtlError>
            err++;
 800c440:	7afb      	ldrb	r3, [r7, #11]
 800c442:	3301      	adds	r3, #1
 800c444:	72fb      	strb	r3, [r7, #11]
          break;
 800c446:	e055      	b.n	800c4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00b      	beq.n	800c46c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	7c12      	ldrb	r2, [r2, #16]
 800c460:	f107 0108 	add.w	r1, r7, #8
 800c464:	4610      	mov	r0, r2
 800c466:	4798      	blx	r3
 800c468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46a:	e043      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fa7d 	bl	800c96e <USBD_CtlError>
            err++;
 800c474:	7afb      	ldrb	r3, [r7, #11]
 800c476:	3301      	adds	r3, #1
 800c478:	72fb      	strb	r3, [r7, #11]
          break;
 800c47a:	e03b      	b.n	800c4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c482:	695b      	ldr	r3, [r3, #20]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00b      	beq.n	800c4a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c48e:	695b      	ldr	r3, [r3, #20]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	7c12      	ldrb	r2, [r2, #16]
 800c494:	f107 0108 	add.w	r1, r7, #8
 800c498:	4610      	mov	r0, r2
 800c49a:	4798      	blx	r3
 800c49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49e:	e029      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fa63 	bl	800c96e <USBD_CtlError>
            err++;
 800c4a8:	7afb      	ldrb	r3, [r7, #11]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ae:	e021      	b.n	800c4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00b      	beq.n	800c4d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4c2:	699b      	ldr	r3, [r3, #24]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	7c12      	ldrb	r2, [r2, #16]
 800c4c8:	f107 0108 	add.w	r1, r7, #8
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4798      	blx	r3
 800c4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4d2:	e00f      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fa49 	bl	800c96e <USBD_CtlError>
            err++;
 800c4dc:	7afb      	ldrb	r3, [r7, #11]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4e2:	e007      	b.n	800c4f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 fa41 	bl	800c96e <USBD_CtlError>
          err++;
 800c4ec:	7afb      	ldrb	r3, [r7, #11]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c4f2:	bf00      	nop
      }
      break;
 800c4f4:	e037      	b.n	800c566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	7c1b      	ldrb	r3, [r3, #16]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d109      	bne.n	800c512 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c506:	f107 0208 	add.w	r2, r7, #8
 800c50a:	4610      	mov	r0, r2
 800c50c:	4798      	blx	r3
 800c50e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c510:	e029      	b.n	800c566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c512:	6839      	ldr	r1, [r7, #0]
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 fa2a 	bl	800c96e <USBD_CtlError>
        err++;
 800c51a:	7afb      	ldrb	r3, [r7, #11]
 800c51c:	3301      	adds	r3, #1
 800c51e:	72fb      	strb	r3, [r7, #11]
      break;
 800c520:	e021      	b.n	800c566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	7c1b      	ldrb	r3, [r3, #16]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d10d      	bne.n	800c546 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c532:	f107 0208 	add.w	r2, r7, #8
 800c536:	4610      	mov	r0, r2
 800c538:	4798      	blx	r3
 800c53a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	3301      	adds	r3, #1
 800c540:	2207      	movs	r2, #7
 800c542:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c544:	e00f      	b.n	800c566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fa10 	bl	800c96e <USBD_CtlError>
        err++;
 800c54e:	7afb      	ldrb	r3, [r7, #11]
 800c550:	3301      	adds	r3, #1
 800c552:	72fb      	strb	r3, [r7, #11]
      break;
 800c554:	e007      	b.n	800c566 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fa08 	bl	800c96e <USBD_CtlError>
      err++;
 800c55e:	7afb      	ldrb	r3, [r7, #11]
 800c560:	3301      	adds	r3, #1
 800c562:	72fb      	strb	r3, [r7, #11]
      break;
 800c564:	bf00      	nop
  }

  if (err != 0U)
 800c566:	7afb      	ldrb	r3, [r7, #11]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d11e      	bne.n	800c5aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	88db      	ldrh	r3, [r3, #6]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d016      	beq.n	800c5a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c574:	893b      	ldrh	r3, [r7, #8]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00e      	beq.n	800c598 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	88da      	ldrh	r2, [r3, #6]
 800c57e:	893b      	ldrh	r3, [r7, #8]
 800c580:	4293      	cmp	r3, r2
 800c582:	bf28      	it	cs
 800c584:	4613      	movcs	r3, r2
 800c586:	b29b      	uxth	r3, r3
 800c588:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c58a:	893b      	ldrh	r3, [r7, #8]
 800c58c:	461a      	mov	r2, r3
 800c58e:	68f9      	ldr	r1, [r7, #12]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fa5d 	bl	800ca50 <USBD_CtlSendData>
 800c596:	e009      	b.n	800c5ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f9e7 	bl	800c96e <USBD_CtlError>
 800c5a0:	e004      	b.n	800c5ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 faae 	bl	800cb04 <USBD_CtlSendStatus>
 800c5a8:	e000      	b.n	800c5ac <USBD_GetDescriptor+0x320>
    return;
 800c5aa:	bf00      	nop
  }
}
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop

0800c5b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	889b      	ldrh	r3, [r3, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d131      	bne.n	800c62a <USBD_SetAddress+0x76>
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	88db      	ldrh	r3, [r3, #6]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d12d      	bne.n	800c62a <USBD_SetAddress+0x76>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	885b      	ldrh	r3, [r3, #2]
 800c5d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5d4:	d829      	bhi.n	800c62a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	885b      	ldrh	r3, [r3, #2]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d104      	bne.n	800c5f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f9bc 	bl	800c96e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5f6:	e01d      	b.n	800c634 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	7bfa      	ldrb	r2, [r7, #15]
 800c5fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c600:	7bfb      	ldrb	r3, [r7, #15]
 800c602:	4619      	mov	r1, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 ffe1 	bl	800d5cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fa7a 	bl	800cb04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c610:	7bfb      	ldrb	r3, [r7, #15]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d004      	beq.n	800c620 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2202      	movs	r2, #2
 800c61a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c61e:	e009      	b.n	800c634 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c628:	e004      	b.n	800c634 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 f99e 	bl	800c96e <USBD_CtlError>
  }
}
 800c632:	bf00      	nop
 800c634:	bf00      	nop
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	885b      	ldrh	r3, [r3, #2]
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	4b4e      	ldr	r3, [pc, #312]	@ (800c78c <USBD_SetConfig+0x150>)
 800c652:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c654:	4b4d      	ldr	r3, [pc, #308]	@ (800c78c <USBD_SetConfig+0x150>)
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d905      	bls.n	800c668 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c65c:	6839      	ldr	r1, [r7, #0]
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f985 	bl	800c96e <USBD_CtlError>
    return USBD_FAIL;
 800c664:	2303      	movs	r3, #3
 800c666:	e08c      	b.n	800c782 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b02      	cmp	r3, #2
 800c672:	d002      	beq.n	800c67a <USBD_SetConfig+0x3e>
 800c674:	2b03      	cmp	r3, #3
 800c676:	d029      	beq.n	800c6cc <USBD_SetConfig+0x90>
 800c678:	e075      	b.n	800c766 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c67a:	4b44      	ldr	r3, [pc, #272]	@ (800c78c <USBD_SetConfig+0x150>)
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d020      	beq.n	800c6c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c682:	4b42      	ldr	r3, [pc, #264]	@ (800c78c <USBD_SetConfig+0x150>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	461a      	mov	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c68c:	4b3f      	ldr	r3, [pc, #252]	@ (800c78c <USBD_SetConfig+0x150>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	4619      	mov	r1, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7fe ffb9 	bl	800b60a <USBD_SetClassConfig>
 800c698:	4603      	mov	r3, r0
 800c69a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c69c:	7bfb      	ldrb	r3, [r7, #15]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d008      	beq.n	800c6b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 f962 	bl	800c96e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6b2:	e065      	b.n	800c780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fa25 	bl	800cb04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2203      	movs	r2, #3
 800c6be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6c2:	e05d      	b.n	800c780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 fa1d 	bl	800cb04 <USBD_CtlSendStatus>
      break;
 800c6ca:	e059      	b.n	800c780 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6cc:	4b2f      	ldr	r3, [pc, #188]	@ (800c78c <USBD_SetConfig+0x150>)
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d112      	bne.n	800c6fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2202      	movs	r2, #2
 800c6d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c6dc:	4b2b      	ldr	r3, [pc, #172]	@ (800c78c <USBD_SetConfig+0x150>)
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6e6:	4b29      	ldr	r3, [pc, #164]	@ (800c78c <USBD_SetConfig+0x150>)
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f7fe ffa8 	bl	800b642 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fa06 	bl	800cb04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6f8:	e042      	b.n	800c780 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c6fa:	4b24      	ldr	r3, [pc, #144]	@ (800c78c <USBD_SetConfig+0x150>)
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	461a      	mov	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	429a      	cmp	r2, r3
 800c706:	d02a      	beq.n	800c75e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7fe ff96 	bl	800b642 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c716:	4b1d      	ldr	r3, [pc, #116]	@ (800c78c <USBD_SetConfig+0x150>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c720:	4b1a      	ldr	r3, [pc, #104]	@ (800c78c <USBD_SetConfig+0x150>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	4619      	mov	r1, r3
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7fe ff6f 	bl	800b60a <USBD_SetClassConfig>
 800c72c:	4603      	mov	r3, r0
 800c72e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c730:	7bfb      	ldrb	r3, [r7, #15]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00f      	beq.n	800c756 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f918 	bl	800c96e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7fe ff7b 	bl	800b642 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2202      	movs	r2, #2
 800c750:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c754:	e014      	b.n	800c780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f9d4 	bl	800cb04 <USBD_CtlSendStatus>
      break;
 800c75c:	e010      	b.n	800c780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f9d0 	bl	800cb04 <USBD_CtlSendStatus>
      break;
 800c764:	e00c      	b.n	800c780 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f900 	bl	800c96e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c76e:	4b07      	ldr	r3, [pc, #28]	@ (800c78c <USBD_SetConfig+0x150>)
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	4619      	mov	r1, r3
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7fe ff64 	bl	800b642 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c77a:	2303      	movs	r3, #3
 800c77c:	73fb      	strb	r3, [r7, #15]
      break;
 800c77e:	bf00      	nop
  }

  return ret;
 800c780:	7bfb      	ldrb	r3, [r7, #15]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	2000357c 	.word	0x2000357c

0800c790 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	88db      	ldrh	r3, [r3, #6]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d004      	beq.n	800c7ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f8e2 	bl	800c96e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7aa:	e023      	b.n	800c7f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	dc02      	bgt.n	800c7be <USBD_GetConfig+0x2e>
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	dc03      	bgt.n	800c7c4 <USBD_GetConfig+0x34>
 800c7bc:	e015      	b.n	800c7ea <USBD_GetConfig+0x5a>
 800c7be:	2b03      	cmp	r3, #3
 800c7c0:	d00b      	beq.n	800c7da <USBD_GetConfig+0x4a>
 800c7c2:	e012      	b.n	800c7ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	3308      	adds	r3, #8
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f93c 	bl	800ca50 <USBD_CtlSendData>
        break;
 800c7d8:	e00c      	b.n	800c7f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	3304      	adds	r3, #4
 800c7de:	2201      	movs	r2, #1
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f934 	bl	800ca50 <USBD_CtlSendData>
        break;
 800c7e8:	e004      	b.n	800c7f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f8be 	bl	800c96e <USBD_CtlError>
        break;
 800c7f2:	bf00      	nop
}
 800c7f4:	bf00      	nop
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	3b01      	subs	r3, #1
 800c810:	2b02      	cmp	r3, #2
 800c812:	d81e      	bhi.n	800c852 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	88db      	ldrh	r3, [r3, #6]
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d004      	beq.n	800c826 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f8a5 	bl	800c96e <USBD_CtlError>
        break;
 800c824:	e01a      	b.n	800c85c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2201      	movs	r2, #1
 800c82a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	f043 0202 	orr.w	r2, r3, #2
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	330c      	adds	r3, #12
 800c846:	2202      	movs	r2, #2
 800c848:	4619      	mov	r1, r3
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f900 	bl	800ca50 <USBD_CtlSendData>
      break;
 800c850:	e004      	b.n	800c85c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f88a 	bl	800c96e <USBD_CtlError>
      break;
 800c85a:	bf00      	nop
  }
}
 800c85c:	bf00      	nop
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	885b      	ldrh	r3, [r3, #2]
 800c872:	2b01      	cmp	r3, #1
 800c874:	d107      	bne.n	800c886 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f940 	bl	800cb04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c884:	e013      	b.n	800c8ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	885b      	ldrh	r3, [r3, #2]
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d10b      	bne.n	800c8a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	889b      	ldrh	r3, [r3, #4]
 800c892:	0a1b      	lsrs	r3, r3, #8
 800c894:	b29b      	uxth	r3, r3
 800c896:	b2da      	uxtb	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f930 	bl	800cb04 <USBD_CtlSendStatus>
}
 800c8a4:	e003      	b.n	800c8ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8a6:	6839      	ldr	r1, [r7, #0]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f860 	bl	800c96e <USBD_CtlError>
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d80b      	bhi.n	800c8e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	885b      	ldrh	r3, [r3, #2]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d10c      	bne.n	800c8f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f910 	bl	800cb04 <USBD_CtlSendStatus>
      }
      break;
 800c8e4:	e004      	b.n	800c8f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8e6:	6839      	ldr	r1, [r7, #0]
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f840 	bl	800c96e <USBD_CtlError>
      break;
 800c8ee:	e000      	b.n	800c8f2 <USBD_ClrFeature+0x3c>
      break;
 800c8f0:	bf00      	nop
  }
}
 800c8f2:	bf00      	nop
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	781a      	ldrb	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	3301      	adds	r3, #1
 800c914:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	781a      	ldrb	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	3301      	adds	r3, #1
 800c922:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f7ff fa16 	bl	800bd56 <SWAPBYTE>
 800c92a:	4603      	mov	r3, r0
 800c92c:	461a      	mov	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	3301      	adds	r3, #1
 800c936:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	3301      	adds	r3, #1
 800c93c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f7ff fa09 	bl	800bd56 <SWAPBYTE>
 800c944:	4603      	mov	r3, r0
 800c946:	461a      	mov	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3301      	adds	r3, #1
 800c950:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3301      	adds	r3, #1
 800c956:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f7ff f9fc 	bl	800bd56 <SWAPBYTE>
 800c95e:	4603      	mov	r3, r0
 800c960:	461a      	mov	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	80da      	strh	r2, [r3, #6]
}
 800c966:	bf00      	nop
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b082      	sub	sp, #8
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c978:	2180      	movs	r1, #128	@ 0x80
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 fd8e 	bl	800d49c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c980:	2100      	movs	r1, #0
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fd8a 	bl	800d49c <USBD_LL_StallEP>
}
 800c988:	bf00      	nop
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c99c:	2300      	movs	r3, #0
 800c99e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d036      	beq.n	800ca14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9aa:	6938      	ldr	r0, [r7, #16]
 800c9ac:	f000 f836 	bl	800ca1c <USBD_GetLen>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	005b      	lsls	r3, r3, #1
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9be:	7dfb      	ldrb	r3, [r7, #23]
 800c9c0:	68ba      	ldr	r2, [r7, #8]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	7812      	ldrb	r2, [r2, #0]
 800c9c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9d0:	7dfb      	ldrb	r3, [r7, #23]
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	2203      	movs	r2, #3
 800c9d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9e0:	e013      	b.n	800ca0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c9e2:	7dfb      	ldrb	r3, [r7, #23]
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	7812      	ldrb	r2, [r2, #0]
 800c9ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	613b      	str	r3, [r7, #16]
    idx++;
 800c9f4:	7dfb      	ldrb	r3, [r7, #23]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	4413      	add	r3, r2
 800ca00:	2200      	movs	r2, #0
 800ca02:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	3301      	adds	r3, #1
 800ca08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1e7      	bne.n	800c9e2 <USBD_GetString+0x52>
 800ca12:	e000      	b.n	800ca16 <USBD_GetString+0x86>
    return;
 800ca14:	bf00      	nop
  }
}
 800ca16:	3718      	adds	r7, #24
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca24:	2300      	movs	r3, #0
 800ca26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca2c:	e005      	b.n	800ca3a <USBD_GetLen+0x1e>
  {
    len++;
 800ca2e:	7bfb      	ldrb	r3, [r7, #15]
 800ca30:	3301      	adds	r3, #1
 800ca32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	3301      	adds	r3, #1
 800ca38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1f5      	bne.n	800ca2e <USBD_GetLen+0x12>
  }

  return len;
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3714      	adds	r7, #20
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2202      	movs	r2, #2
 800ca60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	2100      	movs	r1, #0
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f000 fdde 	bl	800d638 <USBD_LL_Transmit>

  return USBD_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b084      	sub	sp, #16
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	2100      	movs	r1, #0
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f000 fdcd 	bl	800d638 <USBD_LL_Transmit>

  return USBD_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2203      	movs	r2, #3
 800cab8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	2100      	movs	r1, #0
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f000 fde8 	bl	800d6a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b084      	sub	sp, #16
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	60f8      	str	r0, [r7, #12]
 800caea:	60b9      	str	r1, [r7, #8]
 800caec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	2100      	movs	r1, #0
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f000 fdd7 	bl	800d6a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2204      	movs	r2, #4
 800cb10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb14:	2300      	movs	r3, #0
 800cb16:	2200      	movs	r2, #0
 800cb18:	2100      	movs	r1, #0
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fd8c 	bl	800d638 <USBD_LL_Transmit>

  return USBD_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b082      	sub	sp, #8
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2205      	movs	r2, #5
 800cb36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	2100      	movs	r1, #0
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 fdb1 	bl	800d6a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb54:	2200      	movs	r2, #0
 800cb56:	4912      	ldr	r1, [pc, #72]	@ (800cba0 <MX_USB_DEVICE_Init+0x50>)
 800cb58:	4812      	ldr	r0, [pc, #72]	@ (800cba4 <MX_USB_DEVICE_Init+0x54>)
 800cb5a:	f7fe fcd9 	bl	800b510 <USBD_Init>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d001      	beq.n	800cb68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb64:	f7f4 fb5b 	bl	800121e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb68:	490f      	ldr	r1, [pc, #60]	@ (800cba8 <MX_USB_DEVICE_Init+0x58>)
 800cb6a:	480e      	ldr	r0, [pc, #56]	@ (800cba4 <MX_USB_DEVICE_Init+0x54>)
 800cb6c:	f7fe fd00 	bl	800b570 <USBD_RegisterClass>
 800cb70:	4603      	mov	r3, r0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d001      	beq.n	800cb7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb76:	f7f4 fb52 	bl	800121e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cb7a:	490c      	ldr	r1, [pc, #48]	@ (800cbac <MX_USB_DEVICE_Init+0x5c>)
 800cb7c:	4809      	ldr	r0, [pc, #36]	@ (800cba4 <MX_USB_DEVICE_Init+0x54>)
 800cb7e:	f7fe fbf7 	bl	800b370 <USBD_CDC_RegisterInterface>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb88:	f7f4 fb49 	bl	800121e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb8c:	4805      	ldr	r0, [pc, #20]	@ (800cba4 <MX_USB_DEVICE_Init+0x54>)
 800cb8e:	f7fe fd25 	bl	800b5dc <USBD_Start>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb98:	f7f4 fb41 	bl	800121e <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cb9c:	bf00      	nop
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	200000ac 	.word	0x200000ac
 800cba4:	20003580 	.word	0x20003580
 800cba8:	20000018 	.word	0x20000018
 800cbac:	20000098 	.word	0x20000098

0800cbb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	4905      	ldr	r1, [pc, #20]	@ (800cbcc <CDC_Init_FS+0x1c>)
 800cbb8:	4805      	ldr	r0, [pc, #20]	@ (800cbd0 <CDC_Init_FS+0x20>)
 800cbba:	f7fe fbf3 	bl	800b3a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbbe:	4905      	ldr	r1, [pc, #20]	@ (800cbd4 <CDC_Init_FS+0x24>)
 800cbc0:	4803      	ldr	r0, [pc, #12]	@ (800cbd0 <CDC_Init_FS+0x20>)
 800cbc2:	f7fe fc11 	bl	800b3e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	2000405c 	.word	0x2000405c
 800cbd0:	20003580 	.word	0x20003580
 800cbd4:	2000385c 	.word	0x2000385c

0800cbd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cbdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	6039      	str	r1, [r7, #0]
 800cbf2:	71fb      	strb	r3, [r7, #7]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cbf8:	79fb      	ldrb	r3, [r7, #7]
 800cbfa:	2b23      	cmp	r3, #35	@ 0x23
 800cbfc:	d84a      	bhi.n	800cc94 <CDC_Control_FS+0xac>
 800cbfe:	a201      	add	r2, pc, #4	@ (adr r2, 800cc04 <CDC_Control_FS+0x1c>)
 800cc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc04:	0800cc95 	.word	0x0800cc95
 800cc08:	0800cc95 	.word	0x0800cc95
 800cc0c:	0800cc95 	.word	0x0800cc95
 800cc10:	0800cc95 	.word	0x0800cc95
 800cc14:	0800cc95 	.word	0x0800cc95
 800cc18:	0800cc95 	.word	0x0800cc95
 800cc1c:	0800cc95 	.word	0x0800cc95
 800cc20:	0800cc95 	.word	0x0800cc95
 800cc24:	0800cc95 	.word	0x0800cc95
 800cc28:	0800cc95 	.word	0x0800cc95
 800cc2c:	0800cc95 	.word	0x0800cc95
 800cc30:	0800cc95 	.word	0x0800cc95
 800cc34:	0800cc95 	.word	0x0800cc95
 800cc38:	0800cc95 	.word	0x0800cc95
 800cc3c:	0800cc95 	.word	0x0800cc95
 800cc40:	0800cc95 	.word	0x0800cc95
 800cc44:	0800cc95 	.word	0x0800cc95
 800cc48:	0800cc95 	.word	0x0800cc95
 800cc4c:	0800cc95 	.word	0x0800cc95
 800cc50:	0800cc95 	.word	0x0800cc95
 800cc54:	0800cc95 	.word	0x0800cc95
 800cc58:	0800cc95 	.word	0x0800cc95
 800cc5c:	0800cc95 	.word	0x0800cc95
 800cc60:	0800cc95 	.word	0x0800cc95
 800cc64:	0800cc95 	.word	0x0800cc95
 800cc68:	0800cc95 	.word	0x0800cc95
 800cc6c:	0800cc95 	.word	0x0800cc95
 800cc70:	0800cc95 	.word	0x0800cc95
 800cc74:	0800cc95 	.word	0x0800cc95
 800cc78:	0800cc95 	.word	0x0800cc95
 800cc7c:	0800cc95 	.word	0x0800cc95
 800cc80:	0800cc95 	.word	0x0800cc95
 800cc84:	0800cc95 	.word	0x0800cc95
 800cc88:	0800cc95 	.word	0x0800cc95
 800cc8c:	0800cc95 	.word	0x0800cc95
 800cc90:	0800cc95 	.word	0x0800cc95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cc94:	bf00      	nop
  }

  return (USBD_OK);
 800cc96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ccae:	6879      	ldr	r1, [r7, #4]
 800ccb0:	4808      	ldr	r0, [pc, #32]	@ (800ccd4 <CDC_Receive_FS+0x30>)
 800ccb2:	f7fe fb99 	bl	800b3e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ccb6:	4807      	ldr	r0, [pc, #28]	@ (800ccd4 <CDC_Receive_FS+0x30>)
 800ccb8:	f7fe fbf4 	bl	800b4a4 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  //USB_My_Receive(Buf, *Len);
  comms_cdc_rx_callback(Buf, *Len);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7f3 ff98 	bl	8000bf8 <comms_cdc_rx_callback>

  return (USBD_OK);
 800ccc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	20003580 	.word	0x20003580

0800ccd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cce8:	4b0d      	ldr	r3, [pc, #52]	@ (800cd20 <CDC_Transmit_FS+0x48>)
 800ccea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ccee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e00b      	b.n	800cd16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ccfe:	887b      	ldrh	r3, [r7, #2]
 800cd00:	461a      	mov	r2, r3
 800cd02:	6879      	ldr	r1, [r7, #4]
 800cd04:	4806      	ldr	r0, [pc, #24]	@ (800cd20 <CDC_Transmit_FS+0x48>)
 800cd06:	f7fe fb4d 	bl	800b3a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd0a:	4805      	ldr	r0, [pc, #20]	@ (800cd20 <CDC_Transmit_FS+0x48>)
 800cd0c:	f7fe fb8a 	bl	800b424 <USBD_CDC_TransmitPacket>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	20003580 	.word	0x20003580

0800cd24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b087      	sub	sp, #28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	371c      	adds	r7, #28
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr
	...

0800cd48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	4603      	mov	r3, r0
 800cd50:	6039      	str	r1, [r7, #0]
 800cd52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	2212      	movs	r2, #18
 800cd58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd5a:	4b03      	ldr	r3, [pc, #12]	@ (800cd68 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr
 800cd68:	200000cc 	.word	0x200000cc

0800cd6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	4603      	mov	r3, r0
 800cd74:	6039      	str	r1, [r7, #0]
 800cd76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	2204      	movs	r2, #4
 800cd7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd7e:	4b03      	ldr	r3, [pc, #12]	@ (800cd8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	200000ec 	.word	0x200000ec

0800cd90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	4603      	mov	r3, r0
 800cd98:	6039      	str	r1, [r7, #0]
 800cd9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd9c:	79fb      	ldrb	r3, [r7, #7]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d105      	bne.n	800cdae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	4907      	ldr	r1, [pc, #28]	@ (800cdc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cda6:	4808      	ldr	r0, [pc, #32]	@ (800cdc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cda8:	f7ff fdf2 	bl	800c990 <USBD_GetString>
 800cdac:	e004      	b.n	800cdb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdae:	683a      	ldr	r2, [r7, #0]
 800cdb0:	4904      	ldr	r1, [pc, #16]	@ (800cdc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdb2:	4805      	ldr	r0, [pc, #20]	@ (800cdc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cdb4:	f7ff fdec 	bl	800c990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdb8:	4b02      	ldr	r3, [pc, #8]	@ (800cdc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3708      	adds	r7, #8
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	2000485c 	.word	0x2000485c
 800cdc8:	0800d8a4 	.word	0x0800d8a4

0800cdcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	6039      	str	r1, [r7, #0]
 800cdd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	4904      	ldr	r1, [pc, #16]	@ (800cdec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cddc:	4804      	ldr	r0, [pc, #16]	@ (800cdf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cdde:	f7ff fdd7 	bl	800c990 <USBD_GetString>
  return USBD_StrDesc;
 800cde2:	4b02      	ldr	r3, [pc, #8]	@ (800cdec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	2000485c 	.word	0x2000485c
 800cdf0:	0800d8bc 	.word	0x0800d8bc

0800cdf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	6039      	str	r1, [r7, #0]
 800cdfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	221a      	movs	r2, #26
 800ce04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce06:	f000 f855 	bl	800ceb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce0a:	4b02      	ldr	r3, [pc, #8]	@ (800ce14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	200000f0 	.word	0x200000f0

0800ce18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	4603      	mov	r3, r0
 800ce20:	6039      	str	r1, [r7, #0]
 800ce22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce24:	79fb      	ldrb	r3, [r7, #7]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d105      	bne.n	800ce36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	4907      	ldr	r1, [pc, #28]	@ (800ce4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce2e:	4808      	ldr	r0, [pc, #32]	@ (800ce50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce30:	f7ff fdae 	bl	800c990 <USBD_GetString>
 800ce34:	e004      	b.n	800ce40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce36:	683a      	ldr	r2, [r7, #0]
 800ce38:	4904      	ldr	r1, [pc, #16]	@ (800ce4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce3a:	4805      	ldr	r0, [pc, #20]	@ (800ce50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce3c:	f7ff fda8 	bl	800c990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce40:	4b02      	ldr	r3, [pc, #8]	@ (800ce4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3708      	adds	r7, #8
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	2000485c 	.word	0x2000485c
 800ce50:	0800d8d0 	.word	0x0800d8d0

0800ce54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	6039      	str	r1, [r7, #0]
 800ce5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce60:	79fb      	ldrb	r3, [r7, #7]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d105      	bne.n	800ce72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce66:	683a      	ldr	r2, [r7, #0]
 800ce68:	4907      	ldr	r1, [pc, #28]	@ (800ce88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce6a:	4808      	ldr	r0, [pc, #32]	@ (800ce8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce6c:	f7ff fd90 	bl	800c990 <USBD_GetString>
 800ce70:	e004      	b.n	800ce7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce72:	683a      	ldr	r2, [r7, #0]
 800ce74:	4904      	ldr	r1, [pc, #16]	@ (800ce88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce76:	4805      	ldr	r0, [pc, #20]	@ (800ce8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce78:	f7ff fd8a 	bl	800c990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce7c:	4b02      	ldr	r3, [pc, #8]	@ (800ce88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	2000485c 	.word	0x2000485c
 800ce8c:	0800d8dc 	.word	0x0800d8dc

0800ce90 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	6039      	str	r1, [r7, #0]
 800ce9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	220c      	movs	r2, #12
 800cea0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cea2:	4b03      	ldr	r3, [pc, #12]	@ (800ceb0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr
 800ceb0:	200000e0 	.word	0x200000e0

0800ceb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ceba:	4b0f      	ldr	r3, [pc, #60]	@ (800cef8 <Get_SerialNum+0x44>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cec0:	4b0e      	ldr	r3, [pc, #56]	@ (800cefc <Get_SerialNum+0x48>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cec6:	4b0e      	ldr	r3, [pc, #56]	@ (800cf00 <Get_SerialNum+0x4c>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4413      	add	r3, r2
 800ced2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d009      	beq.n	800ceee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ceda:	2208      	movs	r2, #8
 800cedc:	4909      	ldr	r1, [pc, #36]	@ (800cf04 <Get_SerialNum+0x50>)
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f000 f814 	bl	800cf0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cee4:	2204      	movs	r2, #4
 800cee6:	4908      	ldr	r1, [pc, #32]	@ (800cf08 <Get_SerialNum+0x54>)
 800cee8:	68b8      	ldr	r0, [r7, #8]
 800ceea:	f000 f80f 	bl	800cf0c <IntToUnicode>
  }
}
 800ceee:	bf00      	nop
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	1fff7590 	.word	0x1fff7590
 800cefc:	1fff7594 	.word	0x1fff7594
 800cf00:	1fff7598 	.word	0x1fff7598
 800cf04:	200000f2 	.word	0x200000f2
 800cf08:	20000102 	.word	0x20000102

0800cf0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b087      	sub	sp, #28
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	4613      	mov	r3, r2
 800cf18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf1e:	2300      	movs	r3, #0
 800cf20:	75fb      	strb	r3, [r7, #23]
 800cf22:	e027      	b.n	800cf74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	0f1b      	lsrs	r3, r3, #28
 800cf28:	2b09      	cmp	r3, #9
 800cf2a:	d80b      	bhi.n	800cf44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	0f1b      	lsrs	r3, r3, #28
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	7dfb      	ldrb	r3, [r7, #23]
 800cf34:	005b      	lsls	r3, r3, #1
 800cf36:	4619      	mov	r1, r3
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	440b      	add	r3, r1
 800cf3c:	3230      	adds	r2, #48	@ 0x30
 800cf3e:	b2d2      	uxtb	r2, r2
 800cf40:	701a      	strb	r2, [r3, #0]
 800cf42:	e00a      	b.n	800cf5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	0f1b      	lsrs	r3, r3, #28
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	7dfb      	ldrb	r3, [r7, #23]
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	4619      	mov	r1, r3
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	440b      	add	r3, r1
 800cf54:	3237      	adds	r2, #55	@ 0x37
 800cf56:	b2d2      	uxtb	r2, r2
 800cf58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	011b      	lsls	r3, r3, #4
 800cf5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf60:	7dfb      	ldrb	r3, [r7, #23]
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	3301      	adds	r3, #1
 800cf66:	68ba      	ldr	r2, [r7, #8]
 800cf68:	4413      	add	r3, r2
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf6e:	7dfb      	ldrb	r3, [r7, #23]
 800cf70:	3301      	adds	r3, #1
 800cf72:	75fb      	strb	r3, [r7, #23]
 800cf74:	7dfa      	ldrb	r2, [r7, #23]
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d3d3      	bcc.n	800cf24 <IntToUnicode+0x18>
  }
}
 800cf7c:	bf00      	nop
 800cf7e:	bf00      	nop
 800cf80:	371c      	adds	r7, #28
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
	...

0800cf8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b0b0      	sub	sp, #192	@ 0xc0
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800cf98:	2200      	movs	r2, #0
 800cf9a:	601a      	str	r2, [r3, #0]
 800cf9c:	605a      	str	r2, [r3, #4]
 800cf9e:	609a      	str	r2, [r3, #8]
 800cfa0:	60da      	str	r2, [r3, #12]
 800cfa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cfa4:	f107 0318 	add.w	r3, r7, #24
 800cfa8:	2294      	movs	r2, #148	@ 0x94
 800cfaa:	2100      	movs	r1, #0
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 fc33 	bl	800d818 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cfba:	d174      	bne.n	800d0a6 <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cfbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cfc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cfc8:	f107 0318 	add.w	r3, r7, #24
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7f9 f8b7 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800cfd8:	f7f4 f921 	bl	800121e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfdc:	4b34      	ldr	r3, [pc, #208]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800cfde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfe0:	4a33      	ldr	r2, [pc, #204]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800cfe2:	f043 0301 	orr.w	r3, r3, #1
 800cfe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cfe8:	4b31      	ldr	r3, [pc, #196]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800cfea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfec:	f003 0301 	and.w	r3, r3, #1
 800cff0:	617b      	str	r3, [r7, #20]
 800cff2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800cff4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800cff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cffc:	2302      	movs	r3, #2
 800cffe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d002:	2300      	movs	r3, #0
 800d004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d008:	2303      	movs	r3, #3
 800d00a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d00e:	230a      	movs	r3, #10
 800d010:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d014:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d018:	4619      	mov	r1, r3
 800d01a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d01e:	f7f6 fd4f 	bl	8003ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d02a:	2300      	movs	r3, #0
 800d02c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d030:	2300      	movs	r3, #0
 800d032:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d036:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d03a:	4619      	mov	r1, r3
 800d03c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d040:	f7f6 fd3e 	bl	8003ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d044:	4b1a      	ldr	r3, [pc, #104]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800d046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d048:	4a19      	ldr	r2, [pc, #100]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800d04a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d04e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d050:	4b17      	ldr	r3, [pc, #92]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800d052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d058:	613b      	str	r3, [r7, #16]
 800d05a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d05c:	4b14      	ldr	r3, [pc, #80]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800d05e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d064:	2b00      	cmp	r3, #0
 800d066:	d114      	bne.n	800d092 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d068:	4b11      	ldr	r3, [pc, #68]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800d06a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d06c:	4a10      	ldr	r2, [pc, #64]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800d06e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d072:	6593      	str	r3, [r2, #88]	@ 0x58
 800d074:	4b0e      	ldr	r3, [pc, #56]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800d076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d07c:	60fb      	str	r3, [r7, #12]
 800d07e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d080:	f7f8 f966 	bl	8005350 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d084:	4b0a      	ldr	r3, [pc, #40]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800d086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d088:	4a09      	ldr	r2, [pc, #36]	@ (800d0b0 <HAL_PCD_MspInit+0x124>)
 800d08a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d08e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d090:	e001      	b.n	800d096 <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d092:	f7f8 f95d 	bl	8005350 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d096:	2200      	movs	r2, #0
 800d098:	2100      	movs	r1, #0
 800d09a:	2043      	movs	r0, #67	@ 0x43
 800d09c:	f7f6 f963 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0a0:	2043      	movs	r0, #67	@ 0x43
 800d0a2:	f7f6 f97c 	bl	800339e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0a6:	bf00      	nop
 800d0a8:	37c0      	adds	r7, #192	@ 0xc0
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	40021000 	.word	0x40021000

0800d0b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	4610      	mov	r0, r2
 800d0cc:	f7fe fad3 	bl	800b676 <USBD_LL_SetupStage>
}
 800d0d0:	bf00      	nop
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d0ea:	78fa      	ldrb	r2, [r7, #3]
 800d0ec:	6879      	ldr	r1, [r7, #4]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	00db      	lsls	r3, r3, #3
 800d0f2:	4413      	add	r3, r2
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	440b      	add	r3, r1
 800d0f8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	78fb      	ldrb	r3, [r7, #3]
 800d100:	4619      	mov	r1, r3
 800d102:	f7fe fb0d 	bl	800b720 <USBD_LL_DataOutStage>
}
 800d106:	bf00      	nop
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b082      	sub	sp, #8
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	460b      	mov	r3, r1
 800d118:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d120:	78fa      	ldrb	r2, [r7, #3]
 800d122:	6879      	ldr	r1, [r7, #4]
 800d124:	4613      	mov	r3, r2
 800d126:	00db      	lsls	r3, r3, #3
 800d128:	4413      	add	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	440b      	add	r3, r1
 800d12e:	3348      	adds	r3, #72	@ 0x48
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	78fb      	ldrb	r3, [r7, #3]
 800d134:	4619      	mov	r1, r3
 800d136:	f7fe fba6 	bl	800b886 <USBD_LL_DataInStage>
}
 800d13a:	bf00      	nop
 800d13c:	3708      	adds	r7, #8
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b082      	sub	sp, #8
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d150:	4618      	mov	r0, r3
 800d152:	f7fe fce0 	bl	800bb16 <USBD_LL_SOF>
}
 800d156:	bf00      	nop
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b084      	sub	sp, #16
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d166:	2301      	movs	r3, #1
 800d168:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d001      	beq.n	800d176 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d172:	f7f4 f854 	bl	800121e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d17c:	7bfa      	ldrb	r2, [r7, #15]
 800d17e:	4611      	mov	r1, r2
 800d180:	4618      	mov	r0, r3
 800d182:	f7fe fc84 	bl	800ba8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7fe fc2c 	bl	800b9ea <USBD_LL_Reset>
}
 800d192:	bf00      	nop
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
	...

0800d19c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	6812      	ldr	r2, [r2, #0]
 800d1b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d1b6:	f043 0301 	orr.w	r3, r3, #1
 800d1ba:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe fc73 	bl	800baae <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a1b      	ldr	r3, [r3, #32]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d005      	beq.n	800d1dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1d0:	4b04      	ldr	r3, [pc, #16]	@ (800d1e4 <HAL_PCD_SuspendCallback+0x48>)
 800d1d2:	691b      	ldr	r3, [r3, #16]
 800d1d4:	4a03      	ldr	r2, [pc, #12]	@ (800d1e4 <HAL_PCD_SuspendCallback+0x48>)
 800d1d6:	f043 0306 	orr.w	r3, r3, #6
 800d1da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1dc:	bf00      	nop
 800d1de:	3708      	adds	r7, #8
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	e000ed00 	.word	0xe000ed00

0800d1e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	6812      	ldr	r2, [r2, #0]
 800d1fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d202:	f023 0301 	bic.w	r3, r3, #1
 800d206:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6a1b      	ldr	r3, [r3, #32]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d007      	beq.n	800d220 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d210:	4b08      	ldr	r3, [pc, #32]	@ (800d234 <HAL_PCD_ResumeCallback+0x4c>)
 800d212:	691b      	ldr	r3, [r3, #16]
 800d214:	4a07      	ldr	r2, [pc, #28]	@ (800d234 <HAL_PCD_ResumeCallback+0x4c>)
 800d216:	f023 0306 	bic.w	r3, r3, #6
 800d21a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d21c:	f000 faf6 	bl	800d80c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d226:	4618      	mov	r0, r3
 800d228:	f7fe fc5d 	bl	800bae6 <USBD_LL_Resume>
}
 800d22c:	bf00      	nop
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	e000ed00 	.word	0xe000ed00

0800d238 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d24a:	78fa      	ldrb	r2, [r7, #3]
 800d24c:	4611      	mov	r1, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fe fcb3 	bl	800bbba <USBD_LL_IsoOUTIncomplete>
}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	460b      	mov	r3, r1
 800d266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d26e:	78fa      	ldrb	r2, [r7, #3]
 800d270:	4611      	mov	r1, r2
 800d272:	4618      	mov	r0, r3
 800d274:	f7fe fc6f 	bl	800bb56 <USBD_LL_IsoINIncomplete>
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fe fcc5 	bl	800bc1e <USBD_LL_DevConnected>
}
 800d294:	bf00      	nop
 800d296:	3708      	adds	r7, #8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7fe fcc2 	bl	800bc34 <USBD_LL_DevDisconnected>
}
 800d2b0:	bf00      	nop
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d13c      	bne.n	800d342 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d2c8:	4a20      	ldr	r2, [pc, #128]	@ (800d34c <USBD_LL_Init+0x94>)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4a1e      	ldr	r2, [pc, #120]	@ (800d34c <USBD_LL_Init+0x94>)
 800d2d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d2d8:	4b1c      	ldr	r3, [pc, #112]	@ (800d34c <USBD_LL_Init+0x94>)
 800d2da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d2de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d2e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d34c <USBD_LL_Init+0x94>)
 800d2e2:	2206      	movs	r2, #6
 800d2e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d2e6:	4b19      	ldr	r3, [pc, #100]	@ (800d34c <USBD_LL_Init+0x94>)
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2ec:	4b17      	ldr	r3, [pc, #92]	@ (800d34c <USBD_LL_Init+0x94>)
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d2f2:	4b16      	ldr	r3, [pc, #88]	@ (800d34c <USBD_LL_Init+0x94>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2f8:	4b14      	ldr	r3, [pc, #80]	@ (800d34c <USBD_LL_Init+0x94>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d2fe:	4b13      	ldr	r3, [pc, #76]	@ (800d34c <USBD_LL_Init+0x94>)
 800d300:	2200      	movs	r2, #0
 800d302:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d304:	4b11      	ldr	r3, [pc, #68]	@ (800d34c <USBD_LL_Init+0x94>)
 800d306:	2200      	movs	r2, #0
 800d308:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d30a:	4b10      	ldr	r3, [pc, #64]	@ (800d34c <USBD_LL_Init+0x94>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d310:	4b0e      	ldr	r3, [pc, #56]	@ (800d34c <USBD_LL_Init+0x94>)
 800d312:	2200      	movs	r2, #0
 800d314:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d316:	480d      	ldr	r0, [pc, #52]	@ (800d34c <USBD_LL_Init+0x94>)
 800d318:	f7f6 fdae 	bl	8003e78 <HAL_PCD_Init>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d322:	f7f3 ff7c 	bl	800121e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d326:	2180      	movs	r1, #128	@ 0x80
 800d328:	4808      	ldr	r0, [pc, #32]	@ (800d34c <USBD_LL_Init+0x94>)
 800d32a:	f7f7 ff18 	bl	800515e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d32e:	2240      	movs	r2, #64	@ 0x40
 800d330:	2100      	movs	r1, #0
 800d332:	4806      	ldr	r0, [pc, #24]	@ (800d34c <USBD_LL_Init+0x94>)
 800d334:	f7f7 fecc 	bl	80050d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d338:	2280      	movs	r2, #128	@ 0x80
 800d33a:	2101      	movs	r1, #1
 800d33c:	4803      	ldr	r0, [pc, #12]	@ (800d34c <USBD_LL_Init+0x94>)
 800d33e:	f7f7 fec7 	bl	80050d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	20004a5c 	.word	0x20004a5c

0800d350 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d358:	2300      	movs	r3, #0
 800d35a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d366:	4618      	mov	r0, r3
 800d368:	f7f6 feaa 	bl	80040c0 <HAL_PCD_Start>
 800d36c:	4603      	mov	r3, r0
 800d36e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d370:	7bbb      	ldrb	r3, [r7, #14]
 800d372:	2b03      	cmp	r3, #3
 800d374:	d816      	bhi.n	800d3a4 <USBD_LL_Start+0x54>
 800d376:	a201      	add	r2, pc, #4	@ (adr r2, 800d37c <USBD_LL_Start+0x2c>)
 800d378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37c:	0800d38d 	.word	0x0800d38d
 800d380:	0800d393 	.word	0x0800d393
 800d384:	0800d399 	.word	0x0800d399
 800d388:	0800d39f 	.word	0x0800d39f
    case HAL_OK :
      usb_status = USBD_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	73fb      	strb	r3, [r7, #15]
    break;
 800d390:	e00b      	b.n	800d3aa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d392:	2303      	movs	r3, #3
 800d394:	73fb      	strb	r3, [r7, #15]
    break;
 800d396:	e008      	b.n	800d3aa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d398:	2301      	movs	r3, #1
 800d39a:	73fb      	strb	r3, [r7, #15]
    break;
 800d39c:	e005      	b.n	800d3aa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a2:	e002      	b.n	800d3aa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a8:	bf00      	nop
  }
  return usb_status;
 800d3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	4608      	mov	r0, r1
 800d3be:	4611      	mov	r1, r2
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	70fb      	strb	r3, [r7, #3]
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	70bb      	strb	r3, [r7, #2]
 800d3ca:	4613      	mov	r3, r2
 800d3cc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d3dc:	78bb      	ldrb	r3, [r7, #2]
 800d3de:	883a      	ldrh	r2, [r7, #0]
 800d3e0:	78f9      	ldrb	r1, [r7, #3]
 800d3e2:	f7f7 fb54 	bl	8004a8e <HAL_PCD_EP_Open>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d3ea:	7bbb      	ldrb	r3, [r7, #14]
 800d3ec:	2b03      	cmp	r3, #3
 800d3ee:	d817      	bhi.n	800d420 <USBD_LL_OpenEP+0x6c>
 800d3f0:	a201      	add	r2, pc, #4	@ (adr r2, 800d3f8 <USBD_LL_OpenEP+0x44>)
 800d3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f6:	bf00      	nop
 800d3f8:	0800d409 	.word	0x0800d409
 800d3fc:	0800d40f 	.word	0x0800d40f
 800d400:	0800d415 	.word	0x0800d415
 800d404:	0800d41b 	.word	0x0800d41b
    case HAL_OK :
      usb_status = USBD_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	73fb      	strb	r3, [r7, #15]
    break;
 800d40c:	e00b      	b.n	800d426 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d40e:	2303      	movs	r3, #3
 800d410:	73fb      	strb	r3, [r7, #15]
    break;
 800d412:	e008      	b.n	800d426 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d414:	2301      	movs	r3, #1
 800d416:	73fb      	strb	r3, [r7, #15]
    break;
 800d418:	e005      	b.n	800d426 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d41a:	2303      	movs	r3, #3
 800d41c:	73fb      	strb	r3, [r7, #15]
    break;
 800d41e:	e002      	b.n	800d426 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d420:	2303      	movs	r3, #3
 800d422:	73fb      	strb	r3, [r7, #15]
    break;
 800d424:	bf00      	nop
  }
  return usb_status;
 800d426:	7bfb      	ldrb	r3, [r7, #15]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	460b      	mov	r3, r1
 800d43a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d440:	2300      	movs	r3, #0
 800d442:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d44a:	78fa      	ldrb	r2, [r7, #3]
 800d44c:	4611      	mov	r1, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	f7f7 fb85 	bl	8004b5e <HAL_PCD_EP_Close>
 800d454:	4603      	mov	r3, r0
 800d456:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d458:	7bbb      	ldrb	r3, [r7, #14]
 800d45a:	2b03      	cmp	r3, #3
 800d45c:	d816      	bhi.n	800d48c <USBD_LL_CloseEP+0x5c>
 800d45e:	a201      	add	r2, pc, #4	@ (adr r2, 800d464 <USBD_LL_CloseEP+0x34>)
 800d460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d464:	0800d475 	.word	0x0800d475
 800d468:	0800d47b 	.word	0x0800d47b
 800d46c:	0800d481 	.word	0x0800d481
 800d470:	0800d487 	.word	0x0800d487
    case HAL_OK :
      usb_status = USBD_OK;
 800d474:	2300      	movs	r3, #0
 800d476:	73fb      	strb	r3, [r7, #15]
    break;
 800d478:	e00b      	b.n	800d492 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d47a:	2303      	movs	r3, #3
 800d47c:	73fb      	strb	r3, [r7, #15]
    break;
 800d47e:	e008      	b.n	800d492 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d480:	2301      	movs	r3, #1
 800d482:	73fb      	strb	r3, [r7, #15]
    break;
 800d484:	e005      	b.n	800d492 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d486:	2303      	movs	r3, #3
 800d488:	73fb      	strb	r3, [r7, #15]
    break;
 800d48a:	e002      	b.n	800d492 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d48c:	2303      	movs	r3, #3
 800d48e:	73fb      	strb	r3, [r7, #15]
    break;
 800d490:	bf00      	nop
  }
  return usb_status;
 800d492:	7bfb      	ldrb	r3, [r7, #15]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4b6:	78fa      	ldrb	r2, [r7, #3]
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7f7 fc14 	bl	8004ce8 <HAL_PCD_EP_SetStall>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4c4:	7bbb      	ldrb	r3, [r7, #14]
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	d816      	bhi.n	800d4f8 <USBD_LL_StallEP+0x5c>
 800d4ca:	a201      	add	r2, pc, #4	@ (adr r2, 800d4d0 <USBD_LL_StallEP+0x34>)
 800d4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d0:	0800d4e1 	.word	0x0800d4e1
 800d4d4:	0800d4e7 	.word	0x0800d4e7
 800d4d8:	0800d4ed 	.word	0x0800d4ed
 800d4dc:	0800d4f3 	.word	0x0800d4f3
    case HAL_OK :
      usb_status = USBD_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e4:	e00b      	b.n	800d4fe <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ea:	e008      	b.n	800d4fe <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f0:	e005      	b.n	800d4fe <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4f2:	2303      	movs	r3, #3
 800d4f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f6:	e002      	b.n	800d4fe <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d4fc:	bf00      	nop
  }
  return usb_status;
 800d4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d500:	4618      	mov	r0, r3
 800d502:	3710      	adds	r7, #16
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	460b      	mov	r3, r1
 800d512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d518:	2300      	movs	r3, #0
 800d51a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d522:	78fa      	ldrb	r2, [r7, #3]
 800d524:	4611      	mov	r1, r2
 800d526:	4618      	mov	r0, r3
 800d528:	f7f7 fc40 	bl	8004dac <HAL_PCD_EP_ClrStall>
 800d52c:	4603      	mov	r3, r0
 800d52e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d530:	7bbb      	ldrb	r3, [r7, #14]
 800d532:	2b03      	cmp	r3, #3
 800d534:	d816      	bhi.n	800d564 <USBD_LL_ClearStallEP+0x5c>
 800d536:	a201      	add	r2, pc, #4	@ (adr r2, 800d53c <USBD_LL_ClearStallEP+0x34>)
 800d538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d53c:	0800d54d 	.word	0x0800d54d
 800d540:	0800d553 	.word	0x0800d553
 800d544:	0800d559 	.word	0x0800d559
 800d548:	0800d55f 	.word	0x0800d55f
    case HAL_OK :
      usb_status = USBD_OK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	73fb      	strb	r3, [r7, #15]
    break;
 800d550:	e00b      	b.n	800d56a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d552:	2303      	movs	r3, #3
 800d554:	73fb      	strb	r3, [r7, #15]
    break;
 800d556:	e008      	b.n	800d56a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d558:	2301      	movs	r3, #1
 800d55a:	73fb      	strb	r3, [r7, #15]
    break;
 800d55c:	e005      	b.n	800d56a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d55e:	2303      	movs	r3, #3
 800d560:	73fb      	strb	r3, [r7, #15]
    break;
 800d562:	e002      	b.n	800d56a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d564:	2303      	movs	r3, #3
 800d566:	73fb      	strb	r3, [r7, #15]
    break;
 800d568:	bf00      	nop
  }
  return usb_status;
 800d56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	460b      	mov	r3, r1
 800d57e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d586:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	da0b      	bge.n	800d5a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d590:	78fb      	ldrb	r3, [r7, #3]
 800d592:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d596:	68f9      	ldr	r1, [r7, #12]
 800d598:	4613      	mov	r3, r2
 800d59a:	00db      	lsls	r3, r3, #3
 800d59c:	4413      	add	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	440b      	add	r3, r1
 800d5a2:	333e      	adds	r3, #62	@ 0x3e
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	e00b      	b.n	800d5c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d5a8:	78fb      	ldrb	r3, [r7, #3]
 800d5aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d5ae:	68f9      	ldr	r1, [r7, #12]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	00db      	lsls	r3, r3, #3
 800d5b4:	4413      	add	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	440b      	add	r3, r1
 800d5ba:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800d5be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5e6:	78fa      	ldrb	r2, [r7, #3]
 800d5e8:	4611      	mov	r1, r2
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7f7 fa2a 	bl	8004a44 <HAL_PCD_SetAddress>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d5f4:	7bbb      	ldrb	r3, [r7, #14]
 800d5f6:	2b03      	cmp	r3, #3
 800d5f8:	d816      	bhi.n	800d628 <USBD_LL_SetUSBAddress+0x5c>
 800d5fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d600 <USBD_LL_SetUSBAddress+0x34>)
 800d5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d600:	0800d611 	.word	0x0800d611
 800d604:	0800d617 	.word	0x0800d617
 800d608:	0800d61d 	.word	0x0800d61d
 800d60c:	0800d623 	.word	0x0800d623
    case HAL_OK :
      usb_status = USBD_OK;
 800d610:	2300      	movs	r3, #0
 800d612:	73fb      	strb	r3, [r7, #15]
    break;
 800d614:	e00b      	b.n	800d62e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d616:	2303      	movs	r3, #3
 800d618:	73fb      	strb	r3, [r7, #15]
    break;
 800d61a:	e008      	b.n	800d62e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d61c:	2301      	movs	r3, #1
 800d61e:	73fb      	strb	r3, [r7, #15]
    break;
 800d620:	e005      	b.n	800d62e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d622:	2303      	movs	r3, #3
 800d624:	73fb      	strb	r3, [r7, #15]
    break;
 800d626:	e002      	b.n	800d62e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d628:	2303      	movs	r3, #3
 800d62a:	73fb      	strb	r3, [r7, #15]
    break;
 800d62c:	bf00      	nop
  }
  return usb_status;
 800d62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d630:	4618      	mov	r0, r3
 800d632:	3710      	adds	r7, #16
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b086      	sub	sp, #24
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	607a      	str	r2, [r7, #4]
 800d642:	603b      	str	r3, [r7, #0]
 800d644:	460b      	mov	r3, r1
 800d646:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d656:	7af9      	ldrb	r1, [r7, #11]
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	f7f7 fb13 	bl	8004c86 <HAL_PCD_EP_Transmit>
 800d660:	4603      	mov	r3, r0
 800d662:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d664:	7dbb      	ldrb	r3, [r7, #22]
 800d666:	2b03      	cmp	r3, #3
 800d668:	d816      	bhi.n	800d698 <USBD_LL_Transmit+0x60>
 800d66a:	a201      	add	r2, pc, #4	@ (adr r2, 800d670 <USBD_LL_Transmit+0x38>)
 800d66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d670:	0800d681 	.word	0x0800d681
 800d674:	0800d687 	.word	0x0800d687
 800d678:	0800d68d 	.word	0x0800d68d
 800d67c:	0800d693 	.word	0x0800d693
    case HAL_OK :
      usb_status = USBD_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	75fb      	strb	r3, [r7, #23]
    break;
 800d684:	e00b      	b.n	800d69e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d686:	2303      	movs	r3, #3
 800d688:	75fb      	strb	r3, [r7, #23]
    break;
 800d68a:	e008      	b.n	800d69e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d68c:	2301      	movs	r3, #1
 800d68e:	75fb      	strb	r3, [r7, #23]
    break;
 800d690:	e005      	b.n	800d69e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d692:	2303      	movs	r3, #3
 800d694:	75fb      	strb	r3, [r7, #23]
    break;
 800d696:	e002      	b.n	800d69e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d698:	2303      	movs	r3, #3
 800d69a:	75fb      	strb	r3, [r7, #23]
    break;
 800d69c:	bf00      	nop
  }
  return usb_status;
 800d69e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3718      	adds	r7, #24
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b086      	sub	sp, #24
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	607a      	str	r2, [r7, #4]
 800d6b2:	603b      	str	r3, [r7, #0]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d6c6:	7af9      	ldrb	r1, [r7, #11]
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	f7f7 fa91 	bl	8004bf2 <HAL_PCD_EP_Receive>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d6d4:	7dbb      	ldrb	r3, [r7, #22]
 800d6d6:	2b03      	cmp	r3, #3
 800d6d8:	d816      	bhi.n	800d708 <USBD_LL_PrepareReceive+0x60>
 800d6da:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e0 <USBD_LL_PrepareReceive+0x38>)
 800d6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e0:	0800d6f1 	.word	0x0800d6f1
 800d6e4:	0800d6f7 	.word	0x0800d6f7
 800d6e8:	0800d6fd 	.word	0x0800d6fd
 800d6ec:	0800d703 	.word	0x0800d703
    case HAL_OK :
      usb_status = USBD_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	75fb      	strb	r3, [r7, #23]
    break;
 800d6f4:	e00b      	b.n	800d70e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	75fb      	strb	r3, [r7, #23]
    break;
 800d6fa:	e008      	b.n	800d70e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	75fb      	strb	r3, [r7, #23]
    break;
 800d700:	e005      	b.n	800d70e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d702:	2303      	movs	r3, #3
 800d704:	75fb      	strb	r3, [r7, #23]
    break;
 800d706:	e002      	b.n	800d70e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d708:	2303      	movs	r3, #3
 800d70a:	75fb      	strb	r3, [r7, #23]
    break;
 800d70c:	bf00      	nop
  }
  return usb_status;
 800d70e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3718      	adds	r7, #24
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	460b      	mov	r3, r1
 800d722:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d72a:	78fa      	ldrb	r2, [r7, #3]
 800d72c:	4611      	mov	r1, r2
 800d72e:	4618      	mov	r0, r3
 800d730:	f7f7 fa91 	bl	8004c56 <HAL_PCD_EP_GetRxCount>
 800d734:	4603      	mov	r3, r0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3708      	adds	r7, #8
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
	...

0800d740 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	460b      	mov	r3, r1
 800d74a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d74c:	78fb      	ldrb	r3, [r7, #3]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d002      	beq.n	800d758 <HAL_PCDEx_LPM_Callback+0x18>
 800d752:	2b01      	cmp	r3, #1
 800d754:	d01f      	beq.n	800d796 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d756:	e03b      	b.n	800d7d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6a1b      	ldr	r3, [r3, #32]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d007      	beq.n	800d770 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d760:	f000 f854 	bl	800d80c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d764:	4b1c      	ldr	r3, [pc, #112]	@ (800d7d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d766:	691b      	ldr	r3, [r3, #16]
 800d768:	4a1b      	ldr	r2, [pc, #108]	@ (800d7d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d76a:	f023 0306 	bic.w	r3, r3, #6
 800d76e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	6812      	ldr	r2, [r2, #0]
 800d77e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d782:	f023 0301 	bic.w	r3, r3, #1
 800d786:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fe f9a9 	bl	800bae6 <USBD_LL_Resume>
    break;
 800d794:	e01c      	b.n	800d7d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	6812      	ldr	r2, [r2, #0]
 800d7a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d7a8:	f043 0301 	orr.w	r3, r3, #1
 800d7ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7fe f97a 	bl	800baae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6a1b      	ldr	r3, [r3, #32]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d005      	beq.n	800d7ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7c2:	4b05      	ldr	r3, [pc, #20]	@ (800d7d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	4a04      	ldr	r2, [pc, #16]	@ (800d7d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d7c8:	f043 0306 	orr.w	r3, r3, #6
 800d7cc:	6113      	str	r3, [r2, #16]
    break;
 800d7ce:	bf00      	nop
}
 800d7d0:	bf00      	nop
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	e000ed00 	.word	0xe000ed00

0800d7dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d7e4:	4b03      	ldr	r3, [pc, #12]	@ (800d7f4 <USBD_static_malloc+0x18>)
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20004f68 	.word	0x20004f68

0800d7f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]

}
 800d800:	bf00      	nop
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d810:	f7f3 fcb2 	bl	8001178 <SystemClock_Config>
}
 800d814:	bf00      	nop
 800d816:	bd80      	pop	{r7, pc}

0800d818 <memset>:
 800d818:	4402      	add	r2, r0
 800d81a:	4603      	mov	r3, r0
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d100      	bne.n	800d822 <memset+0xa>
 800d820:	4770      	bx	lr
 800d822:	f803 1b01 	strb.w	r1, [r3], #1
 800d826:	e7f9      	b.n	800d81c <memset+0x4>

0800d828 <__libc_init_array>:
 800d828:	b570      	push	{r4, r5, r6, lr}
 800d82a:	4d0d      	ldr	r5, [pc, #52]	@ (800d860 <__libc_init_array+0x38>)
 800d82c:	4c0d      	ldr	r4, [pc, #52]	@ (800d864 <__libc_init_array+0x3c>)
 800d82e:	1b64      	subs	r4, r4, r5
 800d830:	10a4      	asrs	r4, r4, #2
 800d832:	2600      	movs	r6, #0
 800d834:	42a6      	cmp	r6, r4
 800d836:	d109      	bne.n	800d84c <__libc_init_array+0x24>
 800d838:	4d0b      	ldr	r5, [pc, #44]	@ (800d868 <__libc_init_array+0x40>)
 800d83a:	4c0c      	ldr	r4, [pc, #48]	@ (800d86c <__libc_init_array+0x44>)
 800d83c:	f000 f826 	bl	800d88c <_init>
 800d840:	1b64      	subs	r4, r4, r5
 800d842:	10a4      	asrs	r4, r4, #2
 800d844:	2600      	movs	r6, #0
 800d846:	42a6      	cmp	r6, r4
 800d848:	d105      	bne.n	800d856 <__libc_init_array+0x2e>
 800d84a:	bd70      	pop	{r4, r5, r6, pc}
 800d84c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d850:	4798      	blx	r3
 800d852:	3601      	adds	r6, #1
 800d854:	e7ee      	b.n	800d834 <__libc_init_array+0xc>
 800d856:	f855 3b04 	ldr.w	r3, [r5], #4
 800d85a:	4798      	blx	r3
 800d85c:	3601      	adds	r6, #1
 800d85e:	e7f2      	b.n	800d846 <__libc_init_array+0x1e>
 800d860:	0800d964 	.word	0x0800d964
 800d864:	0800d964 	.word	0x0800d964
 800d868:	0800d964 	.word	0x0800d964
 800d86c:	0800d968 	.word	0x0800d968

0800d870 <memcpy>:
 800d870:	440a      	add	r2, r1
 800d872:	4291      	cmp	r1, r2
 800d874:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d878:	d100      	bne.n	800d87c <memcpy+0xc>
 800d87a:	4770      	bx	lr
 800d87c:	b510      	push	{r4, lr}
 800d87e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d882:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d886:	4291      	cmp	r1, r2
 800d888:	d1f9      	bne.n	800d87e <memcpy+0xe>
 800d88a:	bd10      	pop	{r4, pc}

0800d88c <_init>:
 800d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88e:	bf00      	nop
 800d890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d892:	bc08      	pop	{r3}
 800d894:	469e      	mov	lr, r3
 800d896:	4770      	bx	lr

0800d898 <_fini>:
 800d898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89a:	bf00      	nop
 800d89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d89e:	bc08      	pop	{r3}
 800d8a0:	469e      	mov	lr, r3
 800d8a2:	4770      	bx	lr
