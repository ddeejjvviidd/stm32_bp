
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000daf8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800dcb4  0800dcb4  0000ecb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd6c  0800dd6c  0000f10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd6c  0800dd6c  0000ed6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd74  0800dd74  0000f10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd74  0800dd74  0000ed74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd78  0800dd78  0000ed78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800dd7c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005498  2000010c  0800de88  0000f10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200055a4  0800de88  0000f5a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024daa  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050bc  00000000  00000000  00033ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c80  00000000  00000000  00038fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000162e  00000000  00000000  0003ac28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000302d0  00000000  00000000  0003c256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000242d0  00000000  00000000  0006c526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011da2b  00000000  00000000  000907f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ae221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077cc  00000000  00000000  001ae264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b5a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800dc9c 	.word	0x0800dc9c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800dc9c 	.word	0x0800dc9c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fdbd 	bl	80020e8 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 ffb7 	bl	80014e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f002 f939 	bl	800280c <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 ffa1 	bl	80014e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f002 f92b 	bl	800280c <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 ff93 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00d fb15 	bl	800dc28 <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fefb 	bl	8006434 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 ff4f 	bl	80014e6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 fb77 	bl	8003d84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 ffe1 	bl	8003698 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 ff03 	bl	80014e6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 ff9a 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 ffb3 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <comms_reset_active_tx_buffer>:


extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);


void comms_reset_active_tx_buffer() {
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	// write start bytes
	*((uint16_t*) (comms_tx_active_buffer)) = START_HEADER;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <comms_reset_active_tx_buffer+0x38>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8000724:	801a      	strh	r2, [r3, #0]
	// reset buffer id
	comms_tx_active_buffer[2] = 0;
 8000726:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <comms_reset_active_tx_buffer+0x38>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3302      	adds	r3, #2
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
	//reset number of elements
	*((uint16_t*) (comms_tx_active_buffer + 3)) = 0;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <comms_reset_active_tx_buffer+0x38>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3303      	adds	r3, #3
 8000736:	2200      	movs	r2, #0
 8000738:	801a      	strh	r2, [r3, #0]
	// set pointer to first position where data elements can be writen to
	comms_tx_active_wr_pointer = comms_tx_active_buffer + 5;
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <comms_reset_active_tx_buffer+0x38>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3305      	adds	r3, #5
 8000740:	4a04      	ldr	r2, [pc, #16]	@ (8000754 <comms_reset_active_tx_buffer+0x3c>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200009f0 	.word	0x200009f0
 8000754:	200009f4 	.word	0x200009f4

08000758 <comms_reset_active_rx_buffer>:


void comms_reset_active_rx_buffer() {
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	//reset whole head to correctly detect next incoming buffer
	comms_rx_active_buffer[0] = 0;
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <comms_reset_active_rx_buffer+0x3c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	comms_rx_active_buffer[1] = 0;
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <comms_reset_active_rx_buffer+0x3c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
	comms_rx_active_buffer[2] = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <comms_reset_active_rx_buffer+0x3c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3302      	adds	r3, #2
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
	*((uint16_t*) (comms_rx_active_buffer + 3)) = 0; // reset number of data packets inside the buffer
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <comms_reset_active_rx_buffer+0x3c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3303      	adds	r3, #3
 800077e:	2200      	movs	r2, #0
 8000780:	801a      	strh	r2, [r3, #0]
	comms_rx_active_rd_pointer = comms_rx_active_buffer; // reset the active pointer
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <comms_reset_active_rx_buffer+0x3c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <comms_reset_active_rx_buffer+0x40>)
 8000788:	6013      	str	r3, [r2, #0]
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	200015fc 	.word	0x200015fc
 8000798:	20001600 	.word	0x20001600

0800079c <comms_uart_init>:


void comms_uart_init() {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	// reset the state
	uart_rx_state = COMMS_UART_HEAD;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <comms_uart_init+0x28>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
	// set callback for incoming data buffer head
	HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_buffer,
 80007a8:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <comms_uart_init+0x2c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2205      	movs	r2, #5
 80007ae:	4619      	mov	r1, r3
 80007b0:	4806      	ldr	r0, [pc, #24]	@ (80007cc <comms_uart_init+0x30>)
 80007b2:	f007 f933 	bl	8007a1c <HAL_UART_Receive_IT>
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
			5);
	UNUSED(rcode);
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20001610 	.word	0x20001610
 80007c8:	200015fc 	.word	0x200015fc
 80007cc:	2000386c 	.word	0x2000386c

080007d0 <comms_init>:


void comms_init() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	// init TX
	comms_tx_active_buffer = comms_tx_buffer1;
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <comms_init+0x48>)
 80007d6:	4a11      	ldr	r2, [pc, #68]	@ (800081c <comms_init+0x4c>)
 80007d8:	601a      	str	r2, [r3, #0]
	comms_tx_prepared_buffer = comms_tx_buffer2;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <comms_init+0x50>)
 80007dc:	4a11      	ldr	r2, [pc, #68]	@ (8000824 <comms_init+0x54>)
 80007de:	601a      	str	r2, [r3, #0]

	comms_reset_active_tx_buffer();
 80007e0:	f7ff ff9a 	bl	8000718 <comms_reset_active_tx_buffer>
	comms_tx_prepared_wr_pointer = comms_tx_prepared_buffer + 5; // set pointer to first position of data elements ready for transfer
 80007e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <comms_init+0x50>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3305      	adds	r3, #5
 80007ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <comms_init+0x58>)
 80007ec:	6013      	str	r3, [r2, #0]

	// init RX
	if (comms_selected_interface == COMMS_UART){
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <comms_init+0x5c>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <comms_init+0x2a>
		comms_uart_init();
 80007f6:	f7ff ffd1 	bl	800079c <comms_uart_init>
	}

	comms_rx_active_buffer = comms_rx_buffer1;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <comms_init+0x60>)
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <comms_init+0x64>)
 80007fe:	601a      	str	r2, [r3, #0]
	comms_rx_prepared_buffer = comms_rx_buffer2;
 8000800:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <comms_init+0x68>)
 8000802:	4a0e      	ldr	r2, [pc, #56]	@ (800083c <comms_init+0x6c>)
 8000804:	601a      	str	r2, [r3, #0]

	comms_reset_active_rx_buffer();
 8000806:	f7ff ffa7 	bl	8000758 <comms_reset_active_rx_buffer>
	comms_rx_prepared_rd_pointer = comms_rx_prepared_buffer + 5; // set pointer to first position of readable data elements
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <comms_init+0x68>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3305      	adds	r3, #5
 8000810:	4a0b      	ldr	r2, [pc, #44]	@ (8000840 <comms_init+0x70>)
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200009f0 	.word	0x200009f0
 800081c:	200001f0 	.word	0x200001f0
 8000820:	200009f8 	.word	0x200009f8
 8000824:	200005f0 	.word	0x200005f0
 8000828:	200009fc 	.word	0x200009fc
 800082c:	2000160c 	.word	0x2000160c
 8000830:	200015fc 	.word	0x200015fc
 8000834:	20000dfc 	.word	0x20000dfc
 8000838:	20001604 	.word	0x20001604
 800083c:	200011fc 	.word	0x200011fc
 8000840:	20001608 	.word	0x20001608

08000844 <comms_purge_id_register>:


void comms_purge_id_register() {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	// reset the evidence of existing data packets in tx buffer
	memset(comms_tx_data_id_register, 0x0, sizeof(comms_tx_data_id_register));
 8000848:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 800084c:	2100      	movs	r1, #0
 800084e:	4802      	ldr	r0, [pc, #8]	@ (8000858 <comms_purge_id_register+0x14>)
 8000850:	f00d f9ea 	bl	800dc28 <memset>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000a00 	.word	0x20000a00

0800085c <comms_find_existing_data>:


void* comms_find_existing_data(uint8_t data_id) {
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	// returns pointer to existing data packet with this data_id, or NULL
	if (comms_tx_data_id_register[data_id] != NULL) {
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4a08      	ldr	r2, [pc, #32]	@ (800088c <comms_find_existing_data+0x30>)
 800086a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d004      	beq.n	800087c <comms_find_existing_data+0x20>
		return comms_tx_data_id_register[data_id];
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4a05      	ldr	r2, [pc, #20]	@ (800088c <comms_find_existing_data+0x30>)
 8000876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087a:	e000      	b.n	800087e <comms_find_existing_data+0x22>
	}
	return NULL;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000a00 	.word	0x20000a00

08000890 <comms_increment_active_buffer_data>:


void comms_increment_active_buffer_data() {
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	// increments total number of data elements in active tx buffer.
	*((uint16_t*) (comms_tx_active_buffer + 3)) += 1;
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <comms_increment_active_buffer_data+0x24>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3303      	adds	r3, #3
 800089a:	881a      	ldrh	r2, [r3, #0]
 800089c:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <comms_increment_active_buffer_data+0x24>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3303      	adds	r3, #3
 80008a2:	3201      	adds	r2, #1
 80008a4:	b292      	uxth	r2, r2
 80008a6:	801a      	strh	r2, [r3, #0]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	200009f0 	.word	0x200009f0

080008b8 <comms_append_int32>:


int comms_append_int32(uint8_t data_id, uint8_t data_count, int *data) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	603a      	str	r2, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	460b      	mov	r3, r1
 80008c6:	71bb      	strb	r3, [r7, #6]
	//check tx_register for same data id, return if existing
	if (comms_find_existing_data(data_id) != NULL && !ALLOW_TX_APPEND_DUPLICITE_DATA_ID) {
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ffc6 	bl	800085c <comms_find_existing_data>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <comms_append_int32+0x22>
		return COMMS_DATA_ID_EXISTS;
 80008d6:	2307      	movs	r3, #7
 80008d8:	e02d      	b.n	8000936 <comms_append_int32+0x7e>
	}

	if (wr_status) {
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <comms_append_int32+0x88>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <comms_append_int32+0x2e>
		return COMMS_WR_LOCKED;
 80008e2:	2305      	movs	r3, #5
 80008e4:	e027      	b.n	8000936 <comms_append_int32+0x7e>
	}
	else {
		wr_status = COMMS_INPROGRESS;
 80008e6:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <comms_append_int32+0x88>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
	}

	// save the pointer to new data to register
	comms_tx_data_id_register[data_id] = (void*) comms_tx_active_wr_pointer;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4a15      	ldr	r2, [pc, #84]	@ (8000944 <comms_append_int32+0x8c>)
 80008f0:	6812      	ldr	r2, [r2, #0]
 80008f2:	4915      	ldr	r1, [pc, #84]	@ (8000948 <comms_append_int32+0x90>)
 80008f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_increment_active_buffer_data();
 80008f8:	f7ff ffca 	bl	8000890 <comms_increment_active_buffer_data>

	// write id, bytes and count
	*comms_tx_active_wr_pointer = data_id;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <comms_append_int32+0x8c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	79fa      	ldrb	r2, [r7, #7]
 8000902:	701a      	strb	r2, [r3, #0]
	*(comms_tx_active_wr_pointer + 1) = (uint8_t) sizeof(*data);
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <comms_append_int32+0x8c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	2204      	movs	r2, #4
 800090c:	701a      	strb	r2, [r3, #0]
	*(comms_tx_active_wr_pointer + 2) = data_count;
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <comms_append_int32+0x8c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	3302      	adds	r3, #2
 8000914:	79ba      	ldrb	r2, [r7, #6]
 8000916:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int*) (comms_tx_active_wr_pointer + 3)) = *data;
 8000918:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <comms_append_int32+0x8c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	3303      	adds	r3, #3
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	6812      	ldr	r2, [r2, #0]
 8000922:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_tx_active_wr_pointer = (comms_tx_active_wr_pointer + 3 + sizeof(*data));
 8000924:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <comms_append_int32+0x8c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3307      	adds	r3, #7
 800092a:	4a06      	ldr	r2, [pc, #24]	@ (8000944 <comms_append_int32+0x8c>)
 800092c:	6013      	str	r3, [r2, #0]

	wr_status = COMMS_READY;
 800092e:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <comms_append_int32+0x88>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]

	return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000160d 	.word	0x2000160d
 8000944:	200009f4 	.word	0x200009f4
 8000948:	20000a00 	.word	0x20000a00

0800094c <comms_switch_tx_buffers>:


void comms_switch_tx_buffers() {
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000952:	f3ef 8310 	mrs	r3, PRIMASK
 8000956:	603b      	str	r3, [r7, #0]
  return(result);
 8000958:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 800095a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t *_temp = comms_tx_prepared_buffer;
 8000960:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <comms_switch_tx_buffers+0x4c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	60bb      	str	r3, [r7, #8]
	comms_tx_prepared_buffer = comms_tx_active_buffer;
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <comms_switch_tx_buffers+0x50>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <comms_switch_tx_buffers+0x4c>)
 800096c:	6013      	str	r3, [r2, #0]
	comms_tx_active_buffer = _temp;
 800096e:	4a0b      	ldr	r2, [pc, #44]	@ (800099c <comms_switch_tx_buffers+0x50>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_tx_prepared_wr_pointer = comms_tx_active_wr_pointer;
 8000974:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <comms_switch_tx_buffers+0x54>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <comms_switch_tx_buffers+0x58>)
 800097a:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_tx_buffer();
 800097c:	f7ff fecc 	bl	8000718 <comms_reset_active_tx_buffer>
	comms_purge_id_register();
 8000980:	f7ff ff60 	bl	8000844 <comms_purge_id_register>
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f383 8810 	msr	PRIMASK, r3
}
 800098e:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200009f8 	.word	0x200009f8
 800099c:	200009f0 	.word	0x200009f0
 80009a0:	200009f4 	.word	0x200009f4
 80009a4:	200009fc 	.word	0x200009fc

080009a8 <comms_send>:


int comms_send() {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

	if (tx_status > 0) {
 80009ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000a64 <comms_send+0xbc>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <comms_send+0x12>
		return COMMS_TX_LOCKED;
 80009b6:	2304      	movs	r3, #4
 80009b8:	e04f      	b.n	8000a5a <comms_send+0xb2>
	}

	tx_status = COMMS_INPROGRESS;
 80009ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <comms_send+0xbc>)
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]

	// need to switch buffers
	comms_switch_tx_buffers();
 80009c0:	f7ff ffc4 	bl	800094c <comms_switch_tx_buffers>

	// terminator at the end
	*comms_tx_prepared_wr_pointer = END_CR;
 80009c4:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <comms_send+0xc0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	220d      	movs	r2, #13
 80009ca:	701a      	strb	r2, [r3, #0]
	*(comms_tx_prepared_wr_pointer + 1) = END_LF;
 80009cc:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <comms_send+0xc0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	220a      	movs	r2, #10
 80009d4:	701a      	strb	r2, [r3, #0]
	comms_tx_prepared_wr_pointer += 2;
 80009d6:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <comms_send+0xc0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3302      	adds	r3, #2
 80009dc:	4a22      	ldr	r2, [pc, #136]	@ (8000a68 <comms_send+0xc0>)
 80009de:	6013      	str	r3, [r2, #0]

	// buffer is empty
	if (comms_tx_prepared_buffer[3] == 0) {
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <comms_send+0xc4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3303      	adds	r3, #3
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d104      	bne.n	80009f6 <comms_send+0x4e>
		tx_status = COMMS_READY;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <comms_send+0xbc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		return COMMS_TX_BUFFER_EMPTY;
 80009f2:	2303      	movs	r3, #3
 80009f4:	e031      	b.n	8000a5a <comms_send+0xb2>
	}

	// send data
	USBD_StatusTypeDef cdc_return = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_return = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	71bb      	strb	r3, [r7, #6]

	if(comms_selected_interface == COMMS_USB_OTG){
 80009fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <comms_send+0xc8>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d10d      	bne.n	8000a22 <comms_send+0x7a>
		cdc_return = CDC_Transmit_FS(comms_tx_prepared_buffer, comms_tx_prepared_wr_pointer - comms_tx_prepared_buffer);
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <comms_send+0xc4>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <comms_send+0xc0>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <comms_send+0xc4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	4619      	mov	r1, r3
 8000a18:	f00c fb66 	bl	800d0e8 <CDC_Transmit_FS>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	e00d      	b.n	8000a3e <comms_send+0x96>
	} else {
		uart_return = HAL_UART_Transmit(&hlpuart1, comms_tx_prepared_buffer, comms_tx_prepared_wr_pointer - comms_tx_prepared_buffer, 100);
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <comms_send+0xc4>)
 8000a24:	6819      	ldr	r1, [r3, #0]
 8000a26:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <comms_send+0xc0>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <comms_send+0xc4>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	2364      	movs	r3, #100	@ 0x64
 8000a34:	480f      	ldr	r0, [pc, #60]	@ (8000a74 <comms_send+0xcc>)
 8000a36:	f006 ff63 	bl	8007900 <HAL_UART_Transmit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71bb      	strb	r3, [r7, #6]
	}

	tx_status = COMMS_READY;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <comms_send+0xbc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]

	if (cdc_return) {
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <comms_send+0xa6>
		return COMMS_TX_CDC_FAIL;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e005      	b.n	8000a5a <comms_send+0xb2>
	}

	if (uart_return) {
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <comms_send+0xb0>
		return COMMS_TX_UART_FAIL;
 8000a54:	2306      	movs	r3, #6
 8000a56:	e000      	b.n	8000a5a <comms_send+0xb2>
	}

	return COMMS_SUCCESS;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000160e 	.word	0x2000160e
 8000a68:	200009fc 	.word	0x200009fc
 8000a6c:	200009f8 	.word	0x200009f8
 8000a70:	2000160c 	.word	0x2000160c
 8000a74:	2000386c 	.word	0x2000386c

08000a78 <comms_switch_rx_buffers>:


void comms_switch_rx_buffers(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8000a82:	603b      	str	r3, [r7, #0]
  return(result);
 8000a84:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000a86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
	__disable_irq();

	// set read pointer to first data packet head
	comms_rx_active_rd_pointer = comms_rx_active_buffer + 5;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <comms_switch_rx_buffers+0x54>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3305      	adds	r3, #5
 8000a92:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad0 <comms_switch_rx_buffers+0x58>)
 8000a94:	6013      	str	r3, [r2, #0]

	// switch rx buffers
	uint8_t *_temp = comms_rx_prepared_buffer;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <comms_switch_rx_buffers+0x5c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	60bb      	str	r3, [r7, #8]
	comms_rx_prepared_buffer = comms_rx_active_buffer;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <comms_switch_rx_buffers+0x54>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad4 <comms_switch_rx_buffers+0x5c>)
 8000aa2:	6013      	str	r3, [r2, #0]
	comms_rx_active_buffer = _temp;
 8000aa4:	4a09      	ldr	r2, [pc, #36]	@ (8000acc <comms_switch_rx_buffers+0x54>)
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	6013      	str	r3, [r2, #0]

	// switch pointers
	comms_rx_prepared_rd_pointer = comms_rx_active_rd_pointer;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <comms_switch_rx_buffers+0x58>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <comms_switch_rx_buffers+0x60>)
 8000ab0:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_rx_buffer();
 8000ab2:	f7ff fe51 	bl	8000758 <comms_reset_active_rx_buffer>
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f383 8810 	msr	PRIMASK, r3
}
 8000ac0:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200015fc 	.word	0x200015fc
 8000ad0:	20001600 	.word	0x20001600
 8000ad4:	20001604 	.word	0x20001604
 8000ad8:	20001608 	.word	0x20001608

08000adc <comms_cdc_rx_callback>:


void comms_cdc_rx_callback(uint8_t *buffer, uint32_t length) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	// call this func inside of usbd_cdc_if.c in CDC_Receive_FS()

	if (comms_selected_interface != COMMS_USB_OTG){
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <comms_cdc_rx_callback+0x50>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d116      	bne.n	8000b1c <comms_cdc_rx_callback+0x40>
		// quit if UART is in use
		return;
	}

	if (rx_status) {
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <comms_cdc_rx_callback+0x54>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d114      	bne.n	8000b20 <comms_cdc_rx_callback+0x44>
		// not ready yet
		return;
	}

	if (length < 3) {
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d913      	bls.n	8000b24 <comms_cdc_rx_callback+0x48>
		// invalid buffer
		return;
	}

	rx_status = COMMS_INPROGRESS;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <comms_cdc_rx_callback+0x54>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]

	//copy to the active buffer
	memcpy(comms_rx_active_buffer, buffer, length);
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <comms_cdc_rx_callback+0x58>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	683a      	ldr	r2, [r7, #0]
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f00d f8b8 	bl	800dc80 <memcpy>
	comms_switch_rx_buffers();
 8000b10:	f7ff ffb2 	bl	8000a78 <comms_switch_rx_buffers>

	rx_status = COMMS_RECEIVED;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <comms_cdc_rx_callback+0x54>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e004      	b.n	8000b26 <comms_cdc_rx_callback+0x4a>
		return;
 8000b1c:	bf00      	nop
 8000b1e:	e002      	b.n	8000b26 <comms_cdc_rx_callback+0x4a>
		return;
 8000b20:	bf00      	nop
 8000b22:	e000      	b.n	8000b26 <comms_cdc_rx_callback+0x4a>
		return;
 8000b24:	bf00      	nop
}
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2000160c 	.word	0x2000160c
 8000b30:	2000160f 	.word	0x2000160f
 8000b34:	200015fc 	.word	0x200015fc

08000b38 <comms_data_handler>:


__weak void comms_data_handler(CommsData *data) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

	if (data == NULL) {
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d017      	beq.n	8000b76 <comms_data_handler+0x3e>
		return;
	}

	switch (data->data_id) {
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	d115      	bne.n	8000b7a <comms_data_handler+0x42>
	case 5:
		GPIO_PinState currentState = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000b4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b52:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <comms_data_handler+0x4c>)
 8000b54:	f003 faa8 	bl	80040a8 <HAL_GPIO_ReadPin>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	bf14      	ite	ne
 8000b62:	2301      	movne	r3, #1
 8000b64:	2300      	moveq	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	461a      	mov	r2, r3
 8000b6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <comms_data_handler+0x4c>)
 8000b70:	f003 fab2 	bl	80040d8 <HAL_GPIO_WritePin>
				(currentState == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET);
		break;
 8000b74:	e002      	b.n	8000b7c <comms_data_handler+0x44>
		return;
 8000b76:	bf00      	nop
 8000b78:	e000      	b.n	8000b7c <comms_data_handler+0x44>
	default:
		break;
 8000b7a:	bf00      	nop
	}

}
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	48000400 	.word	0x48000400

08000b88 <comms_rx_process>:


void comms_rx_process() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000b8e:	af00      	add	r7, sp, #0
	if (!rx_status) {
 8000b90:	4b50      	ldr	r3, [pc, #320]	@ (8000cd4 <comms_rx_process+0x14c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f000 8096 	beq.w	8000cc6 <comms_rx_process+0x13e>
		// no data yet
		return;
	}

	if (comms_rx_prepared_buffer[2] == 0) {
 8000b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8000cd8 <comms_rx_process+0x150>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f040 808b 	bne.w	8000cbe <comms_rx_process+0x136>
		uint16_t elements = *((uint16_t*) (comms_rx_prepared_buffer + 3));
 8000ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8000cd8 <comms_rx_process+0x150>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000bb0:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406

		for (; elements > 0; --elements) {
 8000bb4:	e07e      	b.n	8000cb4 <comms_rx_process+0x12c>
			CommsData data;
			data.data_id = *comms_rx_prepared_rd_pointer;
 8000bb6:	4b49      	ldr	r3, [pc, #292]	@ (8000cdc <comms_rx_process+0x154>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000bc0:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000bc4:	701a      	strb	r2, [r3, #0]
			data.data_size = *(comms_rx_prepared_rd_pointer + 1);
 8000bc6:	4b45      	ldr	r3, [pc, #276]	@ (8000cdc <comms_rx_process+0x154>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	785a      	ldrb	r2, [r3, #1]
 8000bcc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000bd0:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000bd4:	705a      	strb	r2, [r3, #1]
			data.data_count = *(comms_rx_prepared_rd_pointer + 2);
 8000bd6:	4b41      	ldr	r3, [pc, #260]	@ (8000cdc <comms_rx_process+0x154>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	789a      	ldrb	r2, [r3, #2]
 8000bdc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000be0:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000be4:	709a      	strb	r2, [r3, #2]

			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000bec:	e03d      	b.n	8000c6a <comms_rx_process+0xe2>
				switch (data.data_size) {
 8000bee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000bf2:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000bf6:	785b      	ldrb	r3, [r3, #1]
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	d023      	beq.n	8000c44 <comms_rx_process+0xbc>
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	dc64      	bgt.n	8000cca <comms_rx_process+0x142>
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d002      	beq.n	8000c0a <comms_rx_process+0x82>
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d00e      	beq.n	8000c26 <comms_rx_process+0x9e>
				case 4:
					data.data[x].u32 =
							*((uint32_t*) (comms_rx_prepared_rd_pointer + 3));
					break;
				default:
					return;
 8000c08:	e05f      	b.n	8000cca <comms_rx_process+0x142>
					data.data[x].u8 = *(comms_rx_prepared_rd_pointer + 3);
 8000c0a:	4b34      	ldr	r3, [pc, #208]	@ (8000cdc <comms_rx_process+0x154>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000c12:	78d1      	ldrb	r1, [r2, #3]
 8000c14:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000c18:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	460a      	mov	r2, r1
 8000c22:	711a      	strb	r2, [r3, #4]
					break;
 8000c24:	e01c      	b.n	8000c60 <comms_rx_process+0xd8>
					data.data[x].u16 =
 8000c26:	4b2d      	ldr	r3, [pc, #180]	@ (8000cdc <comms_rx_process+0x154>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000c2e:	f8b2 1003 	ldrh.w	r1, [r2, #3]
 8000c32:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000c36:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	460a      	mov	r2, r1
 8000c40:	809a      	strh	r2, [r3, #4]
					break;
 8000c42:	e00d      	b.n	8000c60 <comms_rx_process+0xd8>
					data.data[x].u32 =
 8000c44:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <comms_rx_process+0x154>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000c4c:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8000c50:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000c54:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	605a      	str	r2, [r3, #4]
					break;
 8000c5e:	bf00      	nop
			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000c60:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000c64:	3301      	adds	r3, #1
 8000c66:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000c6a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000c6e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	f897 2405 	ldrb.w	r2, [r7, #1029]	@ 0x405
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d3b8      	bcc.n	8000bee <comms_rx_process+0x66>
				}
			}

			comms_data_handler(&data);
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff5a 	bl	8000b38 <comms_data_handler>

			comms_rx_prepared_rd_pointer = (comms_rx_prepared_rd_pointer + 3
					+ (data.data_size * data.data_count));
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <comms_rx_process+0x154>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000c8c:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	4619      	mov	r1, r3
 8000c94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000c98:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000c9c:	789b      	ldrb	r3, [r3, #2]
 8000c9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ca2:	3303      	adds	r3, #3
 8000ca4:	4413      	add	r3, r2
			comms_rx_prepared_rd_pointer = (comms_rx_prepared_rd_pointer + 3
 8000ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <comms_rx_process+0x154>)
 8000ca8:	6013      	str	r3, [r2, #0]
		for (; elements > 0; --elements) {
 8000caa:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
 8000cb4:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f47f af7c 	bne.w	8000bb6 <comms_rx_process+0x2e>
		}
	}

	rx_status = COMMS_READY;
 8000cbe:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <comms_rx_process+0x14c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e002      	b.n	8000ccc <comms_rx_process+0x144>
		return;
 8000cc6:	bf00      	nop
 8000cc8:	e000      	b.n	8000ccc <comms_rx_process+0x144>
					return;
 8000cca:	bf00      	nop
}
 8000ccc:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000160f 	.word	0x2000160f
 8000cd8:	20001604 	.word	0x20001604
 8000cdc:	20001608 	.word	0x20001608

08000ce0 <comms_lpuart_rx_callback>:


void comms_lpuart_rx_callback(UART_HandleTypeDef *huart) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	static int uart_elements;
	static int data_total_length;
	static HAL_StatusTypeDef rcode;
	UNUSED(rcode);

	if (comms_selected_interface != COMMS_UART){
 8000ce8:	4b48      	ldr	r3, [pc, #288]	@ (8000e0c <comms_lpuart_rx_callback+0x12c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f040 8086 	bne.w	8000dfe <comms_lpuart_rx_callback+0x11e>
		// quit if USB OTG is in use
		return;
	}

	switch (uart_rx_state) {
 8000cf2:	4b47      	ldr	r3, [pc, #284]	@ (8000e10 <comms_lpuart_rx_callback+0x130>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d04f      	beq.n	8000d9a <comms_lpuart_rx_callback+0xba>
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	f300 8081 	bgt.w	8000e02 <comms_lpuart_rx_callback+0x122>
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <comms_lpuart_rx_callback+0x2a>
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d025      	beq.n	8000d54 <comms_lpuart_rx_callback+0x74>
			UNUSED(rcode);

			break;

		default:
			break;
 8000d08:	e07b      	b.n	8000e02 <comms_lpuart_rx_callback+0x122>
			if (*((uint16_t*) (comms_rx_active_buffer)) != START_HEADER) {
 8000d0a:	4b42      	ldr	r3, [pc, #264]	@ (8000e14 <comms_lpuart_rx_callback+0x134>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d002      	beq.n	8000d1e <comms_lpuart_rx_callback+0x3e>
				comms_uart_init();
 8000d18:	f7ff fd40 	bl	800079c <comms_uart_init>
				break;
 8000d1c:	e072      	b.n	8000e04 <comms_lpuart_rx_callback+0x124>
			uart_elements = *((uint16_t*) (comms_rx_active_buffer + 3));
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e14 <comms_lpuart_rx_callback+0x134>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3303      	adds	r3, #3
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b3b      	ldr	r3, [pc, #236]	@ (8000e18 <comms_lpuart_rx_callback+0x138>)
 8000d2a:	601a      	str	r2, [r3, #0]
			comms_rx_active_rd_pointer = comms_rx_active_buffer + 5;
 8000d2c:	4b39      	ldr	r3, [pc, #228]	@ (8000e14 <comms_lpuart_rx_callback+0x134>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3305      	adds	r3, #5
 8000d32:	4a3a      	ldr	r2, [pc, #232]	@ (8000e1c <comms_lpuart_rx_callback+0x13c>)
 8000d34:	6013      	str	r3, [r2, #0]
			rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, 3);
 8000d36:	4b39      	ldr	r3, [pc, #228]	@ (8000e1c <comms_lpuart_rx_callback+0x13c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4838      	ldr	r0, [pc, #224]	@ (8000e20 <comms_lpuart_rx_callback+0x140>)
 8000d40:	f006 fe6c 	bl	8007a1c <HAL_UART_Receive_IT>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b36      	ldr	r3, [pc, #216]	@ (8000e24 <comms_lpuart_rx_callback+0x144>)
 8000d4a:	701a      	strb	r2, [r3, #0]
			uart_rx_state = COMMS_UART_PACKET_HEAD;
 8000d4c:	4b30      	ldr	r3, [pc, #192]	@ (8000e10 <comms_lpuart_rx_callback+0x130>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
			break;
 8000d52:	e057      	b.n	8000e04 <comms_lpuart_rx_callback+0x124>
			data_total_length = (*(comms_rx_active_rd_pointer + 1)) * (*(comms_rx_active_rd_pointer + 2));
 8000d54:	4b31      	ldr	r3, [pc, #196]	@ (8000e1c <comms_lpuart_rx_callback+0x13c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e1c <comms_lpuart_rx_callback+0x13c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3302      	adds	r3, #2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	fb02 f303 	mul.w	r3, r2, r3
 8000d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e28 <comms_lpuart_rx_callback+0x148>)
 8000d6c:	6013      	str	r3, [r2, #0]
			comms_rx_active_rd_pointer = comms_rx_active_rd_pointer + 3;
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e1c <comms_lpuart_rx_callback+0x13c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3303      	adds	r3, #3
 8000d74:	4a29      	ldr	r2, [pc, #164]	@ (8000e1c <comms_lpuart_rx_callback+0x13c>)
 8000d76:	6013      	str	r3, [r2, #0]
			rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, data_total_length);
 8000d78:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <comms_lpuart_rx_callback+0x13c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000e28 <comms_lpuart_rx_callback+0x148>)
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	b292      	uxth	r2, r2
 8000d82:	4619      	mov	r1, r3
 8000d84:	4826      	ldr	r0, [pc, #152]	@ (8000e20 <comms_lpuart_rx_callback+0x140>)
 8000d86:	f006 fe49 	bl	8007a1c <HAL_UART_Receive_IT>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b25      	ldr	r3, [pc, #148]	@ (8000e24 <comms_lpuart_rx_callback+0x144>)
 8000d90:	701a      	strb	r2, [r3, #0]
			uart_rx_state = COMMS_UART_PACKET_DATA;
 8000d92:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <comms_lpuart_rx_callback+0x130>)
 8000d94:	2202      	movs	r2, #2
 8000d96:	701a      	strb	r2, [r3, #0]
			break;
 8000d98:	e034      	b.n	8000e04 <comms_lpuart_rx_callback+0x124>
			comms_rx_active_rd_pointer = comms_rx_active_rd_pointer + data_total_length;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	@ (8000e1c <comms_lpuart_rx_callback+0x13c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a22      	ldr	r2, [pc, #136]	@ (8000e28 <comms_lpuart_rx_callback+0x148>)
 8000da0:	6812      	ldr	r2, [r2, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e1c <comms_lpuart_rx_callback+0x13c>)
 8000da6:	6013      	str	r3, [r2, #0]
			if(uart_elements > 0) {
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <comms_lpuart_rx_callback+0x138>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	dd07      	ble.n	8000dc0 <comms_lpuart_rx_callback+0xe0>
				uart_rx_state = COMMS_UART_PACKET_HEAD;
 8000db0:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <comms_lpuart_rx_callback+0x130>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
				--uart_elements;
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <comms_lpuart_rx_callback+0x138>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	4a16      	ldr	r2, [pc, #88]	@ (8000e18 <comms_lpuart_rx_callback+0x138>)
 8000dbe:	6013      	str	r3, [r2, #0]
			if (uart_elements == 0) {
 8000dc0:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <comms_lpuart_rx_callback+0x138>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d110      	bne.n	8000dea <comms_lpuart_rx_callback+0x10a>
				comms_switch_rx_buffers();
 8000dc8:	f7ff fe56 	bl	8000a78 <comms_switch_rx_buffers>
				rx_status = COMMS_RECEIVED;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <comms_lpuart_rx_callback+0x14c>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	701a      	strb	r2, [r3, #0]
				uart_rx_state = COMMS_UART_HEAD;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <comms_lpuart_rx_callback+0x130>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
				uart_elements = 0;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <comms_lpuart_rx_callback+0x138>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
				data_total_length = 0;
 8000dde:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <comms_lpuart_rx_callback+0x148>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
				comms_uart_init();
 8000de4:	f7ff fcda 	bl	800079c <comms_uart_init>
				break;
 8000de8:	e00c      	b.n	8000e04 <comms_lpuart_rx_callback+0x124>
			HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, 3);
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <comms_lpuart_rx_callback+0x13c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2203      	movs	r2, #3
 8000df0:	4619      	mov	r1, r3
 8000df2:	480b      	ldr	r0, [pc, #44]	@ (8000e20 <comms_lpuart_rx_callback+0x140>)
 8000df4:	f006 fe12 	bl	8007a1c <HAL_UART_Receive_IT>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	73fb      	strb	r3, [r7, #15]
			break;
 8000dfc:	e002      	b.n	8000e04 <comms_lpuart_rx_callback+0x124>
		return;
 8000dfe:	bf00      	nop
 8000e00:	e000      	b.n	8000e04 <comms_lpuart_rx_callback+0x124>
			break;
 8000e02:	bf00      	nop
	}

}
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000160c 	.word	0x2000160c
 8000e10:	20001610 	.word	0x20001610
 8000e14:	200015fc 	.word	0x200015fc
 8000e18:	20001614 	.word	0x20001614
 8000e1c:	20001600 	.word	0x20001600
 8000e20:	2000386c 	.word	0x2000386c
 8000e24:	20001618 	.word	0x20001618
 8000e28:	2000161c 	.word	0x2000161c
 8000e2c:	2000160f 	.word	0x2000160f

08000e30 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	// user defined __weak callback from stm32l4xx_hal_uart.c
	// uart loaded data
	if (huart == &hlpuart1) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <HAL_UART_RxCpltCallback+0x20>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d102      	bne.n	8000e46 <HAL_UART_RxCpltCallback+0x16>
		comms_lpuart_rx_callback(huart);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff4d 	bl	8000ce0 <comms_lpuart_rx_callback>
	}
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000386c 	.word	0x2000386c

08000e54 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e5a:	4b29      	ldr	r3, [pc, #164]	@ (8000f00 <MX_DMA_Init+0xac>)
 8000e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5e:	4a28      	ldr	r2, [pc, #160]	@ (8000f00 <MX_DMA_Init+0xac>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e66:	4b26      	ldr	r3, [pc, #152]	@ (8000f00 <MX_DMA_Init+0xac>)
 8000e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e72:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <MX_DMA_Init+0xac>)
 8000e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e76:	4a22      	ldr	r2, [pc, #136]	@ (8000f00 <MX_DMA_Init+0xac>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e7e:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <MX_DMA_Init+0xac>)
 8000e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_DMA_Init+0xb0>)
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8000f08 <MX_DMA_Init+0xb4>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_DMA_Init+0xb0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_DMA_Init+0xb0>)
 8000e98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e9c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <MX_DMA_Init+0xb0>)
 8000ea0:	2240      	movs	r2, #64	@ 0x40
 8000ea2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_DMA_Init+0xb0>)
 8000ea6:	2280      	movs	r2, #128	@ 0x80
 8000ea8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_DMA_Init+0xb0>)
 8000eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_DMA_Init+0xb0>)
 8000eb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eb8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_DMA_Init+0xb0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <MX_DMA_Init+0xb0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8000ec6:	480f      	ldr	r0, [pc, #60]	@ (8000f04 <MX_DMA_Init+0xb0>)
 8000ec8:	f002 fbe6 	bl	8003698 <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000ed2:	f000 fb08 	bl	80014e6 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	200b      	movs	r0, #11
 8000edc:	f002 fba5 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee0:	200b      	movs	r0, #11
 8000ee2:	f002 fbbe 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	200c      	movs	r0, #12
 8000eec:	f002 fb9d 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ef0:	200c      	movs	r0, #12
 8000ef2:	f002 fbb6 	bl	8003662 <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	20001620 	.word	0x20001620
 8000f08:	4002001c 	.word	0x4002001c

08000f0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	@ 0x30
 8000f10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b55      	ldr	r3, [pc, #340]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	4a54      	ldr	r2, [pc, #336]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2e:	4b52      	ldr	r3, [pc, #328]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	4a4e      	ldr	r2, [pc, #312]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f46:	4b4c      	ldr	r3, [pc, #304]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b49      	ldr	r3, [pc, #292]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	4a48      	ldr	r2, [pc, #288]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5e:	4b46      	ldr	r3, [pc, #280]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	4b43      	ldr	r3, [pc, #268]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	4a42      	ldr	r2, [pc, #264]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f76:	4b40      	ldr	r3, [pc, #256]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f82:	4b3d      	ldr	r3, [pc, #244]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	4a3c      	ldr	r2, [pc, #240]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000f9a:	f004 fb63 	bl	8005664 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b36      	ldr	r3, [pc, #216]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	4a35      	ldr	r2, [pc, #212]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000faa:	4b33      	ldr	r3, [pc, #204]	@ (8001078 <MX_GPIO_Init+0x16c>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000fbc:	482f      	ldr	r0, [pc, #188]	@ (800107c <MX_GPIO_Init+0x170>)
 8000fbe:	f003 f88b 	bl	80040d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2140      	movs	r1, #64	@ 0x40
 8000fc6:	482e      	ldr	r0, [pc, #184]	@ (8001080 <MX_GPIO_Init+0x174>)
 8000fc8:	f003 f886 	bl	80040d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2180      	movs	r1, #128	@ 0x80
 8000fd0:	482c      	ldr	r0, [pc, #176]	@ (8001084 <MX_GPIO_Init+0x178>)
 8000fd2:	f003 f881 	bl	80040d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fdc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	4825      	ldr	r0, [pc, #148]	@ (8001084 <MX_GPIO_Init+0x178>)
 8000fee:	f002 fec9 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ff2:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	481c      	ldr	r0, [pc, #112]	@ (800107c <MX_GPIO_Init+0x170>)
 800100c:	f002 feba 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001010:	2320      	movs	r3, #32
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4817      	ldr	r0, [pc, #92]	@ (8001080 <MX_GPIO_Init+0x174>)
 8001024:	f002 feae 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001028:	2340      	movs	r3, #64	@ 0x40
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	4810      	ldr	r0, [pc, #64]	@ (8001080 <MX_GPIO_Init+0x174>)
 8001040:	f002 fea0 	bl	8003d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001044:	2380      	movs	r3, #128	@ 0x80
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	480a      	ldr	r0, [pc, #40]	@ (8001084 <MX_GPIO_Init+0x178>)
 800105c:	f002 fe92 	bl	8003d84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2028      	movs	r0, #40	@ 0x28
 8001066:	f002 fae0 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800106a:	2028      	movs	r0, #40	@ 0x28
 800106c:	f002 faf9 	bl	8003662 <HAL_NVIC_EnableIRQ>

}
 8001070:	bf00      	nop
 8001072:	3730      	adds	r7, #48	@ 0x30
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	48000400 	.word	0x48000400
 8001080:	48001800 	.word	0x48001800
 8001084:	48000800 	.word	0x48000800

08001088 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001098:	d125      	bne.n	80010e6 <HAL_GPIO_EXTI_Callback+0x5e>
		static bool previous;
		if(previous == false){
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x68>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d009      	beq.n	80010bc <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010ae:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <HAL_GPIO_EXTI_Callback+0x6c>)
 80010b0:	f003 f812 	bl	80040d8 <HAL_GPIO_WritePin>
			previous = true;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x68>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e008      	b.n	80010ce <HAL_GPIO_EXTI_Callback+0x46>
		} else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010c2:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <HAL_GPIO_EXTI_Callback+0x6c>)
 80010c4:	f003 f808 	bl	80040d8 <HAL_GPIO_WritePin>
			previous = false;
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x68>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
		}

		int test = 1984;
 80010ce:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80010d2:	60fb      	str	r3, [r7, #12]
		comms_append_int32(10, 1, &test);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	461a      	mov	r2, r3
 80010da:	2101      	movs	r1, #1
 80010dc:	200a      	movs	r0, #10
 80010de:	f7ff fbeb 	bl	80008b8 <comms_append_int32>
		comms_send();
 80010e2:	f7ff fc61 	bl	80009a8 <comms_send>
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20001680 	.word	0x20001680
 80010f4:	48000400 	.word	0x48000400

080010f8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d10d      	bne.n	8001124 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001108:	2180      	movs	r1, #128	@ 0x80
 800110a:	4809      	ldr	r0, [pc, #36]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800110c:	f002 fffc 	bl	8004108 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001118:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		comms_append_int32(1, 1, &periodical);
 800111a:	4a06      	ldr	r2, [pc, #24]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800111c:	2101      	movs	r1, #1
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fbca 	bl	80008b8 <comms_append_int32>
	}

	if (htim == &htim3) {
			//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		}
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20003820 	.word	0x20003820
 8001130:	48000400 	.word	0x48000400
 8001134:	20001684 	.word	0x20001684

08001138 <myDmaFunction>:

char testdata[10];

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8001140:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <myDmaFunction+0x28>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <myDmaFunction+0x2c>)
 8001148:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 800114a:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <myDmaFunction+0x28>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001150:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <myDmaFunction+0x30>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	200037d4 	.word	0x200037d4
 8001164:	20001690 	.word	0x20001690
 8001168:	20001694 	.word	0x20001694

0800116c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);
    //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

    ++call_count;
 8001174:	4b58      	ldr	r3, [pc, #352]	@ (80012d8 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a57      	ldr	r2, [pc, #348]	@ (80012d8 <HAL_ADC_ConvCpltCallback+0x16c>)
 800117c:	6013      	str	r3, [r2, #0]

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 800117e:	4b57      	ldr	r3, [pc, #348]	@ (80012dc <HAL_ADC_ConvCpltCallback+0x170>)
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 8001186:	4b56      	ldr	r3, [pc, #344]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x174>)
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 10; i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	e027      	b.n	80011e4 <HAL_ADC_ConvCpltCallback+0x78>
        adcValue += dma_data_buffer[i + 10]; // Použití druhé poloviny DMA bufferu
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	330a      	adds	r3, #10
 8001198:	4a52      	ldr	r2, [pc, #328]	@ (80012e4 <HAL_ADC_ConvCpltCallback+0x178>)
 800119a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119e:	ee07 3a90 	vmov	s15, r3
 80011a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a6:	4b4d      	ldr	r3, [pc, #308]	@ (80012dc <HAL_ADC_ConvCpltCallback+0x170>)
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b0:	4b4a      	ldr	r3, [pc, #296]	@ (80012dc <HAL_ADC_ConvCpltCallback+0x170>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 10];
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	330b      	adds	r3, #11
 80011ba:	4a4a      	ldr	r2, [pc, #296]	@ (80012e4 <HAL_ADC_ConvCpltCallback+0x178>)
 80011bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c8:	4b45      	ldr	r3, [pc, #276]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x174>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	4b43      	ldr	r3, [pc, #268]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x174>)
 80011d4:	edc3 7a00 	vstr	s15, [r3]
        i++;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 10; i++) {
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b09      	cmp	r3, #9
 80011e8:	ddd4      	ble.n	8001194 <HAL_ADC_ConvCpltCallback+0x28>
    }
    adcValue /= 50.0f;
 80011ea:	4b3c      	ldr	r3, [pc, #240]	@ (80012dc <HAL_ADC_ConvCpltCallback+0x170>)
 80011ec:	ed93 7a00 	vldr	s14, [r3]
 80011f0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80012e8 <HAL_ADC_ConvCpltCallback+0x17c>
 80011f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f8:	4b38      	ldr	r3, [pc, #224]	@ (80012dc <HAL_ADC_ConvCpltCallback+0x170>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 80011fe:	4b38      	ldr	r3, [pc, #224]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x174>)
 8001200:	ed93 7a00 	vldr	s14, [r3]
 8001204:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80012e8 <HAL_ADC_ConvCpltCallback+0x17c>
 8001208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120c:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x174>)
 800120e:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8001212:	4b32      	ldr	r3, [pc, #200]	@ (80012dc <HAL_ADC_ConvCpltCallback+0x170>)
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80012ec <HAL_ADC_ConvCpltCallback+0x180>
 800121c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001220:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80012f0 <HAL_ADC_ConvCpltCallback+0x184>
 8001224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001228:	edc7 7a04 	vstr	s15, [r7, #16]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 800122c:	4b31      	ldr	r3, [pc, #196]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x188>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001238:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80012ec <HAL_ADC_ConvCpltCallback+0x180>
 800123c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001240:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80012f0 <HAL_ADC_ConvCpltCallback+0x184>
 8001244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001248:	edc7 7a03 	vstr	s15, [r7, #12]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x18c>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001258:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80012ec <HAL_ADC_ConvCpltCallback+0x180>
 800125c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001260:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80012f0 <HAL_ADC_ConvCpltCallback+0x184>
 8001264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001268:	edc7 7a02 	vstr	s15, [r7, #8]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 800126c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001270:	edd7 7a03 	vldr	s15, [r7, #12]
 8001274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001278:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80012fc <HAL_ADC_ConvCpltCallback+0x190>
 800127c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001280:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x194>)
 800128a:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x198>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	4a1b      	ldr	r2, [pc, #108]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x198>)
 8001296:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    temperatureInt = (int)temperature;
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x194>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a2:	ee17 2a90 	vmov	r2, s15
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x19c>)
 80012a8:	601a      	str	r2, [r3, #0]

    adcIn1Int = (int)adcIn1;
 80012aa:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x174>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b4:	ee17 2a90 	vmov	r2, s15
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <HAL_ADC_ConvCpltCallback+0x1a0>)
 80012ba:	601a      	str	r2, [r3, #0]

    full_adc++;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a13      	ldr	r2, [pc, #76]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80012c4:	6013      	str	r3, [r2, #0]

    //comms_append_int32(2, 1, &temperatureInt);
    comms_append_int32(23, 1, &adcIn1Int);
 80012c6:	4a11      	ldr	r2, [pc, #68]	@ (800130c <HAL_ADC_ConvCpltCallback+0x1a0>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	2017      	movs	r0, #23
 80012cc:	f7ff faf4 	bl	80008b8 <comms_append_int32>
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20003780 	.word	0x20003780
 80012dc:	20003768 	.word	0x20003768
 80012e0:	20003770 	.word	0x20003770
 80012e4:	200035d8 	.word	0x200035d8
 80012e8:	42480000 	.word	0x42480000
 80012ec:	45800000 	.word	0x45800000
 80012f0:	40533333 	.word	0x40533333
 80012f4:	1fff75a8 	.word	0x1fff75a8
 80012f8:	1fff75ca 	.word	0x1fff75ca
 80012fc:	42a00000 	.word	0x42a00000
 8001300:	2000376c 	.word	0x2000376c
 8001304:	20003774 	.word	0x20003774
 8001308:	20003778 	.word	0x20003778
 800130c:	2000377c 	.word	0x2000377c
 8001310:	20003784 	.word	0x20003784

08001314 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
//		adcValue = adcValue + dma_data_buffer[i];
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132e:	f000 fc2e 	bl	8001b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001332:	f000 f885 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001336:	f7ff fde9 	bl	8000f0c <MX_GPIO_Init>
  MX_DMA_Init();
 800133a:	f7ff fd8b 	bl	8000e54 <MX_DMA_Init>
  MX_TIM6_Init();
 800133e:	f000 fa29 	bl	8001794 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8001342:	f00b fe0d 	bl	800cf60 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8001346:	f000 f9d7 	bl	80016f8 <MX_TIM5_Init>
  MX_ADC1_Init();
 800134a:	f7ff f8cf 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 800134e:	f000 f985 	bl	800165c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001352:	f000 faf9 	bl	8001948 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8001356:	f000 faab 	bl	80018b0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2180      	movs	r1, #128	@ 0x80
 800135e:	482b      	ldr	r0, [pc, #172]	@ (800140c <main+0xe4>)
 8001360:	f002 feba 	bl	80040d8 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 8001364:	482a      	ldr	r0, [pc, #168]	@ (8001410 <main+0xe8>)
 8001366:	f005 fe3d 	bl	8006fe4 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 800136a:	482a      	ldr	r0, [pc, #168]	@ (8001414 <main+0xec>)
 800136c:	f005 fdd2 	bl	8006f14 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	e00d      	b.n	8001392 <main+0x6a>
		dma[i] = i;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001380:	4a25      	ldr	r2, [pc, #148]	@ (8001418 <main+0xf0>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001398:	dbed      	blt.n	8001376 <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 800139a:	4a20      	ldr	r2, [pc, #128]	@ (800141c <main+0xf4>)
 800139c:	2100      	movs	r1, #0
 800139e:	4820      	ldr	r0, [pc, #128]	@ (8001420 <main+0xf8>)
 80013a0:	f002 fc08 	bl	8003bb4 <HAL_DMA_RegisterCallback>
 80013a4:	4603      	mov	r3, r0
 80013a6:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <main+0xec>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001424 <main+0xfc>)
 80013b0:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 80013b2:	4919      	ldr	r1, [pc, #100]	@ (8001418 <main+0xf0>)
 80013b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001428 <main+0x100>)
 80013b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ba:	4819      	ldr	r0, [pc, #100]	@ (8001420 <main+0xf8>)
 80013bc:	f002 fa14 	bl	80037e8 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <main+0xec>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	4a19      	ldr	r2, [pc, #100]	@ (800142c <main+0x104>)
 80013c8:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <main+0xec>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d0:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <main+0x108>)
 80013d2:	6013      	str	r3, [r2, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80013d4:	217f      	movs	r1, #127	@ 0x7f
 80013d6:	4817      	ldr	r0, [pc, #92]	@ (8001434 <main+0x10c>)
 80013d8:	f001 ffba 	bl	8003350 <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 80013dc:	2032      	movs	r0, #50	@ 0x32
 80013de:	f000 fc4b 	bl	8001c78 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 20);
 80013e2:	2214      	movs	r2, #20
 80013e4:	4914      	ldr	r1, [pc, #80]	@ (8001438 <main+0x110>)
 80013e6:	4813      	ldr	r0, [pc, #76]	@ (8001434 <main+0x10c>)
 80013e8:	f000 ffc4 	bl	8002374 <HAL_ADC_Start_DMA>
 80013ec:	4603      	mov	r3, r0
 80013ee:	70bb      	strb	r3, [r7, #2]

	HAL_TIM_Base_Start_IT(&htim3);
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <main+0x114>)
 80013f2:	f005 fdf7 	bl	8006fe4 <HAL_TIM_Base_Start_IT>

	comms_init();
 80013f6:	f7ff f9eb 	bl	80007d0 <comms_init>
	comms_uart_init();
 80013fa:	f7ff f9cf 	bl	800079c <comms_uart_init>
//	    comms_append_int32(2, 1, &temperatureInt);

//	    comms_send();

		//load_CPU();
		comms_send();
 80013fe:	f7ff fad3 	bl	80009a8 <comms_send>
		comms_rx_process();
 8001402:	f7ff fbc1 	bl	8000b88 <comms_rx_process>
		comms_send();
 8001406:	bf00      	nop
 8001408:	e7f9      	b.n	80013fe <main+0xd6>
 800140a:	bf00      	nop
 800140c:	48000800 	.word	0x48000800
 8001410:	20003820 	.word	0x20003820
 8001414:	200037d4 	.word	0x200037d4
 8001418:	20001698 	.word	0x20001698
 800141c:	08001139 	.word	0x08001139
 8001420:	20001620 	.word	0x20001620
 8001424:	20001688 	.word	0x20001688
 8001428:	20002638 	.word	0x20002638
 800142c:	20001694 	.word	0x20001694
 8001430:	2000168c 	.word	0x2000168c
 8001434:	20000128 	.word	0x20000128
 8001438:	200035d8 	.word	0x200035d8
 800143c:	20003788 	.word	0x20003788

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b096      	sub	sp, #88	@ 0x58
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	2244      	movs	r2, #68	@ 0x44
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f00c fbea 	bl	800dc28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	463b      	mov	r3, r7
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001462:	2000      	movs	r0, #0
 8001464:	f004 f84a 	bl	80054fc <HAL_PWREx_ControlVoltageScaling>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800146e:	f000 f83a 	bl	80014e6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001472:	2322      	movs	r3, #34	@ 0x22
 8001474:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001476:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800147c:	2301      	movs	r3, #1
 800147e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001480:	2340      	movs	r3, #64	@ 0x40
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001484:	2302      	movs	r3, #2
 8001486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001488:	2302      	movs	r3, #2
 800148a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800148c:	2302      	movs	r3, #2
 800148e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001490:	231e      	movs	r3, #30
 8001492:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001498:	2302      	movs	r3, #2
 800149a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800149c:	2302      	movs	r3, #2
 800149e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 f8ed 	bl	8005684 <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80014b0:	f000 f819 	bl	80014e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	230f      	movs	r3, #15
 80014b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b8:	2303      	movs	r3, #3
 80014ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	2105      	movs	r1, #5
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 fcf2 	bl	8005eb8 <HAL_RCC_ClockConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014da:	f000 f804 	bl	80014e6 <Error_Handler>
  }
}
 80014de:	bf00      	nop
 80014e0:	3758      	adds	r7, #88	@ 0x58
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014ea:	b672      	cpsid	i
}
 80014ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014ee:	bf00      	nop
 80014f0:	e7fd      	b.n	80014ee <Error_Handler+0x8>
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <HAL_MspInit+0x44>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <HAL_MspInit+0x44>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6613      	str	r3, [r2, #96]	@ 0x60
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <HAL_MspInit+0x44>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_MspInit+0x44>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	4a08      	ldr	r2, [pc, #32]	@ (8001538 <HAL_MspInit+0x44>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151c:	6593      	str	r3, [r2, #88]	@ 0x58
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_MspInit+0x44>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <NMI_Handler+0x4>

08001544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <MemManage_Handler+0x4>

08001554 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <UsageFault_Handler+0x4>

08001564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001592:	f000 fb51 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <DMA1_Channel1_IRQHandler+0x10>)
 80015a2:	f002 fa57 	bl	8003a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000190 	.word	0x20000190

080015b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <DMA1_Channel2_IRQHandler+0x10>)
 80015b6:	f002 fa4d 	bl	8003a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20001620 	.word	0x20001620

080015c4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015c8:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <ADC1_IRQHandler+0x10>)
 80015ca:	f000 ff57 	bl	800247c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000128 	.word	0x20000128

080015d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <TIM3_IRQHandler+0x10>)
 80015de:	f005 fd71 	bl	80070c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20003788 	.word	0x20003788

080015ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015f4:	f002 fda2 	bl	800413c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <TIM6_DAC_IRQHandler+0x10>)
 8001602:	f005 fd5f 	bl	80070c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20003820 	.word	0x20003820

08001610 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <OTG_FS_IRQHandler+0x10>)
 8001616:	f002 fefc 	bl	8004412 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20004e78 	.word	0x20004e78

08001624 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <LPUART1_IRQHandler+0x10>)
 800162a:	f006 fa43 	bl	8007ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000386c 	.word	0x2000386c

08001638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	@ (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_TIM3_Init+0x94>)
 800167c:	4a1d      	ldr	r2, [pc, #116]	@ (80016f4 <MX_TIM3_Init+0x98>)
 800167e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <MX_TIM3_Init+0x94>)
 8001682:	22c7      	movs	r2, #199	@ 0xc7
 8001684:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <MX_TIM3_Init+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <MX_TIM3_Init+0x94>)
 800168e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001692:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <MX_TIM3_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <MX_TIM3_Init+0x94>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016a0:	4813      	ldr	r0, [pc, #76]	@ (80016f0 <MX_TIM3_Init+0x94>)
 80016a2:	f005 fbdf 	bl	8006e64 <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016ac:	f7ff ff1b 	bl	80014e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <MX_TIM3_Init+0x94>)
 80016be:	f005 fe03 	bl	80072c8 <HAL_TIM_ConfigClockSource>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016c8:	f7ff ff0d 	bl	80014e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016cc:	2320      	movs	r3, #32
 80016ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_TIM3_Init+0x94>)
 80016da:	f006 f81b 	bl	8007714 <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f7ff feff 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20003788 	.word	0x20003788
 80016f4:	40000400 	.word	0x40000400

080016f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001716:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <MX_TIM5_Init+0x94>)
 8001718:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <MX_TIM5_Init+0x98>)
 800171a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <MX_TIM5_Init+0x94>)
 800171e:	2200      	movs	r2, #0
 8001720:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <MX_TIM5_Init+0x94>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001728:	4b18      	ldr	r3, [pc, #96]	@ (800178c <MX_TIM5_Init+0x94>)
 800172a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800172e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001730:	4b16      	ldr	r3, [pc, #88]	@ (800178c <MX_TIM5_Init+0x94>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <MX_TIM5_Init+0x94>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800173c:	4813      	ldr	r0, [pc, #76]	@ (800178c <MX_TIM5_Init+0x94>)
 800173e:	f005 fb91 	bl	8006e64 <HAL_TIM_Base_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001748:	f7ff fecd 	bl	80014e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	4619      	mov	r1, r3
 8001758:	480c      	ldr	r0, [pc, #48]	@ (800178c <MX_TIM5_Init+0x94>)
 800175a:	f005 fdb5 	bl	80072c8 <HAL_TIM_ConfigClockSource>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001764:	f7ff febf 	bl	80014e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	@ (800178c <MX_TIM5_Init+0x94>)
 8001776:	f005 ffcd 	bl	8007714 <HAL_TIMEx_MasterConfigSynchronization>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001780:	f7ff feb1 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200037d4 	.word	0x200037d4
 8001790:	40000c00 	.word	0x40000c00

08001794 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_TIM6_Init+0x68>)
 80017a6:	4a16      	ldr	r2, [pc, #88]	@ (8001800 <MX_TIM6_Init+0x6c>)
 80017a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <MX_TIM6_Init+0x68>)
 80017ac:	f242 7210 	movw	r2, #10000	@ 0x2710
 80017b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <MX_TIM6_Init+0x68>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 80017b8:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <MX_TIM6_Init+0x68>)
 80017ba:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80017be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <MX_TIM6_Init+0x68>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017c6:	480d      	ldr	r0, [pc, #52]	@ (80017fc <MX_TIM6_Init+0x68>)
 80017c8:	f005 fb4c 	bl	8006e64 <HAL_TIM_Base_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80017d2:	f7ff fe88 	bl	80014e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017d6:	2320      	movs	r3, #32
 80017d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4806      	ldr	r0, [pc, #24]	@ (80017fc <MX_TIM6_Init+0x68>)
 80017e4:	f005 ff96 	bl	8007714 <HAL_TIMEx_MasterConfigSynchronization>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80017ee:	f7ff fe7a 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20003820 	.word	0x20003820
 8001800:	40001000 	.word	0x40001000

08001804 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a23      	ldr	r2, [pc, #140]	@ (80018a0 <HAL_TIM_Base_MspInit+0x9c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d114      	bne.n	8001840 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001816:	4b23      	ldr	r3, [pc, #140]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	4a22      	ldr	r2, [pc, #136]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6593      	str	r3, [r2, #88]	@ 0x58
 8001822:	4b20      	ldr	r3, [pc, #128]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	201d      	movs	r0, #29
 8001834:	f001 fef9 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001838:	201d      	movs	r0, #29
 800183a:	f001 ff12 	bl	8003662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800183e:	e02a      	b.n	8001896 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a18      	ldr	r2, [pc, #96]	@ (80018a8 <HAL_TIM_Base_MspInit+0xa4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10c      	bne.n	8001864 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800184a:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	4a15      	ldr	r2, [pc, #84]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	6593      	str	r3, [r2, #88]	@ 0x58
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
}
 8001862:	e018      	b.n	8001896 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a10      	ldr	r2, [pc, #64]	@ (80018ac <HAL_TIM_Base_MspInit+0xa8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d113      	bne.n	8001896 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001872:	4a0c      	ldr	r2, [pc, #48]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001874:	f043 0310 	orr.w	r3, r3, #16
 8001878:	6593      	str	r3, [r2, #88]	@ 0x58
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_TIM_Base_MspInit+0xa0>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2036      	movs	r0, #54	@ 0x36
 800188c:	f001 fecd 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001890:	2036      	movs	r0, #54	@ 0x36
 8001892:	f001 fee6 	bl	8003662 <HAL_NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40000400 	.word	0x40000400
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40000c00 	.word	0x40000c00
 80018ac:	40001000 	.word	0x40001000

080018b0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018b4:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018b6:	4a23      	ldr	r2, [pc, #140]	@ (8001944 <MX_LPUART1_UART_Init+0x94>)
 80018b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018ba:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80018f2:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80018f8:	4811      	ldr	r0, [pc, #68]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 80018fa:	f005 ffb1 	bl	8007860 <HAL_UART_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001904:	f7ff fdef 	bl	80014e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001908:	2100      	movs	r1, #0
 800190a:	480d      	ldr	r0, [pc, #52]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 800190c:	f008 f80b 	bl	8009926 <HAL_UARTEx_SetTxFifoThreshold>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001916:	f7ff fde6 	bl	80014e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800191a:	2100      	movs	r1, #0
 800191c:	4808      	ldr	r0, [pc, #32]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 800191e:	f008 f840 	bl	80099a2 <HAL_UARTEx_SetRxFifoThreshold>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001928:	f7ff fddd 	bl	80014e6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	@ (8001940 <MX_LPUART1_UART_Init+0x90>)
 800192e:	f007 ffc1 	bl	80098b4 <HAL_UARTEx_DisableFifoMode>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001938:	f7ff fdd5 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000386c 	.word	0x2000386c
 8001944:	40008000 	.word	0x40008000

08001948 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800194c:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 800194e:	4a23      	ldr	r2, [pc, #140]	@ (80019dc <MX_USART3_UART_Init+0x94>)
 8001950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001952:	4b21      	ldr	r3, [pc, #132]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001966:	4b1c      	ldr	r3, [pc, #112]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197e:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001984:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198a:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001990:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001992:	f005 ff65 	bl	8007860 <HAL_UART_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800199c:	f7ff fda3 	bl	80014e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a0:	2100      	movs	r1, #0
 80019a2:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 80019a4:	f007 ffbf 	bl	8009926 <HAL_UARTEx_SetTxFifoThreshold>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019ae:	f7ff fd9a 	bl	80014e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b2:	2100      	movs	r1, #0
 80019b4:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 80019b6:	f007 fff4 	bl	80099a2 <HAL_UARTEx_SetRxFifoThreshold>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019c0:	f7ff fd91 	bl	80014e6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 80019c6:	f007 ff75 	bl	80098b4 <HAL_UARTEx_DisableFifoMode>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019d0:	f7ff fd89 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20003900 	.word	0x20003900
 80019dc:	40004800 	.word	0x40004800

080019e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b0b0      	sub	sp, #192	@ 0xc0
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	2294      	movs	r2, #148	@ 0x94
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00c f911 	bl	800dc28 <memset>
  if(uartHandle->Instance==LPUART1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a47      	ldr	r2, [pc, #284]	@ (8001b28 <HAL_UART_MspInit+0x148>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d146      	bne.n	8001a9e <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a10:	2320      	movs	r3, #32
 8001a12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a18:	f107 0318 	add.w	r3, r7, #24
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 fd09 	bl	8006434 <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a28:	f7ff fd5d 	bl	80014e6 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a30:	4a3e      	ldr	r2, [pc, #248]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a38:	4b3c      	ldr	r3, [pc, #240]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a44:	4b39      	ldr	r3, [pc, #228]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a48:	4a38      	ldr	r2, [pc, #224]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a50:	4b36      	ldr	r3, [pc, #216]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001a5c:	f003 fe02 	bl	8005664 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001a60:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a80:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a84:	4619      	mov	r1, r3
 8001a86:	482a      	ldr	r0, [pc, #168]	@ (8001b30 <HAL_UART_MspInit+0x150>)
 8001a88:	f002 f97c 	bl	8003d84 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2046      	movs	r0, #70	@ 0x46
 8001a92:	f001 fdca 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001a96:	2046      	movs	r0, #70	@ 0x46
 8001a98:	f001 fde3 	bl	8003662 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a9c:	e040      	b.n	8001b20 <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a24      	ldr	r2, [pc, #144]	@ (8001b34 <HAL_UART_MspInit+0x154>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d13b      	bne.n	8001b20 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fcbd 	bl	8006434 <HAL_RCCEx_PeriphCLKConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001ac0:	f7ff fd11 	bl	80014e6 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac8:	4a18      	ldr	r2, [pc, #96]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001aca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001adc:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae0:	4a12      	ldr	r2, [pc, #72]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001ae2:	f043 0308 	orr.w	r3, r3, #8
 8001ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae8:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <HAL_UART_MspInit+0x14c>)
 8001aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001af4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001af8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b0e:	2307      	movs	r3, #7
 8001b10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4807      	ldr	r0, [pc, #28]	@ (8001b38 <HAL_UART_MspInit+0x158>)
 8001b1c:	f002 f932 	bl	8003d84 <HAL_GPIO_Init>
}
 8001b20:	bf00      	nop
 8001b22:	37c0      	adds	r7, #192	@ 0xc0
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40008000 	.word	0x40008000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	48001800 	.word	0x48001800
 8001b34:	40004800 	.word	0x40004800
 8001b38:	48000c00 	.word	0x48000c00

08001b3c <Reset_Handler>:
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b74 <LoopForever+0x2>
 8001b40:	f7ff fd7a 	bl	8001638 <SystemInit>
 8001b44:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <LoopForever+0x6>)
 8001b46:	490d      	ldr	r1, [pc, #52]	@ (8001b7c <LoopForever+0xa>)
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <LoopForever+0xe>)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:
 8001b4e:	58d4      	ldr	r4, [r2, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:
 8001b54:	18c4      	adds	r4, r0, r3
 8001b56:	428c      	cmp	r4, r1
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <LoopForever+0x12>)
 8001b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b88 <LoopForever+0x16>)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:
 8001b66:	42a2      	cmp	r2, r4
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>
 8001b6a:	f00c f865 	bl	800dc38 <__libc_init_array>
 8001b6e:	f7ff fbdb 	bl	8001328 <main>

08001b72 <LoopForever>:
 8001b72:	e7fe      	b.n	8001b72 <LoopForever>
 8001b74:	200a0000 	.word	0x200a0000
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	2000010c 	.word	0x2000010c
 8001b80:	0800dd7c 	.word	0x0800dd7c
 8001b84:	2000010c 	.word	0x2000010c
 8001b88:	200055a4 	.word	0x200055a4

08001b8c <CAN1_RX0_IRQHandler>:
 8001b8c:	e7fe      	b.n	8001b8c <CAN1_RX0_IRQHandler>

08001b8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f001 fd3b 	bl	8003614 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f000 f80e 	bl	8001bc0 <HAL_InitTick>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	71fb      	strb	r3, [r7, #7]
 8001bae:	e001      	b.n	8001bb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bb0:	f7ff fca0 	bl	80014f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bcc:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <HAL_InitTick+0x6c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d023      	beq.n	8001c1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bd4:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <HAL_InitTick+0x70>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_InitTick+0x6c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f001 fd47 	bl	800367e <HAL_SYSTICK_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d809      	bhi.n	8001c10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c04:	f001 fd11 	bl	800362a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c08:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_InitTick+0x74>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e007      	b.n	8001c20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e004      	b.n	8001c20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	e001      	b.n	8001c20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20003994 	.word	0x20003994

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20003994 	.word	0x20003994

08001c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff ffee 	bl	8001c60 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <HAL_Delay+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffde 	bl	8001c60 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3360      	adds	r3, #96	@ 0x60
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <LL_ADC_SetOffset+0x44>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d60:	bf00      	nop
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	03fff000 	.word	0x03fff000

08001d70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3360      	adds	r3, #96	@ 0x60
 8001d7e:	461a      	mov	r2, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3360      	adds	r3, #96	@ 0x60
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dc6:	bf00      	nop
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	615a      	str	r2, [r3, #20]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b087      	sub	sp, #28
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	3330      	adds	r3, #48	@ 0x30
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	4413      	add	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	211f      	movs	r1, #31
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	401a      	ands	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	0e9b      	lsrs	r3, r3, #26
 8001e56:	f003 011f 	and.w	r1, r3, #31
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	431a      	orrs	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e6a:	bf00      	nop
 8001e6c:	371c      	adds	r7, #28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3314      	adds	r3, #20
 8001eac:	461a      	mov	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	0e5b      	lsrs	r3, r3, #25
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	4413      	add	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	0d1b      	lsrs	r3, r3, #20
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	2107      	movs	r1, #7
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	0d1b      	lsrs	r3, r3, #20
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	401a      	ands	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0318 	and.w	r3, r3, #24
 8001f16:	4908      	ldr	r1, [pc, #32]	@ (8001f38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f18:	40d9      	lsrs	r1, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	400b      	ands	r3, r1
 8001f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f22:	431a      	orrs	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	0007ffff 	.word	0x0007ffff

08001f3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6093      	str	r3, [r2, #8]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f74:	d101      	bne.n	8001f7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fc4:	d101      	bne.n	8001fca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fe8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002010:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002014:	f043 0202 	orr.w	r2, r3, #2
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <LL_ADC_IsEnabled+0x18>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <LL_ADC_IsEnabled+0x1a>
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b02      	cmp	r3, #2
 8002060:	d101      	bne.n	8002066 <LL_ADC_IsDisableOngoing+0x18>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <LL_ADC_IsDisableOngoing+0x1a>
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002084:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002088:	f043 0204 	orr.w	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d101      	bne.n	80020b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d101      	bne.n	80020da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e129      	b.n	8002356 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	2b00      	cmp	r3, #0
 800210e:	d109      	bne.n	8002124 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7fe fa61 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff19 	bl	8001f60 <LL_ADC_IsDeepPowerDownEnabled>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff feff 	bl	8001f3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff34 	bl	8001fb0 <LL_ADC_IsInternalRegulatorEnabled>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d115      	bne.n	800217a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ff18 	bl	8001f88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002158:	4b81      	ldr	r3, [pc, #516]	@ (8002360 <HAL_ADC_Init+0x278>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	099b      	lsrs	r3, r3, #6
 800215e:	4a81      	ldr	r2, [pc, #516]	@ (8002364 <HAL_ADC_Init+0x27c>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	3301      	adds	r3, #1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800216c:	e002      	b.n	8002174 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3b01      	subs	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff16 	bl	8001fb0 <LL_ADC_IsInternalRegulatorEnabled>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	f043 0210 	orr.w	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	f043 0201 	orr.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff76 	bl	800209c <LL_ADC_REG_IsConversionOngoing>
 80021b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 80c2 	bne.w	8002344 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 80be 	bne.w	8002344 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021d0:	f043 0202 	orr.w	r2, r3, #2
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff23 	bl	8002028 <LL_ADC_IsEnabled>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10b      	bne.n	8002200 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021e8:	485f      	ldr	r0, [pc, #380]	@ (8002368 <HAL_ADC_Init+0x280>)
 80021ea:	f7ff ff1d 	bl	8002028 <LL_ADC_IsEnabled>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4619      	mov	r1, r3
 80021fa:	485c      	ldr	r0, [pc, #368]	@ (800236c <HAL_ADC_Init+0x284>)
 80021fc:	f7ff fd60 	bl	8001cc0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7e5b      	ldrb	r3, [r3, #25]
 8002204:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800220a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002210:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002216:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d106      	bne.n	800223c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	3b01      	subs	r3, #1
 8002234:	045b      	lsls	r3, r3, #17
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002248:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	4b44      	ldr	r3, [pc, #272]	@ (8002370 <HAL_ADC_Init+0x288>)
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	69b9      	ldr	r1, [r7, #24]
 8002268:	430b      	orrs	r3, r1
 800226a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff26 	bl	80020c2 <LL_ADC_INJ_IsConversionOngoing>
 8002276:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d140      	bne.n	8002300 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d13d      	bne.n	8002300 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
 800228c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800228e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002296:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022a6:	f023 0306 	bic.w	r3, r3, #6
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	69b9      	ldr	r1, [r7, #24]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d118      	bne.n	80022f0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022c8:	f023 0304 	bic.w	r3, r3, #4
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022d4:	4311      	orrs	r1, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022da:	4311      	orrs	r1, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022e0:	430a      	orrs	r2, r1
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	611a      	str	r2, [r3, #16]
 80022ee:	e007      	b.n	8002300 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10c      	bne.n	8002322 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f023 010f 	bic.w	r1, r3, #15
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	1e5a      	subs	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002320:	e007      	b.n	8002332 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 020f 	bic.w	r2, r2, #15
 8002330:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	659a      	str	r2, [r3, #88]	@ 0x58
 8002342:	e007      	b.n	8002354 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002348:	f043 0210 	orr.w	r2, r3, #16
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002354:	7ffb      	ldrb	r3, [r7, #31]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000000 	.word	0x20000000
 8002364:	053e2d63 	.word	0x053e2d63
 8002368:	50040000 	.word	0x50040000
 800236c:	50040300 	.word	0x50040300
 8002370:	fff0c007 	.word	0xfff0c007

08002374 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fe89 	bl	800209c <LL_ADC_REG_IsConversionOngoing>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d167      	bne.n	8002460 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_ADC_Start_DMA+0x2a>
 800239a:	2302      	movs	r3, #2
 800239c:	e063      	b.n	8002466 <HAL_ADC_Start_DMA+0xf2>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fe2c 	bl	8003004 <ADC_Enable>
 80023ac:	4603      	mov	r3, r0
 80023ae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d14f      	bne.n	8002456 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023da:	f023 0206 	bic.w	r2, r3, #6
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023e2:	e002      	b.n	80023ea <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ee:	4a20      	ldr	r2, [pc, #128]	@ (8002470 <HAL_ADC_Start_DMA+0xfc>)
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002474 <HAL_ADC_Start_DMA+0x100>)
 80023f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002478 <HAL_ADC_Start_DMA+0x104>)
 8002400:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	221c      	movs	r2, #28
 8002408:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0210 	orr.w	r2, r2, #16
 8002420:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3340      	adds	r3, #64	@ 0x40
 800243c:	4619      	mov	r1, r3
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f001 f9d1 	bl	80037e8 <HAL_DMA_Start_IT>
 8002446:	4603      	mov	r3, r0
 8002448:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fe10 	bl	8002074 <LL_ADC_REG_StartConversion>
 8002454:	e006      	b.n	8002464 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800245e:	e001      	b.n	8002464 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002460:	2302      	movs	r3, #2
 8002462:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002464:	7dfb      	ldrb	r3, [r7, #23]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	080031cf 	.word	0x080031cf
 8002474:	080032a7 	.word	0x080032a7
 8002478:	080032c3 	.word	0x080032c3

0800247c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d017      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x56>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 ffcb 	bl	8003460 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2202      	movs	r2, #2
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_ADC_IRQHandler+0x6a>
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d05e      	beq.n	80025ae <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d059      	beq.n	80025ae <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fc6e 	bl	8001df8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d03e      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d135      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b08      	cmp	r3, #8
 8002540:	d12e      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fda8 	bl	800209c <LL_ADC_REG_IsConversionOngoing>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d11a      	bne.n	8002588 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 020c 	bic.w	r2, r2, #12
 8002560:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d112      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	659a      	str	r2, [r3, #88]	@ 0x58
 8002586:	e00b      	b.n	80025a0 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	f043 0210 	orr.w	r2, r3, #16
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7fe fde3 	bl	800116c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	220c      	movs	r2, #12
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_ADC_IRQHandler+0x146>
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d072      	beq.n	80026b2 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d06d      	beq.n	80026b2 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fc3f 	bl	8001e76 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80025f8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fbfa 	bl	8001df8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002604:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d047      	beq.n	80026a4 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_ADC_IRQHandler+0x1b2>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03f      	beq.n	80026a4 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d13a      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002638:	2b40      	cmp	r3, #64	@ 0x40
 800263a:	d133      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d12e      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fd39 	bl	80020c2 <LL_ADC_INJ_IsConversionOngoing>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d11a      	bne.n	800268c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002664:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d112      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	659a      	str	r2, [r3, #88]	@ 0x58
 800268a:	e00b      	b.n	80026a4 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002690:	f043 0210 	orr.w	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 feb3 	bl	8003410 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2260      	movs	r2, #96	@ 0x60
 80026b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d011      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x264>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f886 	bl	80027e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2280      	movs	r2, #128	@ 0x80
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d012      	beq.n	8002710 <HAL_ADC_IRQHandler+0x294>
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00d      	beq.n	8002710 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fe99 	bl	8003438 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800270e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002716:	2b00      	cmp	r3, #0
 8002718:	d012      	beq.n	8002740 <HAL_ADC_IRQHandler+0x2c4>
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fe8b 	bl	800344c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d02a      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x324>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	d025      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800275c:	2301      	movs	r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	e008      	b.n	8002774 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002770:	2301      	movs	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d10e      	bne.n	8002798 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278a:	f043 0202 	orr.w	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f830 	bl	80027f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2210      	movs	r2, #16
 800279e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d018      	beq.n	80027dc <HAL_ADC_IRQHandler+0x360>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c4:	f043 0208 	orr.w	r2, r3, #8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fe24 	bl	8003424 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027dc:	bf00      	nop
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b0b6      	sub	sp, #216	@ 0xd8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_ADC_ConfigChannel+0x22>
 800282a:	2302      	movs	r3, #2
 800282c:	e3d5      	b.n	8002fda <HAL_ADC_ConfigChannel+0x7ce>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fc2e 	bl	800209c <LL_ADC_REG_IsConversionOngoing>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 83ba 	bne.w	8002fbc <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b05      	cmp	r3, #5
 8002856:	d824      	bhi.n	80028a2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	3b02      	subs	r3, #2
 800285e:	2b03      	cmp	r3, #3
 8002860:	d81b      	bhi.n	800289a <HAL_ADC_ConfigChannel+0x8e>
 8002862:	a201      	add	r2, pc, #4	@ (adr r2, 8002868 <HAL_ADC_ConfigChannel+0x5c>)
 8002864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002868:	08002879 	.word	0x08002879
 800286c:	08002881 	.word	0x08002881
 8002870:	08002889 	.word	0x08002889
 8002874:	08002891 	.word	0x08002891
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002878:	230c      	movs	r3, #12
 800287a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800287e:	e010      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002880:	2312      	movs	r3, #18
 8002882:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002886:	e00c      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002888:	2318      	movs	r3, #24
 800288a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800288e:	e008      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002890:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002894:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002898:	e003      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800289a:	2306      	movs	r3, #6
 800289c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028a0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80028b0:	f7ff fab5 	bl	8001e1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fbef 	bl	800209c <LL_ADC_REG_IsConversionOngoing>
 80028be:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fbfb 	bl	80020c2 <LL_ADC_INJ_IsConversionOngoing>
 80028cc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 81bf 	bne.w	8002c58 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 81ba 	bne.w	8002c58 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028ec:	d10f      	bne.n	800290e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2200      	movs	r2, #0
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7ff facf 	bl	8001e9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fa63 	bl	8001dd2 <LL_ADC_SetSamplingTimeCommonConfig>
 800290c:	e00e      	b.n	800292c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6819      	ldr	r1, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	461a      	mov	r2, r3
 800291c:	f7ff fabe 	bl	8001e9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fa53 	bl	8001dd2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	08db      	lsrs	r3, r3, #3
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b04      	cmp	r3, #4
 800294c:	d00a      	beq.n	8002964 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6919      	ldr	r1, [r3, #16]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800295e:	f7ff f9e3 	bl	8001d28 <LL_ADC_SetOffset>
 8002962:	e179      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fa00 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 8002970:	4603      	mov	r3, r0
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x184>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f9f5 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 8002986:	4603      	mov	r3, r0
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	f003 021f 	and.w	r2, r3, #31
 800298e:	e01e      	b.n	80029ce <HAL_ADC_ConfigChannel+0x1c2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f9ea 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 800299c:	4603      	mov	r3, r0
 800299e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80029be:	2320      	movs	r3, #32
 80029c0:	e004      	b.n	80029cc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80029c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x1da>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	e018      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x20c>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80029fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002a02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	e004      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002a0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d106      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f9b9 	bl	8001d9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2101      	movs	r1, #1
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff f99d 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x24a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f992 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	0e9b      	lsrs	r3, r3, #26
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	e01e      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x288>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff f987 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002a7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e004      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002a88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x2a0>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	e018      	b.n	8002ade <HAL_ADC_ConfigChannel+0x2d2>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	e004      	b.n	8002ade <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d106      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff f956 	bl	8001d9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff f93a 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x310>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff f92f 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 8002b12:	4603      	mov	r3, r0
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	f003 021f 	and.w	r2, r3, #31
 8002b1a:	e01e      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x34e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2102      	movs	r1, #2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff f924 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	e004      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d105      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x366>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0e9b      	lsrs	r3, r3, #26
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	e014      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x390>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002b80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002b86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002b8e:	2320      	movs	r3, #32
 8002b90:	e004      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d106      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff f8f7 	bl	8001d9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2103      	movs	r1, #3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff f8db 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x3ce>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2103      	movs	r1, #3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f8d0 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	e017      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x3fe>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2103      	movs	r1, #3
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f8c5 	bl	8001d70 <LL_ADC_GetOffsetChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bf4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	e003      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002c00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x416>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	0e9b      	lsrs	r3, r3, #26
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	e011      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x43a>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c32:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	e003      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002c3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d106      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2103      	movs	r1, #3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f8a2 	bl	8001d9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff f9e3 	bl	8002028 <LL_ADC_IsEnabled>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f040 813f 	bne.w	8002ee8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f7ff f93c 	bl	8001ef4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a8e      	ldr	r2, [pc, #568]	@ (8002ebc <HAL_ADC_ConfigChannel+0x6b0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	f040 8130 	bne.w	8002ee8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10b      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x4a4>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	2b09      	cmp	r3, #9
 8002ca6:	bf94      	ite	ls
 8002ca8:	2301      	movls	r3, #1
 8002caa:	2300      	movhi	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e019      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x4d8>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002cc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e003      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002ccc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	2b09      	cmp	r3, #9
 8002cdc:	bf94      	ite	ls
 8002cde:	2301      	movls	r3, #1
 8002ce0:	2300      	movhi	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d079      	beq.n	8002ddc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x4f8>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0e9b      	lsrs	r3, r3, #26
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	069b      	lsls	r3, r3, #26
 8002cfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d02:	e015      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x524>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d14:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e003      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	069b      	lsls	r3, r3, #26
 8002d2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x544>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0e9b      	lsrs	r3, r3, #26
 8002d42:	3301      	adds	r3, #1
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	2101      	movs	r1, #1
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	e017      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x574>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d60:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	e003      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	ea42 0103 	orr.w	r1, r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x59a>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0e9b      	lsrs	r3, r3, #26
 8002d96:	3301      	adds	r3, #1
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	051b      	lsls	r3, r3, #20
 8002da4:	e018      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x5cc>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	e003      	b.n	8002dca <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	e080      	b.n	8002ede <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d107      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x5ec>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	3301      	adds	r3, #1
 8002df0:	069b      	lsls	r3, r3, #26
 8002df2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002df6:	e015      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x618>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e003      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	069b      	lsls	r3, r3, #26
 8002e20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x638>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	e017      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x668>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	61bb      	str	r3, [r7, #24]
  return result;
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	e003      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2101      	movs	r1, #1
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	ea42 0103 	orr.w	r1, r2, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10d      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x694>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0e9b      	lsrs	r3, r3, #26
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f003 021f 	and.w	r2, r3, #31
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	3b1e      	subs	r3, #30
 8002e98:	051b      	lsls	r3, r3, #20
 8002e9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	e01d      	b.n	8002edc <HAL_ADC_ConfigChannel+0x6d0>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	60fb      	str	r3, [r7, #12]
  return result;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d103      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	e005      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x6bc>
 8002ebc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f003 021f 	and.w	r2, r3, #31
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3b1e      	subs	r3, #30
 8002ed6:	051b      	lsls	r3, r3, #20
 8002ed8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002edc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f7fe ffda 	bl	8001e9c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d06c      	beq.n	8002fce <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ef4:	483c      	ldr	r0, [pc, #240]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ef6:	f7fe ff09 	bl	8001d0c <LL_ADC_GetCommonPathInternalCh>
 8002efa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a3a      	ldr	r2, [pc, #232]	@ (8002fec <HAL_ADC_ConfigChannel+0x7e0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d127      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d121      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a35      	ldr	r2, [pc, #212]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d157      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f26:	4619      	mov	r1, r3
 8002f28:	482f      	ldr	r0, [pc, #188]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f2a:	f7fe fedc 	bl	8001ce6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f2e:	4b31      	ldr	r3, [pc, #196]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	099b      	lsrs	r3, r3, #6
 8002f34:	4a30      	ldr	r2, [pc, #192]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f48:	e002      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f9      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f56:	e03a      	b.n	8002fce <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a27      	ldr	r2, [pc, #156]	@ (8002ffc <HAL_ADC_ConfigChannel+0x7f0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d113      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d12a      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f80:	4619      	mov	r1, r3
 8002f82:	4819      	ldr	r0, [pc, #100]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f84:	f7fe feaf 	bl	8001ce6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f88:	e021      	b.n	8002fce <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <HAL_ADC_ConfigChannel+0x7f4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d11c      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d116      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d111      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002faa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	480c      	ldr	r0, [pc, #48]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fb6:	f7fe fe96 	bl	8001ce6 <LL_ADC_SetCommonPathInternalCh>
 8002fba:	e008      	b.n	8002fce <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002fd6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	37d8      	adds	r7, #216	@ 0xd8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	80080000 	.word	0x80080000
 8002fe8:	50040300 	.word	0x50040300
 8002fec:	c7520000 	.word	0xc7520000
 8002ff0:	50040000 	.word	0x50040000
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	053e2d63 	.word	0x053e2d63
 8002ffc:	cb840000 	.word	0xcb840000
 8003000:	80000001 	.word	0x80000001

08003004 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff f807 	bl	8002028 <LL_ADC_IsEnabled>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d169      	bne.n	80030f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	4b36      	ldr	r3, [pc, #216]	@ (8003100 <ADC_Enable+0xfc>)
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00d      	beq.n	800304a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003032:	f043 0210 	orr.w	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	f043 0201 	orr.w	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e055      	b.n	80030f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe ffc2 	bl	8001fd8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003054:	482b      	ldr	r0, [pc, #172]	@ (8003104 <ADC_Enable+0x100>)
 8003056:	f7fe fe59 	bl	8001d0c <LL_ADC_GetCommonPathInternalCh>
 800305a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800305c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003064:	4b28      	ldr	r3, [pc, #160]	@ (8003108 <ADC_Enable+0x104>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	099b      	lsrs	r3, r3, #6
 800306a:	4a28      	ldr	r2, [pc, #160]	@ (800310c <ADC_Enable+0x108>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800307e:	e002      	b.n	8003086 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	3b01      	subs	r3, #1
 8003084:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f9      	bne.n	8003080 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800308c:	f7fe fde8 	bl	8001c60 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003092:	e028      	b.n	80030e6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe ffc5 	bl	8002028 <LL_ADC_IsEnabled>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d104      	bne.n	80030ae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fe ff95 	bl	8001fd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ae:	f7fe fdd7 	bl	8001c60 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d914      	bls.n	80030e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d00d      	beq.n	80030e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ce:	f043 0210 	orr.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e007      	b.n	80030f6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d1cf      	bne.n	8003094 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	8000003f 	.word	0x8000003f
 8003104:	50040300 	.word	0x50040300
 8003108:	20000000 	.word	0x20000000
 800310c:	053e2d63 	.word	0x053e2d63

08003110 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe ff96 	bl	800204e <LL_ADC_IsDisableOngoing>
 8003122:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe ff7d 	bl	8002028 <LL_ADC_IsEnabled>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d047      	beq.n	80031c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d144      	bne.n	80031c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030d 	and.w	r3, r3, #13
 8003144:	2b01      	cmp	r3, #1
 8003146:	d10c      	bne.n	8003162 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe ff57 	bl	8002000 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2203      	movs	r2, #3
 8003158:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800315a:	f7fe fd81 	bl	8001c60 <HAL_GetTick>
 800315e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003160:	e029      	b.n	80031b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003166:	f043 0210 	orr.w	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e023      	b.n	80031c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800317e:	f7fe fd6f 	bl	8001c60 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d914      	bls.n	80031b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319e:	f043 0210 	orr.w	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e007      	b.n	80031c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1dc      	bne.n	800317e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d14b      	bne.n	8003280 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d021      	beq.n	8003246 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fdf6 	bl	8001df8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d032      	beq.n	8003278 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d12b      	bne.n	8003278 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11f      	bne.n	8003278 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	659a      	str	r2, [r3, #88]	@ 0x58
 8003244:	e018      	b.n	8003278 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d111      	bne.n	8003278 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f7fd ff77 	bl	800116c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800327e:	e00e      	b.n	800329e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fab3 	bl	80027f8 <HAL_ADC_ErrorCallback>
}
 8003292:	e004      	b.n	800329e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7fe f82d 	bl	8001314 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e0:	f043 0204 	orr.w	r2, r3, #4
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff fa85 	bl	80027f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <LL_ADC_StartCalibration>:
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003308:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003312:	4313      	orrs	r3, r2
 8003314:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_ADC_IsCalibrationOnGoing>:
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003338:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800333c:	d101      	bne.n	8003342 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_ADCEx_Calibration_Start+0x1c>
 8003368:	2302      	movs	r3, #2
 800336a:	e04d      	b.n	8003408 <HAL_ADCEx_Calibration_Start+0xb8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fecb 	bl	8003110 <ADC_Disable>
 800337a:	4603      	mov	r3, r0
 800337c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d136      	bne.n	80033f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003388:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800338c:	f023 0302 	bic.w	r3, r3, #2
 8003390:	f043 0202 	orr.w	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6839      	ldr	r1, [r7, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ffa9 	bl	80032f6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033a4:	e014      	b.n	80033d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80033b2:	d30d      	bcc.n	80033d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	f023 0312 	bic.w	r3, r3, #18
 80033bc:	f043 0210 	orr.w	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e01b      	b.n	8003408 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ffa7 	bl	8003328 <LL_ADC_IsCalibrationOnGoing>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e2      	bne.n	80033a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e4:	f023 0303 	bic.w	r3, r3, #3
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80033f0:	e005      	b.n	80033fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f6:	f043 0210 	orr.w	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003484:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003490:	4013      	ands	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800349c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a6:	4a04      	ldr	r2, [pc, #16]	@ (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	60d3      	str	r3, [r2, #12]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c0:	4b04      	ldr	r3, [pc, #16]	@ (80034d4 <__NVIC_GetPriorityGrouping+0x18>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 0307 	and.w	r3, r3, #7
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	db0b      	blt.n	8003502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4907      	ldr	r1, [pc, #28]	@ (8003510 <__NVIC_EnableIRQ+0x38>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2001      	movs	r0, #1
 80034fa:	fa00 f202 	lsl.w	r2, r0, r2
 80034fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	e000e100 	.word	0xe000e100

08003514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	db0a      	blt.n	800353e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	490c      	ldr	r1, [pc, #48]	@ (8003560 <__NVIC_SetPriority+0x4c>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	440b      	add	r3, r1
 8003538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800353c:	e00a      	b.n	8003554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4908      	ldr	r1, [pc, #32]	@ (8003564 <__NVIC_SetPriority+0x50>)
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	3b04      	subs	r3, #4
 800354c:	0112      	lsls	r2, r2, #4
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	440b      	add	r3, r1
 8003552:	761a      	strb	r2, [r3, #24]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000e100 	.word	0xe000e100
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	@ 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f1c3 0307 	rsb	r3, r3, #7
 8003582:	2b04      	cmp	r3, #4
 8003584:	bf28      	it	cs
 8003586:	2304      	movcs	r3, #4
 8003588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3304      	adds	r3, #4
 800358e:	2b06      	cmp	r3, #6
 8003590:	d902      	bls.n	8003598 <NVIC_EncodePriority+0x30>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3b03      	subs	r3, #3
 8003596:	e000      	b.n	800359a <NVIC_EncodePriority+0x32>
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	401a      	ands	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	43d9      	mvns	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	4313      	orrs	r3, r2
         );
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3724      	adds	r7, #36	@ 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3b01      	subs	r3, #1
 80035dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035e0:	d301      	bcc.n	80035e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e2:	2301      	movs	r3, #1
 80035e4:	e00f      	b.n	8003606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <SysTick_Config+0x40>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ee:	210f      	movs	r1, #15
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035f4:	f7ff ff8e 	bl	8003514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <SysTick_Config+0x40>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fe:	4b04      	ldr	r3, [pc, #16]	@ (8003610 <SysTick_Config+0x40>)
 8003600:	2207      	movs	r2, #7
 8003602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	e000e010 	.word	0xe000e010

08003614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff29 	bl	8003474 <__NVIC_SetPriorityGrouping>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800363c:	f7ff ff3e 	bl	80034bc <__NVIC_GetPriorityGrouping>
 8003640:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	6978      	ldr	r0, [r7, #20]
 8003648:	f7ff ff8e 	bl	8003568 <NVIC_EncodePriority>
 800364c:	4602      	mov	r2, r0
 800364e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff5d 	bl	8003514 <__NVIC_SetPriority>
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800366c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff31 	bl	80034d8 <__NVIC_EnableIRQ>
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ffa2 	bl	80035d0 <SysTick_Config>
 800368c:	4603      	mov	r3, r0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e08d      	b.n	80037c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	4b47      	ldr	r3, [pc, #284]	@ (80037d0 <HAL_DMA_Init+0x138>)
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d80f      	bhi.n	80036d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b45      	ldr	r3, [pc, #276]	@ (80037d4 <HAL_DMA_Init+0x13c>)
 80036be:	4413      	add	r3, r2
 80036c0:	4a45      	ldr	r2, [pc, #276]	@ (80037d8 <HAL_DMA_Init+0x140>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	009a      	lsls	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a42      	ldr	r2, [pc, #264]	@ (80037dc <HAL_DMA_Init+0x144>)
 80036d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80036d4:	e00e      	b.n	80036f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	4b40      	ldr	r3, [pc, #256]	@ (80037e0 <HAL_DMA_Init+0x148>)
 80036de:	4413      	add	r3, r2
 80036e0:	4a3d      	ldr	r2, [pc, #244]	@ (80037d8 <HAL_DMA_Init+0x140>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	009a      	lsls	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a3c      	ldr	r2, [pc, #240]	@ (80037e4 <HAL_DMA_Init+0x14c>)
 80036f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800370a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800370e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 faba 	bl	8003cc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003754:	d102      	bne.n	800375c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003770:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d010      	beq.n	800379c <HAL_DMA_Init+0x104>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b04      	cmp	r3, #4
 8003780:	d80c      	bhi.n	800379c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fada 	bl	8003d3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	e008      	b.n	80037ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40020407 	.word	0x40020407
 80037d4:	bffdfff8 	.word	0xbffdfff8
 80037d8:	cccccccd 	.word	0xcccccccd
 80037dc:	40020000 	.word	0x40020000
 80037e0:	bffdfbf8 	.word	0xbffdfbf8
 80037e4:	40020400 	.word	0x40020400

080037e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_DMA_Start_IT+0x20>
 8003804:	2302      	movs	r3, #2
 8003806:	e066      	b.n	80038d6 <HAL_DMA_Start_IT+0xee>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d155      	bne.n	80038c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f9ff 	bl	8003c44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 020e 	orr.w	r2, r2, #14
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e00f      	b.n	8003880 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0204 	bic.w	r2, r2, #4
 800386e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 020a 	orr.w	r2, r2, #10
 800387e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800389c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038b4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0201 	orr.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e005      	b.n	80038d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
 80038d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d008      	beq.n	8003908 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2204      	movs	r2, #4
 80038fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e040      	b.n	800398a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 020e 	bic.w	r2, r2, #14
 8003916:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003922:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003926:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393c:	f003 021c 	and.w	r2, r3, #28
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	2101      	movs	r1, #1
 8003946:	fa01 f202 	lsl.w	r2, r1, r2
 800394a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003954:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003968:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800396c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003976:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d005      	beq.n	80039ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2204      	movs	r2, #4
 80039b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	e047      	b.n	8003a4a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 020e 	bic.w	r2, r2, #14
 80039c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	f003 021c 	and.w	r2, r3, #28
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a06:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00c      	beq.n	8003a2a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a28:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4798      	blx	r3
    }
  }
  return status;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a70:	f003 031c 	and.w	r3, r3, #28
 8003a74:	2204      	movs	r2, #4
 8003a76:	409a      	lsls	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d026      	beq.n	8003ace <HAL_DMA_IRQHandler+0x7a>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d021      	beq.n	8003ace <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0204 	bic.w	r2, r2, #4
 8003aa6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aac:	f003 021c 	and.w	r2, r3, #28
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	2104      	movs	r1, #4
 8003ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d071      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003acc:	e06c      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	f003 031c 	and.w	r3, r3, #28
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d02e      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xec>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d029      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10b      	bne.n	8003b12 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 020a 	bic.w	r2, r2, #10
 8003b08:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	f003 021c 	and.w	r2, r3, #28
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	2102      	movs	r1, #2
 8003b20:	fa01 f202 	lsl.w	r2, r1, r2
 8003b24:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d038      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b3e:	e033      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b44:	f003 031c 	and.w	r3, r3, #28
 8003b48:	2208      	movs	r2, #8
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d02a      	beq.n	8003baa <HAL_DMA_IRQHandler+0x156>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d025      	beq.n	8003baa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 020e 	bic.w	r2, r2, #14
 8003b6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	f003 021c 	and.w	r2, r3, #28
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b80:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
}
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_DMA_RegisterCallback+0x20>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e031      	b.n	8003c38 <HAL_DMA_RegisterCallback+0x84>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d120      	bne.n	8003c2a <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003be8:	7afb      	ldrb	r3, [r7, #11]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d81a      	bhi.n	8003c24 <HAL_DMA_RegisterCallback+0x70>
 8003bee:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <HAL_DMA_RegisterCallback+0x40>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c0d 	.word	0x08003c0d
 8003bfc:	08003c15 	.word	0x08003c15
 8003c00:	08003c1d 	.word	0x08003c1d
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003c0a:	e010      	b.n	8003c2e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8003c12:	e00c      	b.n	8003c2e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003c1a:	e008      	b.n	8003c2e <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003c22:	e004      	b.n	8003c2e <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	75fb      	strb	r3, [r7, #23]
        break;
 8003c28:	e001      	b.n	8003c2e <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d004      	beq.n	8003c6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c6c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	f003 021c 	and.w	r2, r3, #28
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b10      	cmp	r3, #16
 8003c90:	d108      	bne.n	8003ca4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ca2:	e007      	b.n	8003cb4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	60da      	str	r2, [r3, #12]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4b17      	ldr	r3, [pc, #92]	@ (8003d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d80a      	bhi.n	8003cea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ce0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6493      	str	r3, [r2, #72]	@ 0x48
 8003ce8:	e007      	b.n	8003cfa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	009a      	lsls	r2, r3, #2
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003cf4:	4413      	add	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	3b08      	subs	r3, #8
 8003d02:	4a0c      	ldr	r2, [pc, #48]	@ (8003d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	2201      	movs	r2, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40020407 	.word	0x40020407
 8003d30:	4002081c 	.word	0x4002081c
 8003d34:	cccccccd 	.word	0xcccccccd
 8003d38:	40020880 	.word	0x40020880

08003d3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	461a      	mov	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a08      	ldr	r2, [pc, #32]	@ (8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d5e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2201      	movs	r2, #1
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	1000823f 	.word	0x1000823f
 8003d80:	40020940 	.word	0x40020940

08003d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d92:	e166      	b.n	8004062 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	2101      	movs	r1, #1
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8158 	beq.w	800405c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d005      	beq.n	8003dc4 <HAL_GPIO_Init+0x40>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d130      	bne.n	8003e26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	2203      	movs	r2, #3
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	f003 0201 	and.w	r2, r3, #1
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d017      	beq.n	8003e62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43db      	mvns	r3, r3
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d123      	bne.n	8003eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	08da      	lsrs	r2, r3, #3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3208      	adds	r2, #8
 8003e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	220f      	movs	r2, #15
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3208      	adds	r2, #8
 8003eb0:	6939      	ldr	r1, [r7, #16]
 8003eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0203 	and.w	r2, r3, #3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80b2 	beq.w	800405c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef8:	4b61      	ldr	r3, [pc, #388]	@ (8004080 <HAL_GPIO_Init+0x2fc>)
 8003efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efc:	4a60      	ldr	r2, [pc, #384]	@ (8004080 <HAL_GPIO_Init+0x2fc>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f04:	4b5e      	ldr	r3, [pc, #376]	@ (8004080 <HAL_GPIO_Init+0x2fc>)
 8003f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f10:	4a5c      	ldr	r2, [pc, #368]	@ (8004084 <HAL_GPIO_Init+0x300>)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	3302      	adds	r3, #2
 8003f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	220f      	movs	r2, #15
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f3a:	d02b      	beq.n	8003f94 <HAL_GPIO_Init+0x210>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a52      	ldr	r2, [pc, #328]	@ (8004088 <HAL_GPIO_Init+0x304>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d025      	beq.n	8003f90 <HAL_GPIO_Init+0x20c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a51      	ldr	r2, [pc, #324]	@ (800408c <HAL_GPIO_Init+0x308>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d01f      	beq.n	8003f8c <HAL_GPIO_Init+0x208>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a50      	ldr	r2, [pc, #320]	@ (8004090 <HAL_GPIO_Init+0x30c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d019      	beq.n	8003f88 <HAL_GPIO_Init+0x204>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a4f      	ldr	r2, [pc, #316]	@ (8004094 <HAL_GPIO_Init+0x310>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_GPIO_Init+0x200>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a4e      	ldr	r2, [pc, #312]	@ (8004098 <HAL_GPIO_Init+0x314>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00d      	beq.n	8003f80 <HAL_GPIO_Init+0x1fc>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a4d      	ldr	r2, [pc, #308]	@ (800409c <HAL_GPIO_Init+0x318>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <HAL_GPIO_Init+0x1f8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a4c      	ldr	r2, [pc, #304]	@ (80040a0 <HAL_GPIO_Init+0x31c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_GPIO_Init+0x1f4>
 8003f74:	2307      	movs	r3, #7
 8003f76:	e00e      	b.n	8003f96 <HAL_GPIO_Init+0x212>
 8003f78:	2308      	movs	r3, #8
 8003f7a:	e00c      	b.n	8003f96 <HAL_GPIO_Init+0x212>
 8003f7c:	2306      	movs	r3, #6
 8003f7e:	e00a      	b.n	8003f96 <HAL_GPIO_Init+0x212>
 8003f80:	2305      	movs	r3, #5
 8003f82:	e008      	b.n	8003f96 <HAL_GPIO_Init+0x212>
 8003f84:	2304      	movs	r3, #4
 8003f86:	e006      	b.n	8003f96 <HAL_GPIO_Init+0x212>
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e004      	b.n	8003f96 <HAL_GPIO_Init+0x212>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e002      	b.n	8003f96 <HAL_GPIO_Init+0x212>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_GPIO_Init+0x212>
 8003f94:	2300      	movs	r3, #0
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	f002 0203 	and.w	r2, r2, #3
 8003f9c:	0092      	lsls	r2, r2, #2
 8003f9e:	4093      	lsls	r3, r2
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fa6:	4937      	ldr	r1, [pc, #220]	@ (8004084 <HAL_GPIO_Init+0x300>)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	3302      	adds	r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80040a4 <HAL_GPIO_Init+0x320>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fd8:	4a32      	ldr	r2, [pc, #200]	@ (80040a4 <HAL_GPIO_Init+0x320>)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fde:	4b31      	ldr	r3, [pc, #196]	@ (80040a4 <HAL_GPIO_Init+0x320>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4013      	ands	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004002:	4a28      	ldr	r2, [pc, #160]	@ (80040a4 <HAL_GPIO_Init+0x320>)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004008:	4b26      	ldr	r3, [pc, #152]	@ (80040a4 <HAL_GPIO_Init+0x320>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	43db      	mvns	r3, r3
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4013      	ands	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800402c:	4a1d      	ldr	r2, [pc, #116]	@ (80040a4 <HAL_GPIO_Init+0x320>)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004032:	4b1c      	ldr	r3, [pc, #112]	@ (80040a4 <HAL_GPIO_Init+0x320>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	43db      	mvns	r3, r3
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4013      	ands	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004056:	4a13      	ldr	r2, [pc, #76]	@ (80040a4 <HAL_GPIO_Init+0x320>)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	3301      	adds	r3, #1
 8004060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	f47f ae91 	bne.w	8003d94 <HAL_GPIO_Init+0x10>
  }
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40021000 	.word	0x40021000
 8004084:	40010000 	.word	0x40010000
 8004088:	48000400 	.word	0x48000400
 800408c:	48000800 	.word	0x48000800
 8004090:	48000c00 	.word	0x48000c00
 8004094:	48001000 	.word	0x48001000
 8004098:	48001400 	.word	0x48001400
 800409c:	48001800 	.word	0x48001800
 80040a0:	48001c00 	.word	0x48001c00
 80040a4:	40010400 	.word	0x40010400

080040a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	887b      	ldrh	r3, [r7, #2]
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	e001      	b.n	80040ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	807b      	strh	r3, [r7, #2]
 80040e4:	4613      	mov	r3, r2
 80040e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e8:	787b      	ldrb	r3, [r7, #1]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040ee:	887a      	ldrh	r2, [r7, #2]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040f4:	e002      	b.n	80040fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4013      	ands	r3, r2
 8004120:	041a      	lsls	r2, r3, #16
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	43d9      	mvns	r1, r3
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	400b      	ands	r3, r1
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	619a      	str	r2, [r3, #24]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004146:	4b08      	ldr	r3, [pc, #32]	@ (8004168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	4013      	ands	r3, r2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d006      	beq.n	8004160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004152:	4a05      	ldr	r2, [pc, #20]	@ (8004168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fc ff94 	bl	8001088 <HAL_GPIO_EXTI_Callback>
  }
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40010400 	.word	0x40010400

0800416c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800416c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800416e:	b08f      	sub	sp, #60	@ 0x3c
 8004170:	af0a      	add	r7, sp, #40	@ 0x28
 8004172:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e116      	b.n	80043ac <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f009 f8ff 	bl	800d39c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2203      	movs	r2, #3
 80041a2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 fd56 	bl	8009c6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	687e      	ldr	r6, [r7, #4]
 80041ca:	466d      	mov	r5, sp
 80041cc:	f106 0410 	add.w	r4, r6, #16
 80041d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80041e0:	1d33      	adds	r3, r6, #4
 80041e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041e4:	6838      	ldr	r0, [r7, #0]
 80041e6:	f005 fc69 	bl	8009abc <USB_CoreInit>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0d7      	b.n	80043ac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f005 fd44 	bl	8009c90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	e04a      	b.n	80042a4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800420e:	7bfa      	ldrb	r2, [r7, #15]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	333d      	adds	r3, #61	@ 0x3d
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004222:	7bfa      	ldrb	r2, [r7, #15]
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	333c      	adds	r3, #60	@ 0x3c
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	b298      	uxth	r0, r3
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	3356      	adds	r3, #86	@ 0x56
 800424a:	4602      	mov	r2, r0
 800424c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	3340      	adds	r3, #64	@ 0x40
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004262:	7bfa      	ldrb	r2, [r7, #15]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	3344      	adds	r3, #68	@ 0x44
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004276:	7bfa      	ldrb	r2, [r7, #15]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	3348      	adds	r3, #72	@ 0x48
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800428a:	7bfa      	ldrb	r2, [r7, #15]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	334c      	adds	r3, #76	@ 0x4c
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	3301      	adds	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	7bfa      	ldrb	r2, [r7, #15]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d3af      	bcc.n	800420e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]
 80042b2:	e044      	b.n	800433e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80042dc:	7bfa      	ldrb	r2, [r7, #15]
 80042de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	3301      	adds	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	d3b5      	bcc.n	80042b4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	687e      	ldr	r6, [r7, #4]
 8004350:	466d      	mov	r5, sp
 8004352:	f106 0410 	add.w	r4, r6, #16
 8004356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800435a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800435c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800435e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004362:	e885 0003 	stmia.w	r5, {r0, r1}
 8004366:	1d33      	adds	r3, r6, #4
 8004368:	cb0e      	ldmia	r3, {r1, r2, r3}
 800436a:	6838      	ldr	r0, [r7, #0]
 800436c:	f005 fcdc 	bl	8009d28 <USB_DevInit>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e014      	b.n	80043ac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	2b01      	cmp	r3, #1
 8004398:	d102      	bne.n	80043a0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f001 f86a 	bl	8005474 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f006 fc8a 	bl	800acbe <USB_DevDisconnect>

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_PCD_Start+0x1c>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e01c      	b.n	800440a <HAL_PCD_Start+0x56>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d105      	bne.n	80043ec <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f005 fc2b 	bl	8009c4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f006 fc3e 	bl	800ac7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004412:	b590      	push	{r4, r7, lr}
 8004414:	b08d      	sub	sp, #52	@ 0x34
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f006 fcfc 	bl	800ae26 <USB_GetMode>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 847e 	bne.w	8004d32 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f006 fc60 	bl	800ad00 <USB_ReadInterrupts>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8474 	beq.w	8004d30 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f006 fc4d 	bl	800ad00 <USB_ReadInterrupts>
 8004466:	4603      	mov	r3, r0
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b02      	cmp	r3, #2
 800446e:	d107      	bne.n	8004480 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f002 0202 	and.w	r2, r2, #2
 800447e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f006 fc3b 	bl	800ad00 <USB_ReadInterrupts>
 800448a:	4603      	mov	r3, r0
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b10      	cmp	r3, #16
 8004492:	d161      	bne.n	8004558 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0210 	bic.w	r2, r2, #16
 80044a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f003 020f 	and.w	r2, r3, #15
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	4413      	add	r3, r2
 80044c0:	3304      	adds	r3, #4
 80044c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	0c5b      	lsrs	r3, r3, #17
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d124      	bne.n	800451a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d035      	beq.n	8004548 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	6a38      	ldr	r0, [r7, #32]
 80044f0:	f006 fa72 	bl	800a9d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004500:	441a      	add	r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004512:	441a      	add	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	615a      	str	r2, [r3, #20]
 8004518:	e016      	b.n	8004548 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	0c5b      	lsrs	r3, r3, #17
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	2b06      	cmp	r3, #6
 8004524:	d110      	bne.n	8004548 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800452c:	2208      	movs	r2, #8
 800452e:	4619      	mov	r1, r3
 8004530:	6a38      	ldr	r0, [r7, #32]
 8004532:	f006 fa51 	bl	800a9d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	695a      	ldr	r2, [r3, #20]
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004542:	441a      	add	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0210 	orr.w	r2, r2, #16
 8004556:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f006 fbcf 	bl	800ad00 <USB_ReadInterrupts>
 8004562:	4603      	mov	r3, r0
 8004564:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004568:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800456c:	f040 80a7 	bne.w	80046be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f006 fbd4 	bl	800ad26 <USB_ReadDevAllOutEpInterrupt>
 800457e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004580:	e099      	b.n	80046b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 808e 	beq.w	80046aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f006 fbf8 	bl	800ad8e <USB_ReadDevOutEPInterrupt>
 800459e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00c      	beq.n	80045c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b6:	461a      	mov	r2, r3
 80045b8:	2301      	movs	r3, #1
 80045ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fe7e 	bl	80052c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00c      	beq.n	80045e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045da:	461a      	mov	r2, r3
 80045dc:	2308      	movs	r3, #8
 80045de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 feba 	bl	800535c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fe:	461a      	mov	r2, r3
 8004600:	2310      	movs	r3, #16
 8004602:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d030      	beq.n	8004670 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004616:	2b80      	cmp	r3, #128	@ 0x80
 8004618:	d109      	bne.n	800462e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004628:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800462c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800462e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4413      	add	r3, r2
 8004640:	3304      	adds	r3, #4
 8004642:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	78db      	ldrb	r3, [r3, #3]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d108      	bne.n	800465e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2200      	movs	r2, #0
 8004650:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	b2db      	uxtb	r3, r3
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f008 fff5 	bl	800d648 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	2302      	movs	r3, #2
 800466e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004686:	461a      	mov	r2, r3
 8004688:	2320      	movs	r3, #32
 800468a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	3301      	adds	r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f47f af62 	bne.w	8004582 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f006 fb1c 	bl	800ad00 <USB_ReadInterrupts>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046d2:	f040 80a4 	bne.w	800481e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f006 fb3d 	bl	800ad5a <USB_ReadDevAllInEpInterrupt>
 80046e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80046e6:	e096      	b.n	8004816 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 808b 	beq.w	800480a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f006 fb63 	bl	800adca <USB_ReadDevInEPInterrupt>
 8004704:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	2201      	movs	r2, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	43db      	mvns	r3, r3
 800472a:	69f9      	ldr	r1, [r7, #28]
 800472c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004730:	4013      	ands	r3, r2
 8004732:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004740:	461a      	mov	r2, r3
 8004742:	2301      	movs	r3, #1
 8004744:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	b2db      	uxtb	r3, r3
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f008 fee6 	bl	800d51e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004768:	461a      	mov	r2, r3
 800476a:	2308      	movs	r3, #8
 800476c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	2310      	movs	r3, #16
 8004788:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a0:	461a      	mov	r2, r3
 80047a2:	2340      	movs	r3, #64	@ 0x40
 80047a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d023      	beq.n	80047f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80047b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047b2:	6a38      	ldr	r0, [r7, #32]
 80047b4:	f005 fbfa 	bl	8009fac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80047b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ba:	4613      	mov	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	3338      	adds	r3, #56	@ 0x38
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	4413      	add	r3, r2
 80047c8:	3304      	adds	r3, #4
 80047ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	78db      	ldrb	r3, [r3, #3]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d108      	bne.n	80047e6 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2200      	movs	r2, #0
 80047d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f008 ff43 	bl	800d66c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f2:	461a      	mov	r2, r3
 80047f4:	2302      	movs	r3, #2
 80047f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004802:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fcd2 	bl	80051ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	3301      	adds	r3, #1
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004818:	2b00      	cmp	r3, #0
 800481a:	f47f af65 	bne.w	80046e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f006 fa6c 	bl	800ad00 <USB_ReadInterrupts>
 8004828:	4603      	mov	r3, r0
 800482a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800482e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004832:	d122      	bne.n	800487a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800484e:	2b01      	cmp	r3, #1
 8004850:	d108      	bne.n	8004864 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800485a:	2100      	movs	r1, #0
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f009 f977 	bl	800db50 <HAL_PCDEx_LPM_Callback>
 8004862:	e002      	b.n	800486a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f008 fec7 	bl	800d5f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f006 fa3e 	bl	800ad00 <USB_ReadInterrupts>
 8004884:	4603      	mov	r3, r0
 8004886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800488a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800488e:	d112      	bne.n	80048b6 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b01      	cmp	r3, #1
 800489e:	d102      	bne.n	80048a6 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f008 fe83 	bl	800d5ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80048b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f006 fa20 	bl	800ad00 <USB_ReadInterrupts>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048ca:	d121      	bne.n	8004910 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80048da:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d111      	bne.n	800490a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	f003 020f 	and.w	r2, r3, #15
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004900:	2101      	movs	r1, #1
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f009 f924 	bl	800db50 <HAL_PCDEx_LPM_Callback>
 8004908:	e002      	b.n	8004910 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f008 fe4e 	bl	800d5ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f006 f9f3 	bl	800ad00 <USB_ReadInterrupts>
 800491a:	4603      	mov	r3, r0
 800491c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004924:	f040 80b5 	bne.w	8004a92 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2110      	movs	r1, #16
 8004942:	4618      	mov	r0, r3
 8004944:	f005 fb32 	bl	8009fac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004948:	2300      	movs	r3, #0
 800494a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800494c:	e046      	b.n	80049dc <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800494e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800495a:	461a      	mov	r2, r3
 800495c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004960:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800497c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004980:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498e:	461a      	mov	r2, r3
 8004990:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004994:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049a6:	0151      	lsls	r1, r2, #5
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	440a      	add	r2, r1
 80049ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80049d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	3301      	adds	r3, #1
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d3b3      	bcc.n	800494e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049f4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80049f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a12:	f043 030b 	orr.w	r3, r3, #11
 8004a16:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a28:	f043 030b 	orr.w	r3, r3, #11
 8004a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a2e:	e015      	b.n	8004a5c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a42:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004a46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a56:	f043 030b 	orr.w	r3, r3, #11
 8004a5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a6a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f006 fa03 	bl	800ae88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f006 f932 	bl	800ad00 <USB_ReadInterrupts>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa6:	d124      	bne.n	8004af2 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f006 f9c8 	bl	800ae42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f005 faf5 	bl	800a0a6 <USB_GetDevSpeed>
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681c      	ldr	r4, [r3, #0]
 8004ac8:	f001 fbbc 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 8004acc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f005 f81c 	bl	8009b14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f008 fd46 	bl	800d56e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f006 f902 	bl	800ad00 <USB_ReadInterrupts>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d10a      	bne.n	8004b1c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f008 fd23 	bl	800d552 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f002 0208 	and.w	r2, r2, #8
 8004b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f006 f8ed 	bl	800ad00 <USB_ReadInterrupts>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2c:	2b80      	cmp	r3, #128	@ 0x80
 8004b2e:	d122      	bne.n	8004b76 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b40:	e014      	b.n	8004b6c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b46:	4613      	mov	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d105      	bne.n	8004b66 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 faf3 	bl	800514c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	3301      	adds	r3, #1
 8004b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d3e5      	bcc.n	8004b42 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f006 f8c0 	bl	800ad00 <USB_ReadInterrupts>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b8a:	d13b      	bne.n	8004c04 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b90:	e02b      	b.n	8004bea <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	3340      	adds	r3, #64	@ 0x40
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d115      	bne.n	8004be4 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004bb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	da12      	bge.n	8004be4 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	333f      	adds	r3, #63	@ 0x3f
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fab4 	bl	800514c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	3301      	adds	r3, #1
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d3ce      	bcc.n	8004b92 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f006 f879 	bl	800ad00 <USB_ReadInterrupts>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c18:	d155      	bne.n	8004cc6 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c1e:	e045      	b.n	8004cac <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c34:	4613      	mov	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d12e      	bne.n	8004ca6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	da2b      	bge.n	8004ca6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004c5a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d121      	bne.n	8004ca6 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004c74:	2201      	movs	r2, #1
 8004c76:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ca2:	6053      	str	r3, [r2, #4]
            break;
 8004ca4:	e007      	b.n	8004cb6 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	3301      	adds	r3, #1
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d3b4      	bcc.n	8004c20 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f006 f818 	bl	800ad00 <USB_ReadInterrupts>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cda:	d10a      	bne.n	8004cf2 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f008 fcd7 	bl	800d690 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f006 f802 	bl	800ad00 <USB_ReadInterrupts>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d115      	bne.n	8004d32 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f008 fcc7 	bl	800d6ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
 8004d2e:	e000      	b.n	8004d32 <HAL_PCD_IRQHandler+0x920>
      return;
 8004d30:	bf00      	nop
    }
  }
}
 8004d32:	3734      	adds	r7, #52	@ 0x34
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd90      	pop	{r4, r7, pc}

08004d38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_PCD_SetAddress+0x1a>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e013      	b.n	8004d7a <HAL_PCD_SetAddress+0x42>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f005 ff60 	bl	800ac30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	4608      	mov	r0, r1
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4603      	mov	r3, r0
 8004d92:	70fb      	strb	r3, [r7, #3]
 8004d94:	460b      	mov	r3, r1
 8004d96:	803b      	strh	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	da0f      	bge.n	8004dc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	f003 020f 	and.w	r2, r3, #15
 8004dae:	4613      	mov	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	3338      	adds	r3, #56	@ 0x38
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	705a      	strb	r2, [r3, #1]
 8004dc6:	e00f      	b.n	8004de8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	f003 020f 	and.w	r2, r3, #15
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	3304      	adds	r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004df4:	883a      	ldrh	r2, [r7, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	78ba      	ldrb	r2, [r7, #2]
 8004dfe:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e12:	78bb      	ldrb	r3, [r7, #2]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d102      	bne.n	8004e1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_PCD_EP_Open+0xaa>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e00e      	b.n	8004e4a <HAL_PCD_EP_Open+0xc8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68f9      	ldr	r1, [r7, #12]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f005 f952 	bl	800a0e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004e48:	7afb      	ldrb	r3, [r7, #11]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	da0f      	bge.n	8004e86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	3338      	adds	r3, #56	@ 0x38
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	4413      	add	r3, r2
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	705a      	strb	r2, [r3, #1]
 8004e84:	e00f      	b.n	8004ea6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	f003 020f 	and.w	r2, r3, #15
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_PCD_EP_Close+0x6e>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e00e      	b.n	8004ede <HAL_PCD_EP_Close+0x8c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68f9      	ldr	r1, [r7, #12]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f005 f990 	bl	800a1f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ef6:	7afb      	ldrb	r3, [r7, #11]
 8004ef8:	f003 020f 	and.w	r2, r3, #15
 8004efc:	4613      	mov	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2200      	movs	r2, #0
 8004f26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f28:	7afb      	ldrb	r3, [r7, #11]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f005 fa36 	bl	800a3ac <USB_EPStartXfer>

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	460b      	mov	r3, r1
 8004f54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f56:	78fb      	ldrb	r3, [r7, #3]
 8004f58:	f003 020f 	and.w	r2, r3, #15
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004f6c:	681b      	ldr	r3, [r3, #0]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b086      	sub	sp, #24
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	460b      	mov	r3, r1
 8004f88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f8a:	7afb      	ldrb	r3, [r7, #11]
 8004f8c:	f003 020f 	and.w	r2, r3, #15
 8004f90:	4613      	mov	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	3338      	adds	r3, #56	@ 0x38
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fba:	7afb      	ldrb	r3, [r7, #11]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6979      	ldr	r1, [r7, #20]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f005 f9ed 	bl	800a3ac <USB_EPStartXfer>

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	f003 020f 	and.w	r2, r3, #15
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d901      	bls.n	8004ffa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e04e      	b.n	8005098 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	da0f      	bge.n	8005022 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005002:	78fb      	ldrb	r3, [r7, #3]
 8005004:	f003 020f 	and.w	r2, r3, #15
 8005008:	4613      	mov	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	3338      	adds	r3, #56	@ 0x38
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	4413      	add	r3, r2
 8005016:	3304      	adds	r3, #4
 8005018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	705a      	strb	r2, [r3, #1]
 8005020:	e00d      	b.n	800503e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	3304      	adds	r3, #4
 8005036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	b2da      	uxtb	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_PCD_EP_SetStall+0x82>
 800505a:	2302      	movs	r3, #2
 800505c:	e01c      	b.n	8005098 <HAL_PCD_EP_SetStall+0xbc>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68f9      	ldr	r1, [r7, #12]
 800506c:	4618      	mov	r0, r3
 800506e:	f005 fd0b 	bl	800aa88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	2b00      	cmp	r3, #0
 800507a:	d108      	bne.n	800508e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f005 fefd 	bl	800ae88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	f003 020f 	and.w	r2, r3, #15
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d901      	bls.n	80050be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e042      	b.n	8005144 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	da0f      	bge.n	80050e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	f003 020f 	and.w	r2, r3, #15
 80050cc:	4613      	mov	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	3338      	adds	r3, #56	@ 0x38
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	4413      	add	r3, r2
 80050da:	3304      	adds	r3, #4
 80050dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	705a      	strb	r2, [r3, #1]
 80050e4:	e00f      	b.n	8005106 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	f003 020f 	and.w	r2, r3, #15
 80050ec:	4613      	mov	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	4413      	add	r3, r2
 80050fc:	3304      	adds	r3, #4
 80050fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	b2da      	uxtb	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_PCD_EP_ClrStall+0x86>
 8005122:	2302      	movs	r3, #2
 8005124:	e00e      	b.n	8005144 <HAL_PCD_EP_ClrStall+0xa4>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	4618      	mov	r0, r3
 8005136:	f005 fd15 	bl	800ab64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800515c:	2b00      	cmp	r3, #0
 800515e:	da0c      	bge.n	800517a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	f003 020f 	and.w	r2, r3, #15
 8005166:	4613      	mov	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	3338      	adds	r3, #56	@ 0x38
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	4413      	add	r3, r2
 8005174:	3304      	adds	r3, #4
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e00c      	b.n	8005194 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	f003 020f 	and.w	r2, r3, #15
 8005180:	4613      	mov	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	4413      	add	r3, r2
 8005190:	3304      	adds	r3, #4
 8005192:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68f9      	ldr	r1, [r7, #12]
 800519a:	4618      	mov	r0, r3
 800519c:	f005 fb38 	bl	800a810 <USB_EPStopXfer>
 80051a0:	4603      	mov	r3, r0
 80051a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80051a4:	7afb      	ldrb	r3, [r7, #11]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b088      	sub	sp, #32
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	3338      	adds	r3, #56	@ 0x38
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	3304      	adds	r3, #4
 80051d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d901      	bls.n	80051e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e067      	b.n	80052b6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d902      	bls.n	8005202 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	3303      	adds	r3, #3
 8005206:	089b      	lsrs	r3, r3, #2
 8005208:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800520a:	e026      	b.n	800525a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	429a      	cmp	r2, r3
 8005220:	d902      	bls.n	8005228 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	3303      	adds	r3, #3
 800522c:	089b      	lsrs	r3, r3, #2
 800522e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68d9      	ldr	r1, [r3, #12]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	b2da      	uxtb	r2, r3
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	b29b      	uxth	r3, r3
 800523c:	6978      	ldr	r0, [r7, #20]
 800523e:	f005 fb91 	bl	800a964 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	441a      	add	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	441a      	add	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	429a      	cmp	r2, r3
 800526e:	d809      	bhi.n	8005284 <PCD_WriteEmptyTxFifo+0xd6>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005278:	429a      	cmp	r2, r3
 800527a:	d203      	bcs.n	8005284 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1c3      	bne.n	800520c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	429a      	cmp	r2, r3
 800528e:	d811      	bhi.n	80052b4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	2201      	movs	r2, #1
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	43db      	mvns	r3, r3
 80052aa:	6939      	ldr	r1, [r7, #16]
 80052ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052b0:	4013      	ands	r3, r2
 80052b2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	333c      	adds	r3, #60	@ 0x3c
 80052d8:	3304      	adds	r3, #4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a19      	ldr	r2, [pc, #100]	@ (8005358 <PCD_EP_OutXfrComplete_int+0x98>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d124      	bne.n	8005340 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800530c:	461a      	mov	r2, r3
 800530e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005312:	6093      	str	r3, [r2, #8]
 8005314:	e01a      	b.n	800534c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800532c:	461a      	mov	r2, r3
 800532e:	2320      	movs	r3, #32
 8005330:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f008 f8d5 	bl	800d4e8 <HAL_PCD_DataOutStageCallback>
 800533e:	e005      	b.n	800534c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	4619      	mov	r1, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f008 f8ce 	bl	800d4e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	4f54310a 	.word	0x4f54310a

0800535c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	333c      	adds	r3, #60	@ 0x3c
 8005374:	3304      	adds	r3, #4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a0c      	ldr	r2, [pc, #48]	@ (80053c0 <PCD_EP_OutSetupPacket_int+0x64>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d90e      	bls.n	80053b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005398:	2b00      	cmp	r3, #0
 800539a:	d009      	beq.n	80053b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a8:	461a      	mov	r2, r3
 80053aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f008 f887 	bl	800d4c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	4f54300a 	.word	0x4f54300a

080053c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
 80053d0:	4613      	mov	r3, r2
 80053d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d107      	bne.n	80053f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80053e2:	883b      	ldrh	r3, [r7, #0]
 80053e4:	0419      	lsls	r1, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80053f0:	e028      	b.n	8005444 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	4413      	add	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005400:	2300      	movs	r3, #0
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e00d      	b.n	8005422 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	3340      	adds	r3, #64	@ 0x40
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4413      	add	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	3301      	adds	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
 8005422:	7bfa      	ldrb	r2, [r7, #15]
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	3b01      	subs	r3, #1
 8005428:	429a      	cmp	r2, r3
 800542a:	d3ec      	bcc.n	8005406 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800542c:	883b      	ldrh	r3, [r7, #0]
 800542e:	0418      	lsls	r0, r3, #16
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	3b01      	subs	r3, #1
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	4302      	orrs	r2, r0
 800543c:	3340      	adds	r3, #64	@ 0x40
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	887a      	ldrh	r2, [r7, #2]
 8005464:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	f043 0303 	orr.w	r3, r3, #3
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054c0:	4b0d      	ldr	r3, [pc, #52]	@ (80054f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054cc:	d102      	bne.n	80054d4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80054ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054d2:	e00b      	b.n	80054ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80054d4:	4b08      	ldr	r3, [pc, #32]	@ (80054f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80054d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e2:	d102      	bne.n	80054ea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80054e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054e8:	e000      	b.n	80054ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80054ea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40007000 	.word	0x40007000

080054fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d141      	bne.n	800558e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800550a:	4b4b      	ldr	r3, [pc, #300]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005516:	d131      	bne.n	800557c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005518:	4b47      	ldr	r3, [pc, #284]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800551e:	4a46      	ldr	r2, [pc, #280]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005524:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005528:	4b43      	ldr	r3, [pc, #268]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005530:	4a41      	ldr	r2, [pc, #260]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005536:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005538:	4b40      	ldr	r3, [pc, #256]	@ (800563c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2232      	movs	r2, #50	@ 0x32
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	4a3f      	ldr	r2, [pc, #252]	@ (8005640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005544:	fba2 2303 	umull	r2, r3, r2, r3
 8005548:	0c9b      	lsrs	r3, r3, #18
 800554a:	3301      	adds	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800554e:	e002      	b.n	8005556 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3b01      	subs	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005556:	4b38      	ldr	r3, [pc, #224]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800555e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005562:	d102      	bne.n	800556a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f2      	bne.n	8005550 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800556a:	4b33      	ldr	r3, [pc, #204]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005576:	d158      	bne.n	800562a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e057      	b.n	800562c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800557c:	4b2e      	ldr	r3, [pc, #184]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800557e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005582:	4a2d      	ldr	r2, [pc, #180]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800558c:	e04d      	b.n	800562a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005594:	d141      	bne.n	800561a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005596:	4b28      	ldr	r3, [pc, #160]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a2:	d131      	bne.n	8005608 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055a4:	4b24      	ldr	r3, [pc, #144]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055aa:	4a23      	ldr	r2, [pc, #140]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055b4:	4b20      	ldr	r3, [pc, #128]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80055bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80055c4:	4b1d      	ldr	r3, [pc, #116]	@ (800563c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2232      	movs	r2, #50	@ 0x32
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055d0:	fba2 2303 	umull	r2, r3, r2, r3
 80055d4:	0c9b      	lsrs	r3, r3, #18
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055da:	e002      	b.n	80055e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3b01      	subs	r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055e2:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ee:	d102      	bne.n	80055f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f2      	bne.n	80055dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055f6:	4b10      	ldr	r3, [pc, #64]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005602:	d112      	bne.n	800562a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e011      	b.n	800562c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800560a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800560e:	4a0a      	ldr	r2, [pc, #40]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005618:	e007      	b.n	800562a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800561a:	4b07      	ldr	r3, [pc, #28]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005622:	4a05      	ldr	r2, [pc, #20]	@ (8005638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005624:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005628:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	40007000 	.word	0x40007000
 800563c:	20000000 	.word	0x20000000
 8005640:	431bde83 	.word	0x431bde83

08005644 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005648:	4b05      	ldr	r3, [pc, #20]	@ (8005660 <HAL_PWREx_EnableVddUSB+0x1c>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	4a04      	ldr	r2, [pc, #16]	@ (8005660 <HAL_PWREx_EnableVddUSB+0x1c>)
 800564e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005652:	6053      	str	r3, [r2, #4]
}
 8005654:	bf00      	nop
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40007000 	.word	0x40007000

08005664 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005668:	4b05      	ldr	r3, [pc, #20]	@ (8005680 <HAL_PWREx_EnableVddIO2+0x1c>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4a04      	ldr	r2, [pc, #16]	@ (8005680 <HAL_PWREx_EnableVddIO2+0x1c>)
 800566e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005672:	6053      	str	r3, [r2, #4]
}
 8005674:	bf00      	nop
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40007000 	.word	0x40007000

08005684 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	f000 bc08 	b.w	8005ea8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005698:	4b96      	ldr	r3, [pc, #600]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 030c 	and.w	r3, r3, #12
 80056a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056a2:	4b94      	ldr	r3, [pc, #592]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80e4 	beq.w	8005882 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <HAL_RCC_OscConfig+0x4c>
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b0c      	cmp	r3, #12
 80056c4:	f040 808b 	bne.w	80057de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	f040 8087 	bne.w	80057de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056d0:	4b88      	ldr	r3, [pc, #544]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_OscConfig+0x64>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e3df      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	4b81      	ldr	r3, [pc, #516]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <HAL_RCC_OscConfig+0x7e>
 80056f8:	4b7e      	ldr	r3, [pc, #504]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005700:	e005      	b.n	800570e <HAL_RCC_OscConfig+0x8a>
 8005702:	4b7c      	ldr	r3, [pc, #496]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800570e:	4293      	cmp	r3, r2
 8005710:	d223      	bcs.n	800575a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fdcc 	bl	80062b4 <RCC_SetFlashLatencyFromMSIRange>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e3c0      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005726:	4b73      	ldr	r3, [pc, #460]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a72      	ldr	r2, [pc, #456]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 800572c:	f043 0308 	orr.w	r3, r3, #8
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4b70      	ldr	r3, [pc, #448]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	496d      	ldr	r1, [pc, #436]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005740:	4313      	orrs	r3, r2
 8005742:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005744:	4b6b      	ldr	r3, [pc, #428]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	4968      	ldr	r1, [pc, #416]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]
 8005758:	e025      	b.n	80057a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800575a:	4b66      	ldr	r3, [pc, #408]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a65      	ldr	r2, [pc, #404]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005760:	f043 0308 	orr.w	r3, r3, #8
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	4b63      	ldr	r3, [pc, #396]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4960      	ldr	r1, [pc, #384]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005774:	4313      	orrs	r3, r2
 8005776:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005778:	4b5e      	ldr	r3, [pc, #376]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	495b      	ldr	r1, [pc, #364]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005788:	4313      	orrs	r3, r2
 800578a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d109      	bne.n	80057a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fd8c 	bl	80062b4 <RCC_SetFlashLatencyFromMSIRange>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e380      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057a6:	f000 fcc1 	bl	800612c <HAL_RCC_GetSysClockFreq>
 80057aa:	4602      	mov	r2, r0
 80057ac:	4b51      	ldr	r3, [pc, #324]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	4950      	ldr	r1, [pc, #320]	@ (80058f8 <HAL_RCC_OscConfig+0x274>)
 80057b8:	5ccb      	ldrb	r3, [r1, r3]
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	fa22 f303 	lsr.w	r3, r2, r3
 80057c2:	4a4e      	ldr	r2, [pc, #312]	@ (80058fc <HAL_RCC_OscConfig+0x278>)
 80057c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80057c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005900 <HAL_RCC_OscConfig+0x27c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fc f9f8 	bl	8001bc0 <HAL_InitTick>
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d052      	beq.n	8005880 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	e364      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d032      	beq.n	800584c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057e6:	4b43      	ldr	r3, [pc, #268]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a42      	ldr	r2, [pc, #264]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80057ec:	f043 0301 	orr.w	r3, r3, #1
 80057f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057f2:	f7fc fa35 	bl	8001c60 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057fa:	f7fc fa31 	bl	8001c60 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e34d      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800580c:	4b39      	ldr	r3, [pc, #228]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0f0      	beq.n	80057fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005818:	4b36      	ldr	r3, [pc, #216]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a35      	ldr	r2, [pc, #212]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 800581e:	f043 0308 	orr.w	r3, r3, #8
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b33      	ldr	r3, [pc, #204]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	4930      	ldr	r1, [pc, #192]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005832:	4313      	orrs	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005836:	4b2f      	ldr	r3, [pc, #188]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	492b      	ldr	r1, [pc, #172]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005846:	4313      	orrs	r3, r2
 8005848:	604b      	str	r3, [r1, #4]
 800584a:	e01a      	b.n	8005882 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800584c:	4b29      	ldr	r3, [pc, #164]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a28      	ldr	r2, [pc, #160]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005858:	f7fc fa02 	bl	8001c60 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005860:	f7fc f9fe 	bl	8001c60 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e31a      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005872:	4b20      	ldr	r3, [pc, #128]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0x1dc>
 800587e:	e000      	b.n	8005882 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005880:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d073      	beq.n	8005976 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d005      	beq.n	80058a0 <HAL_RCC_OscConfig+0x21c>
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b0c      	cmp	r3, #12
 8005898:	d10e      	bne.n	80058b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d10b      	bne.n	80058b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a0:	4b14      	ldr	r3, [pc, #80]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d063      	beq.n	8005974 <HAL_RCC_OscConfig+0x2f0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d15f      	bne.n	8005974 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e2f7      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058c0:	d106      	bne.n	80058d0 <HAL_RCC_OscConfig+0x24c>
 80058c2:	4b0c      	ldr	r3, [pc, #48]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a0b      	ldr	r2, [pc, #44]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80058c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e025      	b.n	800591c <HAL_RCC_OscConfig+0x298>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058d8:	d114      	bne.n	8005904 <HAL_RCC_OscConfig+0x280>
 80058da:	4b06      	ldr	r3, [pc, #24]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a05      	ldr	r2, [pc, #20]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80058e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	4b03      	ldr	r3, [pc, #12]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a02      	ldr	r2, [pc, #8]	@ (80058f4 <HAL_RCC_OscConfig+0x270>)
 80058ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	e013      	b.n	800591c <HAL_RCC_OscConfig+0x298>
 80058f4:	40021000 	.word	0x40021000
 80058f8:	0800dcfc 	.word	0x0800dcfc
 80058fc:	20000000 	.word	0x20000000
 8005900:	20000004 	.word	0x20000004
 8005904:	4ba0      	ldr	r3, [pc, #640]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a9f      	ldr	r2, [pc, #636]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 800590a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	4b9d      	ldr	r3, [pc, #628]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a9c      	ldr	r2, [pc, #624]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800591a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d013      	beq.n	800594c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fc f99c 	bl	8001c60 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800592c:	f7fc f998 	bl	8001c60 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	@ 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e2b4      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800593e:	4b92      	ldr	r3, [pc, #584]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0x2a8>
 800594a:	e014      	b.n	8005976 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fc f988 	bl	8001c60 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005954:	f7fc f984 	bl	8001c60 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	@ 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e2a0      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005966:	4b88      	ldr	r3, [pc, #544]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0x2d0>
 8005972:	e000      	b.n	8005976 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d060      	beq.n	8005a44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	2b04      	cmp	r3, #4
 8005986:	d005      	beq.n	8005994 <HAL_RCC_OscConfig+0x310>
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2b0c      	cmp	r3, #12
 800598c:	d119      	bne.n	80059c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d116      	bne.n	80059c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005994:	4b7c      	ldr	r3, [pc, #496]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_RCC_OscConfig+0x328>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e27d      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ac:	4b76      	ldr	r3, [pc, #472]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	061b      	lsls	r3, r3, #24
 80059ba:	4973      	ldr	r1, [pc, #460]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059c0:	e040      	b.n	8005a44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d023      	beq.n	8005a12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059ca:	4b6f      	ldr	r3, [pc, #444]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a6e      	ldr	r2, [pc, #440]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 80059d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d6:	f7fc f943 	bl	8001c60 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059de:	f7fc f93f 	bl	8001c60 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e25b      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059f0:	4b65      	ldr	r3, [pc, #404]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fc:	4b62      	ldr	r3, [pc, #392]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	061b      	lsls	r3, r3, #24
 8005a0a:	495f      	ldr	r1, [pc, #380]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	604b      	str	r3, [r1, #4]
 8005a10:	e018      	b.n	8005a44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a12:	4b5d      	ldr	r3, [pc, #372]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a5c      	ldr	r2, [pc, #368]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1e:	f7fc f91f 	bl	8001c60 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a26:	f7fc f91b 	bl	8001c60 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e237      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a38:	4b53      	ldr	r3, [pc, #332]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f0      	bne.n	8005a26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d03c      	beq.n	8005aca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01c      	beq.n	8005a92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a58:	4b4b      	ldr	r3, [pc, #300]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005a60:	f043 0301 	orr.w	r3, r3, #1
 8005a64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a68:	f7fc f8fa 	bl	8001c60 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a70:	f7fc f8f6 	bl	8001c60 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e212      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a82:	4b41      	ldr	r3, [pc, #260]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0ef      	beq.n	8005a70 <HAL_RCC_OscConfig+0x3ec>
 8005a90:	e01b      	b.n	8005aca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a92:	4b3d      	ldr	r3, [pc, #244]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a98:	4a3b      	ldr	r2, [pc, #236]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa2:	f7fc f8dd 	bl	8001c60 <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005aa8:	e008      	b.n	8005abc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aaa:	f7fc f8d9 	bl	8001c60 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e1f5      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005abc:	4b32      	ldr	r3, [pc, #200]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1ef      	bne.n	8005aaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80a6 	beq.w	8005c24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005adc:	4b2a      	ldr	r3, [pc, #168]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10d      	bne.n	8005b04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae8:	4b27      	ldr	r3, [pc, #156]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aec:	4a26      	ldr	r2, [pc, #152]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005af4:	4b24      	ldr	r3, [pc, #144]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b00:	2301      	movs	r3, #1
 8005b02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b04:	4b21      	ldr	r3, [pc, #132]	@ (8005b8c <HAL_RCC_OscConfig+0x508>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d118      	bne.n	8005b42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b10:	4b1e      	ldr	r3, [pc, #120]	@ (8005b8c <HAL_RCC_OscConfig+0x508>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1d      	ldr	r2, [pc, #116]	@ (8005b8c <HAL_RCC_OscConfig+0x508>)
 8005b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1c:	f7fc f8a0 	bl	8001c60 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b24:	f7fc f89c 	bl	8001c60 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e1b8      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b36:	4b15      	ldr	r3, [pc, #84]	@ (8005b8c <HAL_RCC_OscConfig+0x508>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0f0      	beq.n	8005b24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d108      	bne.n	8005b5c <HAL_RCC_OscConfig+0x4d8>
 8005b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b50:	4a0d      	ldr	r2, [pc, #52]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005b52:	f043 0301 	orr.w	r3, r3, #1
 8005b56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b5a:	e029      	b.n	8005bb0 <HAL_RCC_OscConfig+0x52c>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	2b05      	cmp	r3, #5
 8005b62:	d115      	bne.n	8005b90 <HAL_RCC_OscConfig+0x50c>
 8005b64:	4b08      	ldr	r3, [pc, #32]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6a:	4a07      	ldr	r2, [pc, #28]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005b6c:	f043 0304 	orr.w	r3, r3, #4
 8005b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b74:	4b04      	ldr	r3, [pc, #16]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7a:	4a03      	ldr	r2, [pc, #12]	@ (8005b88 <HAL_RCC_OscConfig+0x504>)
 8005b7c:	f043 0301 	orr.w	r3, r3, #1
 8005b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b84:	e014      	b.n	8005bb0 <HAL_RCC_OscConfig+0x52c>
 8005b86:	bf00      	nop
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	40007000 	.word	0x40007000
 8005b90:	4b9d      	ldr	r3, [pc, #628]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b96:	4a9c      	ldr	r2, [pc, #624]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ba0:	4b99      	ldr	r3, [pc, #612]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba6:	4a98      	ldr	r2, [pc, #608]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005ba8:	f023 0304 	bic.w	r3, r3, #4
 8005bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d016      	beq.n	8005be6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb8:	f7fc f852 	bl	8001c60 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bbe:	e00a      	b.n	8005bd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc0:	f7fc f84e 	bl	8001c60 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e168      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bd6:	4b8c      	ldr	r3, [pc, #560]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0ed      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x53c>
 8005be4:	e015      	b.n	8005c12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be6:	f7fc f83b 	bl	8001c60 <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bec:	e00a      	b.n	8005c04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bee:	f7fc f837 	bl	8001c60 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e151      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c04:	4b80      	ldr	r3, [pc, #512]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1ed      	bne.n	8005bee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c12:	7ffb      	ldrb	r3, [r7, #31]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d105      	bne.n	8005c24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c18:	4b7b      	ldr	r3, [pc, #492]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1c:	4a7a      	ldr	r2, [pc, #488]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005c1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d03c      	beq.n	8005caa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01c      	beq.n	8005c72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c38:	4b73      	ldr	r3, [pc, #460]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c3e:	4a72      	ldr	r2, [pc, #456]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c48:	f7fc f80a 	bl	8001c60 <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c50:	f7fc f806 	bl	8001c60 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e122      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c62:	4b69      	ldr	r3, [pc, #420]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0ef      	beq.n	8005c50 <HAL_RCC_OscConfig+0x5cc>
 8005c70:	e01b      	b.n	8005caa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c72:	4b65      	ldr	r3, [pc, #404]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c78:	4a63      	ldr	r2, [pc, #396]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005c7a:	f023 0301 	bic.w	r3, r3, #1
 8005c7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c82:	f7fb ffed 	bl	8001c60 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c8a:	f7fb ffe9 	bl	8001c60 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e105      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c9c:	4b5a      	ldr	r3, [pc, #360]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1ef      	bne.n	8005c8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80f9 	beq.w	8005ea6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	f040 80cf 	bne.w	8005e5c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005cbe:	4b52      	ldr	r3, [pc, #328]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f003 0203 	and.w	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d12c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d123      	bne.n	8005d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d11b      	bne.n	8005d2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d113      	bne.n	8005d2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	3b01      	subs	r3, #1
 8005d12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d109      	bne.n	8005d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	3b01      	subs	r3, #1
 8005d26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d071      	beq.n	8005e10 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2b0c      	cmp	r3, #12
 8005d30:	d068      	beq.n	8005e04 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d32:	4b35      	ldr	r3, [pc, #212]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005d3e:	4b32      	ldr	r3, [pc, #200]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e0ac      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a2d      	ldr	r2, [pc, #180]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005d54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d5a:	f7fb ff81 	bl	8001c60 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d62:	f7fb ff7d 	bl	8001c60 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e099      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d74:	4b24      	ldr	r3, [pc, #144]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1f0      	bne.n	8005d62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d80:	4b21      	ldr	r3, [pc, #132]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	4b21      	ldr	r3, [pc, #132]	@ (8005e0c <HAL_RCC_OscConfig+0x788>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005d90:	3a01      	subs	r2, #1
 8005d92:	0112      	lsls	r2, r2, #4
 8005d94:	4311      	orrs	r1, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d9a:	0212      	lsls	r2, r2, #8
 8005d9c:	4311      	orrs	r1, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005da2:	0852      	lsrs	r2, r2, #1
 8005da4:	3a01      	subs	r2, #1
 8005da6:	0552      	lsls	r2, r2, #21
 8005da8:	4311      	orrs	r1, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005dae:	0852      	lsrs	r2, r2, #1
 8005db0:	3a01      	subs	r2, #1
 8005db2:	0652      	lsls	r2, r2, #25
 8005db4:	4311      	orrs	r1, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005dba:	06d2      	lsls	r2, r2, #27
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	4912      	ldr	r1, [pc, #72]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005dc4:	4b10      	ldr	r3, [pc, #64]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ddc:	f7fb ff40 	bl	8001c60 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de4:	f7fb ff3c 	bl	8001c60 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e058      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005df6:	4b04      	ldr	r3, [pc, #16]	@ (8005e08 <HAL_RCC_OscConfig+0x784>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e02:	e050      	b.n	8005ea6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e04f      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e10:	4b27      	ldr	r3, [pc, #156]	@ (8005eb0 <HAL_RCC_OscConfig+0x82c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d144      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e1c:	4b24      	ldr	r3, [pc, #144]	@ (8005eb0 <HAL_RCC_OscConfig+0x82c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a23      	ldr	r2, [pc, #140]	@ (8005eb0 <HAL_RCC_OscConfig+0x82c>)
 8005e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e28:	4b21      	ldr	r3, [pc, #132]	@ (8005eb0 <HAL_RCC_OscConfig+0x82c>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4a20      	ldr	r2, [pc, #128]	@ (8005eb0 <HAL_RCC_OscConfig+0x82c>)
 8005e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e34:	f7fb ff14 	bl	8001c60 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e3c:	f7fb ff10 	bl	8001c60 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e02c      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e4e:	4b18      	ldr	r3, [pc, #96]	@ (8005eb0 <HAL_RCC_OscConfig+0x82c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0f0      	beq.n	8005e3c <HAL_RCC_OscConfig+0x7b8>
 8005e5a:	e024      	b.n	8005ea6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	2b0c      	cmp	r3, #12
 8005e60:	d01f      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e62:	4b13      	ldr	r3, [pc, #76]	@ (8005eb0 <HAL_RCC_OscConfig+0x82c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a12      	ldr	r2, [pc, #72]	@ (8005eb0 <HAL_RCC_OscConfig+0x82c>)
 8005e68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6e:	f7fb fef7 	bl	8001c60 <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e76:	f7fb fef3 	bl	8001c60 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e00f      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e88:	4b09      	ldr	r3, [pc, #36]	@ (8005eb0 <HAL_RCC_OscConfig+0x82c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f0      	bne.n	8005e76 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005e94:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <HAL_RCC_OscConfig+0x82c>)
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	4905      	ldr	r1, [pc, #20]	@ (8005eb0 <HAL_RCC_OscConfig+0x82c>)
 8005e9a:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <HAL_RCC_OscConfig+0x830>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60cb      	str	r3, [r1, #12]
 8005ea0:	e001      	b.n	8005ea6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3720      	adds	r7, #32
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	feeefffc 	.word	0xfeeefffc

08005eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e11d      	b.n	800610c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed0:	4b90      	ldr	r3, [pc, #576]	@ (8006114 <HAL_RCC_ClockConfig+0x25c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d910      	bls.n	8005f00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ede:	4b8d      	ldr	r3, [pc, #564]	@ (8006114 <HAL_RCC_ClockConfig+0x25c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f023 020f 	bic.w	r2, r3, #15
 8005ee6:	498b      	ldr	r1, [pc, #556]	@ (8006114 <HAL_RCC_ClockConfig+0x25c>)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eee:	4b89      	ldr	r3, [pc, #548]	@ (8006114 <HAL_RCC_ClockConfig+0x25c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d001      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e105      	b.n	800610c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d010      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	4b81      	ldr	r3, [pc, #516]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d908      	bls.n	8005f2e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	497b      	ldr	r1, [pc, #492]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d079      	beq.n	800602e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d11e      	bne.n	8005f80 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f42:	4b75      	ldr	r3, [pc, #468]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e0dc      	b.n	800610c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005f52:	f000 fa09 	bl	8006368 <RCC_GetSysClockFreqFromPLLSource>
 8005f56:	4603      	mov	r3, r0
 8005f58:	4a70      	ldr	r2, [pc, #448]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d946      	bls.n	8005fec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d140      	bne.n	8005fec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f6a:	4b6b      	ldr	r3, [pc, #428]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f72:	4a69      	ldr	r2, [pc, #420]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f7a:	2380      	movs	r3, #128	@ 0x80
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	e035      	b.n	8005fec <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d107      	bne.n	8005f98 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f88:	4b63      	ldr	r3, [pc, #396]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d115      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0b9      	b.n	800610c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fa0:	4b5d      	ldr	r3, [pc, #372]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0ad      	b.n	800610c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fb0:	4b59      	ldr	r3, [pc, #356]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0a5      	b.n	800610c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005fc0:	f000 f8b4 	bl	800612c <HAL_RCC_GetSysClockFreq>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4a55      	ldr	r2, [pc, #340]	@ (800611c <HAL_RCC_ClockConfig+0x264>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d90f      	bls.n	8005fec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005fcc:	4b52      	ldr	r3, [pc, #328]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fe0:	4a4d      	ldr	r2, [pc, #308]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fe8:	2380      	movs	r3, #128	@ 0x80
 8005fea:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fec:	4b4a      	ldr	r3, [pc, #296]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f023 0203 	bic.w	r2, r3, #3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	4947      	ldr	r1, [pc, #284]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ffe:	f7fb fe2f 	bl	8001c60 <HAL_GetTick>
 8006002:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006004:	e00a      	b.n	800601c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006006:	f7fb fe2b 	bl	8001c60 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006014:	4293      	cmp	r3, r2
 8006016:	d901      	bls.n	800601c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e077      	b.n	800610c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601c:	4b3e      	ldr	r3, [pc, #248]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 020c 	and.w	r2, r3, #12
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	429a      	cmp	r2, r3
 800602c:	d1eb      	bne.n	8006006 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b80      	cmp	r3, #128	@ 0x80
 8006032:	d105      	bne.n	8006040 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006034:	4b38      	ldr	r3, [pc, #224]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	4a37      	ldr	r2, [pc, #220]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 800603a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800603e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d010      	beq.n	800606e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	4b31      	ldr	r3, [pc, #196]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006058:	429a      	cmp	r2, r3
 800605a:	d208      	bcs.n	800606e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800605c:	4b2e      	ldr	r3, [pc, #184]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	492b      	ldr	r1, [pc, #172]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 800606a:	4313      	orrs	r3, r2
 800606c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800606e:	4b29      	ldr	r3, [pc, #164]	@ (8006114 <HAL_RCC_ClockConfig+0x25c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d210      	bcs.n	800609e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607c:	4b25      	ldr	r3, [pc, #148]	@ (8006114 <HAL_RCC_ClockConfig+0x25c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f023 020f 	bic.w	r2, r3, #15
 8006084:	4923      	ldr	r1, [pc, #140]	@ (8006114 <HAL_RCC_ClockConfig+0x25c>)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	4313      	orrs	r3, r2
 800608a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800608c:	4b21      	ldr	r3, [pc, #132]	@ (8006114 <HAL_RCC_ClockConfig+0x25c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d001      	beq.n	800609e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e036      	b.n	800610c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d008      	beq.n	80060bc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	4918      	ldr	r1, [pc, #96]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d009      	beq.n	80060dc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060c8:	4b13      	ldr	r3, [pc, #76]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	4910      	ldr	r1, [pc, #64]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060dc:	f000 f826 	bl	800612c <HAL_RCC_GetSysClockFreq>
 80060e0:	4602      	mov	r2, r0
 80060e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006118 <HAL_RCC_ClockConfig+0x260>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	091b      	lsrs	r3, r3, #4
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	490c      	ldr	r1, [pc, #48]	@ (8006120 <HAL_RCC_ClockConfig+0x268>)
 80060ee:	5ccb      	ldrb	r3, [r1, r3]
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	fa22 f303 	lsr.w	r3, r2, r3
 80060f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006124 <HAL_RCC_ClockConfig+0x26c>)
 80060fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80060fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006128 <HAL_RCC_ClockConfig+0x270>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7fb fd5d 	bl	8001bc0 <HAL_InitTick>
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]

  return status;
 800610a:	7bfb      	ldrb	r3, [r7, #15]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40022000 	.word	0x40022000
 8006118:	40021000 	.word	0x40021000
 800611c:	04c4b400 	.word	0x04c4b400
 8006120:	0800dcfc 	.word	0x0800dcfc
 8006124:	20000000 	.word	0x20000000
 8006128:	20000004 	.word	0x20000004

0800612c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800612c:	b480      	push	{r7}
 800612e:	b089      	sub	sp, #36	@ 0x24
 8006130:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	2300      	movs	r3, #0
 8006138:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800613a:	4b3e      	ldr	r3, [pc, #248]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x108>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 030c 	and.w	r3, r3, #12
 8006142:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006144:	4b3b      	ldr	r3, [pc, #236]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x108>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <HAL_RCC_GetSysClockFreq+0x34>
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b0c      	cmp	r3, #12
 8006158:	d121      	bne.n	800619e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d11e      	bne.n	800619e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006160:	4b34      	ldr	r3, [pc, #208]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x108>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d107      	bne.n	800617c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800616c:	4b31      	ldr	r3, [pc, #196]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x108>)
 800616e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006172:	0a1b      	lsrs	r3, r3, #8
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	61fb      	str	r3, [r7, #28]
 800617a:	e005      	b.n	8006188 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800617c:	4b2d      	ldr	r3, [pc, #180]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x108>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006188:	4a2b      	ldr	r2, [pc, #172]	@ (8006238 <HAL_RCC_GetSysClockFreq+0x10c>)
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006190:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10d      	bne.n	80061b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800619c:	e00a      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d102      	bne.n	80061aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061a4:	4b25      	ldr	r3, [pc, #148]	@ (800623c <HAL_RCC_GetSysClockFreq+0x110>)
 80061a6:	61bb      	str	r3, [r7, #24]
 80061a8:	e004      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d101      	bne.n	80061b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061b0:	4b23      	ldr	r3, [pc, #140]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x114>)
 80061b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2b0c      	cmp	r3, #12
 80061b8:	d134      	bne.n	8006224 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x108>)
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d003      	beq.n	80061d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d003      	beq.n	80061d8 <HAL_RCC_GetSysClockFreq+0xac>
 80061d0:	e005      	b.n	80061de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80061d2:	4b1a      	ldr	r3, [pc, #104]	@ (800623c <HAL_RCC_GetSysClockFreq+0x110>)
 80061d4:	617b      	str	r3, [r7, #20]
      break;
 80061d6:	e005      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80061d8:	4b19      	ldr	r3, [pc, #100]	@ (8006240 <HAL_RCC_GetSysClockFreq+0x114>)
 80061da:	617b      	str	r3, [r7, #20]
      break;
 80061dc:	e002      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	617b      	str	r3, [r7, #20]
      break;
 80061e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061e4:	4b13      	ldr	r3, [pc, #76]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x108>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	091b      	lsrs	r3, r3, #4
 80061ea:	f003 030f 	and.w	r3, r3, #15
 80061ee:	3301      	adds	r3, #1
 80061f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80061f2:	4b10      	ldr	r3, [pc, #64]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x108>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	fb03 f202 	mul.w	r2, r3, r2
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800620a:	4b0a      	ldr	r3, [pc, #40]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x108>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	0e5b      	lsrs	r3, r3, #25
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	3301      	adds	r3, #1
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006222:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006224:	69bb      	ldr	r3, [r7, #24]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3724      	adds	r7, #36	@ 0x24
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40021000 	.word	0x40021000
 8006238:	0800dd14 	.word	0x0800dd14
 800623c:	00f42400 	.word	0x00f42400
 8006240:	007a1200 	.word	0x007a1200

08006244 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006248:	4b03      	ldr	r3, [pc, #12]	@ (8006258 <HAL_RCC_GetHCLKFreq+0x14>)
 800624a:	681b      	ldr	r3, [r3, #0]
}
 800624c:	4618      	mov	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20000000 	.word	0x20000000

0800625c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006260:	f7ff fff0 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 8006264:	4602      	mov	r2, r0
 8006266:	4b06      	ldr	r3, [pc, #24]	@ (8006280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	4904      	ldr	r1, [pc, #16]	@ (8006284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006272:	5ccb      	ldrb	r3, [r1, r3]
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40021000 	.word	0x40021000
 8006284:	0800dd0c 	.word	0x0800dd0c

08006288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800628c:	f7ff ffda 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 8006290:	4602      	mov	r2, r0
 8006292:	4b06      	ldr	r3, [pc, #24]	@ (80062ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	0adb      	lsrs	r3, r3, #11
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	4904      	ldr	r1, [pc, #16]	@ (80062b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800629e:	5ccb      	ldrb	r3, [r1, r3]
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40021000 	.word	0x40021000
 80062b0:	0800dd0c 	.word	0x0800dd0c

080062b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80062c0:	4b27      	ldr	r3, [pc, #156]	@ (8006360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80062cc:	f7ff f8f6 	bl	80054bc <HAL_PWREx_GetVoltageRange>
 80062d0:	6178      	str	r0, [r7, #20]
 80062d2:	e014      	b.n	80062fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80062d4:	4b22      	ldr	r3, [pc, #136]	@ (8006360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d8:	4a21      	ldr	r2, [pc, #132]	@ (8006360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062de:	6593      	str	r3, [r2, #88]	@ 0x58
 80062e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80062ec:	f7ff f8e6 	bl	80054bc <HAL_PWREx_GetVoltageRange>
 80062f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80062f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006304:	d10b      	bne.n	800631e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b80      	cmp	r3, #128	@ 0x80
 800630a:	d913      	bls.n	8006334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006310:	d902      	bls.n	8006318 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006312:	2302      	movs	r3, #2
 8006314:	613b      	str	r3, [r7, #16]
 8006316:	e00d      	b.n	8006334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006318:	2301      	movs	r3, #1
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	e00a      	b.n	8006334 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b7f      	cmp	r3, #127	@ 0x7f
 8006322:	d902      	bls.n	800632a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006324:	2302      	movs	r3, #2
 8006326:	613b      	str	r3, [r7, #16]
 8006328:	e004      	b.n	8006334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b70      	cmp	r3, #112	@ 0x70
 800632e:	d101      	bne.n	8006334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006330:	2301      	movs	r3, #1
 8006332:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006334:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f023 020f 	bic.w	r2, r3, #15
 800633c:	4909      	ldr	r1, [pc, #36]	@ (8006364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006344:	4b07      	ldr	r3, [pc, #28]	@ (8006364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	429a      	cmp	r2, r3
 8006350:	d001      	beq.n	8006356 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	40021000 	.word	0x40021000
 8006364:	40022000 	.word	0x40022000

08006368 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800636e:	4b2d      	ldr	r3, [pc, #180]	@ (8006424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b03      	cmp	r3, #3
 800637c:	d00b      	beq.n	8006396 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d825      	bhi.n	80063d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d008      	beq.n	800639c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d11f      	bne.n	80063d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006390:	4b25      	ldr	r3, [pc, #148]	@ (8006428 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006392:	613b      	str	r3, [r7, #16]
    break;
 8006394:	e01f      	b.n	80063d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006396:	4b25      	ldr	r3, [pc, #148]	@ (800642c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006398:	613b      	str	r3, [r7, #16]
    break;
 800639a:	e01c      	b.n	80063d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800639c:	4b21      	ldr	r3, [pc, #132]	@ (8006424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d107      	bne.n	80063b8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80063a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ae:	0a1b      	lsrs	r3, r3, #8
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	e005      	b.n	80063c4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80063b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	091b      	lsrs	r3, r3, #4
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80063c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006430 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063cc:	613b      	str	r3, [r7, #16]
    break;
 80063ce:	e002      	b.n	80063d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	613b      	str	r3, [r7, #16]
    break;
 80063d4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063d6:	4b13      	ldr	r3, [pc, #76]	@ (8006424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	091b      	lsrs	r3, r3, #4
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	3301      	adds	r3, #1
 80063e2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80063e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	0a1b      	lsrs	r3, r3, #8
 80063ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	fb03 f202 	mul.w	r2, r3, r2
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063fc:	4b09      	ldr	r3, [pc, #36]	@ (8006424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	0e5b      	lsrs	r3, r3, #25
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	3301      	adds	r3, #1
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	fbb2 f3f3 	udiv	r3, r2, r3
 8006414:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006416:	683b      	ldr	r3, [r7, #0]
}
 8006418:	4618      	mov	r0, r3
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	40021000 	.word	0x40021000
 8006428:	00f42400 	.word	0x00f42400
 800642c:	007a1200 	.word	0x007a1200
 8006430:	0800dd14 	.word	0x0800dd14

08006434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800643c:	2300      	movs	r3, #0
 800643e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006440:	2300      	movs	r3, #0
 8006442:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800644c:	2b00      	cmp	r3, #0
 800644e:	d040      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006454:	2b80      	cmp	r3, #128	@ 0x80
 8006456:	d02a      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006458:	2b80      	cmp	r3, #128	@ 0x80
 800645a:	d825      	bhi.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800645c:	2b60      	cmp	r3, #96	@ 0x60
 800645e:	d026      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006460:	2b60      	cmp	r3, #96	@ 0x60
 8006462:	d821      	bhi.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006464:	2b40      	cmp	r3, #64	@ 0x40
 8006466:	d006      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006468:	2b40      	cmp	r3, #64	@ 0x40
 800646a:	d81d      	bhi.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006470:	2b20      	cmp	r3, #32
 8006472:	d010      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006474:	e018      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006476:	4b89      	ldr	r3, [pc, #548]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	4a88      	ldr	r2, [pc, #544]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800647c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006480:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006482:	e015      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	2100      	movs	r1, #0
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fb02 	bl	8006a94 <RCCEx_PLLSAI1_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006494:	e00c      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3320      	adds	r3, #32
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fbed 	bl	8006c7c <RCCEx_PLLSAI2_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064a6:	e003      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	74fb      	strb	r3, [r7, #19]
      break;
 80064ac:	e000      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80064ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064b0:	7cfb      	ldrb	r3, [r7, #19]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10b      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064b6:	4b79      	ldr	r3, [pc, #484]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064bc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064c4:	4975      	ldr	r1, [pc, #468]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80064cc:	e001      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ce:	7cfb      	ldrb	r3, [r7, #19]
 80064d0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d047      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e6:	d030      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80064e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ec:	d82a      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80064ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064f2:	d02a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80064f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064f8:	d824      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80064fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064fe:	d008      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006504:	d81e      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800650a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800650e:	d010      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006510:	e018      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006512:	4b62      	ldr	r3, [pc, #392]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	4a61      	ldr	r2, [pc, #388]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800651c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800651e:	e015      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fab4 	bl	8006a94 <RCCEx_PLLSAI1_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006530:	e00c      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3320      	adds	r3, #32
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fb9f 	bl	8006c7c <RCCEx_PLLSAI2_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006542:	e003      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	74fb      	strb	r3, [r7, #19]
      break;
 8006548:	e000      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800654a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800654c:	7cfb      	ldrb	r3, [r7, #19]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10b      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006552:	4b52      	ldr	r3, [pc, #328]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006554:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006558:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006560:	494e      	ldr	r1, [pc, #312]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006568:	e001      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656a:	7cfb      	ldrb	r3, [r7, #19]
 800656c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 809f 	beq.w	80066ba <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800657c:	2300      	movs	r3, #0
 800657e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006580:	4b46      	ldr	r3, [pc, #280]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00d      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006596:	4b41      	ldr	r3, [pc, #260]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659a:	4a40      	ldr	r2, [pc, #256]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800659c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80065a2:	4b3e      	ldr	r3, [pc, #248]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065aa:	60bb      	str	r3, [r7, #8]
 80065ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ae:	2301      	movs	r3, #1
 80065b0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065b2:	4b3b      	ldr	r3, [pc, #236]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a3a      	ldr	r2, [pc, #232]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80065b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065be:	f7fb fb4f 	bl	8001c60 <HAL_GetTick>
 80065c2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065c4:	e009      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c6:	f7fb fb4b 	bl	8001c60 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d902      	bls.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	74fb      	strb	r3, [r7, #19]
        break;
 80065d8:	e005      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065da:	4b31      	ldr	r3, [pc, #196]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0ef      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80065e6:	7cfb      	ldrb	r3, [r7, #19]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d15b      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065ec:	4b2b      	ldr	r3, [pc, #172]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065f6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d01f      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	429a      	cmp	r2, r3
 8006608:	d019      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800660a:	4b24      	ldr	r3, [pc, #144]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800660c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006614:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006616:	4b21      	ldr	r3, [pc, #132]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661c:	4a1f      	ldr	r2, [pc, #124]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800661e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006626:	4b1d      	ldr	r3, [pc, #116]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800662c:	4a1b      	ldr	r2, [pc, #108]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800662e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006632:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006636:	4a19      	ldr	r2, [pc, #100]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d016      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006648:	f7fb fb0a 	bl	8001c60 <HAL_GetTick>
 800664c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800664e:	e00b      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006650:	f7fb fb06 	bl	8001c60 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800665e:	4293      	cmp	r3, r2
 8006660:	d902      	bls.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	74fb      	strb	r3, [r7, #19]
            break;
 8006666:	e006      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006668:	4b0c      	ldr	r3, [pc, #48]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800666a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0ec      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006676:	7cfb      	ldrb	r3, [r7, #19]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10c      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800667c:	4b07      	ldr	r3, [pc, #28]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800667e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006682:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668c:	4903      	ldr	r1, [pc, #12]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800668e:	4313      	orrs	r3, r2
 8006690:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006694:	e008      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006696:	7cfb      	ldrb	r3, [r7, #19]
 8006698:	74bb      	strb	r3, [r7, #18]
 800669a:	e005      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800669c:	40021000 	.word	0x40021000
 80066a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a4:	7cfb      	ldrb	r3, [r7, #19]
 80066a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066a8:	7c7b      	ldrb	r3, [r7, #17]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d105      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066ae:	4ba0      	ldr	r3, [pc, #640]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b2:	4a9f      	ldr	r2, [pc, #636]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066c6:	4b9a      	ldr	r3, [pc, #616]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066cc:	f023 0203 	bic.w	r2, r3, #3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d4:	4996      	ldr	r1, [pc, #600]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066e8:	4b91      	ldr	r3, [pc, #580]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ee:	f023 020c 	bic.w	r2, r3, #12
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f6:	498e      	ldr	r1, [pc, #568]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800670a:	4b89      	ldr	r3, [pc, #548]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006710:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006718:	4985      	ldr	r1, [pc, #532]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800672c:	4b80      	ldr	r3, [pc, #512]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800672e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006732:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800673a:	497d      	ldr	r1, [pc, #500]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800674e:	4b78      	ldr	r3, [pc, #480]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006754:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800675c:	4974      	ldr	r1, [pc, #464]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800675e:	4313      	orrs	r3, r2
 8006760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006770:	4b6f      	ldr	r3, [pc, #444]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006776:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800677e:	496c      	ldr	r1, [pc, #432]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006792:	4b67      	ldr	r3, [pc, #412]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006798:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067a0:	4963      	ldr	r1, [pc, #396]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067b4:	4b5e      	ldr	r3, [pc, #376]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067c2:	495b      	ldr	r1, [pc, #364]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067d6:	4b56      	ldr	r3, [pc, #344]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e4:	4952      	ldr	r1, [pc, #328]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006806:	494a      	ldr	r1, [pc, #296]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800681a:	4b45      	ldr	r3, [pc, #276]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800681c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006820:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006828:	4941      	ldr	r1, [pc, #260]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800683c:	4b3c      	ldr	r3, [pc, #240]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800683e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006842:	f023 0203 	bic.w	r2, r3, #3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800684a:	4939      	ldr	r1, [pc, #228]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d028      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800685e:	4b34      	ldr	r3, [pc, #208]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006864:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800686c:	4930      	ldr	r1, [pc, #192]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006878:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800687c:	d106      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800687e:	4b2c      	ldr	r3, [pc, #176]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	4a2b      	ldr	r2, [pc, #172]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006884:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006888:	60d3      	str	r3, [r2, #12]
 800688a:	e011      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006890:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006894:	d10c      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3304      	adds	r3, #4
 800689a:	2101      	movs	r1, #1
 800689c:	4618      	mov	r0, r3
 800689e:	f000 f8f9 	bl	8006a94 <RCCEx_PLLSAI1_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80068a6:	7cfb      	ldrb	r3, [r7, #19]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80068ac:	7cfb      	ldrb	r3, [r7, #19]
 80068ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d04d      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068c4:	d108      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80068c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068cc:	4a18      	ldr	r2, [pc, #96]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068d2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80068d6:	e012      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80068d8:	4b15      	ldr	r3, [pc, #84]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068de:	4a14      	ldr	r2, [pc, #80]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068e4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80068e8:	4b11      	ldr	r3, [pc, #68]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068f6:	490e      	ldr	r1, [pc, #56]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006902:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006906:	d106      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006908:	4b09      	ldr	r3, [pc, #36]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	4a08      	ldr	r2, [pc, #32]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800690e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006912:	60d3      	str	r3, [r2, #12]
 8006914:	e020      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800691a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800691e:	d109      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006920:	4b03      	ldr	r3, [pc, #12]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	4a02      	ldr	r2, [pc, #8]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800692a:	60d3      	str	r3, [r2, #12]
 800692c:	e014      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800692e:	bf00      	nop
 8006930:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006938:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800693c:	d10c      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3304      	adds	r3, #4
 8006942:	2101      	movs	r1, #1
 8006944:	4618      	mov	r0, r3
 8006946:	f000 f8a5 	bl	8006a94 <RCCEx_PLLSAI1_Config>
 800694a:	4603      	mov	r3, r0
 800694c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800694e:	7cfb      	ldrb	r3, [r7, #19]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006954:	7cfb      	ldrb	r3, [r7, #19]
 8006956:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d028      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006964:	4b4a      	ldr	r3, [pc, #296]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006972:	4947      	ldr	r1, [pc, #284]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800697e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006982:	d106      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006984:	4b42      	ldr	r3, [pc, #264]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	4a41      	ldr	r2, [pc, #260]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800698a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800698e:	60d3      	str	r3, [r2, #12]
 8006990:	e011      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006996:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800699a:	d10c      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3304      	adds	r3, #4
 80069a0:	2101      	movs	r1, #1
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 f876 	bl	8006a94 <RCCEx_PLLSAI1_Config>
 80069a8:	4603      	mov	r3, r0
 80069aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069ac:	7cfb      	ldrb	r3, [r7, #19]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80069b2:	7cfb      	ldrb	r3, [r7, #19]
 80069b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01e      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069c2:	4b33      	ldr	r3, [pc, #204]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069d2:	492f      	ldr	r1, [pc, #188]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069e4:	d10c      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3304      	adds	r3, #4
 80069ea:	2102      	movs	r1, #2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 f851 	bl	8006a94 <RCCEx_PLLSAI1_Config>
 80069f2:	4603      	mov	r3, r0
 80069f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069f6:	7cfb      	ldrb	r3, [r7, #19]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80069fc:	7cfb      	ldrb	r3, [r7, #19]
 80069fe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00b      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a0c:	4b20      	ldr	r3, [pc, #128]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a12:	f023 0204 	bic.w	r2, r3, #4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a1c:	491c      	ldr	r1, [pc, #112]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006a30:	4b17      	ldr	r3, [pc, #92]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a36:	f023 0218 	bic.w	r2, r3, #24
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a40:	4913      	ldr	r1, [pc, #76]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d017      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006a54:	4b0e      	ldr	r3, [pc, #56]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a64:	490a      	ldr	r1, [pc, #40]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a76:	d105      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a78:	4b05      	ldr	r3, [pc, #20]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	4a04      	ldr	r2, [pc, #16]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006a84:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	40021000 	.word	0x40021000

08006a94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006aa2:	4b72      	ldr	r3, [pc, #456]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00e      	beq.n	8006acc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006aae:	4b6f      	ldr	r3, [pc, #444]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f003 0203 	and.w	r2, r3, #3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d103      	bne.n	8006ac6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d142      	bne.n	8006b4c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	73fb      	strb	r3, [r7, #15]
 8006aca:	e03f      	b.n	8006b4c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d018      	beq.n	8006b06 <RCCEx_PLLSAI1_Config+0x72>
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d825      	bhi.n	8006b24 <RCCEx_PLLSAI1_Config+0x90>
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d002      	beq.n	8006ae2 <RCCEx_PLLSAI1_Config+0x4e>
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d009      	beq.n	8006af4 <RCCEx_PLLSAI1_Config+0x60>
 8006ae0:	e020      	b.n	8006b24 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ae2:	4b62      	ldr	r3, [pc, #392]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d11d      	bne.n	8006b2a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006af2:	e01a      	b.n	8006b2a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006af4:	4b5d      	ldr	r3, [pc, #372]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d116      	bne.n	8006b2e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b04:	e013      	b.n	8006b2e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b06:	4b59      	ldr	r3, [pc, #356]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10f      	bne.n	8006b32 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b12:	4b56      	ldr	r3, [pc, #344]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b22:	e006      	b.n	8006b32 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	73fb      	strb	r3, [r7, #15]
      break;
 8006b28:	e004      	b.n	8006b34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b2a:	bf00      	nop
 8006b2c:	e002      	b.n	8006b34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b2e:	bf00      	nop
 8006b30:	e000      	b.n	8006b34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b32:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d108      	bne.n	8006b4c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f023 0203 	bic.w	r2, r3, #3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4949      	ldr	r1, [pc, #292]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f040 8086 	bne.w	8006c60 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b54:	4b45      	ldr	r3, [pc, #276]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a44      	ldr	r2, [pc, #272]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b60:	f7fb f87e 	bl	8001c60 <HAL_GetTick>
 8006b64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b66:	e009      	b.n	8006b7c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b68:	f7fb f87a 	bl	8001c60 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d902      	bls.n	8006b7c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	73fb      	strb	r3, [r7, #15]
        break;
 8006b7a:	e005      	b.n	8006b88 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ef      	bne.n	8006b68 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d168      	bne.n	8006c60 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d113      	bne.n	8006bbc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b94:	4b35      	ldr	r3, [pc, #212]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	4b35      	ldr	r3, [pc, #212]	@ (8006c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6892      	ldr	r2, [r2, #8]
 8006ba0:	0211      	lsls	r1, r2, #8
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	68d2      	ldr	r2, [r2, #12]
 8006ba6:	06d2      	lsls	r2, r2, #27
 8006ba8:	4311      	orrs	r1, r2
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6852      	ldr	r2, [r2, #4]
 8006bae:	3a01      	subs	r2, #1
 8006bb0:	0112      	lsls	r2, r2, #4
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	492d      	ldr	r1, [pc, #180]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	610b      	str	r3, [r1, #16]
 8006bba:	e02d      	b.n	8006c18 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d115      	bne.n	8006bee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bc4:	691a      	ldr	r2, [r3, #16]
 8006bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6892      	ldr	r2, [r2, #8]
 8006bce:	0211      	lsls	r1, r2, #8
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6912      	ldr	r2, [r2, #16]
 8006bd4:	0852      	lsrs	r2, r2, #1
 8006bd6:	3a01      	subs	r2, #1
 8006bd8:	0552      	lsls	r2, r2, #21
 8006bda:	4311      	orrs	r1, r2
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6852      	ldr	r2, [r2, #4]
 8006be0:	3a01      	subs	r2, #1
 8006be2:	0112      	lsls	r2, r2, #4
 8006be4:	430a      	orrs	r2, r1
 8006be6:	4921      	ldr	r1, [pc, #132]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	610b      	str	r3, [r1, #16]
 8006bec:	e014      	b.n	8006c18 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bee:	4b1f      	ldr	r3, [pc, #124]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	4b21      	ldr	r3, [pc, #132]	@ (8006c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	6892      	ldr	r2, [r2, #8]
 8006bfa:	0211      	lsls	r1, r2, #8
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6952      	ldr	r2, [r2, #20]
 8006c00:	0852      	lsrs	r2, r2, #1
 8006c02:	3a01      	subs	r2, #1
 8006c04:	0652      	lsls	r2, r2, #25
 8006c06:	4311      	orrs	r1, r2
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6852      	ldr	r2, [r2, #4]
 8006c0c:	3a01      	subs	r2, #1
 8006c0e:	0112      	lsls	r2, r2, #4
 8006c10:	430a      	orrs	r2, r1
 8006c12:	4916      	ldr	r1, [pc, #88]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c18:	4b14      	ldr	r3, [pc, #80]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a13      	ldr	r2, [pc, #76]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c24:	f7fb f81c 	bl	8001c60 <HAL_GetTick>
 8006c28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c2a:	e009      	b.n	8006c40 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c2c:	f7fb f818 	bl	8001c60 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d902      	bls.n	8006c40 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	73fb      	strb	r3, [r7, #15]
          break;
 8006c3e:	e005      	b.n	8006c4c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c40:	4b0a      	ldr	r3, [pc, #40]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0ef      	beq.n	8006c2c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c52:	4b06      	ldr	r3, [pc, #24]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c54:	691a      	ldr	r2, [r3, #16]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	4904      	ldr	r1, [pc, #16]	@ (8006c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	07ff800f 	.word	0x07ff800f
 8006c74:	ff9f800f 	.word	0xff9f800f
 8006c78:	f9ff800f 	.word	0xf9ff800f

08006c7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c8a:	4b72      	ldr	r3, [pc, #456]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00e      	beq.n	8006cb4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006c96:	4b6f      	ldr	r3, [pc, #444]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f003 0203 	and.w	r2, r3, #3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d103      	bne.n	8006cae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
       ||
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d142      	bne.n	8006d34 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	73fb      	strb	r3, [r7, #15]
 8006cb2:	e03f      	b.n	8006d34 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d018      	beq.n	8006cee <RCCEx_PLLSAI2_Config+0x72>
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d825      	bhi.n	8006d0c <RCCEx_PLLSAI2_Config+0x90>
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d002      	beq.n	8006cca <RCCEx_PLLSAI2_Config+0x4e>
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d009      	beq.n	8006cdc <RCCEx_PLLSAI2_Config+0x60>
 8006cc8:	e020      	b.n	8006d0c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cca:	4b62      	ldr	r3, [pc, #392]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d11d      	bne.n	8006d12 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cda:	e01a      	b.n	8006d12 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d116      	bne.n	8006d16 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cec:	e013      	b.n	8006d16 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cee:	4b59      	ldr	r3, [pc, #356]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10f      	bne.n	8006d1a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006cfa:	4b56      	ldr	r3, [pc, #344]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d0a:	e006      	b.n	8006d1a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d10:	e004      	b.n	8006d1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d12:	bf00      	nop
 8006d14:	e002      	b.n	8006d1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d16:	bf00      	nop
 8006d18:	e000      	b.n	8006d1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d108      	bne.n	8006d34 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006d22:	4b4c      	ldr	r3, [pc, #304]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f023 0203 	bic.w	r2, r3, #3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4949      	ldr	r1, [pc, #292]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f040 8086 	bne.w	8006e48 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d3c:	4b45      	ldr	r3, [pc, #276]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a44      	ldr	r2, [pc, #272]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d48:	f7fa ff8a 	bl	8001c60 <HAL_GetTick>
 8006d4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d4e:	e009      	b.n	8006d64 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d50:	f7fa ff86 	bl	8001c60 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d902      	bls.n	8006d64 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	73fb      	strb	r3, [r7, #15]
        break;
 8006d62:	e005      	b.n	8006d70 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d64:	4b3b      	ldr	r3, [pc, #236]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1ef      	bne.n	8006d50 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d168      	bne.n	8006e48 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d113      	bne.n	8006da4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d7c:	4b35      	ldr	r3, [pc, #212]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d7e:	695a      	ldr	r2, [r3, #20]
 8006d80:	4b35      	ldr	r3, [pc, #212]	@ (8006e58 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6892      	ldr	r2, [r2, #8]
 8006d88:	0211      	lsls	r1, r2, #8
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68d2      	ldr	r2, [r2, #12]
 8006d8e:	06d2      	lsls	r2, r2, #27
 8006d90:	4311      	orrs	r1, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6852      	ldr	r2, [r2, #4]
 8006d96:	3a01      	subs	r2, #1
 8006d98:	0112      	lsls	r2, r2, #4
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	492d      	ldr	r1, [pc, #180]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	614b      	str	r3, [r1, #20]
 8006da2:	e02d      	b.n	8006e00 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d115      	bne.n	8006dd6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006daa:	4b2a      	ldr	r3, [pc, #168]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dac:	695a      	ldr	r2, [r3, #20]
 8006dae:	4b2b      	ldr	r3, [pc, #172]	@ (8006e5c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6892      	ldr	r2, [r2, #8]
 8006db6:	0211      	lsls	r1, r2, #8
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6912      	ldr	r2, [r2, #16]
 8006dbc:	0852      	lsrs	r2, r2, #1
 8006dbe:	3a01      	subs	r2, #1
 8006dc0:	0552      	lsls	r2, r2, #21
 8006dc2:	4311      	orrs	r1, r2
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6852      	ldr	r2, [r2, #4]
 8006dc8:	3a01      	subs	r2, #1
 8006dca:	0112      	lsls	r2, r2, #4
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	4921      	ldr	r1, [pc, #132]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	614b      	str	r3, [r1, #20]
 8006dd4:	e014      	b.n	8006e00 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dd8:	695a      	ldr	r2, [r3, #20]
 8006dda:	4b21      	ldr	r3, [pc, #132]	@ (8006e60 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6892      	ldr	r2, [r2, #8]
 8006de2:	0211      	lsls	r1, r2, #8
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6952      	ldr	r2, [r2, #20]
 8006de8:	0852      	lsrs	r2, r2, #1
 8006dea:	3a01      	subs	r2, #1
 8006dec:	0652      	lsls	r2, r2, #25
 8006dee:	4311      	orrs	r1, r2
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6852      	ldr	r2, [r2, #4]
 8006df4:	3a01      	subs	r2, #1
 8006df6:	0112      	lsls	r2, r2, #4
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	4916      	ldr	r1, [pc, #88]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e00:	4b14      	ldr	r3, [pc, #80]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a13      	ldr	r2, [pc, #76]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e0c:	f7fa ff28 	bl	8001c60 <HAL_GetTick>
 8006e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e12:	e009      	b.n	8006e28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e14:	f7fa ff24 	bl	8001c60 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d902      	bls.n	8006e28 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	73fb      	strb	r3, [r7, #15]
          break;
 8006e26:	e005      	b.n	8006e34 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e28:	4b0a      	ldr	r3, [pc, #40]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0ef      	beq.n	8006e14 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e3a:	4b06      	ldr	r3, [pc, #24]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e3c:	695a      	ldr	r2, [r3, #20]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	4904      	ldr	r1, [pc, #16]	@ (8006e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40021000 	.word	0x40021000
 8006e58:	07ff800f 	.word	0x07ff800f
 8006e5c:	ff9f800f 	.word	0xff9f800f
 8006e60:	f9ff800f 	.word	0xf9ff800f

08006e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e049      	b.n	8006f0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fa fcba 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f000 fb02 	bl	80074ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d001      	beq.n	8006f2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e047      	b.n	8006fbc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a23      	ldr	r2, [pc, #140]	@ (8006fc8 <HAL_TIM_Base_Start+0xb4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d01d      	beq.n	8006f7a <HAL_TIM_Base_Start+0x66>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f46:	d018      	beq.n	8006f7a <HAL_TIM_Base_Start+0x66>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8006fcc <HAL_TIM_Base_Start+0xb8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d013      	beq.n	8006f7a <HAL_TIM_Base_Start+0x66>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1e      	ldr	r2, [pc, #120]	@ (8006fd0 <HAL_TIM_Base_Start+0xbc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00e      	beq.n	8006f7a <HAL_TIM_Base_Start+0x66>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1c      	ldr	r2, [pc, #112]	@ (8006fd4 <HAL_TIM_Base_Start+0xc0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d009      	beq.n	8006f7a <HAL_TIM_Base_Start+0x66>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006fd8 <HAL_TIM_Base_Start+0xc4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d004      	beq.n	8006f7a <HAL_TIM_Base_Start+0x66>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a19      	ldr	r2, [pc, #100]	@ (8006fdc <HAL_TIM_Base_Start+0xc8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d115      	bne.n	8006fa6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	4b17      	ldr	r3, [pc, #92]	@ (8006fe0 <HAL_TIM_Base_Start+0xcc>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b06      	cmp	r3, #6
 8006f8a:	d015      	beq.n	8006fb8 <HAL_TIM_Base_Start+0xa4>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f92:	d011      	beq.n	8006fb8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa4:	e008      	b.n	8006fb8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e000      	b.n	8006fba <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40012c00 	.word	0x40012c00
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	40000800 	.word	0x40000800
 8006fd4:	40000c00 	.word	0x40000c00
 8006fd8:	40013400 	.word	0x40013400
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	00010007 	.word	0x00010007

08006fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d001      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e04f      	b.n	800709c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0201 	orr.w	r2, r2, #1
 8007012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a23      	ldr	r2, [pc, #140]	@ (80070a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d01d      	beq.n	800705a <HAL_TIM_Base_Start_IT+0x76>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007026:	d018      	beq.n	800705a <HAL_TIM_Base_Start_IT+0x76>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1f      	ldr	r2, [pc, #124]	@ (80070ac <HAL_TIM_Base_Start_IT+0xc8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <HAL_TIM_Base_Start_IT+0x76>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1e      	ldr	r2, [pc, #120]	@ (80070b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_TIM_Base_Start_IT+0x76>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a1c      	ldr	r2, [pc, #112]	@ (80070b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d009      	beq.n	800705a <HAL_TIM_Base_Start_IT+0x76>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a1b      	ldr	r2, [pc, #108]	@ (80070b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_TIM_Base_Start_IT+0x76>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a19      	ldr	r2, [pc, #100]	@ (80070bc <HAL_TIM_Base_Start_IT+0xd8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d115      	bne.n	8007086 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	4b17      	ldr	r3, [pc, #92]	@ (80070c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007062:	4013      	ands	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b06      	cmp	r3, #6
 800706a:	d015      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0xb4>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007072:	d011      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007084:	e008      	b.n	8007098 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0201 	orr.w	r2, r2, #1
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e000      	b.n	800709a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007098:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	40012c00 	.word	0x40012c00
 80070ac:	40000400 	.word	0x40000400
 80070b0:	40000800 	.word	0x40000800
 80070b4:	40000c00 	.word	0x40000c00
 80070b8:	40013400 	.word	0x40013400
 80070bc:	40014000 	.word	0x40014000
 80070c0:	00010007 	.word	0x00010007

080070c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d020      	beq.n	8007128 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f003 0302 	and.w	r3, r3, #2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01b      	beq.n	8007128 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0202 	mvn.w	r2, #2
 80070f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f9ad 	bl	800746e <HAL_TIM_IC_CaptureCallback>
 8007114:	e005      	b.n	8007122 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f99f 	bl	800745a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f9b0 	bl	8007482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b00      	cmp	r3, #0
 8007130:	d020      	beq.n	8007174 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01b      	beq.n	8007174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f06f 0204 	mvn.w	r2, #4
 8007144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2202      	movs	r2, #2
 800714a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f987 	bl	800746e <HAL_TIM_IC_CaptureCallback>
 8007160:	e005      	b.n	800716e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f979 	bl	800745a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f98a 	bl	8007482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d020      	beq.n	80071c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f003 0308 	and.w	r3, r3, #8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01b      	beq.n	80071c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f06f 0208 	mvn.w	r2, #8
 8007190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2204      	movs	r2, #4
 8007196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	f003 0303 	and.w	r3, r3, #3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f961 	bl	800746e <HAL_TIM_IC_CaptureCallback>
 80071ac:	e005      	b.n	80071ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f953 	bl	800745a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f964 	bl	8007482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 0310 	and.w	r3, r3, #16
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d020      	beq.n	800720c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f003 0310 	and.w	r3, r3, #16
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01b      	beq.n	800720c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0210 	mvn.w	r2, #16
 80071dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2208      	movs	r2, #8
 80071e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f93b 	bl	800746e <HAL_TIM_IC_CaptureCallback>
 80071f8:	e005      	b.n	8007206 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f92d 	bl	800745a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f93e 	bl	8007482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00c      	beq.n	8007230 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f06f 0201 	mvn.w	r2, #1
 8007228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7f9 ff64 	bl	80010f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00c      	beq.n	8007254 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800724c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 faf2 	bl	8007838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00c      	beq.n	8007278 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007264:	2b00      	cmp	r3, #0
 8007266:	d007      	beq.n	8007278 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 faea 	bl	800784c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00c      	beq.n	800729c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f8fd 	bl	8007496 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f003 0320 	and.w	r3, r3, #32
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00c      	beq.n	80072c0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d007      	beq.n	80072c0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0220 	mvn.w	r2, #32
 80072b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fab2 	bl	8007824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072c0:	bf00      	nop
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_TIM_ConfigClockSource+0x1c>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e0b6      	b.n	8007452 <HAL_TIM_ConfigClockSource+0x18a>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007302:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800730e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007320:	d03e      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0xd8>
 8007322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007326:	f200 8087 	bhi.w	8007438 <HAL_TIM_ConfigClockSource+0x170>
 800732a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800732e:	f000 8086 	beq.w	800743e <HAL_TIM_ConfigClockSource+0x176>
 8007332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007336:	d87f      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x170>
 8007338:	2b70      	cmp	r3, #112	@ 0x70
 800733a:	d01a      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0xaa>
 800733c:	2b70      	cmp	r3, #112	@ 0x70
 800733e:	d87b      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x170>
 8007340:	2b60      	cmp	r3, #96	@ 0x60
 8007342:	d050      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x11e>
 8007344:	2b60      	cmp	r3, #96	@ 0x60
 8007346:	d877      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x170>
 8007348:	2b50      	cmp	r3, #80	@ 0x50
 800734a:	d03c      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0xfe>
 800734c:	2b50      	cmp	r3, #80	@ 0x50
 800734e:	d873      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x170>
 8007350:	2b40      	cmp	r3, #64	@ 0x40
 8007352:	d058      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0x13e>
 8007354:	2b40      	cmp	r3, #64	@ 0x40
 8007356:	d86f      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x170>
 8007358:	2b30      	cmp	r3, #48	@ 0x30
 800735a:	d064      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15e>
 800735c:	2b30      	cmp	r3, #48	@ 0x30
 800735e:	d86b      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x170>
 8007360:	2b20      	cmp	r3, #32
 8007362:	d060      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15e>
 8007364:	2b20      	cmp	r3, #32
 8007366:	d867      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x170>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d05c      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15e>
 800736c:	2b10      	cmp	r3, #16
 800736e:	d05a      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15e>
 8007370:	e062      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007382:	f000 f9a7 	bl	80076d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	609a      	str	r2, [r3, #8]
      break;
 800739e:	e04f      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073b0:	f000 f990 	bl	80076d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073c2:	609a      	str	r2, [r3, #8]
      break;
 80073c4:	e03c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d2:	461a      	mov	r2, r3
 80073d4:	f000 f904 	bl	80075e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2150      	movs	r1, #80	@ 0x50
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f95d 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 80073e4:	e02c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073f2:	461a      	mov	r2, r3
 80073f4:	f000 f923 	bl	800763e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2160      	movs	r1, #96	@ 0x60
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 f94d 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8007404:	e01c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007412:	461a      	mov	r2, r3
 8007414:	f000 f8e4 	bl	80075e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2140      	movs	r1, #64	@ 0x40
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f93d 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8007424:	e00c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f000 f934 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8007436:	e003      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
      break;
 800743c:	e000      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800743e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
	...

080074ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a40      	ldr	r2, [pc, #256]	@ (80075c0 <TIM_Base_SetConfig+0x114>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ca:	d00f      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a3d      	ldr	r2, [pc, #244]	@ (80075c4 <TIM_Base_SetConfig+0x118>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00b      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a3c      	ldr	r2, [pc, #240]	@ (80075c8 <TIM_Base_SetConfig+0x11c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d007      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a3b      	ldr	r2, [pc, #236]	@ (80075cc <TIM_Base_SetConfig+0x120>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_Base_SetConfig+0x40>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a3a      	ldr	r2, [pc, #232]	@ (80075d0 <TIM_Base_SetConfig+0x124>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d108      	bne.n	80074fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2f      	ldr	r2, [pc, #188]	@ (80075c0 <TIM_Base_SetConfig+0x114>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01f      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800750c:	d01b      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a2c      	ldr	r2, [pc, #176]	@ (80075c4 <TIM_Base_SetConfig+0x118>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d017      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a2b      	ldr	r2, [pc, #172]	@ (80075c8 <TIM_Base_SetConfig+0x11c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d013      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a2a      	ldr	r2, [pc, #168]	@ (80075cc <TIM_Base_SetConfig+0x120>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00f      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a29      	ldr	r2, [pc, #164]	@ (80075d0 <TIM_Base_SetConfig+0x124>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00b      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a28      	ldr	r2, [pc, #160]	@ (80075d4 <TIM_Base_SetConfig+0x128>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d007      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a27      	ldr	r2, [pc, #156]	@ (80075d8 <TIM_Base_SetConfig+0x12c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_Base_SetConfig+0x9a>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a26      	ldr	r2, [pc, #152]	@ (80075dc <TIM_Base_SetConfig+0x130>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d108      	bne.n	8007558 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800754c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a10      	ldr	r2, [pc, #64]	@ (80075c0 <TIM_Base_SetConfig+0x114>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00f      	beq.n	80075a4 <TIM_Base_SetConfig+0xf8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a12      	ldr	r2, [pc, #72]	@ (80075d0 <TIM_Base_SetConfig+0x124>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00b      	beq.n	80075a4 <TIM_Base_SetConfig+0xf8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a11      	ldr	r2, [pc, #68]	@ (80075d4 <TIM_Base_SetConfig+0x128>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d007      	beq.n	80075a4 <TIM_Base_SetConfig+0xf8>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a10      	ldr	r2, [pc, #64]	@ (80075d8 <TIM_Base_SetConfig+0x12c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d003      	beq.n	80075a4 <TIM_Base_SetConfig+0xf8>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a0f      	ldr	r2, [pc, #60]	@ (80075dc <TIM_Base_SetConfig+0x130>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d103      	bne.n	80075ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	691a      	ldr	r2, [r3, #16]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	615a      	str	r2, [r3, #20]
}
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	40012c00 	.word	0x40012c00
 80075c4:	40000400 	.word	0x40000400
 80075c8:	40000800 	.word	0x40000800
 80075cc:	40000c00 	.word	0x40000c00
 80075d0:	40013400 	.word	0x40013400
 80075d4:	40014000 	.word	0x40014000
 80075d8:	40014400 	.word	0x40014400
 80075dc:	40014800 	.word	0x40014800

080075e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0201 	bic.w	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800760a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f023 030a 	bic.w	r3, r3, #10
 800761c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	621a      	str	r2, [r3, #32]
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800763e:	b480      	push	{r7}
 8007640:	b087      	sub	sp, #28
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	f023 0210 	bic.w	r2, r3, #16
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	031b      	lsls	r3, r3, #12
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	4313      	orrs	r3, r2
 8007672:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800767a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	621a      	str	r2, [r3, #32]
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f043 0307 	orr.w	r3, r3, #7
 80076c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	609a      	str	r2, [r3, #8]
}
 80076c8:	bf00      	nop
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	021a      	lsls	r2, r3, #8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	609a      	str	r2, [r3, #8]
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007728:	2302      	movs	r3, #2
 800772a:	e068      	b.n	80077fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a2e      	ldr	r2, [pc, #184]	@ (800780c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a2d      	ldr	r2, [pc, #180]	@ (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d108      	bne.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007766:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007778:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a1e      	ldr	r2, [pc, #120]	@ (800780c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d01d      	beq.n	80077d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800779e:	d018      	beq.n	80077d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d013      	beq.n	80077d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007818 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d00e      	beq.n	80077d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a18      	ldr	r2, [pc, #96]	@ (800781c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d009      	beq.n	80077d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a13      	ldr	r2, [pc, #76]	@ (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d004      	beq.n	80077d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a14      	ldr	r2, [pc, #80]	@ (8007820 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d10c      	bne.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40012c00 	.word	0x40012c00
 8007810:	40013400 	.word	0x40013400
 8007814:	40000400 	.word	0x40000400
 8007818:	40000800 	.word	0x40000800
 800781c:	40000c00 	.word	0x40000c00
 8007820:	40014000 	.word	0x40014000

08007824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e042      	b.n	80078f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007878:	2b00      	cmp	r3, #0
 800787a:	d106      	bne.n	800788a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7fa f8ab 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2224      	movs	r2, #36	@ 0x24
 800788e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0201 	bic.w	r2, r2, #1
 80078a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 ff42 	bl	8008734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fc43 	bl	800813c <UART_SetConfig>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e01b      	b.n	80078f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689a      	ldr	r2, [r3, #8]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 0201 	orr.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 ffc1 	bl	8008878 <UART_CheckIdleState>
 80078f6:	4603      	mov	r3, r0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08a      	sub	sp, #40	@ 0x28
 8007904:	af02      	add	r7, sp, #8
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	4613      	mov	r3, r2
 800790e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007916:	2b20      	cmp	r3, #32
 8007918:	d17b      	bne.n	8007a12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <HAL_UART_Transmit+0x26>
 8007920:	88fb      	ldrh	r3, [r7, #6]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e074      	b.n	8007a14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2221      	movs	r2, #33	@ 0x21
 8007936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800793a:	f7fa f991 	bl	8001c60 <HAL_GetTick>
 800793e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007958:	d108      	bne.n	800796c <HAL_UART_Transmit+0x6c>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d104      	bne.n	800796c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	61bb      	str	r3, [r7, #24]
 800796a:	e003      	b.n	8007974 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007974:	e030      	b.n	80079d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2200      	movs	r2, #0
 800797e:	2180      	movs	r1, #128	@ 0x80
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f001 f823 	bl	80089cc <UART_WaitOnFlagUntilTimeout>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2220      	movs	r2, #32
 8007990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e03d      	b.n	8007a14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10b      	bne.n	80079b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	881a      	ldrh	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079aa:	b292      	uxth	r2, r2
 80079ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	3302      	adds	r3, #2
 80079b2:	61bb      	str	r3, [r7, #24]
 80079b4:	e007      	b.n	80079c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	781a      	ldrb	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	3301      	adds	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1c8      	bne.n	8007976 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2200      	movs	r2, #0
 80079ec:	2140      	movs	r1, #64	@ 0x40
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 ffec 	bl	80089cc <UART_WaitOnFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d005      	beq.n	8007a06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e006      	b.n	8007a14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e000      	b.n	8007a14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007a12:	2302      	movs	r3, #2
  }
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3720      	adds	r7, #32
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	@ 0x28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d137      	bne.n	8007aa4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <HAL_UART_Receive_IT+0x24>
 8007a3a:	88fb      	ldrh	r3, [r7, #6]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e030      	b.n	8007aa6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a18      	ldr	r2, [pc, #96]	@ (8007ab0 <HAL_UART_Receive_IT+0x94>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d01f      	beq.n	8007a94 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d018      	beq.n	8007a94 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a80:	623b      	str	r3, [r7, #32]
 8007a82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	69f9      	ldr	r1, [r7, #28]
 8007a86:	6a3a      	ldr	r2, [r7, #32]
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e6      	bne.n	8007a62 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a94:	88fb      	ldrh	r3, [r7, #6]
 8007a96:	461a      	mov	r2, r3
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 fffe 	bl	8008a9c <UART_Start_Receive_IT>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	e000      	b.n	8007aa6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007aa4:	2302      	movs	r3, #2
  }
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3728      	adds	r7, #40	@ 0x28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	40008000 	.word	0x40008000

08007ab4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b0ba      	sub	sp, #232	@ 0xe8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ada:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007ade:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d11b      	bne.n	8007b28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d015      	beq.n	8007b28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b00:	f003 0320 	and.w	r3, r3, #32
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d105      	bne.n	8007b14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d009      	beq.n	8007b28 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 82e3 	beq.w	80080e4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
      }
      return;
 8007b26:	e2dd      	b.n	80080e4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8123 	beq.w	8007d78 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b36:	4b8d      	ldr	r3, [pc, #564]	@ (8007d6c <HAL_UART_IRQHandler+0x2b8>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b42:	4b8b      	ldr	r3, [pc, #556]	@ (8007d70 <HAL_UART_IRQHandler+0x2bc>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 8116 	beq.w	8007d78 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d011      	beq.n	8007b7c <HAL_UART_IRQHandler+0xc8>
 8007b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b72:	f043 0201 	orr.w	r2, r3, #1
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d011      	beq.n	8007bac <HAL_UART_IRQHandler+0xf8>
 8007b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba2:	f043 0204 	orr.w	r2, r3, #4
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d011      	beq.n	8007bdc <HAL_UART_IRQHandler+0x128>
 8007bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00b      	beq.n	8007bdc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2204      	movs	r2, #4
 8007bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd2:	f043 0202 	orr.w	r2, r3, #2
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d017      	beq.n	8007c18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bec:	f003 0320 	and.w	r3, r3, #32
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d105      	bne.n	8007c00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007bf4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007bf8:	4b5c      	ldr	r3, [pc, #368]	@ (8007d6c <HAL_UART_IRQHandler+0x2b8>)
 8007bfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00b      	beq.n	8007c18 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2208      	movs	r2, #8
 8007c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c0e:	f043 0208 	orr.w	r2, r3, #8
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d012      	beq.n	8007c4a <HAL_UART_IRQHandler+0x196>
 8007c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00c      	beq.n	8007c4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c40:	f043 0220 	orr.w	r2, r3, #32
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 8249 	beq.w	80080e8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d013      	beq.n	8007c8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d105      	bne.n	8007c7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d007      	beq.n	8007c8a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ca0:	d005      	beq.n	8007cae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ca6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d054      	beq.n	8007d58 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f001 f816 	bl	8008ce0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cbe:	2b40      	cmp	r3, #64	@ 0x40
 8007cc0:	d146      	bne.n	8007d50 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007cee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1d9      	bne.n	8007cc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d017      	beq.n	8007d48 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d1e:	4a15      	ldr	r2, [pc, #84]	@ (8007d74 <HAL_UART_IRQHandler+0x2c0>)
 8007d20:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fb fe34 	bl	8003996 <HAL_DMA_Abort_IT>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d019      	beq.n	8007d68 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007d42:	4610      	mov	r0, r2
 8007d44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d46:	e00f      	b.n	8007d68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f9e1 	bl	8008110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d4e:	e00b      	b.n	8007d68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f9dd 	bl	8008110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d56:	e007      	b.n	8007d68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f9d9 	bl	8008110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007d66:	e1bf      	b.n	80080e8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d68:	bf00      	nop
    return;
 8007d6a:	e1bd      	b.n	80080e8 <HAL_UART_IRQHandler+0x634>
 8007d6c:	10000001 	.word	0x10000001
 8007d70:	04000120 	.word	0x04000120
 8007d74:	08008dad 	.word	0x08008dad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	f040 8153 	bne.w	8008028 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d86:	f003 0310 	and.w	r3, r3, #16
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 814c 	beq.w	8008028 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d94:	f003 0310 	and.w	r3, r3, #16
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8145 	beq.w	8008028 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2210      	movs	r2, #16
 8007da4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db0:	2b40      	cmp	r3, #64	@ 0x40
 8007db2:	f040 80bb 	bne.w	8007f2c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007dc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 818f 	beq.w	80080ec <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007dd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	f080 8187 	bcs.w	80080ec <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007de4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0320 	and.w	r3, r3, #32
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 8087 	bne.w	8007f0a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e2a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e36:	e841 2300 	strex	r3, r2, [r1]
 8007e3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1da      	bne.n	8007dfc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e58:	f023 0301 	bic.w	r3, r3, #1
 8007e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3308      	adds	r3, #8
 8007e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e1      	bne.n	8007e46 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ea6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007eac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007eae:	e841 2300 	strex	r3, r2, [r1]
 8007eb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1e3      	bne.n	8007e82 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ed8:	f023 0310 	bic.w	r3, r3, #16
 8007edc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007eec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ef0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e4      	bne.n	8007ec8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fb fcea 	bl	80038de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f8fd 	bl	8008124 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f2a:	e0df      	b.n	80080ec <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 80d1 	beq.w	80080f0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007f4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 80cc 	beq.w	80080f0 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f7c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f82:	e841 2300 	strex	r3, r2, [r1]
 8007f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1e4      	bne.n	8007f58 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fa4:	f023 0301 	bic.w	r3, r3, #1
 8007fa8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007fb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e1      	bne.n	8007f8e <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	e853 3f00 	ldrex	r3, [r3]
 8007fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0310 	bic.w	r3, r3, #16
 8007ff2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008000:	61fb      	str	r3, [r7, #28]
 8008002:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	69b9      	ldr	r1, [r7, #24]
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	617b      	str	r3, [r7, #20]
   return(result);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e4      	bne.n	8007fde <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800801a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f87f 	bl	8008124 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008026:	e063      	b.n	80080f0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00e      	beq.n	8008052 <HAL_UART_IRQHandler+0x59e>
 8008034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008038:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d008      	beq.n	8008052 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 fc14 	bl	8009878 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008050:	e051      	b.n	80080f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800805a:	2b00      	cmp	r3, #0
 800805c:	d014      	beq.n	8008088 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800805e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800806a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800806e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d008      	beq.n	8008088 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800807a:	2b00      	cmp	r3, #0
 800807c:	d03a      	beq.n	80080f4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
    }
    return;
 8008086:	e035      	b.n	80080f4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800808c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008090:	2b00      	cmp	r3, #0
 8008092:	d009      	beq.n	80080a8 <HAL_UART_IRQHandler+0x5f4>
 8008094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fe99 	bl	8008dd8 <UART_EndTransmit_IT>
    return;
 80080a6:	e026      	b.n	80080f6 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d009      	beq.n	80080c8 <HAL_UART_IRQHandler+0x614>
 80080b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 fbed 	bl	80098a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080c6:	e016      	b.n	80080f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d010      	beq.n	80080f6 <HAL_UART_IRQHandler+0x642>
 80080d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	da0c      	bge.n	80080f6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 fbd5 	bl	800988c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080e2:	e008      	b.n	80080f6 <HAL_UART_IRQHandler+0x642>
      return;
 80080e4:	bf00      	nop
 80080e6:	e006      	b.n	80080f6 <HAL_UART_IRQHandler+0x642>
    return;
 80080e8:	bf00      	nop
 80080ea:	e004      	b.n	80080f6 <HAL_UART_IRQHandler+0x642>
      return;
 80080ec:	bf00      	nop
 80080ee:	e002      	b.n	80080f6 <HAL_UART_IRQHandler+0x642>
      return;
 80080f0:	bf00      	nop
 80080f2:	e000      	b.n	80080f6 <HAL_UART_IRQHandler+0x642>
    return;
 80080f4:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80080f6:	37e8      	adds	r7, #232	@ 0xe8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800813c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008140:	b08c      	sub	sp, #48	@ 0x30
 8008142:	af00      	add	r7, sp, #0
 8008144:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	431a      	orrs	r2, r3
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	431a      	orrs	r2, r3
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	4313      	orrs	r3, r2
 8008162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	4baa      	ldr	r3, [pc, #680]	@ (8008414 <UART_SetConfig+0x2d8>)
 800816c:	4013      	ands	r3, r2
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	6812      	ldr	r2, [r2, #0]
 8008172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008174:	430b      	orrs	r3, r1
 8008176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	68da      	ldr	r2, [r3, #12]
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a9f      	ldr	r2, [pc, #636]	@ (8008418 <UART_SetConfig+0x2dc>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d004      	beq.n	80081a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081a4:	4313      	orrs	r3, r2
 80081a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80081b2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	6812      	ldr	r2, [r2, #0]
 80081ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081bc:	430b      	orrs	r3, r1
 80081be:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c6:	f023 010f 	bic.w	r1, r3, #15
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a90      	ldr	r2, [pc, #576]	@ (800841c <UART_SetConfig+0x2e0>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d125      	bne.n	800822c <UART_SetConfig+0xf0>
 80081e0:	4b8f      	ldr	r3, [pc, #572]	@ (8008420 <UART_SetConfig+0x2e4>)
 80081e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d81a      	bhi.n	8008224 <UART_SetConfig+0xe8>
 80081ee:	a201      	add	r2, pc, #4	@ (adr r2, 80081f4 <UART_SetConfig+0xb8>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	08008205 	.word	0x08008205
 80081f8:	08008215 	.word	0x08008215
 80081fc:	0800820d 	.word	0x0800820d
 8008200:	0800821d 	.word	0x0800821d
 8008204:	2301      	movs	r3, #1
 8008206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800820a:	e116      	b.n	800843a <UART_SetConfig+0x2fe>
 800820c:	2302      	movs	r3, #2
 800820e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008212:	e112      	b.n	800843a <UART_SetConfig+0x2fe>
 8008214:	2304      	movs	r3, #4
 8008216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800821a:	e10e      	b.n	800843a <UART_SetConfig+0x2fe>
 800821c:	2308      	movs	r3, #8
 800821e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008222:	e10a      	b.n	800843a <UART_SetConfig+0x2fe>
 8008224:	2310      	movs	r3, #16
 8008226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800822a:	e106      	b.n	800843a <UART_SetConfig+0x2fe>
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a7c      	ldr	r2, [pc, #496]	@ (8008424 <UART_SetConfig+0x2e8>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d138      	bne.n	80082a8 <UART_SetConfig+0x16c>
 8008236:	4b7a      	ldr	r3, [pc, #488]	@ (8008420 <UART_SetConfig+0x2e4>)
 8008238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800823c:	f003 030c 	and.w	r3, r3, #12
 8008240:	2b0c      	cmp	r3, #12
 8008242:	d82d      	bhi.n	80082a0 <UART_SetConfig+0x164>
 8008244:	a201      	add	r2, pc, #4	@ (adr r2, 800824c <UART_SetConfig+0x110>)
 8008246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824a:	bf00      	nop
 800824c:	08008281 	.word	0x08008281
 8008250:	080082a1 	.word	0x080082a1
 8008254:	080082a1 	.word	0x080082a1
 8008258:	080082a1 	.word	0x080082a1
 800825c:	08008291 	.word	0x08008291
 8008260:	080082a1 	.word	0x080082a1
 8008264:	080082a1 	.word	0x080082a1
 8008268:	080082a1 	.word	0x080082a1
 800826c:	08008289 	.word	0x08008289
 8008270:	080082a1 	.word	0x080082a1
 8008274:	080082a1 	.word	0x080082a1
 8008278:	080082a1 	.word	0x080082a1
 800827c:	08008299 	.word	0x08008299
 8008280:	2300      	movs	r3, #0
 8008282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008286:	e0d8      	b.n	800843a <UART_SetConfig+0x2fe>
 8008288:	2302      	movs	r3, #2
 800828a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800828e:	e0d4      	b.n	800843a <UART_SetConfig+0x2fe>
 8008290:	2304      	movs	r3, #4
 8008292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008296:	e0d0      	b.n	800843a <UART_SetConfig+0x2fe>
 8008298:	2308      	movs	r3, #8
 800829a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800829e:	e0cc      	b.n	800843a <UART_SetConfig+0x2fe>
 80082a0:	2310      	movs	r3, #16
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a6:	e0c8      	b.n	800843a <UART_SetConfig+0x2fe>
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a5e      	ldr	r2, [pc, #376]	@ (8008428 <UART_SetConfig+0x2ec>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d125      	bne.n	80082fe <UART_SetConfig+0x1c2>
 80082b2:	4b5b      	ldr	r3, [pc, #364]	@ (8008420 <UART_SetConfig+0x2e4>)
 80082b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80082bc:	2b30      	cmp	r3, #48	@ 0x30
 80082be:	d016      	beq.n	80082ee <UART_SetConfig+0x1b2>
 80082c0:	2b30      	cmp	r3, #48	@ 0x30
 80082c2:	d818      	bhi.n	80082f6 <UART_SetConfig+0x1ba>
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d00a      	beq.n	80082de <UART_SetConfig+0x1a2>
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	d814      	bhi.n	80082f6 <UART_SetConfig+0x1ba>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <UART_SetConfig+0x19a>
 80082d0:	2b10      	cmp	r3, #16
 80082d2:	d008      	beq.n	80082e6 <UART_SetConfig+0x1aa>
 80082d4:	e00f      	b.n	80082f6 <UART_SetConfig+0x1ba>
 80082d6:	2300      	movs	r3, #0
 80082d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082dc:	e0ad      	b.n	800843a <UART_SetConfig+0x2fe>
 80082de:	2302      	movs	r3, #2
 80082e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082e4:	e0a9      	b.n	800843a <UART_SetConfig+0x2fe>
 80082e6:	2304      	movs	r3, #4
 80082e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ec:	e0a5      	b.n	800843a <UART_SetConfig+0x2fe>
 80082ee:	2308      	movs	r3, #8
 80082f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082f4:	e0a1      	b.n	800843a <UART_SetConfig+0x2fe>
 80082f6:	2310      	movs	r3, #16
 80082f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082fc:	e09d      	b.n	800843a <UART_SetConfig+0x2fe>
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a4a      	ldr	r2, [pc, #296]	@ (800842c <UART_SetConfig+0x2f0>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d125      	bne.n	8008354 <UART_SetConfig+0x218>
 8008308:	4b45      	ldr	r3, [pc, #276]	@ (8008420 <UART_SetConfig+0x2e4>)
 800830a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800830e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008312:	2bc0      	cmp	r3, #192	@ 0xc0
 8008314:	d016      	beq.n	8008344 <UART_SetConfig+0x208>
 8008316:	2bc0      	cmp	r3, #192	@ 0xc0
 8008318:	d818      	bhi.n	800834c <UART_SetConfig+0x210>
 800831a:	2b80      	cmp	r3, #128	@ 0x80
 800831c:	d00a      	beq.n	8008334 <UART_SetConfig+0x1f8>
 800831e:	2b80      	cmp	r3, #128	@ 0x80
 8008320:	d814      	bhi.n	800834c <UART_SetConfig+0x210>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <UART_SetConfig+0x1f0>
 8008326:	2b40      	cmp	r3, #64	@ 0x40
 8008328:	d008      	beq.n	800833c <UART_SetConfig+0x200>
 800832a:	e00f      	b.n	800834c <UART_SetConfig+0x210>
 800832c:	2300      	movs	r3, #0
 800832e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008332:	e082      	b.n	800843a <UART_SetConfig+0x2fe>
 8008334:	2302      	movs	r3, #2
 8008336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800833a:	e07e      	b.n	800843a <UART_SetConfig+0x2fe>
 800833c:	2304      	movs	r3, #4
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008342:	e07a      	b.n	800843a <UART_SetConfig+0x2fe>
 8008344:	2308      	movs	r3, #8
 8008346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800834a:	e076      	b.n	800843a <UART_SetConfig+0x2fe>
 800834c:	2310      	movs	r3, #16
 800834e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008352:	e072      	b.n	800843a <UART_SetConfig+0x2fe>
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a35      	ldr	r2, [pc, #212]	@ (8008430 <UART_SetConfig+0x2f4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d12a      	bne.n	80083b4 <UART_SetConfig+0x278>
 800835e:	4b30      	ldr	r3, [pc, #192]	@ (8008420 <UART_SetConfig+0x2e4>)
 8008360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008364:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008368:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800836c:	d01a      	beq.n	80083a4 <UART_SetConfig+0x268>
 800836e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008372:	d81b      	bhi.n	80083ac <UART_SetConfig+0x270>
 8008374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008378:	d00c      	beq.n	8008394 <UART_SetConfig+0x258>
 800837a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800837e:	d815      	bhi.n	80083ac <UART_SetConfig+0x270>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <UART_SetConfig+0x250>
 8008384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008388:	d008      	beq.n	800839c <UART_SetConfig+0x260>
 800838a:	e00f      	b.n	80083ac <UART_SetConfig+0x270>
 800838c:	2300      	movs	r3, #0
 800838e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008392:	e052      	b.n	800843a <UART_SetConfig+0x2fe>
 8008394:	2302      	movs	r3, #2
 8008396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800839a:	e04e      	b.n	800843a <UART_SetConfig+0x2fe>
 800839c:	2304      	movs	r3, #4
 800839e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083a2:	e04a      	b.n	800843a <UART_SetConfig+0x2fe>
 80083a4:	2308      	movs	r3, #8
 80083a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083aa:	e046      	b.n	800843a <UART_SetConfig+0x2fe>
 80083ac:	2310      	movs	r3, #16
 80083ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083b2:	e042      	b.n	800843a <UART_SetConfig+0x2fe>
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a17      	ldr	r2, [pc, #92]	@ (8008418 <UART_SetConfig+0x2dc>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d13a      	bne.n	8008434 <UART_SetConfig+0x2f8>
 80083be:	4b18      	ldr	r3, [pc, #96]	@ (8008420 <UART_SetConfig+0x2e4>)
 80083c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80083c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083cc:	d01a      	beq.n	8008404 <UART_SetConfig+0x2c8>
 80083ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083d2:	d81b      	bhi.n	800840c <UART_SetConfig+0x2d0>
 80083d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083d8:	d00c      	beq.n	80083f4 <UART_SetConfig+0x2b8>
 80083da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083de:	d815      	bhi.n	800840c <UART_SetConfig+0x2d0>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <UART_SetConfig+0x2b0>
 80083e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083e8:	d008      	beq.n	80083fc <UART_SetConfig+0x2c0>
 80083ea:	e00f      	b.n	800840c <UART_SetConfig+0x2d0>
 80083ec:	2300      	movs	r3, #0
 80083ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083f2:	e022      	b.n	800843a <UART_SetConfig+0x2fe>
 80083f4:	2302      	movs	r3, #2
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083fa:	e01e      	b.n	800843a <UART_SetConfig+0x2fe>
 80083fc:	2304      	movs	r3, #4
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008402:	e01a      	b.n	800843a <UART_SetConfig+0x2fe>
 8008404:	2308      	movs	r3, #8
 8008406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800840a:	e016      	b.n	800843a <UART_SetConfig+0x2fe>
 800840c:	2310      	movs	r3, #16
 800840e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008412:	e012      	b.n	800843a <UART_SetConfig+0x2fe>
 8008414:	cfff69f3 	.word	0xcfff69f3
 8008418:	40008000 	.word	0x40008000
 800841c:	40013800 	.word	0x40013800
 8008420:	40021000 	.word	0x40021000
 8008424:	40004400 	.word	0x40004400
 8008428:	40004800 	.word	0x40004800
 800842c:	40004c00 	.word	0x40004c00
 8008430:	40005000 	.word	0x40005000
 8008434:	2310      	movs	r3, #16
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4aae      	ldr	r2, [pc, #696]	@ (80086f8 <UART_SetConfig+0x5bc>)
 8008440:	4293      	cmp	r3, r2
 8008442:	f040 8097 	bne.w	8008574 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008446:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800844a:	2b08      	cmp	r3, #8
 800844c:	d823      	bhi.n	8008496 <UART_SetConfig+0x35a>
 800844e:	a201      	add	r2, pc, #4	@ (adr r2, 8008454 <UART_SetConfig+0x318>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008479 	.word	0x08008479
 8008458:	08008497 	.word	0x08008497
 800845c:	08008481 	.word	0x08008481
 8008460:	08008497 	.word	0x08008497
 8008464:	08008487 	.word	0x08008487
 8008468:	08008497 	.word	0x08008497
 800846c:	08008497 	.word	0x08008497
 8008470:	08008497 	.word	0x08008497
 8008474:	0800848f 	.word	0x0800848f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008478:	f7fd fef0 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 800847c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800847e:	e010      	b.n	80084a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008480:	4b9e      	ldr	r3, [pc, #632]	@ (80086fc <UART_SetConfig+0x5c0>)
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008484:	e00d      	b.n	80084a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008486:	f7fd fe51 	bl	800612c <HAL_RCC_GetSysClockFreq>
 800848a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800848c:	e009      	b.n	80084a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800848e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008492:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008494:	e005      	b.n	80084a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8130 	beq.w	800870a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ae:	4a94      	ldr	r2, [pc, #592]	@ (8008700 <UART_SetConfig+0x5c4>)
 80084b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084b4:	461a      	mov	r2, r3
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	4613      	mov	r3, r2
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	4413      	add	r3, r2
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d305      	bcc.n	80084da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d903      	bls.n	80084e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084e0:	e113      	b.n	800870a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	2200      	movs	r2, #0
 80084e6:	60bb      	str	r3, [r7, #8]
 80084e8:	60fa      	str	r2, [r7, #12]
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ee:	4a84      	ldr	r2, [pc, #528]	@ (8008700 <UART_SetConfig+0x5c4>)
 80084f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2200      	movs	r2, #0
 80084f8:	603b      	str	r3, [r7, #0]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008500:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008504:	f7f7 fe7a 	bl	80001fc <__aeabi_uldivmod>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4610      	mov	r0, r2
 800850e:	4619      	mov	r1, r3
 8008510:	f04f 0200 	mov.w	r2, #0
 8008514:	f04f 0300 	mov.w	r3, #0
 8008518:	020b      	lsls	r3, r1, #8
 800851a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800851e:	0202      	lsls	r2, r0, #8
 8008520:	6979      	ldr	r1, [r7, #20]
 8008522:	6849      	ldr	r1, [r1, #4]
 8008524:	0849      	lsrs	r1, r1, #1
 8008526:	2000      	movs	r0, #0
 8008528:	460c      	mov	r4, r1
 800852a:	4605      	mov	r5, r0
 800852c:	eb12 0804 	adds.w	r8, r2, r4
 8008530:	eb43 0905 	adc.w	r9, r3, r5
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	469a      	mov	sl, r3
 800853c:	4693      	mov	fp, r2
 800853e:	4652      	mov	r2, sl
 8008540:	465b      	mov	r3, fp
 8008542:	4640      	mov	r0, r8
 8008544:	4649      	mov	r1, r9
 8008546:	f7f7 fe59 	bl	80001fc <__aeabi_uldivmod>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4613      	mov	r3, r2
 8008550:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008558:	d308      	bcc.n	800856c <UART_SetConfig+0x430>
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008560:	d204      	bcs.n	800856c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6a3a      	ldr	r2, [r7, #32]
 8008568:	60da      	str	r2, [r3, #12]
 800856a:	e0ce      	b.n	800870a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008572:	e0ca      	b.n	800870a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800857c:	d166      	bne.n	800864c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800857e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008582:	2b08      	cmp	r3, #8
 8008584:	d827      	bhi.n	80085d6 <UART_SetConfig+0x49a>
 8008586:	a201      	add	r2, pc, #4	@ (adr r2, 800858c <UART_SetConfig+0x450>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	080085b1 	.word	0x080085b1
 8008590:	080085b9 	.word	0x080085b9
 8008594:	080085c1 	.word	0x080085c1
 8008598:	080085d7 	.word	0x080085d7
 800859c:	080085c7 	.word	0x080085c7
 80085a0:	080085d7 	.word	0x080085d7
 80085a4:	080085d7 	.word	0x080085d7
 80085a8:	080085d7 	.word	0x080085d7
 80085ac:	080085cf 	.word	0x080085cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085b0:	f7fd fe54 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 80085b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085b6:	e014      	b.n	80085e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085b8:	f7fd fe66 	bl	8006288 <HAL_RCC_GetPCLK2Freq>
 80085bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085be:	e010      	b.n	80085e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085c0:	4b4e      	ldr	r3, [pc, #312]	@ (80086fc <UART_SetConfig+0x5c0>)
 80085c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085c4:	e00d      	b.n	80085e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085c6:	f7fd fdb1 	bl	800612c <HAL_RCC_GetSysClockFreq>
 80085ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085cc:	e009      	b.n	80085e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085d4:	e005      	b.n	80085e2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 8090 	beq.w	800870a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ee:	4a44      	ldr	r2, [pc, #272]	@ (8008700 <UART_SetConfig+0x5c4>)
 80085f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085f4:	461a      	mov	r2, r3
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80085fc:	005a      	lsls	r2, r3, #1
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	085b      	lsrs	r3, r3, #1
 8008604:	441a      	add	r2, r3
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	fbb2 f3f3 	udiv	r3, r2, r3
 800860e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	2b0f      	cmp	r3, #15
 8008614:	d916      	bls.n	8008644 <UART_SetConfig+0x508>
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800861c:	d212      	bcs.n	8008644 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f023 030f 	bic.w	r3, r3, #15
 8008626:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	085b      	lsrs	r3, r3, #1
 800862c:	b29b      	uxth	r3, r3
 800862e:	f003 0307 	and.w	r3, r3, #7
 8008632:	b29a      	uxth	r2, r3
 8008634:	8bfb      	ldrh	r3, [r7, #30]
 8008636:	4313      	orrs	r3, r2
 8008638:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	8bfa      	ldrh	r2, [r7, #30]
 8008640:	60da      	str	r2, [r3, #12]
 8008642:	e062      	b.n	800870a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800864a:	e05e      	b.n	800870a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800864c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008650:	2b08      	cmp	r3, #8
 8008652:	d828      	bhi.n	80086a6 <UART_SetConfig+0x56a>
 8008654:	a201      	add	r2, pc, #4	@ (adr r2, 800865c <UART_SetConfig+0x520>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	08008681 	.word	0x08008681
 8008660:	08008689 	.word	0x08008689
 8008664:	08008691 	.word	0x08008691
 8008668:	080086a7 	.word	0x080086a7
 800866c:	08008697 	.word	0x08008697
 8008670:	080086a7 	.word	0x080086a7
 8008674:	080086a7 	.word	0x080086a7
 8008678:	080086a7 	.word	0x080086a7
 800867c:	0800869f 	.word	0x0800869f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008680:	f7fd fdec 	bl	800625c <HAL_RCC_GetPCLK1Freq>
 8008684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008686:	e014      	b.n	80086b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008688:	f7fd fdfe 	bl	8006288 <HAL_RCC_GetPCLK2Freq>
 800868c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800868e:	e010      	b.n	80086b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008690:	4b1a      	ldr	r3, [pc, #104]	@ (80086fc <UART_SetConfig+0x5c0>)
 8008692:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008694:	e00d      	b.n	80086b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008696:	f7fd fd49 	bl	800612c <HAL_RCC_GetSysClockFreq>
 800869a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800869c:	e009      	b.n	80086b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800869e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086a4:	e005      	b.n	80086b2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80086b0:	bf00      	nop
    }

    if (pclk != 0U)
 80086b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d028      	beq.n	800870a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086bc:	4a10      	ldr	r2, [pc, #64]	@ (8008700 <UART_SetConfig+0x5c4>)
 80086be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086c2:	461a      	mov	r2, r3
 80086c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	085b      	lsrs	r3, r3, #1
 80086d0:	441a      	add	r2, r3
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086da:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	2b0f      	cmp	r3, #15
 80086e0:	d910      	bls.n	8008704 <UART_SetConfig+0x5c8>
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086e8:	d20c      	bcs.n	8008704 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60da      	str	r2, [r3, #12]
 80086f4:	e009      	b.n	800870a <UART_SetConfig+0x5ce>
 80086f6:	bf00      	nop
 80086f8:	40008000 	.word	0x40008000
 80086fc:	00f42400 	.word	0x00f42400
 8008700:	0800dd44 	.word	0x0800dd44
      }
      else
      {
        ret = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2201      	movs	r2, #1
 800870e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2201      	movs	r2, #1
 8008716:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2200      	movs	r2, #0
 800871e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2200      	movs	r2, #0
 8008724:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008726:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800872a:	4618      	mov	r0, r3
 800872c:	3730      	adds	r7, #48	@ 0x30
 800872e:	46bd      	mov	sp, r7
 8008730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008740:	f003 0308 	and.w	r3, r3, #8
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00a      	beq.n	800875e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00a      	beq.n	80087a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a6:	f003 0304 	and.w	r3, r3, #4
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	430a      	orrs	r2, r1
 80087c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00a      	beq.n	80087e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ea:	f003 0320 	and.w	r3, r3, #32
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00a      	beq.n	8008808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01a      	beq.n	800884a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008832:	d10a      	bne.n	800884a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	605a      	str	r2, [r3, #4]
  }
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b098      	sub	sp, #96	@ 0x60
 800887c:	af02      	add	r7, sp, #8
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008888:	f7f9 f9ea 	bl	8001c60 <HAL_GetTick>
 800888c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0308 	and.w	r3, r3, #8
 8008898:	2b08      	cmp	r3, #8
 800889a:	d12f      	bne.n	80088fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800889c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088a4:	2200      	movs	r2, #0
 80088a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f88e 	bl	80089cc <UART_WaitOnFlagUntilTimeout>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d022      	beq.n	80088fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	461a      	mov	r2, r3
 80088d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80088d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e6      	bne.n	80088b6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e063      	b.n	80089c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0304 	and.w	r3, r3, #4
 8008906:	2b04      	cmp	r3, #4
 8008908:	d149      	bne.n	800899e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800890a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008912:	2200      	movs	r2, #0
 8008914:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f857 	bl	80089cc <UART_WaitOnFlagUntilTimeout>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d03c      	beq.n	800899e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	623b      	str	r3, [r7, #32]
   return(result);
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008942:	633b      	str	r3, [r7, #48]	@ 0x30
 8008944:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e6      	bne.n	8008924 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3308      	adds	r3, #8
 800895c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	60fb      	str	r3, [r7, #12]
   return(result);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f023 0301 	bic.w	r3, r3, #1
 800896c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3308      	adds	r3, #8
 8008974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008976:	61fa      	str	r2, [r7, #28]
 8008978:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	69b9      	ldr	r1, [r7, #24]
 800897c:	69fa      	ldr	r2, [r7, #28]
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	617b      	str	r3, [r7, #20]
   return(result);
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e5      	bne.n	8008956 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e012      	b.n	80089c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3758      	adds	r7, #88	@ 0x58
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	4613      	mov	r3, r2
 80089da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089dc:	e049      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089e4:	d045      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089e6:	f7f9 f93b 	bl	8001c60 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d302      	bcc.n	80089fc <UART_WaitOnFlagUntilTimeout+0x30>
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e048      	b.n	8008a92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0304 	and.w	r3, r3, #4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d031      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d110      	bne.n	8008a3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2208      	movs	r2, #8
 8008a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 f95b 	bl	8008ce0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2208      	movs	r2, #8
 8008a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e029      	b.n	8008a92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a4c:	d111      	bne.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 f941 	bl	8008ce0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e00f      	b.n	8008a92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69da      	ldr	r2, [r3, #28]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	bf0c      	ite	eq
 8008a82:	2301      	moveq	r3, #1
 8008a84:	2300      	movne	r3, #0
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d0a6      	beq.n	80089de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b0a3      	sub	sp, #140	@ 0x8c
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	88fa      	ldrh	r2, [r7, #6]
 8008ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	88fa      	ldrh	r2, [r7, #6]
 8008abc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ace:	d10e      	bne.n	8008aee <UART_Start_Receive_IT+0x52>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d105      	bne.n	8008ae4 <UART_Start_Receive_IT+0x48>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008ade:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ae2:	e02d      	b.n	8008b40 <UART_Start_Receive_IT+0xa4>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	22ff      	movs	r2, #255	@ 0xff
 8008ae8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008aec:	e028      	b.n	8008b40 <UART_Start_Receive_IT+0xa4>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10d      	bne.n	8008b12 <UART_Start_Receive_IT+0x76>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d104      	bne.n	8008b08 <UART_Start_Receive_IT+0x6c>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	22ff      	movs	r2, #255	@ 0xff
 8008b02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b06:	e01b      	b.n	8008b40 <UART_Start_Receive_IT+0xa4>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	227f      	movs	r2, #127	@ 0x7f
 8008b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b10:	e016      	b.n	8008b40 <UART_Start_Receive_IT+0xa4>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b1a:	d10d      	bne.n	8008b38 <UART_Start_Receive_IT+0x9c>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d104      	bne.n	8008b2e <UART_Start_Receive_IT+0x92>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	227f      	movs	r2, #127	@ 0x7f
 8008b28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b2c:	e008      	b.n	8008b40 <UART_Start_Receive_IT+0xa4>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	223f      	movs	r2, #63	@ 0x3f
 8008b32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b36:	e003      	b.n	8008b40 <UART_Start_Receive_IT+0xa4>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2222      	movs	r2, #34	@ 0x22
 8008b4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3308      	adds	r3, #8
 8008b56:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008b60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b62:	f043 0301 	orr.w	r3, r3, #1
 8008b66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3308      	adds	r3, #8
 8008b70:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008b74:	673a      	str	r2, [r7, #112]	@ 0x70
 8008b76:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b78:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008b7a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008b7c:	e841 2300 	strex	r3, r2, [r1]
 8008b80:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008b82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e3      	bne.n	8008b50 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b90:	d14f      	bne.n	8008c32 <UART_Start_Receive_IT+0x196>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008b98:	88fa      	ldrh	r2, [r7, #6]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d349      	bcc.n	8008c32 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ba6:	d107      	bne.n	8008bb8 <UART_Start_Receive_IT+0x11c>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d103      	bne.n	8008bb8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4a47      	ldr	r2, [pc, #284]	@ (8008cd0 <UART_Start_Receive_IT+0x234>)
 8008bb4:	675a      	str	r2, [r3, #116]	@ 0x74
 8008bb6:	e002      	b.n	8008bbe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4a46      	ldr	r2, [pc, #280]	@ (8008cd4 <UART_Start_Receive_IT+0x238>)
 8008bbc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d01a      	beq.n	8008bfc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bea:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008bee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e4      	bne.n	8008bc6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3308      	adds	r3, #8
 8008c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3308      	adds	r3, #8
 8008c1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008c1c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008c1e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c24:	e841 2300 	strex	r3, r2, [r1]
 8008c28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1e5      	bne.n	8008bfc <UART_Start_Receive_IT+0x160>
 8008c30:	e046      	b.n	8008cc0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c3a:	d107      	bne.n	8008c4c <UART_Start_Receive_IT+0x1b0>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d103      	bne.n	8008c4c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4a24      	ldr	r2, [pc, #144]	@ (8008cd8 <UART_Start_Receive_IT+0x23c>)
 8008c48:	675a      	str	r2, [r3, #116]	@ 0x74
 8008c4a:	e002      	b.n	8008c52 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4a23      	ldr	r2, [pc, #140]	@ (8008cdc <UART_Start_Receive_IT+0x240>)
 8008c50:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d019      	beq.n	8008c8e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c62:	e853 3f00 	ldrex	r3, [r3]
 8008c66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008c6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	461a      	mov	r2, r3
 8008c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c7a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c80:	e841 2300 	strex	r3, r2, [r1]
 8008c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e6      	bne.n	8008c5a <UART_Start_Receive_IT+0x1be>
 8008c8c:	e018      	b.n	8008cc0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f043 0320 	orr.w	r3, r3, #32
 8008ca2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008cac:	623b      	str	r3, [r7, #32]
 8008cae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	69f9      	ldr	r1, [r7, #28]
 8008cb2:	6a3a      	ldr	r2, [r7, #32]
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e6      	bne.n	8008c8e <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	378c      	adds	r7, #140	@ 0x8c
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	0800950d 	.word	0x0800950d
 8008cd4:	080091a9 	.word	0x080091a9
 8008cd8:	08008fed 	.word	0x08008fed
 8008cdc:	08008e31 	.word	0x08008e31

08008ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b095      	sub	sp, #84	@ 0x54
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d06:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e6      	bne.n	8008ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3308      	adds	r3, #8
 8008d20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d30:	f023 0301 	bic.w	r3, r3, #1
 8008d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e3      	bne.n	8008d1a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d118      	bne.n	8008d8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f023 0310 	bic.w	r3, r3, #16
 8008d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	461a      	mov	r2, r3
 8008d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d78:	61bb      	str	r3, [r7, #24]
 8008d7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7c:	6979      	ldr	r1, [r7, #20]
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	e841 2300 	strex	r3, r2, [r1]
 8008d84:	613b      	str	r3, [r7, #16]
   return(result);
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1e6      	bne.n	8008d5a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008da0:	bf00      	nop
 8008da2:	3754      	adds	r7, #84	@ 0x54
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f7ff f9a0 	bl	8008110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dd0:	bf00      	nop
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b088      	sub	sp, #32
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	e853 3f00 	ldrex	r3, [r3]
 8008dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008df4:	61fb      	str	r3, [r7, #28]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	61bb      	str	r3, [r7, #24]
 8008e00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e02:	6979      	ldr	r1, [r7, #20]
 8008e04:	69ba      	ldr	r2, [r7, #24]
 8008e06:	e841 2300 	strex	r3, r2, [r1]
 8008e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1e6      	bne.n	8008de0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff f96b 	bl	80080fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e26:	bf00      	nop
 8008e28:	3720      	adds	r7, #32
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b09c      	sub	sp, #112	@ 0x70
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e48:	2b22      	cmp	r3, #34	@ 0x22
 8008e4a:	f040 80be 	bne.w	8008fca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008e54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008e5c:	b2d9      	uxtb	r1, r3
 8008e5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e68:	400a      	ands	r2, r1
 8008e6a:	b2d2      	uxtb	r2, r2
 8008e6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e72:	1c5a      	adds	r2, r3, #1
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	3b01      	subs	r3, #1
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f040 80a3 	bne.w	8008fde <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ea8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008eac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008eb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ebc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e6      	bne.n	8008e98 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008edc:	f023 0301 	bic.w	r3, r3, #1
 8008ee0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008eea:	647a      	str	r2, [r7, #68]	@ 0x44
 8008eec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e5      	bne.n	8008eca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a34      	ldr	r2, [pc, #208]	@ (8008fe8 <UART_RxISR_8BIT+0x1b8>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d01f      	beq.n	8008f5c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d018      	beq.n	8008f5c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	e853 3f00 	ldrex	r3, [r3]
 8008f36:	623b      	str	r3, [r7, #32]
   return(result);
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f50:	e841 2300 	strex	r3, r2, [r1]
 8008f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1e6      	bne.n	8008f2a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d12e      	bne.n	8008fc2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 0310 	bic.w	r3, r3, #16
 8008f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f88:	61fb      	str	r3, [r7, #28]
 8008f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	69b9      	ldr	r1, [r7, #24]
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	617b      	str	r3, [r7, #20]
   return(result);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e6      	bne.n	8008f6a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	f003 0310 	and.w	r3, r3, #16
 8008fa6:	2b10      	cmp	r3, #16
 8008fa8:	d103      	bne.n	8008fb2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2210      	movs	r2, #16
 8008fb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff f8b2 	bl	8008124 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fc0:	e00d      	b.n	8008fde <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7f7 ff34 	bl	8000e30 <HAL_UART_RxCpltCallback>
}
 8008fc8:	e009      	b.n	8008fde <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	8b1b      	ldrh	r3, [r3, #24]
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0208 	orr.w	r2, r2, #8
 8008fda:	b292      	uxth	r2, r2
 8008fdc:	831a      	strh	r2, [r3, #24]
}
 8008fde:	bf00      	nop
 8008fe0:	3770      	adds	r7, #112	@ 0x70
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	40008000 	.word	0x40008000

08008fec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b09c      	sub	sp, #112	@ 0x70
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ffa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009004:	2b22      	cmp	r3, #34	@ 0x22
 8009006:	f040 80be 	bne.w	8009186 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009010:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009018:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800901a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800901e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009022:	4013      	ands	r3, r2
 8009024:	b29a      	uxth	r2, r3
 8009026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009028:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800902e:	1c9a      	adds	r2, r3, #2
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800903a:	b29b      	uxth	r3, r3
 800903c:	3b01      	subs	r3, #1
 800903e:	b29a      	uxth	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	f040 80a3 	bne.w	800919a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009068:	667b      	str	r3, [r7, #100]	@ 0x64
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009072:	657b      	str	r3, [r7, #84]	@ 0x54
 8009074:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009078:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e6      	bne.n	8009054 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3308      	adds	r3, #8
 800908c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009098:	f023 0301 	bic.w	r3, r3, #1
 800909c:	663b      	str	r3, [r7, #96]	@ 0x60
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3308      	adds	r3, #8
 80090a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80090a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80090a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e5      	bne.n	8009086 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a34      	ldr	r2, [pc, #208]	@ (80091a4 <UART_RxISR_16BIT+0x1b8>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d01f      	beq.n	8009118 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d018      	beq.n	8009118 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	e853 3f00 	ldrex	r3, [r3]
 80090f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	461a      	mov	r2, r3
 8009102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009106:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800910a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e6      	bne.n	80090e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800911c:	2b01      	cmp	r3, #1
 800911e:	d12e      	bne.n	800917e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	e853 3f00 	ldrex	r3, [r3]
 8009132:	60bb      	str	r3, [r7, #8]
   return(result);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f023 0310 	bic.w	r3, r3, #16
 800913a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	461a      	mov	r2, r3
 8009142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009144:	61bb      	str	r3, [r7, #24]
 8009146:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009148:	6979      	ldr	r1, [r7, #20]
 800914a:	69ba      	ldr	r2, [r7, #24]
 800914c:	e841 2300 	strex	r3, r2, [r1]
 8009150:	613b      	str	r3, [r7, #16]
   return(result);
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1e6      	bne.n	8009126 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f003 0310 	and.w	r3, r3, #16
 8009162:	2b10      	cmp	r3, #16
 8009164:	d103      	bne.n	800916e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2210      	movs	r2, #16
 800916c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7fe ffd4 	bl	8008124 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800917c:	e00d      	b.n	800919a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7f7 fe56 	bl	8000e30 <HAL_UART_RxCpltCallback>
}
 8009184:	e009      	b.n	800919a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	8b1b      	ldrh	r3, [r3, #24]
 800918c:	b29a      	uxth	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f042 0208 	orr.w	r2, r2, #8
 8009196:	b292      	uxth	r2, r2
 8009198:	831a      	strh	r2, [r3, #24]
}
 800919a:	bf00      	nop
 800919c:	3770      	adds	r7, #112	@ 0x70
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	40008000 	.word	0x40008000

080091a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b0ac      	sub	sp, #176	@ 0xb0
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80091b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	69db      	ldr	r3, [r3, #28]
 80091c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091de:	2b22      	cmp	r3, #34	@ 0x22
 80091e0:	f040 8182 	bne.w	80094e8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091ea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091ee:	e125      	b.n	800943c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80091f6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80091fe:	b2d9      	uxtb	r1, r3
 8009200:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009204:	b2da      	uxtb	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800920a:	400a      	ands	r2, r1
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009220:	b29b      	uxth	r3, r3
 8009222:	3b01      	subs	r3, #1
 8009224:	b29a      	uxth	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800923a:	f003 0307 	and.w	r3, r3, #7
 800923e:	2b00      	cmp	r3, #0
 8009240:	d053      	beq.n	80092ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d011      	beq.n	8009272 <UART_RxISR_8BIT_FIFOEN+0xca>
 800924e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00b      	beq.n	8009272 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2201      	movs	r2, #1
 8009260:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009268:	f043 0201 	orr.w	r2, r3, #1
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009276:	f003 0302 	and.w	r3, r3, #2
 800927a:	2b00      	cmp	r3, #0
 800927c:	d011      	beq.n	80092a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800927e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00b      	beq.n	80092a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2202      	movs	r2, #2
 8009290:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009298:	f043 0204 	orr.w	r2, r3, #4
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092a6:	f003 0304 	and.w	r3, r3, #4
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d011      	beq.n	80092d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80092ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00b      	beq.n	80092d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2204      	movs	r2, #4
 80092c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092c8:	f043 0202 	orr.w	r2, r3, #2
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d006      	beq.n	80092ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7fe ff17 	bl	8008110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f040 80a2 	bne.w	800943c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800930c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	461a      	mov	r2, r3
 8009316:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800931a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800931c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009320:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009322:	e841 2300 	strex	r3, r2, [r1]
 8009326:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009328:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1e4      	bne.n	80092f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3308      	adds	r3, #8
 8009334:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800933e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009344:	f023 0301 	bic.w	r3, r3, #1
 8009348:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3308      	adds	r3, #8
 8009352:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009356:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009358:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800935c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009364:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e1      	bne.n	800932e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2220      	movs	r2, #32
 800936e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a60      	ldr	r2, [pc, #384]	@ (8009504 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d021      	beq.n	80093cc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01a      	beq.n	80093cc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80093a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80093ba:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80093be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80093c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e4      	bne.n	8009396 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d130      	bne.n	8009436 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ea:	f023 0310 	bic.w	r3, r3, #16
 80093ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80093fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009402:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009404:	e841 2300 	strex	r3, r2, [r1]
 8009408:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800940a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e4      	bne.n	80093da <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	f003 0310 	and.w	r3, r3, #16
 800941a:	2b10      	cmp	r3, #16
 800941c:	d103      	bne.n	8009426 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2210      	movs	r2, #16
 8009424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7fe fe78 	bl	8008124 <HAL_UARTEx_RxEventCallback>
 8009434:	e002      	b.n	800943c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7f7 fcfa 	bl	8000e30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800943c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009440:	2b00      	cmp	r3, #0
 8009442:	d006      	beq.n	8009452 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b00      	cmp	r3, #0
 800944e:	f47f aecf 	bne.w	80091f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009458:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800945c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009460:	2b00      	cmp	r3, #0
 8009462:	d04b      	beq.n	80094fc <UART_RxISR_8BIT_FIFOEN+0x354>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800946a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800946e:	429a      	cmp	r2, r3
 8009470:	d244      	bcs.n	80094fc <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3308      	adds	r3, #8
 8009478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	61fb      	str	r3, [r7, #28]
   return(result);
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3308      	adds	r3, #8
 8009492:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009496:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009498:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800949c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e3      	bne.n	8009472 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a16      	ldr	r2, [pc, #88]	@ (8009508 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80094ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f043 0320 	orr.w	r3, r3, #32
 80094c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80094d2:	61bb      	str	r3, [r7, #24]
 80094d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	6979      	ldr	r1, [r7, #20]
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	613b      	str	r3, [r7, #16]
   return(result);
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e4      	bne.n	80094b0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094e6:	e009      	b.n	80094fc <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	8b1b      	ldrh	r3, [r3, #24]
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f042 0208 	orr.w	r2, r2, #8
 80094f8:	b292      	uxth	r2, r2
 80094fa:	831a      	strh	r2, [r3, #24]
}
 80094fc:	bf00      	nop
 80094fe:	37b0      	adds	r7, #176	@ 0xb0
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	40008000 	.word	0x40008000
 8009508:	08008e31 	.word	0x08008e31

0800950c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b0ae      	sub	sp, #184	@ 0xb8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800951a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009542:	2b22      	cmp	r3, #34	@ 0x22
 8009544:	f040 8186 	bne.w	8009854 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800954e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009552:	e129      	b.n	80097a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800955a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009566:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800956a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800956e:	4013      	ands	r3, r2
 8009570:	b29a      	uxth	r2, r3
 8009572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009576:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800957c:	1c9a      	adds	r2, r3, #2
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009588:	b29b      	uxth	r3, r3
 800958a:	3b01      	subs	r3, #1
 800958c:	b29a      	uxth	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800959e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095a2:	f003 0307 	and.w	r3, r3, #7
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d053      	beq.n	8009652 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d011      	beq.n	80095da <UART_RxISR_16BIT_FIFOEN+0xce>
 80095b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00b      	beq.n	80095da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2201      	movs	r2, #1
 80095c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095d0:	f043 0201 	orr.w	r2, r3, #1
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d011      	beq.n	800960a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80095e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00b      	beq.n	800960a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2202      	movs	r2, #2
 80095f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009600:	f043 0204 	orr.w	r2, r3, #4
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800960a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800960e:	f003 0304 	and.w	r3, r3, #4
 8009612:	2b00      	cmp	r3, #0
 8009614:	d011      	beq.n	800963a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00b      	beq.n	800963a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2204      	movs	r2, #4
 8009628:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009630:	f043 0202 	orr.w	r2, r3, #2
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009640:	2b00      	cmp	r3, #0
 8009642:	d006      	beq.n	8009652 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7fe fd63 	bl	8008110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009658:	b29b      	uxth	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	f040 80a4 	bne.w	80097a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009668:	e853 3f00 	ldrex	r3, [r3]
 800966c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800966e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009674:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009682:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009686:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800968a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800968e:	e841 2300 	strex	r3, r2, [r1]
 8009692:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e2      	bne.n	8009660 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80096aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096b0:	f023 0301 	bic.w	r3, r3, #1
 80096b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3308      	adds	r3, #8
 80096be:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80096c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80096c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80096c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80096d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e1      	bne.n	800969a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2220      	movs	r2, #32
 80096da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a60      	ldr	r2, [pc, #384]	@ (8009870 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d021      	beq.n	8009738 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d01a      	beq.n	8009738 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800970a:	e853 3f00 	ldrex	r3, [r3]
 800970e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009712:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009716:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009724:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009726:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009728:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800972a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e4      	bne.n	8009702 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800973c:	2b01      	cmp	r3, #1
 800973e:	d130      	bne.n	80097a2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974e:	e853 3f00 	ldrex	r3, [r3]
 8009752:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009756:	f023 0310 	bic.w	r3, r3, #16
 800975a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009768:	647b      	str	r3, [r7, #68]	@ 0x44
 800976a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800976e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009770:	e841 2300 	strex	r3, r2, [r1]
 8009774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e4      	bne.n	8009746 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	f003 0310 	and.w	r3, r3, #16
 8009786:	2b10      	cmp	r3, #16
 8009788:	d103      	bne.n	8009792 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2210      	movs	r2, #16
 8009790:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009798:	4619      	mov	r1, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7fe fcc2 	bl	8008124 <HAL_UARTEx_RxEventCallback>
 80097a0:	e002      	b.n	80097a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7f7 fb44 	bl	8000e30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097a8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d006      	beq.n	80097be <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80097b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80097b4:	f003 0320 	and.w	r3, r3, #32
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f47f aecb 	bne.w	8009554 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097c4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80097c8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d04b      	beq.n	8009868 <UART_RxISR_16BIT_FIFOEN+0x35c>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80097d6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80097da:	429a      	cmp	r2, r3
 80097dc:	d244      	bcs.n	8009868 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3308      	adds	r3, #8
 80097e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e8:	e853 3f00 	ldrex	r3, [r3]
 80097ec:	623b      	str	r3, [r7, #32]
   return(result);
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3308      	adds	r3, #8
 80097fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009802:	633a      	str	r2, [r7, #48]	@ 0x30
 8009804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e3      	bne.n	80097de <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a16      	ldr	r2, [pc, #88]	@ (8009874 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800981a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	60fb      	str	r3, [r7, #12]
   return(result);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f043 0320 	orr.w	r3, r3, #32
 8009830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	461a      	mov	r2, r3
 800983a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800983e:	61fb      	str	r3, [r7, #28]
 8009840:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009842:	69b9      	ldr	r1, [r7, #24]
 8009844:	69fa      	ldr	r2, [r7, #28]
 8009846:	e841 2300 	strex	r3, r2, [r1]
 800984a:	617b      	str	r3, [r7, #20]
   return(result);
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1e4      	bne.n	800981c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009852:	e009      	b.n	8009868 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	8b1b      	ldrh	r3, [r3, #24]
 800985a:	b29a      	uxth	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0208 	orr.w	r2, r2, #8
 8009864:	b292      	uxth	r2, r2
 8009866:	831a      	strh	r2, [r3, #24]
}
 8009868:	bf00      	nop
 800986a:	37b8      	adds	r7, #184	@ 0xb8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	40008000 	.word	0x40008000
 8009874:	08008fed 	.word	0x08008fed

08009878 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d101      	bne.n	80098ca <HAL_UARTEx_DisableFifoMode+0x16>
 80098c6:	2302      	movs	r3, #2
 80098c8:	e027      	b.n	800991a <HAL_UARTEx_DisableFifoMode+0x66>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2224      	movs	r2, #36	@ 0x24
 80098d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f022 0201 	bic.w	r2, r2, #1
 80098f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80098f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2220      	movs	r2, #32
 800990c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009936:	2b01      	cmp	r3, #1
 8009938:	d101      	bne.n	800993e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800993a:	2302      	movs	r3, #2
 800993c:	e02d      	b.n	800999a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2224      	movs	r2, #36	@ 0x24
 800994a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f022 0201 	bic.w	r2, r2, #1
 8009964:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	430a      	orrs	r2, r1
 8009978:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f850 	bl	8009a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2220      	movs	r2, #32
 800998c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b084      	sub	sp, #16
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d101      	bne.n	80099ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80099b6:	2302      	movs	r3, #2
 80099b8:	e02d      	b.n	8009a16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2224      	movs	r2, #36	@ 0x24
 80099c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f022 0201 	bic.w	r2, r2, #1
 80099e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f812 	bl	8009a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2220      	movs	r2, #32
 8009a08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d108      	bne.n	8009a42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a40:	e031      	b.n	8009aa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a42:	2308      	movs	r3, #8
 8009a44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a46:	2308      	movs	r3, #8
 8009a48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	0e5b      	lsrs	r3, r3, #25
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 0307 	and.w	r3, r3, #7
 8009a58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	0f5b      	lsrs	r3, r3, #29
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	f003 0307 	and.w	r3, r3, #7
 8009a68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a6a:	7bbb      	ldrb	r3, [r7, #14]
 8009a6c:	7b3a      	ldrb	r2, [r7, #12]
 8009a6e:	4911      	ldr	r1, [pc, #68]	@ (8009ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8009a70:	5c8a      	ldrb	r2, [r1, r2]
 8009a72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a76:	7b3a      	ldrb	r2, [r7, #12]
 8009a78:	490f      	ldr	r1, [pc, #60]	@ (8009ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8009a7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
 8009a8a:	7b7a      	ldrb	r2, [r7, #13]
 8009a8c:	4909      	ldr	r1, [pc, #36]	@ (8009ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8009a8e:	5c8a      	ldrb	r2, [r1, r2]
 8009a90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a94:	7b7a      	ldrb	r2, [r7, #13]
 8009a96:	4908      	ldr	r1, [pc, #32]	@ (8009ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8009a98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009aa6:	bf00      	nop
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	0800dd5c 	.word	0x0800dd5c
 8009ab8:	0800dd64 	.word	0x0800dd64

08009abc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009abc:	b084      	sub	sp, #16
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	f107 001c 	add.w	r0, r7, #28
 8009aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 fa1c 	bl	800af18 <USB_CoreReset>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d106      	bne.n	8009af8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	639a      	str	r2, [r3, #56]	@ 0x38
 8009af6:	e005      	b.n	8009b04 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009afc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b10:	b004      	add	sp, #16
 8009b12:	4770      	bx	lr

08009b14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009b22:	79fb      	ldrb	r3, [r7, #7]
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d165      	bne.n	8009bf4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	4a3e      	ldr	r2, [pc, #248]	@ (8009c24 <USB_SetTurnaroundTime+0x110>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d906      	bls.n	8009b3e <USB_SetTurnaroundTime+0x2a>
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	4a3d      	ldr	r2, [pc, #244]	@ (8009c28 <USB_SetTurnaroundTime+0x114>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d202      	bcs.n	8009b3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009b38:	230f      	movs	r3, #15
 8009b3a:	617b      	str	r3, [r7, #20]
 8009b3c:	e05c      	b.n	8009bf8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	4a39      	ldr	r2, [pc, #228]	@ (8009c28 <USB_SetTurnaroundTime+0x114>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d306      	bcc.n	8009b54 <USB_SetTurnaroundTime+0x40>
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	4a38      	ldr	r2, [pc, #224]	@ (8009c2c <USB_SetTurnaroundTime+0x118>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d202      	bcs.n	8009b54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009b4e:	230e      	movs	r3, #14
 8009b50:	617b      	str	r3, [r7, #20]
 8009b52:	e051      	b.n	8009bf8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	4a35      	ldr	r2, [pc, #212]	@ (8009c2c <USB_SetTurnaroundTime+0x118>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d306      	bcc.n	8009b6a <USB_SetTurnaroundTime+0x56>
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	4a34      	ldr	r2, [pc, #208]	@ (8009c30 <USB_SetTurnaroundTime+0x11c>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d202      	bcs.n	8009b6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009b64:	230d      	movs	r3, #13
 8009b66:	617b      	str	r3, [r7, #20]
 8009b68:	e046      	b.n	8009bf8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	4a30      	ldr	r2, [pc, #192]	@ (8009c30 <USB_SetTurnaroundTime+0x11c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d306      	bcc.n	8009b80 <USB_SetTurnaroundTime+0x6c>
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	4a2f      	ldr	r2, [pc, #188]	@ (8009c34 <USB_SetTurnaroundTime+0x120>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d802      	bhi.n	8009b80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009b7a:	230c      	movs	r3, #12
 8009b7c:	617b      	str	r3, [r7, #20]
 8009b7e:	e03b      	b.n	8009bf8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	4a2c      	ldr	r2, [pc, #176]	@ (8009c34 <USB_SetTurnaroundTime+0x120>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d906      	bls.n	8009b96 <USB_SetTurnaroundTime+0x82>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8009c38 <USB_SetTurnaroundTime+0x124>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d802      	bhi.n	8009b96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009b90:	230b      	movs	r3, #11
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	e030      	b.n	8009bf8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	4a27      	ldr	r2, [pc, #156]	@ (8009c38 <USB_SetTurnaroundTime+0x124>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d906      	bls.n	8009bac <USB_SetTurnaroundTime+0x98>
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4a26      	ldr	r2, [pc, #152]	@ (8009c3c <USB_SetTurnaroundTime+0x128>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d802      	bhi.n	8009bac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ba6:	230a      	movs	r3, #10
 8009ba8:	617b      	str	r3, [r7, #20]
 8009baa:	e025      	b.n	8009bf8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	4a23      	ldr	r2, [pc, #140]	@ (8009c3c <USB_SetTurnaroundTime+0x128>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d906      	bls.n	8009bc2 <USB_SetTurnaroundTime+0xae>
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	4a22      	ldr	r2, [pc, #136]	@ (8009c40 <USB_SetTurnaroundTime+0x12c>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d202      	bcs.n	8009bc2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009bbc:	2309      	movs	r3, #9
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	e01a      	b.n	8009bf8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8009c40 <USB_SetTurnaroundTime+0x12c>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d306      	bcc.n	8009bd8 <USB_SetTurnaroundTime+0xc4>
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8009c44 <USB_SetTurnaroundTime+0x130>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d802      	bhi.n	8009bd8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009bd2:	2308      	movs	r3, #8
 8009bd4:	617b      	str	r3, [r7, #20]
 8009bd6:	e00f      	b.n	8009bf8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	4a1a      	ldr	r2, [pc, #104]	@ (8009c44 <USB_SetTurnaroundTime+0x130>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d906      	bls.n	8009bee <USB_SetTurnaroundTime+0xda>
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4a19      	ldr	r2, [pc, #100]	@ (8009c48 <USB_SetTurnaroundTime+0x134>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d202      	bcs.n	8009bee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009be8:	2307      	movs	r3, #7
 8009bea:	617b      	str	r3, [r7, #20]
 8009bec:	e004      	b.n	8009bf8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009bee:	2306      	movs	r3, #6
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	e001      	b.n	8009bf8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009bf4:	2309      	movs	r3, #9
 8009bf6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	68da      	ldr	r2, [r3, #12]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	029b      	lsls	r3, r3, #10
 8009c0c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009c10:	431a      	orrs	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	371c      	adds	r7, #28
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	00d8acbf 	.word	0x00d8acbf
 8009c28:	00e4e1c0 	.word	0x00e4e1c0
 8009c2c:	00f42400 	.word	0x00f42400
 8009c30:	01067380 	.word	0x01067380
 8009c34:	011a499f 	.word	0x011a499f
 8009c38:	01312cff 	.word	0x01312cff
 8009c3c:	014ca43f 	.word	0x014ca43f
 8009c40:	016e3600 	.word	0x016e3600
 8009c44:	01a6ab1f 	.word	0x01a6ab1f
 8009c48:	01e84800 	.word	0x01e84800

08009c4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	f043 0201 	orr.w	r2, r3, #1
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f023 0201 	bic.w	r2, r3, #1
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d115      	bne.n	8009cde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	f7f7 ffda 	bl	8001c78 <HAL_Delay>
      ms++;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f001 f8ab 	bl	800ae26 <USB_GetMode>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d01e      	beq.n	8009d14 <USB_SetCurrentMode+0x84>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2b31      	cmp	r3, #49	@ 0x31
 8009cda:	d9f0      	bls.n	8009cbe <USB_SetCurrentMode+0x2e>
 8009cdc:	e01a      	b.n	8009d14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d115      	bne.n	8009d10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009cf0:	2001      	movs	r0, #1
 8009cf2:	f7f7 ffc1 	bl	8001c78 <HAL_Delay>
      ms++;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f001 f892 	bl	800ae26 <USB_GetMode>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <USB_SetCurrentMode+0x84>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2b31      	cmp	r3, #49	@ 0x31
 8009d0c:	d9f0      	bls.n	8009cf0 <USB_SetCurrentMode+0x60>
 8009d0e:	e001      	b.n	8009d14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e005      	b.n	8009d20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b32      	cmp	r3, #50	@ 0x32
 8009d18:	d101      	bne.n	8009d1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e000      	b.n	8009d20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d28:	b084      	sub	sp, #16
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b086      	sub	sp, #24
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d42:	2300      	movs	r3, #0
 8009d44:	613b      	str	r3, [r7, #16]
 8009d46:	e009      	b.n	8009d5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	3340      	adds	r3, #64	@ 0x40
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	613b      	str	r3, [r7, #16]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2b0e      	cmp	r3, #14
 8009d60:	d9f2      	bls.n	8009d48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d11c      	bne.n	8009da2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d76:	f043 0302 	orr.w	r3, r3, #2
 8009d7a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d80:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	601a      	str	r2, [r3, #0]
 8009da0:	e005      	b.n	8009dae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009db4:	461a      	mov	r2, r3
 8009db6:	2300      	movs	r3, #0
 8009db8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009dba:	2103      	movs	r1, #3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f959 	bl	800a074 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009dc2:	2110      	movs	r1, #16
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f8f1 	bl	8009fac <USB_FlushTxFifo>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f91d 	bl	800a014 <USB_FlushRxFifo>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dea:	461a      	mov	r2, r3
 8009dec:	2300      	movs	r3, #0
 8009dee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009df6:	461a      	mov	r2, r3
 8009df8:	2300      	movs	r3, #0
 8009dfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e02:	461a      	mov	r2, r3
 8009e04:	2300      	movs	r3, #0
 8009e06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	613b      	str	r3, [r7, #16]
 8009e0c:	e043      	b.n	8009e96 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	015a      	lsls	r2, r3, #5
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	4413      	add	r3, r2
 8009e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e24:	d118      	bne.n	8009e58 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10a      	bne.n	8009e42 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e38:	461a      	mov	r2, r3
 8009e3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e3e:	6013      	str	r3, [r2, #0]
 8009e40:	e013      	b.n	8009e6a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e4e:	461a      	mov	r2, r3
 8009e50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	e008      	b.n	8009e6a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	015a      	lsls	r2, r3, #5
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4413      	add	r3, r2
 8009e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e64:	461a      	mov	r2, r3
 8009e66:	2300      	movs	r3, #0
 8009e68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	015a      	lsls	r2, r3, #5
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e76:	461a      	mov	r2, r3
 8009e78:	2300      	movs	r3, #0
 8009e7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e88:	461a      	mov	r2, r3
 8009e8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	3301      	adds	r3, #1
 8009e94:	613b      	str	r3, [r7, #16]
 8009e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d3b7      	bcc.n	8009e0e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	613b      	str	r3, [r7, #16]
 8009ea2:	e043      	b.n	8009f2c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009eba:	d118      	bne.n	8009eee <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10a      	bne.n	8009ed8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ed4:	6013      	str	r3, [r2, #0]
 8009ed6:	e013      	b.n	8009f00 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009eea:	6013      	str	r3, [r2, #0]
 8009eec:	e008      	b.n	8009f00 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	015a      	lsls	r2, r3, #5
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009efa:	461a      	mov	r2, r3
 8009efc:	2300      	movs	r3, #0
 8009efe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	2300      	movs	r3, #0
 8009f10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	015a      	lsls	r2, r3, #5
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009f24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	613b      	str	r3, [r7, #16]
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d3b7      	bcc.n	8009ea4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009f54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	f043 0210 	orr.w	r2, r3, #16
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	699a      	ldr	r2, [r3, #24]
 8009f66:	4b10      	ldr	r3, [pc, #64]	@ (8009fa8 <USB_DevInit+0x280>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	f043 0208 	orr.w	r2, r3, #8
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d107      	bne.n	8009f96 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f8e:	f043 0304 	orr.w	r3, r3, #4
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fa2:	b004      	add	sp, #16
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	803c3800 	.word	0x803c3800

08009fac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4a13      	ldr	r2, [pc, #76]	@ (800a010 <USB_FlushTxFifo+0x64>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d901      	bls.n	8009fcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e01b      	b.n	800a004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	daf2      	bge.n	8009fba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	019b      	lsls	r3, r3, #6
 8009fdc:	f043 0220 	orr.w	r2, r3, #32
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	4a08      	ldr	r2, [pc, #32]	@ (800a010 <USB_FlushTxFifo+0x64>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d901      	bls.n	8009ff6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e006      	b.n	800a004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	f003 0320 	and.w	r3, r3, #32
 8009ffe:	2b20      	cmp	r3, #32
 800a000:	d0f0      	beq.n	8009fe4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	00030d40 	.word	0x00030d40

0800a014 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a01c:	2300      	movs	r3, #0
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3301      	adds	r3, #1
 800a024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	4a11      	ldr	r2, [pc, #68]	@ (800a070 <USB_FlushRxFifo+0x5c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d901      	bls.n	800a032 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a02e:	2303      	movs	r3, #3
 800a030:	e018      	b.n	800a064 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	2b00      	cmp	r3, #0
 800a038:	daf2      	bge.n	800a020 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2210      	movs	r2, #16
 800a042:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	3301      	adds	r3, #1
 800a048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	4a08      	ldr	r2, [pc, #32]	@ (800a070 <USB_FlushRxFifo+0x5c>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d901      	bls.n	800a056 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e006      	b.n	800a064 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	f003 0310 	and.w	r3, r3, #16
 800a05e:	2b10      	cmp	r3, #16
 800a060:	d0f0      	beq.n	800a044 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	00030d40 	.word	0x00030d40

0800a074 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	78fb      	ldrb	r3, [r7, #3]
 800a08e:	68f9      	ldr	r1, [r7, #12]
 800a090:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a094:	4313      	orrs	r3, r2
 800a096:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b087      	sub	sp, #28
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f003 0306 	and.w	r3, r3, #6
 800a0be:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d002      	beq.n	800a0cc <USB_GetDevSpeed+0x26>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2b06      	cmp	r3, #6
 800a0ca:	d102      	bne.n	800a0d2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	75fb      	strb	r3, [r7, #23]
 800a0d0:	e001      	b.n	800a0d6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a0d2:	230f      	movs	r3, #15
 800a0d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a0d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	371c      	adds	r7, #28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d13a      	bne.n	800a176 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a106:	69da      	ldr	r2, [r3, #28]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	f003 030f 	and.w	r3, r3, #15
 800a110:	2101      	movs	r1, #1
 800a112:	fa01 f303 	lsl.w	r3, r1, r3
 800a116:	b29b      	uxth	r3, r3
 800a118:	68f9      	ldr	r1, [r7, #12]
 800a11a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a11e:	4313      	orrs	r3, r2
 800a120:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	015a      	lsls	r2, r3, #5
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4413      	add	r3, r2
 800a12a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d155      	bne.n	800a1e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	791b      	ldrb	r3, [r3, #4]
 800a152:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a154:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	059b      	lsls	r3, r3, #22
 800a15a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a15c:	4313      	orrs	r3, r2
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	0151      	lsls	r1, r2, #5
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	440a      	add	r2, r1
 800a166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a16a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a16e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a172:	6013      	str	r3, [r2, #0]
 800a174:	e036      	b.n	800a1e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a17c:	69da      	ldr	r2, [r3, #28]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	f003 030f 	and.w	r3, r3, #15
 800a186:	2101      	movs	r1, #1
 800a188:	fa01 f303 	lsl.w	r3, r1, r3
 800a18c:	041b      	lsls	r3, r3, #16
 800a18e:	68f9      	ldr	r1, [r7, #12]
 800a190:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a194:	4313      	orrs	r3, r2
 800a196:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d11a      	bne.n	800a1e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	015a      	lsls	r2, r3, #5
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	791b      	ldrb	r3, [r3, #4]
 800a1c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a1ca:	430b      	orrs	r3, r1
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	0151      	lsls	r1, r2, #5
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	440a      	add	r2, r1
 800a1d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
	...

0800a1f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	785b      	ldrb	r3, [r3, #1]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d161      	bne.n	800a2d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	015a      	lsls	r2, r3, #5
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	4413      	add	r3, r2
 800a218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a222:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a226:	d11f      	bne.n	800a268 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	0151      	lsls	r1, r2, #5
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	440a      	add	r2, r1
 800a23e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a242:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a246:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	0151      	lsls	r1, r2, #5
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	440a      	add	r2, r1
 800a25e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a262:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a266:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a26e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	f003 030f 	and.w	r3, r3, #15
 800a278:	2101      	movs	r1, #1
 800a27a:	fa01 f303 	lsl.w	r3, r1, r3
 800a27e:	b29b      	uxth	r3, r3
 800a280:	43db      	mvns	r3, r3
 800a282:	68f9      	ldr	r1, [r7, #12]
 800a284:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a288:	4013      	ands	r3, r2
 800a28a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a292:	69da      	ldr	r2, [r3, #28]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	f003 030f 	and.w	r3, r3, #15
 800a29c:	2101      	movs	r1, #1
 800a29e:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	43db      	mvns	r3, r3
 800a2a6:	68f9      	ldr	r1, [r7, #12]
 800a2a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	015a      	lsls	r2, r3, #5
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	0159      	lsls	r1, r3, #5
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	440b      	add	r3, r1
 800a2c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4b35      	ldr	r3, [pc, #212]	@ (800a3a4 <USB_DeactivateEndpoint+0x1b0>)
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	600b      	str	r3, [r1, #0]
 800a2d2:	e060      	b.n	800a396 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2ea:	d11f      	bne.n	800a32c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	015a      	lsls	r2, r3, #5
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	0151      	lsls	r1, r2, #5
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	440a      	add	r2, r1
 800a302:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a306:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a30a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	4413      	add	r3, r2
 800a314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	0151      	lsls	r1, r2, #5
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	440a      	add	r2, r1
 800a322:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a326:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a32a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a332:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	f003 030f 	and.w	r3, r3, #15
 800a33c:	2101      	movs	r1, #1
 800a33e:	fa01 f303 	lsl.w	r3, r1, r3
 800a342:	041b      	lsls	r3, r3, #16
 800a344:	43db      	mvns	r3, r3
 800a346:	68f9      	ldr	r1, [r7, #12]
 800a348:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a34c:	4013      	ands	r3, r2
 800a34e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a356:	69da      	ldr	r2, [r3, #28]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	f003 030f 	and.w	r3, r3, #15
 800a360:	2101      	movs	r1, #1
 800a362:	fa01 f303 	lsl.w	r3, r1, r3
 800a366:	041b      	lsls	r3, r3, #16
 800a368:	43db      	mvns	r3, r3
 800a36a:	68f9      	ldr	r1, [r7, #12]
 800a36c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a370:	4013      	ands	r3, r2
 800a372:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	015a      	lsls	r2, r3, #5
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	0159      	lsls	r1, r3, #5
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	440b      	add	r3, r1
 800a38a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38e:	4619      	mov	r1, r3
 800a390:	4b05      	ldr	r3, [pc, #20]	@ (800a3a8 <USB_DeactivateEndpoint+0x1b4>)
 800a392:	4013      	ands	r3, r2
 800a394:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	ec337800 	.word	0xec337800
 800a3a8:	eff37800 	.word	0xeff37800

0800a3ac <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	785b      	ldrb	r3, [r3, #1]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	f040 8128 	bne.w	800a61a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d132      	bne.n	800a438 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	0151      	lsls	r1, r2, #5
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	440a      	add	r2, r1
 800a3e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a3f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a3f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	693a      	ldr	r2, [r7, #16]
 800a406:	0151      	lsls	r1, r2, #5
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	440a      	add	r2, r1
 800a40c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a410:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	015a      	lsls	r2, r3, #5
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	4413      	add	r3, r2
 800a41e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	0151      	lsls	r1, r2, #5
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	440a      	add	r2, r1
 800a42c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a430:	0cdb      	lsrs	r3, r3, #19
 800a432:	04db      	lsls	r3, r3, #19
 800a434:	6113      	str	r3, [r2, #16]
 800a436:	e092      	b.n	800a55e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	693a      	ldr	r2, [r7, #16]
 800a448:	0151      	lsls	r1, r2, #5
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	440a      	add	r2, r1
 800a44e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a452:	0cdb      	lsrs	r3, r3, #19
 800a454:	04db      	lsls	r3, r3, #19
 800a456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	0151      	lsls	r1, r2, #5
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	440a      	add	r2, r1
 800a46e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a472:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a476:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a47a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d11a      	bne.n	800a4b8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	691a      	ldr	r2, [r3, #16]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d903      	bls.n	800a496 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	689a      	ldr	r2, [r3, #8]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	015a      	lsls	r2, r3, #5
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	4413      	add	r3, r2
 800a49e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	0151      	lsls	r1, r2, #5
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	440a      	add	r2, r1
 800a4ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4b4:	6113      	str	r3, [r2, #16]
 800a4b6:	e01b      	b.n	800a4f0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	6919      	ldr	r1, [r3, #16]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	440b      	add	r3, r1
 800a4d0:	1e59      	subs	r1, r3, #1
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4da:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a4dc:	4b8d      	ldr	r3, [pc, #564]	@ (800a714 <USB_EPStartXfer+0x368>)
 800a4de:	400b      	ands	r3, r1
 800a4e0:	6939      	ldr	r1, [r7, #16]
 800a4e2:	0148      	lsls	r0, r1, #5
 800a4e4:	6979      	ldr	r1, [r7, #20]
 800a4e6:	4401      	add	r1, r0
 800a4e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	015a      	lsls	r2, r3, #5
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4fc:	691a      	ldr	r2, [r3, #16]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a506:	6939      	ldr	r1, [r7, #16]
 800a508:	0148      	lsls	r0, r1, #5
 800a50a:	6979      	ldr	r1, [r7, #20]
 800a50c:	4401      	add	r1, r0
 800a50e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a512:	4313      	orrs	r3, r2
 800a514:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	791b      	ldrb	r3, [r3, #4]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d11f      	bne.n	800a55e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	4413      	add	r3, r2
 800a526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	0151      	lsls	r1, r2, #5
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	440a      	add	r2, r1
 800a534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a538:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a53c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	0151      	lsls	r1, r2, #5
 800a550:	697a      	ldr	r2, [r7, #20]
 800a552:	440a      	add	r2, r1
 800a554:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a558:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a55c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	015a      	lsls	r2, r3, #5
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	4413      	add	r3, r2
 800a566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	0151      	lsls	r1, r2, #5
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	440a      	add	r2, r1
 800a574:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a578:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a57c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	791b      	ldrb	r3, [r3, #4]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d015      	beq.n	800a5b2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 8139 	beq.w	800a802 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	f003 030f 	and.w	r3, r3, #15
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a6:	6979      	ldr	r1, [r7, #20]
 800a5a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	634b      	str	r3, [r1, #52]	@ 0x34
 800a5b0:	e127      	b.n	800a802 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d110      	bne.n	800a5e4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	0151      	lsls	r1, r2, #5
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	440a      	add	r2, r1
 800a5d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	e00f      	b.n	800a604 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	015a      	lsls	r2, r3, #5
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	0151      	lsls	r1, r2, #5
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	440a      	add	r2, r1
 800a5fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a602:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	68d9      	ldr	r1, [r3, #12]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781a      	ldrb	r2, [r3, #0]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	b29b      	uxth	r3, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f9a6 	bl	800a964 <USB_WritePacket>
 800a618:	e0f3      	b.n	800a802 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	4413      	add	r3, r2
 800a622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	0151      	lsls	r1, r2, #5
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	440a      	add	r2, r1
 800a630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a634:	0cdb      	lsrs	r3, r3, #19
 800a636:	04db      	lsls	r3, r3, #19
 800a638:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	015a      	lsls	r2, r3, #5
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	4413      	add	r3, r2
 800a642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	0151      	lsls	r1, r2, #5
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	440a      	add	r2, r1
 800a650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a654:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a658:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a65c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d12f      	bne.n	800a6c4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d003      	beq.n	800a674 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	689a      	ldr	r2, [r3, #8]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a688:	691a      	ldr	r2, [r3, #16]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a692:	6939      	ldr	r1, [r7, #16]
 800a694:	0148      	lsls	r0, r1, #5
 800a696:	6979      	ldr	r1, [r7, #20]
 800a698:	4401      	add	r1, r0
 800a69a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	015a      	lsls	r2, r3, #5
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	0151      	lsls	r1, r2, #5
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	440a      	add	r2, r1
 800a6b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6c0:	6113      	str	r3, [r2, #16]
 800a6c2:	e061      	b.n	800a788 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d125      	bne.n	800a718 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6d8:	691a      	ldr	r2, [r3, #16]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6e2:	6939      	ldr	r1, [r7, #16]
 800a6e4:	0148      	lsls	r0, r1, #5
 800a6e6:	6979      	ldr	r1, [r7, #20]
 800a6e8:	4401      	add	r1, r0
 800a6ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	015a      	lsls	r2, r3, #5
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	0151      	lsls	r1, r2, #5
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	440a      	add	r2, r1
 800a708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a70c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a710:	6113      	str	r3, [r2, #16]
 800a712:	e039      	b.n	800a788 <USB_EPStartXfer+0x3dc>
 800a714:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	691a      	ldr	r2, [r3, #16]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	4413      	add	r3, r2
 800a722:	1e5a      	subs	r2, r3, #1
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	89fa      	ldrh	r2, [r7, #14]
 800a734:	fb03 f202 	mul.w	r2, r3, r2
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	015a      	lsls	r2, r3, #5
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	4413      	add	r3, r2
 800a744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a748:	691a      	ldr	r2, [r3, #16]
 800a74a:	89fb      	ldrh	r3, [r7, #14]
 800a74c:	04d9      	lsls	r1, r3, #19
 800a74e:	4b2f      	ldr	r3, [pc, #188]	@ (800a80c <USB_EPStartXfer+0x460>)
 800a750:	400b      	ands	r3, r1
 800a752:	6939      	ldr	r1, [r7, #16]
 800a754:	0148      	lsls	r0, r1, #5
 800a756:	6979      	ldr	r1, [r7, #20]
 800a758:	4401      	add	r1, r0
 800a75a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a75e:	4313      	orrs	r3, r2
 800a760:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a76e:	691a      	ldr	r2, [r3, #16]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a778:	6939      	ldr	r1, [r7, #16]
 800a77a:	0148      	lsls	r0, r1, #5
 800a77c:	6979      	ldr	r1, [r7, #20]
 800a77e:	4401      	add	r1, r0
 800a780:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a784:	4313      	orrs	r3, r2
 800a786:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	791b      	ldrb	r3, [r3, #4]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d128      	bne.n	800a7e2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d110      	bne.n	800a7c2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	0151      	lsls	r1, r2, #5
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	440a      	add	r2, r1
 800a7b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	e00f      	b.n	800a7e2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	0151      	lsls	r1, r2, #5
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	440a      	add	r2, r1
 800a7d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7e0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	0151      	lsls	r1, r2, #5
 800a7f4:	697a      	ldr	r2, [r7, #20]
 800a7f6:	440a      	add	r2, r1
 800a7f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7fc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a800:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	1ff80000 	.word	0x1ff80000

0800a810 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a81a:	2300      	movs	r3, #0
 800a81c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	785b      	ldrb	r3, [r3, #1]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d14a      	bne.n	800a8c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a842:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a846:	f040 8086 	bne.w	800a956 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	015a      	lsls	r2, r3, #5
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	4413      	add	r3, r2
 800a854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	7812      	ldrb	r2, [r2, #0]
 800a85e:	0151      	lsls	r1, r2, #5
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	440a      	add	r2, r1
 800a864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a868:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a86c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	015a      	lsls	r2, r3, #5
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	4413      	add	r3, r2
 800a878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	7812      	ldrb	r2, [r2, #0]
 800a882:	0151      	lsls	r1, r2, #5
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	440a      	add	r2, r1
 800a888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a88c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a890:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3301      	adds	r3, #1
 800a896:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d902      	bls.n	800a8a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a8a6:	e056      	b.n	800a956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8c0:	d0e7      	beq.n	800a892 <USB_EPStopXfer+0x82>
 800a8c2:	e048      	b.n	800a956 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8dc:	d13b      	bne.n	800a956 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	015a      	lsls	r2, r3, #5
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	7812      	ldrb	r2, [r2, #0]
 800a8f2:	0151      	lsls	r1, r2, #5
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	440a      	add	r2, r1
 800a8f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a900:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	7812      	ldrb	r2, [r2, #0]
 800a916:	0151      	lsls	r1, r2, #5
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	440a      	add	r2, r1
 800a91c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a920:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a924:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	3301      	adds	r3, #1
 800a92a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a932:	4293      	cmp	r3, r2
 800a934:	d902      	bls.n	800a93c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	75fb      	strb	r3, [r7, #23]
          break;
 800a93a:	e00c      	b.n	800a956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	015a      	lsls	r2, r3, #5
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	4413      	add	r3, r2
 800a946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a950:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a954:	d0e7      	beq.n	800a926 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a956:	7dfb      	ldrb	r3, [r7, #23]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	371c      	adds	r7, #28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a964:	b480      	push	{r7}
 800a966:	b089      	sub	sp, #36	@ 0x24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	4611      	mov	r1, r2
 800a970:	461a      	mov	r2, r3
 800a972:	460b      	mov	r3, r1
 800a974:	71fb      	strb	r3, [r7, #7]
 800a976:	4613      	mov	r3, r2
 800a978:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a982:	88bb      	ldrh	r3, [r7, #4]
 800a984:	3303      	adds	r3, #3
 800a986:	089b      	lsrs	r3, r3, #2
 800a988:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a98a:	2300      	movs	r3, #0
 800a98c:	61bb      	str	r3, [r7, #24]
 800a98e:	e018      	b.n	800a9c2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	031a      	lsls	r2, r3, #12
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	4413      	add	r3, r2
 800a998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a99c:	461a      	mov	r2, r3
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	61bb      	str	r3, [r7, #24]
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d3e2      	bcc.n	800a990 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3724      	adds	r7, #36	@ 0x24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b08b      	sub	sp, #44	@ 0x2c
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9ee:	88fb      	ldrh	r3, [r7, #6]
 800a9f0:	089b      	lsrs	r3, r3, #2
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9f6:	88fb      	ldrh	r3, [r7, #6]
 800a9f8:	f003 0303 	and.w	r3, r3, #3
 800a9fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9fe:	2300      	movs	r3, #0
 800aa00:	623b      	str	r3, [r7, #32]
 800aa02:	e014      	b.n	800aa2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0e:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa12:	3301      	adds	r3, #1
 800aa14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	3301      	adds	r3, #1
 800aa1a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1e:	3301      	adds	r3, #1
 800aa20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa24:	3301      	adds	r3, #1
 800aa26:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	623b      	str	r3, [r7, #32]
 800aa2e:	6a3a      	ldr	r2, [r7, #32]
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d3e6      	bcc.n	800aa04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa36:	8bfb      	ldrh	r3, [r7, #30]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d01e      	beq.n	800aa7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa46:	461a      	mov	r2, r3
 800aa48:	f107 0310 	add.w	r3, r7, #16
 800aa4c:	6812      	ldr	r2, [r2, #0]
 800aa4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	00db      	lsls	r3, r3, #3
 800aa58:	fa22 f303 	lsr.w	r3, r2, r3
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa60:	701a      	strb	r2, [r3, #0]
      i++;
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	3301      	adds	r3, #1
 800aa66:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aa6e:	8bfb      	ldrh	r3, [r7, #30]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa74:	8bfb      	ldrh	r3, [r7, #30]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1ea      	bne.n	800aa50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	372c      	adds	r7, #44	@ 0x2c
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	785b      	ldrb	r3, [r3, #1]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d12c      	bne.n	800aafe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	db12      	blt.n	800aadc <USB_EPSetStall+0x54>
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00f      	beq.n	800aadc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	015a      	lsls	r2, r3, #5
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	4413      	add	r3, r2
 800aac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	0151      	lsls	r1, r2, #5
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	440a      	add	r2, r1
 800aad2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aad6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aada:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	0151      	lsls	r1, r2, #5
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	440a      	add	r2, r1
 800aaf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aafa:	6013      	str	r3, [r2, #0]
 800aafc:	e02b      	b.n	800ab56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	db12      	blt.n	800ab36 <USB_EPSetStall+0xae>
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00f      	beq.n	800ab36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	0151      	lsls	r1, r2, #5
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	440a      	add	r2, r1
 800ab2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	0151      	lsls	r1, r2, #5
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	440a      	add	r2, r1
 800ab4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	785b      	ldrb	r3, [r3, #1]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d128      	bne.n	800abd2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	0151      	lsls	r1, r2, #5
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	440a      	add	r2, r1
 800ab96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	791b      	ldrb	r3, [r3, #4]
 800aba4:	2b03      	cmp	r3, #3
 800aba6:	d003      	beq.n	800abb0 <USB_EPClearStall+0x4c>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	791b      	ldrb	r3, [r3, #4]
 800abac:	2b02      	cmp	r3, #2
 800abae:	d138      	bne.n	800ac22 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	015a      	lsls	r2, r3, #5
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	4413      	add	r3, r2
 800abb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	0151      	lsls	r1, r2, #5
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	440a      	add	r2, r1
 800abc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	e027      	b.n	800ac22 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	0151      	lsls	r1, r2, #5
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	440a      	add	r2, r1
 800abe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abf0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	791b      	ldrb	r3, [r3, #4]
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d003      	beq.n	800ac02 <USB_EPClearStall+0x9e>
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	791b      	ldrb	r3, [r3, #4]
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d10f      	bne.n	800ac22 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	0151      	lsls	r1, r2, #5
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	440a      	add	r2, r1
 800ac18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac20:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac4e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ac52:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	78fb      	ldrb	r3, [r7, #3]
 800ac5e:	011b      	lsls	r3, r3, #4
 800ac60:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ac64:	68f9      	ldr	r1, [r7, #12]
 800ac66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac96:	f023 0303 	bic.w	r3, r3, #3
 800ac9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acaa:	f023 0302 	bic.w	r3, r3, #2
 800acae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b085      	sub	sp, #20
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acd8:	f023 0303 	bic.w	r3, r3, #3
 800acdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acec:	f043 0302 	orr.w	r3, r3, #2
 800acf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	695b      	ldr	r3, [r3, #20]
 800ad0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	699b      	ldr	r3, [r3, #24]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	4013      	ands	r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad18:	68fb      	ldr	r3, [r7, #12]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b085      	sub	sp, #20
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad38:	699b      	ldr	r3, [r3, #24]
 800ad3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	4013      	ands	r3, r2
 800ad48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	0c1b      	lsrs	r3, r3, #16
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b085      	sub	sp, #20
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad6c:	699b      	ldr	r3, [r3, #24]
 800ad6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	b29b      	uxth	r3, r3
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b085      	sub	sp, #20
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	460b      	mov	r3, r1
 800ad98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad9e:	78fb      	ldrb	r3, [r7, #3]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	4013      	ands	r3, r2
 800adba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800adbc:	68bb      	ldr	r3, [r7, #8]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800adca:	b480      	push	{r7}
 800adcc:	b087      	sub	sp, #28
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	460b      	mov	r3, r1
 800add4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800adee:	78fb      	ldrb	r3, [r7, #3]
 800adf0:	f003 030f 	and.w	r3, r3, #15
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	fa22 f303 	lsr.w	r3, r2, r3
 800adfa:	01db      	lsls	r3, r3, #7
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae04:	78fb      	ldrb	r3, [r7, #3]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	4013      	ands	r3, r2
 800ae16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae18:	68bb      	ldr	r3, [r7, #8]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	371c      	adds	r7, #28
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr

0800ae26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae26:	b480      	push	{r7}
 800ae28:	b083      	sub	sp, #12
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	f003 0301 	and.w	r3, r3, #1
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b085      	sub	sp, #20
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae5c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ae60:	f023 0307 	bic.w	r3, r3, #7
 800ae64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	333c      	adds	r3, #60	@ 0x3c
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	4a1c      	ldr	r2, [pc, #112]	@ (800af14 <USB_EP0_OutStart+0x8c>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d90a      	bls.n	800aebe <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aeb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aeb8:	d101      	bne.n	800aebe <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	e024      	b.n	800af08 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aec4:	461a      	mov	r2, r3
 800aec6:	2300      	movs	r3, #0
 800aec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aed8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aedc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aeec:	f043 0318 	orr.w	r3, r3, #24
 800aef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af00:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800af04:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3714      	adds	r7, #20
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	4f54300a 	.word	0x4f54300a

0800af18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	3301      	adds	r3, #1
 800af28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	4a13      	ldr	r2, [pc, #76]	@ (800af7c <USB_CoreReset+0x64>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d901      	bls.n	800af36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af32:	2303      	movs	r3, #3
 800af34:	e01b      	b.n	800af6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	daf2      	bge.n	800af24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af3e:	2300      	movs	r3, #0
 800af40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	f043 0201 	orr.w	r2, r3, #1
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3301      	adds	r3, #1
 800af52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	4a09      	ldr	r2, [pc, #36]	@ (800af7c <USB_CoreReset+0x64>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d901      	bls.n	800af60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e006      	b.n	800af6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	f003 0301 	and.w	r3, r3, #1
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d0f0      	beq.n	800af4e <USB_CoreReset+0x36>

  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	00030d40 	.word	0x00030d40

0800af80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af8c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af90:	f002 fe2c 	bl	800dbec <USBD_static_malloc>
 800af94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d109      	bne.n	800afb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	32b0      	adds	r2, #176	@ 0xb0
 800afa6:	2100      	movs	r1, #0
 800afa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800afac:	2302      	movs	r3, #2
 800afae:	e0d4      	b.n	800b15a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800afb0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800afb4:	2100      	movs	r1, #0
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f002 fe36 	bl	800dc28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	32b0      	adds	r2, #176	@ 0xb0
 800afc6:	68f9      	ldr	r1, [r7, #12]
 800afc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	32b0      	adds	r2, #176	@ 0xb0
 800afd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	7c1b      	ldrb	r3, [r3, #16]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d138      	bne.n	800b05a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800afe8:	4b5e      	ldr	r3, [pc, #376]	@ (800b164 <USBD_CDC_Init+0x1e4>)
 800afea:	7819      	ldrb	r1, [r3, #0]
 800afec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aff0:	2202      	movs	r2, #2
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f002 fbe6 	bl	800d7c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aff8:	4b5a      	ldr	r3, [pc, #360]	@ (800b164 <USBD_CDC_Init+0x1e4>)
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	f003 020f 	and.w	r2, r3, #15
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	4613      	mov	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	440b      	add	r3, r1
 800b00c:	3324      	adds	r3, #36	@ 0x24
 800b00e:	2201      	movs	r2, #1
 800b010:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b012:	4b55      	ldr	r3, [pc, #340]	@ (800b168 <USBD_CDC_Init+0x1e8>)
 800b014:	7819      	ldrb	r1, [r3, #0]
 800b016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b01a:	2202      	movs	r2, #2
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f002 fbd1 	bl	800d7c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b022:	4b51      	ldr	r3, [pc, #324]	@ (800b168 <USBD_CDC_Init+0x1e8>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	f003 020f 	and.w	r2, r3, #15
 800b02a:	6879      	ldr	r1, [r7, #4]
 800b02c:	4613      	mov	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4413      	add	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	440b      	add	r3, r1
 800b036:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b03a:	2201      	movs	r2, #1
 800b03c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b03e:	4b4b      	ldr	r3, [pc, #300]	@ (800b16c <USBD_CDC_Init+0x1ec>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	f003 020f 	and.w	r2, r3, #15
 800b046:	6879      	ldr	r1, [r7, #4]
 800b048:	4613      	mov	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	440b      	add	r3, r1
 800b052:	3326      	adds	r3, #38	@ 0x26
 800b054:	2210      	movs	r2, #16
 800b056:	801a      	strh	r2, [r3, #0]
 800b058:	e035      	b.n	800b0c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b05a:	4b42      	ldr	r3, [pc, #264]	@ (800b164 <USBD_CDC_Init+0x1e4>)
 800b05c:	7819      	ldrb	r1, [r3, #0]
 800b05e:	2340      	movs	r3, #64	@ 0x40
 800b060:	2202      	movs	r2, #2
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f002 fbae 	bl	800d7c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b068:	4b3e      	ldr	r3, [pc, #248]	@ (800b164 <USBD_CDC_Init+0x1e4>)
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	f003 020f 	and.w	r2, r3, #15
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	4613      	mov	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	440b      	add	r3, r1
 800b07c:	3324      	adds	r3, #36	@ 0x24
 800b07e:	2201      	movs	r2, #1
 800b080:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b082:	4b39      	ldr	r3, [pc, #228]	@ (800b168 <USBD_CDC_Init+0x1e8>)
 800b084:	7819      	ldrb	r1, [r3, #0]
 800b086:	2340      	movs	r3, #64	@ 0x40
 800b088:	2202      	movs	r2, #2
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f002 fb9a 	bl	800d7c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b090:	4b35      	ldr	r3, [pc, #212]	@ (800b168 <USBD_CDC_Init+0x1e8>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	f003 020f 	and.w	r2, r3, #15
 800b098:	6879      	ldr	r1, [r7, #4]
 800b09a:	4613      	mov	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4413      	add	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	440b      	add	r3, r1
 800b0a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b0ac:	4b2f      	ldr	r3, [pc, #188]	@ (800b16c <USBD_CDC_Init+0x1ec>)
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	f003 020f 	and.w	r2, r3, #15
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	440b      	add	r3, r1
 800b0c0:	3326      	adds	r3, #38	@ 0x26
 800b0c2:	2210      	movs	r2, #16
 800b0c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b0c6:	4b29      	ldr	r3, [pc, #164]	@ (800b16c <USBD_CDC_Init+0x1ec>)
 800b0c8:	7819      	ldrb	r1, [r3, #0]
 800b0ca:	2308      	movs	r3, #8
 800b0cc:	2203      	movs	r2, #3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f002 fb78 	bl	800d7c4 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b0d4:	4b25      	ldr	r3, [pc, #148]	@ (800b16c <USBD_CDC_Init+0x1ec>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	f003 020f 	and.w	r2, r3, #15
 800b0dc:	6879      	ldr	r1, [r7, #4]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	440b      	add	r3, r1
 800b0e8:	3324      	adds	r3, #36	@ 0x24
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	33b0      	adds	r3, #176	@ 0xb0
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b120:	2b00      	cmp	r3, #0
 800b122:	d101      	bne.n	800b128 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b124:	2302      	movs	r3, #2
 800b126:	e018      	b.n	800b15a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	7c1b      	ldrb	r3, [r3, #16]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10a      	bne.n	800b146 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b130:	4b0d      	ldr	r3, [pc, #52]	@ (800b168 <USBD_CDC_Init+0x1e8>)
 800b132:	7819      	ldrb	r1, [r3, #0]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b13a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f002 fcba 	bl	800dab8 <USBD_LL_PrepareReceive>
 800b144:	e008      	b.n	800b158 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b146:	4b08      	ldr	r3, [pc, #32]	@ (800b168 <USBD_CDC_Init+0x1e8>)
 800b148:	7819      	ldrb	r1, [r3, #0]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b150:	2340      	movs	r3, #64	@ 0x40
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f002 fcb0 	bl	800dab8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	20000093 	.word	0x20000093
 800b168:	20000094 	.word	0x20000094
 800b16c:	20000095 	.word	0x20000095

0800b170 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	460b      	mov	r3, r1
 800b17a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b17c:	4b3a      	ldr	r3, [pc, #232]	@ (800b268 <USBD_CDC_DeInit+0xf8>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	4619      	mov	r1, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f002 fb5c 	bl	800d840 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b188:	4b37      	ldr	r3, [pc, #220]	@ (800b268 <USBD_CDC_DeInit+0xf8>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	f003 020f 	and.w	r2, r3, #15
 800b190:	6879      	ldr	r1, [r7, #4]
 800b192:	4613      	mov	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	440b      	add	r3, r1
 800b19c:	3324      	adds	r3, #36	@ 0x24
 800b19e:	2200      	movs	r2, #0
 800b1a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b1a2:	4b32      	ldr	r3, [pc, #200]	@ (800b26c <USBD_CDC_DeInit+0xfc>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f002 fb49 	bl	800d840 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b1ae:	4b2f      	ldr	r3, [pc, #188]	@ (800b26c <USBD_CDC_DeInit+0xfc>)
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	f003 020f 	and.w	r2, r3, #15
 800b1b6:	6879      	ldr	r1, [r7, #4]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	440b      	add	r3, r1
 800b1c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b1ca:	4b29      	ldr	r3, [pc, #164]	@ (800b270 <USBD_CDC_DeInit+0x100>)
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f002 fb35 	bl	800d840 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b1d6:	4b26      	ldr	r3, [pc, #152]	@ (800b270 <USBD_CDC_DeInit+0x100>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	f003 020f 	and.w	r2, r3, #15
 800b1de:	6879      	ldr	r1, [r7, #4]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	440b      	add	r3, r1
 800b1ea:	3324      	adds	r3, #36	@ 0x24
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b1f0:	4b1f      	ldr	r3, [pc, #124]	@ (800b270 <USBD_CDC_DeInit+0x100>)
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	f003 020f 	and.w	r2, r3, #15
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	440b      	add	r3, r1
 800b204:	3326      	adds	r3, #38	@ 0x26
 800b206:	2200      	movs	r2, #0
 800b208:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	32b0      	adds	r2, #176	@ 0xb0
 800b214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d01f      	beq.n	800b25c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	33b0      	adds	r3, #176	@ 0xb0
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	32b0      	adds	r2, #176	@ 0xb0
 800b23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23e:	4618      	mov	r0, r3
 800b240:	f002 fce2 	bl	800dc08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	32b0      	adds	r2, #176	@ 0xb0
 800b24e:	2100      	movs	r1, #0
 800b250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20000093 	.word	0x20000093
 800b26c:	20000094 	.word	0x20000094
 800b270:	20000095 	.word	0x20000095

0800b274 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	32b0      	adds	r2, #176	@ 0xb0
 800b288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b28e:	2300      	movs	r3, #0
 800b290:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b292:	2300      	movs	r3, #0
 800b294:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d101      	bne.n	800b2a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e0bf      	b.n	800b424 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d050      	beq.n	800b352 <USBD_CDC_Setup+0xde>
 800b2b0:	2b20      	cmp	r3, #32
 800b2b2:	f040 80af 	bne.w	800b414 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	88db      	ldrh	r3, [r3, #6]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d03a      	beq.n	800b334 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	b25b      	sxtb	r3, r3
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	da1b      	bge.n	800b300 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	33b0      	adds	r3, #176	@ 0xb0
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4413      	add	r3, r2
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b2de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2e0:	683a      	ldr	r2, [r7, #0]
 800b2e2:	88d2      	ldrh	r2, [r2, #6]
 800b2e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	88db      	ldrh	r3, [r3, #6]
 800b2ea:	2b07      	cmp	r3, #7
 800b2ec:	bf28      	it	cs
 800b2ee:	2307      	movcs	r3, #7
 800b2f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	89fa      	ldrh	r2, [r7, #14]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f001 fdb1 	bl	800ce60 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b2fe:	e090      	b.n	800b422 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	785a      	ldrb	r2, [r3, #1]
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	88db      	ldrh	r3, [r3, #6]
 800b30e:	2b3f      	cmp	r3, #63	@ 0x3f
 800b310:	d803      	bhi.n	800b31a <USBD_CDC_Setup+0xa6>
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	88db      	ldrh	r3, [r3, #6]
 800b316:	b2da      	uxtb	r2, r3
 800b318:	e000      	b.n	800b31c <USBD_CDC_Setup+0xa8>
 800b31a:	2240      	movs	r2, #64	@ 0x40
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b322:	6939      	ldr	r1, [r7, #16]
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b32a:	461a      	mov	r2, r3
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f001 fdc3 	bl	800ceb8 <USBD_CtlPrepareRx>
      break;
 800b332:	e076      	b.n	800b422 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	33b0      	adds	r3, #176	@ 0xb0
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	7850      	ldrb	r0, [r2, #1]
 800b34a:	2200      	movs	r2, #0
 800b34c:	6839      	ldr	r1, [r7, #0]
 800b34e:	4798      	blx	r3
      break;
 800b350:	e067      	b.n	800b422 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	785b      	ldrb	r3, [r3, #1]
 800b356:	2b0b      	cmp	r3, #11
 800b358:	d851      	bhi.n	800b3fe <USBD_CDC_Setup+0x18a>
 800b35a:	a201      	add	r2, pc, #4	@ (adr r2, 800b360 <USBD_CDC_Setup+0xec>)
 800b35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b360:	0800b391 	.word	0x0800b391
 800b364:	0800b40d 	.word	0x0800b40d
 800b368:	0800b3ff 	.word	0x0800b3ff
 800b36c:	0800b3ff 	.word	0x0800b3ff
 800b370:	0800b3ff 	.word	0x0800b3ff
 800b374:	0800b3ff 	.word	0x0800b3ff
 800b378:	0800b3ff 	.word	0x0800b3ff
 800b37c:	0800b3ff 	.word	0x0800b3ff
 800b380:	0800b3ff 	.word	0x0800b3ff
 800b384:	0800b3ff 	.word	0x0800b3ff
 800b388:	0800b3bb 	.word	0x0800b3bb
 800b38c:	0800b3e5 	.word	0x0800b3e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b396:	b2db      	uxtb	r3, r3
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d107      	bne.n	800b3ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b39c:	f107 030a 	add.w	r3, r7, #10
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f001 fd5b 	bl	800ce60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3aa:	e032      	b.n	800b412 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f001 fce5 	bl	800cd7e <USBD_CtlError>
            ret = USBD_FAIL;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	75fb      	strb	r3, [r7, #23]
          break;
 800b3b8:	e02b      	b.n	800b412 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d107      	bne.n	800b3d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b3c6:	f107 030d 	add.w	r3, r7, #13
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f001 fd46 	bl	800ce60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3d4:	e01d      	b.n	800b412 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f001 fcd0 	bl	800cd7e <USBD_CtlError>
            ret = USBD_FAIL;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b3e2:	e016      	b.n	800b412 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	2b03      	cmp	r3, #3
 800b3ee:	d00f      	beq.n	800b410 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f001 fcc3 	bl	800cd7e <USBD_CtlError>
            ret = USBD_FAIL;
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b3fc:	e008      	b.n	800b410 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f001 fcbc 	bl	800cd7e <USBD_CtlError>
          ret = USBD_FAIL;
 800b406:	2303      	movs	r3, #3
 800b408:	75fb      	strb	r3, [r7, #23]
          break;
 800b40a:	e002      	b.n	800b412 <USBD_CDC_Setup+0x19e>
          break;
 800b40c:	bf00      	nop
 800b40e:	e008      	b.n	800b422 <USBD_CDC_Setup+0x1ae>
          break;
 800b410:	bf00      	nop
      }
      break;
 800b412:	e006      	b.n	800b422 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 fcb1 	bl	800cd7e <USBD_CtlError>
      ret = USBD_FAIL;
 800b41c:	2303      	movs	r3, #3
 800b41e:	75fb      	strb	r3, [r7, #23]
      break;
 800b420:	bf00      	nop
  }

  return (uint8_t)ret;
 800b422:	7dfb      	ldrb	r3, [r7, #23]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b43e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	32b0      	adds	r2, #176	@ 0xb0
 800b44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b452:	2303      	movs	r3, #3
 800b454:	e065      	b.n	800b522 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	32b0      	adds	r2, #176	@ 0xb0
 800b460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b464:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b466:	78fb      	ldrb	r3, [r7, #3]
 800b468:	f003 020f 	and.w	r2, r3, #15
 800b46c:	6879      	ldr	r1, [r7, #4]
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	440b      	add	r3, r1
 800b478:	3318      	adds	r3, #24
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d02f      	beq.n	800b4e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b480:	78fb      	ldrb	r3, [r7, #3]
 800b482:	f003 020f 	and.w	r2, r3, #15
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	4613      	mov	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	440b      	add	r3, r1
 800b492:	3318      	adds	r3, #24
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	78fb      	ldrb	r3, [r7, #3]
 800b498:	f003 010f 	and.w	r1, r3, #15
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	460b      	mov	r3, r1
 800b4a0:	00db      	lsls	r3, r3, #3
 800b4a2:	440b      	add	r3, r1
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4403      	add	r3, r0
 800b4a8:	3344      	adds	r3, #68	@ 0x44
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800b4b0:	fb01 f303 	mul.w	r3, r1, r3
 800b4b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d112      	bne.n	800b4e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b4ba:	78fb      	ldrb	r3, [r7, #3]
 800b4bc:	f003 020f 	and.w	r2, r3, #15
 800b4c0:	6879      	ldr	r1, [r7, #4]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	440b      	add	r3, r1
 800b4cc:	3318      	adds	r3, #24
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b4d2:	78f9      	ldrb	r1, [r7, #3]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f002 fab5 	bl	800da48 <USBD_LL_Transmit>
 800b4de:	e01f      	b.n	800b520 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	33b0      	adds	r3, #176	@ 0xb0
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d010      	beq.n	800b520 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	33b0      	adds	r3, #176	@ 0xb0
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	4413      	add	r3, r2
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b51c:	78fa      	ldrb	r2, [r7, #3]
 800b51e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	460b      	mov	r3, r1
 800b534:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	32b0      	adds	r2, #176	@ 0xb0
 800b540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b544:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	32b0      	adds	r2, #176	@ 0xb0
 800b550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b558:	2303      	movs	r3, #3
 800b55a:	e01a      	b.n	800b592 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b55c:	78fb      	ldrb	r3, [r7, #3]
 800b55e:	4619      	mov	r1, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f002 fae1 	bl	800db28 <USBD_LL_GetRxDataSize>
 800b566:	4602      	mov	r2, r0
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	33b0      	adds	r3, #176	@ 0xb0
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4413      	add	r3, r2
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b58c:	4611      	mov	r1, r2
 800b58e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	32b0      	adds	r2, #176	@ 0xb0
 800b5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e024      	b.n	800b606 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	33b0      	adds	r3, #176	@ 0xb0
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4413      	add	r3, r2
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d019      	beq.n	800b604 <USBD_CDC_EP0_RxReady+0x6a>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b5d6:	2bff      	cmp	r3, #255	@ 0xff
 800b5d8:	d014      	beq.n	800b604 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	33b0      	adds	r3, #176	@ 0xb0
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4413      	add	r3, r2
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b5f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	22ff      	movs	r2, #255	@ 0xff
 800b600:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
	...

0800b610 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b618:	2182      	movs	r1, #130	@ 0x82
 800b61a:	4818      	ldr	r0, [pc, #96]	@ (800b67c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b61c:	f000 fd4f 	bl	800c0be <USBD_GetEpDesc>
 800b620:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b622:	2101      	movs	r1, #1
 800b624:	4815      	ldr	r0, [pc, #84]	@ (800b67c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b626:	f000 fd4a 	bl	800c0be <USBD_GetEpDesc>
 800b62a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b62c:	2181      	movs	r1, #129	@ 0x81
 800b62e:	4813      	ldr	r0, [pc, #76]	@ (800b67c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b630:	f000 fd45 	bl	800c0be <USBD_GetEpDesc>
 800b634:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	2210      	movs	r2, #16
 800b640:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d006      	beq.n	800b656 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b650:	711a      	strb	r2, [r3, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d006      	beq.n	800b66a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b664:	711a      	strb	r2, [r3, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2243      	movs	r2, #67	@ 0x43
 800b66e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b670:	4b02      	ldr	r3, [pc, #8]	@ (800b67c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b672:	4618      	mov	r0, r3
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20000050 	.word	0x20000050

0800b680 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b688:	2182      	movs	r1, #130	@ 0x82
 800b68a:	4818      	ldr	r0, [pc, #96]	@ (800b6ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b68c:	f000 fd17 	bl	800c0be <USBD_GetEpDesc>
 800b690:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b692:	2101      	movs	r1, #1
 800b694:	4815      	ldr	r0, [pc, #84]	@ (800b6ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b696:	f000 fd12 	bl	800c0be <USBD_GetEpDesc>
 800b69a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b69c:	2181      	movs	r1, #129	@ 0x81
 800b69e:	4813      	ldr	r0, [pc, #76]	@ (800b6ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6a0:	f000 fd0d 	bl	800c0be <USBD_GetEpDesc>
 800b6a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	2210      	movs	r2, #16
 800b6b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d006      	beq.n	800b6c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	711a      	strb	r2, [r3, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f042 0202 	orr.w	r2, r2, #2
 800b6c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d006      	beq.n	800b6da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	711a      	strb	r2, [r3, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f042 0202 	orr.w	r2, r2, #2
 800b6d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2243      	movs	r2, #67	@ 0x43
 800b6de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6e0:	4b02      	ldr	r3, [pc, #8]	@ (800b6ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3718      	adds	r7, #24
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20000050 	.word	0x20000050

0800b6f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6f8:	2182      	movs	r1, #130	@ 0x82
 800b6fa:	4818      	ldr	r0, [pc, #96]	@ (800b75c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6fc:	f000 fcdf 	bl	800c0be <USBD_GetEpDesc>
 800b700:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b702:	2101      	movs	r1, #1
 800b704:	4815      	ldr	r0, [pc, #84]	@ (800b75c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b706:	f000 fcda 	bl	800c0be <USBD_GetEpDesc>
 800b70a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b70c:	2181      	movs	r1, #129	@ 0x81
 800b70e:	4813      	ldr	r0, [pc, #76]	@ (800b75c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b710:	f000 fcd5 	bl	800c0be <USBD_GetEpDesc>
 800b714:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	2210      	movs	r2, #16
 800b720:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d006      	beq.n	800b736 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b730:	711a      	strb	r2, [r3, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d006      	beq.n	800b74a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b744:	711a      	strb	r2, [r3, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2243      	movs	r2, #67	@ 0x43
 800b74e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b750:	4b02      	ldr	r3, [pc, #8]	@ (800b75c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b752:	4618      	mov	r0, r3
 800b754:	3718      	adds	r7, #24
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20000050 	.word	0x20000050

0800b760 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	220a      	movs	r2, #10
 800b76c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b76e:	4b03      	ldr	r3, [pc, #12]	@ (800b77c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b770:	4618      	mov	r0, r3
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	2000000c 	.word	0x2000000c

0800b780 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b790:	2303      	movs	r3, #3
 800b792:	e009      	b.n	800b7a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	33b0      	adds	r3, #176	@ 0xb0
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4413      	add	r3, r2
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	32b0      	adds	r2, #176	@ 0xb0
 800b7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	e008      	b.n	800b7ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	371c      	adds	r7, #28
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	32b0      	adds	r2, #176	@ 0xb0
 800b80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b810:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d101      	bne.n	800b81c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b818:	2303      	movs	r3, #3
 800b81a:	e004      	b.n	800b826 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
	...

0800b834 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	32b0      	adds	r2, #176	@ 0xb0
 800b846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b84c:	2301      	movs	r3, #1
 800b84e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b856:	2303      	movs	r3, #3
 800b858:	e025      	b.n	800b8a6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b860:	2b00      	cmp	r3, #0
 800b862:	d11f      	bne.n	800b8a4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	2201      	movs	r2, #1
 800b868:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b86c:	4b10      	ldr	r3, [pc, #64]	@ (800b8b0 <USBD_CDC_TransmitPacket+0x7c>)
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	f003 020f 	and.w	r2, r3, #15
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	4613      	mov	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4403      	add	r3, r0
 800b886:	3318      	adds	r3, #24
 800b888:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b88a:	4b09      	ldr	r3, [pc, #36]	@ (800b8b0 <USBD_CDC_TransmitPacket+0x7c>)
 800b88c:	7819      	ldrb	r1, [r3, #0]
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f002 f8d4 	bl	800da48 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	20000093 	.word	0x20000093

0800b8b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	32b0      	adds	r2, #176	@ 0xb0
 800b8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	32b0      	adds	r2, #176	@ 0xb0
 800b8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e018      	b.n	800b914 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	7c1b      	ldrb	r3, [r3, #16]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b91c <USBD_CDC_ReceivePacket+0x68>)
 800b8ec:	7819      	ldrb	r1, [r3, #0]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f002 f8dd 	bl	800dab8 <USBD_LL_PrepareReceive>
 800b8fe:	e008      	b.n	800b912 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b900:	4b06      	ldr	r3, [pc, #24]	@ (800b91c <USBD_CDC_ReceivePacket+0x68>)
 800b902:	7819      	ldrb	r1, [r3, #0]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b90a:	2340      	movs	r3, #64	@ 0x40
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f002 f8d3 	bl	800dab8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	20000094 	.word	0x20000094

0800b920 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	4613      	mov	r3, r2
 800b92c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b934:	2303      	movs	r3, #3
 800b936:	e01f      	b.n	800b978 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d003      	beq.n	800b95e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	79fa      	ldrb	r2, [r7, #7]
 800b96a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f001 feab 	bl	800d6c8 <USBD_LL_Init>
 800b972:	4603      	mov	r3, r0
 800b974:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b976:	7dfb      	ldrb	r3, [r7, #23]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3718      	adds	r7, #24
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b98a:	2300      	movs	r3, #0
 800b98c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b994:	2303      	movs	r3, #3
 800b996:	e025      	b.n	800b9e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	32ae      	adds	r2, #174	@ 0xae
 800b9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00f      	beq.n	800b9d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	32ae      	adds	r2, #174	@ 0xae
 800b9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c4:	f107 020e 	add.w	r2, r7, #14
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	4798      	blx	r3
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b9da:	1c5a      	adds	r2, r3, #1
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f001 feb3 	bl	800d760 <USBD_LL_Start>
 800b9fa:	4603      	mov	r3, r0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	370c      	adds	r7, #12
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	460b      	mov	r3, r1
 800ba24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d009      	beq.n	800ba48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	78fa      	ldrb	r2, [r7, #3]
 800ba3e:	4611      	mov	r1, r2
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	4798      	blx	r3
 800ba44:	4603      	mov	r3, r0
 800ba46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b084      	sub	sp, #16
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	78fa      	ldrb	r2, [r7, #3]
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	4798      	blx	r3
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b084      	sub	sp, #16
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f001 f936 	bl	800cd0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800baac:	461a      	mov	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800baba:	f003 031f 	and.w	r3, r3, #31
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d01a      	beq.n	800baf8 <USBD_LL_SetupStage+0x72>
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	d822      	bhi.n	800bb0c <USBD_LL_SetupStage+0x86>
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <USBD_LL_SetupStage+0x4a>
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d00a      	beq.n	800bae4 <USBD_LL_SetupStage+0x5e>
 800bace:	e01d      	b.n	800bb0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bad6:	4619      	mov	r1, r3
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fb63 	bl	800c1a4 <USBD_StdDevReq>
 800bade:	4603      	mov	r3, r0
 800bae0:	73fb      	strb	r3, [r7, #15]
      break;
 800bae2:	e020      	b.n	800bb26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fbcb 	bl	800c288 <USBD_StdItfReq>
 800baf2:	4603      	mov	r3, r0
 800baf4:	73fb      	strb	r3, [r7, #15]
      break;
 800baf6:	e016      	b.n	800bb26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bafe:	4619      	mov	r1, r3
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fc2d 	bl	800c360 <USBD_StdEPReq>
 800bb06:	4603      	mov	r3, r0
 800bb08:	73fb      	strb	r3, [r7, #15]
      break;
 800bb0a:	e00c      	b.n	800bb26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb12:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	4619      	mov	r1, r3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f001 fec6 	bl	800d8ac <USBD_LL_StallEP>
 800bb20:	4603      	mov	r3, r0
 800bb22:	73fb      	strb	r3, [r7, #15]
      break;
 800bb24:	bf00      	nop
  }

  return ret;
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	607a      	str	r2, [r7, #4]
 800bb3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bb42:	7afb      	ldrb	r3, [r7, #11]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d16e      	bne.n	800bc26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bb4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb56:	2b03      	cmp	r3, #3
 800bb58:	f040 8098 	bne.w	800bc8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	689a      	ldr	r2, [r3, #8]
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d913      	bls.n	800bb90 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	689a      	ldr	r2, [r3, #8]
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	1ad2      	subs	r2, r2, r3
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	68da      	ldr	r2, [r3, #12]
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	bf28      	it	cs
 800bb82:	4613      	movcs	r3, r2
 800bb84:	461a      	mov	r2, r3
 800bb86:	6879      	ldr	r1, [r7, #4]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f001 f9b2 	bl	800cef2 <USBD_CtlContinueRx>
 800bb8e:	e07d      	b.n	800bc8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb96:	f003 031f 	and.w	r3, r3, #31
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d014      	beq.n	800bbc8 <USBD_LL_DataOutStage+0x98>
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d81d      	bhi.n	800bbde <USBD_LL_DataOutStage+0xae>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d002      	beq.n	800bbac <USBD_LL_DataOutStage+0x7c>
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d003      	beq.n	800bbb2 <USBD_LL_DataOutStage+0x82>
 800bbaa:	e018      	b.n	800bbde <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bbac:	2300      	movs	r3, #0
 800bbae:	75bb      	strb	r3, [r7, #22]
            break;
 800bbb0:	e018      	b.n	800bbe4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	4619      	mov	r1, r3
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f000 fa64 	bl	800c08a <USBD_CoreFindIF>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	75bb      	strb	r3, [r7, #22]
            break;
 800bbc6:	e00d      	b.n	800bbe4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f000 fa66 	bl	800c0a4 <USBD_CoreFindEP>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	75bb      	strb	r3, [r7, #22]
            break;
 800bbdc:	e002      	b.n	800bbe4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	75bb      	strb	r3, [r7, #22]
            break;
 800bbe2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bbe4:	7dbb      	ldrb	r3, [r7, #22]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d119      	bne.n	800bc1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	d113      	bne.n	800bc1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bbf6:	7dba      	ldrb	r2, [r7, #22]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	32ae      	adds	r2, #174	@ 0xae
 800bbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00b      	beq.n	800bc1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bc06:	7dba      	ldrb	r2, [r7, #22]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bc0e:	7dba      	ldrb	r2, [r7, #22]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	32ae      	adds	r2, #174	@ 0xae
 800bc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f001 f978 	bl	800cf14 <USBD_CtlSendStatus>
 800bc24:	e032      	b.n	800bc8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bc26:	7afb      	ldrb	r3, [r7, #11]
 800bc28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	4619      	mov	r1, r3
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f000 fa37 	bl	800c0a4 <USBD_CoreFindEP>
 800bc36:	4603      	mov	r3, r0
 800bc38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc3a:	7dbb      	ldrb	r3, [r7, #22]
 800bc3c:	2bff      	cmp	r3, #255	@ 0xff
 800bc3e:	d025      	beq.n	800bc8c <USBD_LL_DataOutStage+0x15c>
 800bc40:	7dbb      	ldrb	r3, [r7, #22]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d122      	bne.n	800bc8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	2b03      	cmp	r3, #3
 800bc50:	d117      	bne.n	800bc82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bc52:	7dba      	ldrb	r2, [r7, #22]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	32ae      	adds	r2, #174	@ 0xae
 800bc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00f      	beq.n	800bc82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bc62:	7dba      	ldrb	r2, [r7, #22]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bc6a:	7dba      	ldrb	r2, [r7, #22]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	32ae      	adds	r2, #174	@ 0xae
 800bc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	7afa      	ldrb	r2, [r7, #11]
 800bc78:	4611      	mov	r1, r2
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	4798      	blx	r3
 800bc7e:	4603      	mov	r3, r0
 800bc80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bc88:	7dfb      	ldrb	r3, [r7, #23]
 800bc8a:	e000      	b.n	800bc8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b086      	sub	sp, #24
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	460b      	mov	r3, r1
 800bca0:	607a      	str	r2, [r7, #4]
 800bca2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bca4:	7afb      	ldrb	r3, [r7, #11]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d16f      	bne.n	800bd8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	3314      	adds	r3, #20
 800bcae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d15a      	bne.n	800bd70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	689a      	ldr	r2, [r3, #8]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d914      	bls.n	800bcf0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	689a      	ldr	r2, [r3, #8]
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	1ad2      	subs	r2, r2, r3
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	6879      	ldr	r1, [r7, #4]
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f001 f8da 	bl	800ce96 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bce2:	2300      	movs	r3, #0
 800bce4:	2200      	movs	r2, #0
 800bce6:	2100      	movs	r1, #0
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f001 fee5 	bl	800dab8 <USBD_LL_PrepareReceive>
 800bcee:	e03f      	b.n	800bd70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	68da      	ldr	r2, [r3, #12]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d11c      	bne.n	800bd36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	685a      	ldr	r2, [r3, #4]
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d316      	bcc.n	800bd36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	685a      	ldr	r2, [r3, #4]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d20f      	bcs.n	800bd36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd16:	2200      	movs	r2, #0
 800bd18:	2100      	movs	r1, #0
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f001 f8bb 	bl	800ce96 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd28:	2300      	movs	r3, #0
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f001 fec2 	bl	800dab8 <USBD_LL_PrepareReceive>
 800bd34:	e01c      	b.n	800bd70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d10f      	bne.n	800bd62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d009      	beq.n	800bd62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd62:	2180      	movs	r1, #128	@ 0x80
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f001 fda1 	bl	800d8ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f001 f8e5 	bl	800cf3a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d03a      	beq.n	800bdf0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f7ff fe42 	bl	800ba04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bd88:	e032      	b.n	800bdf0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bd8a:	7afb      	ldrb	r3, [r7, #11]
 800bd8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	4619      	mov	r1, r3
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f000 f985 	bl	800c0a4 <USBD_CoreFindEP>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	2bff      	cmp	r3, #255	@ 0xff
 800bda2:	d025      	beq.n	800bdf0 <USBD_LL_DataInStage+0x15a>
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d122      	bne.n	800bdf0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	d11c      	bne.n	800bdf0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bdb6:	7dfa      	ldrb	r2, [r7, #23]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	32ae      	adds	r2, #174	@ 0xae
 800bdbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc0:	695b      	ldr	r3, [r3, #20]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d014      	beq.n	800bdf0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bdc6:	7dfa      	ldrb	r2, [r7, #23]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bdce:	7dfa      	ldrb	r2, [r7, #23]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	32ae      	adds	r2, #174	@ 0xae
 800bdd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	7afa      	ldrb	r2, [r7, #11]
 800bddc:	4611      	mov	r1, r2
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	4798      	blx	r3
 800bde2:	4603      	mov	r3, r0
 800bde4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bde6:	7dbb      	ldrb	r3, [r7, #22]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bdec:	7dbb      	ldrb	r3, [r7, #22]
 800bdee:	e000      	b.n	800bdf2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3718      	adds	r7, #24
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b084      	sub	sp, #16
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be32:	2b00      	cmp	r3, #0
 800be34:	d014      	beq.n	800be60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00e      	beq.n	800be60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	6852      	ldr	r2, [r2, #4]
 800be4e:	b2d2      	uxtb	r2, r2
 800be50:	4611      	mov	r1, r2
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	4798      	blx	r3
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800be5c:	2303      	movs	r3, #3
 800be5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be60:	2340      	movs	r3, #64	@ 0x40
 800be62:	2200      	movs	r2, #0
 800be64:	2100      	movs	r1, #0
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f001 fcac 	bl	800d7c4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2240      	movs	r2, #64	@ 0x40
 800be78:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be7c:	2340      	movs	r3, #64	@ 0x40
 800be7e:	2200      	movs	r2, #0
 800be80:	2180      	movs	r1, #128	@ 0x80
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f001 fc9e 	bl	800d7c4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2240      	movs	r2, #64	@ 0x40
 800be92:	621a      	str	r2, [r3, #32]

  return ret;
 800be94:	7bfb      	ldrb	r3, [r7, #15]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b083      	sub	sp, #12
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	460b      	mov	r3, r1
 800bea8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	78fa      	ldrb	r2, [r7, #3]
 800beae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bebe:	b480      	push	{r7}
 800bec0:	b083      	sub	sp, #12
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800becc:	b2db      	uxtb	r3, r3
 800bece:	2b04      	cmp	r3, #4
 800bed0:	d006      	beq.n	800bee0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2204      	movs	r2, #4
 800bee4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	370c      	adds	r7, #12
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bef6:	b480      	push	{r7}
 800bef8:	b083      	sub	sp, #12
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b04      	cmp	r3, #4
 800bf08:	d106      	bne.n	800bf18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bf10:	b2da      	uxtb	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b082      	sub	sp, #8
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d110      	bne.n	800bf5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00b      	beq.n	800bf5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf4a:	69db      	ldr	r3, [r3, #28]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d005      	beq.n	800bf5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf56:	69db      	ldr	r3, [r3, #28]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b082      	sub	sp, #8
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	460b      	mov	r3, r1
 800bf70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	32ae      	adds	r2, #174	@ 0xae
 800bf7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d101      	bne.n	800bf88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e01c      	b.n	800bfc2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b03      	cmp	r3, #3
 800bf92:	d115      	bne.n	800bfc0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	32ae      	adds	r2, #174	@ 0xae
 800bf9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa2:	6a1b      	ldr	r3, [r3, #32]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00b      	beq.n	800bfc0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	32ae      	adds	r2, #174	@ 0xae
 800bfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb6:	6a1b      	ldr	r3, [r3, #32]
 800bfb8:	78fa      	ldrb	r2, [r7, #3]
 800bfba:	4611      	mov	r1, r2
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b082      	sub	sp, #8
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	32ae      	adds	r2, #174	@ 0xae
 800bfe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d101      	bne.n	800bfec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	e01c      	b.n	800c026 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	2b03      	cmp	r3, #3
 800bff6:	d115      	bne.n	800c024 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	32ae      	adds	r2, #174	@ 0xae
 800c002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00b      	beq.n	800c024 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	32ae      	adds	r2, #174	@ 0xae
 800c016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c01c:	78fa      	ldrb	r2, [r7, #3]
 800c01e:	4611      	mov	r1, r2
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c02e:	b480      	push	{r7}
 800c030:	b083      	sub	sp, #12
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00e      	beq.n	800c080 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	6852      	ldr	r2, [r2, #4]
 800c06e:	b2d2      	uxtb	r2, r2
 800c070:	4611      	mov	r1, r2
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	4798      	blx	r3
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c07c:	2303      	movs	r3, #3
 800c07e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c080:	7bfb      	ldrb	r3, [r7, #15]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c08a:	b480      	push	{r7}
 800c08c:	b083      	sub	sp, #12
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	460b      	mov	r3, r1
 800c094:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c096:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c098:	4618      	mov	r0, r3
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c0b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b086      	sub	sp, #24
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	885b      	ldrh	r3, [r3, #2]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	7812      	ldrb	r2, [r2, #0]
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d91f      	bls.n	800c124 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c0ea:	e013      	b.n	800c114 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c0ec:	f107 030a 	add.w	r3, r7, #10
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6978      	ldr	r0, [r7, #20]
 800c0f4:	f000 f81b 	bl	800c12e <USBD_GetNextDesc>
 800c0f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	785b      	ldrb	r3, [r3, #1]
 800c0fe:	2b05      	cmp	r3, #5
 800c100:	d108      	bne.n	800c114 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	789b      	ldrb	r3, [r3, #2]
 800c10a:	78fa      	ldrb	r2, [r7, #3]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d008      	beq.n	800c122 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c110:	2300      	movs	r3, #0
 800c112:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	885b      	ldrh	r3, [r3, #2]
 800c118:	b29a      	uxth	r2, r3
 800c11a:	897b      	ldrh	r3, [r7, #10]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d8e5      	bhi.n	800c0ec <USBD_GetEpDesc+0x2e>
 800c120:	e000      	b.n	800c124 <USBD_GetEpDesc+0x66>
          break;
 800c122:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c124:	693b      	ldr	r3, [r7, #16]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c12e:	b480      	push	{r7}
 800c130:	b085      	sub	sp, #20
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	881b      	ldrh	r3, [r3, #0]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	7812      	ldrb	r2, [r2, #0]
 800c144:	4413      	add	r3, r2
 800c146:	b29a      	uxth	r2, r3
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4413      	add	r3, r2
 800c156:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c158:	68fb      	ldr	r3, [r7, #12]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3714      	adds	r7, #20
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c166:	b480      	push	{r7}
 800c168:	b087      	sub	sp, #28
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	3301      	adds	r3, #1
 800c17c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c184:	8a3b      	ldrh	r3, [r7, #16]
 800c186:	021b      	lsls	r3, r3, #8
 800c188:	b21a      	sxth	r2, r3
 800c18a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c18e:	4313      	orrs	r3, r2
 800c190:	b21b      	sxth	r3, r3
 800c192:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c194:	89fb      	ldrh	r3, [r7, #14]
}
 800c196:	4618      	mov	r0, r3
 800c198:	371c      	adds	r7, #28
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
	...

0800c1a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1ba:	2b40      	cmp	r3, #64	@ 0x40
 800c1bc:	d005      	beq.n	800c1ca <USBD_StdDevReq+0x26>
 800c1be:	2b40      	cmp	r3, #64	@ 0x40
 800c1c0:	d857      	bhi.n	800c272 <USBD_StdDevReq+0xce>
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00f      	beq.n	800c1e6 <USBD_StdDevReq+0x42>
 800c1c6:	2b20      	cmp	r3, #32
 800c1c8:	d153      	bne.n	800c272 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	32ae      	adds	r2, #174	@ 0xae
 800c1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	4798      	blx	r3
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c1e4:	e04a      	b.n	800c27c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	785b      	ldrb	r3, [r3, #1]
 800c1ea:	2b09      	cmp	r3, #9
 800c1ec:	d83b      	bhi.n	800c266 <USBD_StdDevReq+0xc2>
 800c1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c1f4 <USBD_StdDevReq+0x50>)
 800c1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f4:	0800c249 	.word	0x0800c249
 800c1f8:	0800c25d 	.word	0x0800c25d
 800c1fc:	0800c267 	.word	0x0800c267
 800c200:	0800c253 	.word	0x0800c253
 800c204:	0800c267 	.word	0x0800c267
 800c208:	0800c227 	.word	0x0800c227
 800c20c:	0800c21d 	.word	0x0800c21d
 800c210:	0800c267 	.word	0x0800c267
 800c214:	0800c23f 	.word	0x0800c23f
 800c218:	0800c231 	.word	0x0800c231
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fa3c 	bl	800c69c <USBD_GetDescriptor>
          break;
 800c224:	e024      	b.n	800c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fbcb 	bl	800c9c4 <USBD_SetAddress>
          break;
 800c22e:	e01f      	b.n	800c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fc0a 	bl	800ca4c <USBD_SetConfig>
 800c238:	4603      	mov	r3, r0
 800c23a:	73fb      	strb	r3, [r7, #15]
          break;
 800c23c:	e018      	b.n	800c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 fcad 	bl	800cba0 <USBD_GetConfig>
          break;
 800c246:	e013      	b.n	800c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c248:	6839      	ldr	r1, [r7, #0]
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fcde 	bl	800cc0c <USBD_GetStatus>
          break;
 800c250:	e00e      	b.n	800c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c252:	6839      	ldr	r1, [r7, #0]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fd0d 	bl	800cc74 <USBD_SetFeature>
          break;
 800c25a:	e009      	b.n	800c270 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fd31 	bl	800ccc6 <USBD_ClrFeature>
          break;
 800c264:	e004      	b.n	800c270 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fd88 	bl	800cd7e <USBD_CtlError>
          break;
 800c26e:	bf00      	nop
      }
      break;
 800c270:	e004      	b.n	800c27c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fd82 	bl	800cd7e <USBD_CtlError>
      break;
 800c27a:	bf00      	nop
  }

  return ret;
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop

0800c288 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c29e:	2b40      	cmp	r3, #64	@ 0x40
 800c2a0:	d005      	beq.n	800c2ae <USBD_StdItfReq+0x26>
 800c2a2:	2b40      	cmp	r3, #64	@ 0x40
 800c2a4:	d852      	bhi.n	800c34c <USBD_StdItfReq+0xc4>
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d001      	beq.n	800c2ae <USBD_StdItfReq+0x26>
 800c2aa:	2b20      	cmp	r3, #32
 800c2ac:	d14e      	bne.n	800c34c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	2b02      	cmp	r3, #2
 800c2ba:	d840      	bhi.n	800c33e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	889b      	ldrh	r3, [r3, #4]
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d836      	bhi.n	800c334 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	889b      	ldrh	r3, [r3, #4]
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff fedb 	bl	800c08a <USBD_CoreFindIF>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
 800c2da:	2bff      	cmp	r3, #255	@ 0xff
 800c2dc:	d01d      	beq.n	800c31a <USBD_StdItfReq+0x92>
 800c2de:	7bbb      	ldrb	r3, [r7, #14]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d11a      	bne.n	800c31a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c2e4:	7bba      	ldrb	r2, [r7, #14]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	32ae      	adds	r2, #174	@ 0xae
 800c2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00f      	beq.n	800c314 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c2f4:	7bba      	ldrb	r2, [r7, #14]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c2fc:	7bba      	ldrb	r2, [r7, #14]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	32ae      	adds	r2, #174	@ 0xae
 800c302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	4798      	blx	r3
 800c30e:	4603      	mov	r3, r0
 800c310:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c312:	e004      	b.n	800c31e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c314:	2303      	movs	r3, #3
 800c316:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c318:	e001      	b.n	800c31e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c31a:	2303      	movs	r3, #3
 800c31c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	88db      	ldrh	r3, [r3, #6]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d110      	bne.n	800c348 <USBD_StdItfReq+0xc0>
 800c326:	7bfb      	ldrb	r3, [r7, #15]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10d      	bne.n	800c348 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 fdf1 	bl	800cf14 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c332:	e009      	b.n	800c348 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fd21 	bl	800cd7e <USBD_CtlError>
          break;
 800c33c:	e004      	b.n	800c348 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fd1c 	bl	800cd7e <USBD_CtlError>
          break;
 800c346:	e000      	b.n	800c34a <USBD_StdItfReq+0xc2>
          break;
 800c348:	bf00      	nop
      }
      break;
 800c34a:	e004      	b.n	800c356 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c34c:	6839      	ldr	r1, [r7, #0]
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fd15 	bl	800cd7e <USBD_CtlError>
      break;
 800c354:	bf00      	nop
  }

  return ret;
 800c356:	7bfb      	ldrb	r3, [r7, #15]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	889b      	ldrh	r3, [r3, #4]
 800c372:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c37c:	2b40      	cmp	r3, #64	@ 0x40
 800c37e:	d007      	beq.n	800c390 <USBD_StdEPReq+0x30>
 800c380:	2b40      	cmp	r3, #64	@ 0x40
 800c382:	f200 817f 	bhi.w	800c684 <USBD_StdEPReq+0x324>
 800c386:	2b00      	cmp	r3, #0
 800c388:	d02a      	beq.n	800c3e0 <USBD_StdEPReq+0x80>
 800c38a:	2b20      	cmp	r3, #32
 800c38c:	f040 817a 	bne.w	800c684 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c390:	7bbb      	ldrb	r3, [r7, #14]
 800c392:	4619      	mov	r1, r3
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f7ff fe85 	bl	800c0a4 <USBD_CoreFindEP>
 800c39a:	4603      	mov	r3, r0
 800c39c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c39e:	7b7b      	ldrb	r3, [r7, #13]
 800c3a0:	2bff      	cmp	r3, #255	@ 0xff
 800c3a2:	f000 8174 	beq.w	800c68e <USBD_StdEPReq+0x32e>
 800c3a6:	7b7b      	ldrb	r3, [r7, #13]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f040 8170 	bne.w	800c68e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c3ae:	7b7a      	ldrb	r2, [r7, #13]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c3b6:	7b7a      	ldrb	r2, [r7, #13]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	32ae      	adds	r2, #174	@ 0xae
 800c3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 8163 	beq.w	800c68e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c3c8:	7b7a      	ldrb	r2, [r7, #13]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	32ae      	adds	r2, #174	@ 0xae
 800c3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	4798      	blx	r3
 800c3da:	4603      	mov	r3, r0
 800c3dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c3de:	e156      	b.n	800c68e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	785b      	ldrb	r3, [r3, #1]
 800c3e4:	2b03      	cmp	r3, #3
 800c3e6:	d008      	beq.n	800c3fa <USBD_StdEPReq+0x9a>
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	f300 8145 	bgt.w	800c678 <USBD_StdEPReq+0x318>
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f000 809b 	beq.w	800c52a <USBD_StdEPReq+0x1ca>
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d03c      	beq.n	800c472 <USBD_StdEPReq+0x112>
 800c3f8:	e13e      	b.n	800c678 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c400:	b2db      	uxtb	r3, r3
 800c402:	2b02      	cmp	r3, #2
 800c404:	d002      	beq.n	800c40c <USBD_StdEPReq+0xac>
 800c406:	2b03      	cmp	r3, #3
 800c408:	d016      	beq.n	800c438 <USBD_StdEPReq+0xd8>
 800c40a:	e02c      	b.n	800c466 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c40c:	7bbb      	ldrb	r3, [r7, #14]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00d      	beq.n	800c42e <USBD_StdEPReq+0xce>
 800c412:	7bbb      	ldrb	r3, [r7, #14]
 800c414:	2b80      	cmp	r3, #128	@ 0x80
 800c416:	d00a      	beq.n	800c42e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c418:	7bbb      	ldrb	r3, [r7, #14]
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f001 fa45 	bl	800d8ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c422:	2180      	movs	r1, #128	@ 0x80
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f001 fa41 	bl	800d8ac <USBD_LL_StallEP>
 800c42a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c42c:	e020      	b.n	800c470 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fca4 	bl	800cd7e <USBD_CtlError>
              break;
 800c436:	e01b      	b.n	800c470 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	885b      	ldrh	r3, [r3, #2]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d10e      	bne.n	800c45e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c440:	7bbb      	ldrb	r3, [r7, #14]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00b      	beq.n	800c45e <USBD_StdEPReq+0xfe>
 800c446:	7bbb      	ldrb	r3, [r7, #14]
 800c448:	2b80      	cmp	r3, #128	@ 0x80
 800c44a:	d008      	beq.n	800c45e <USBD_StdEPReq+0xfe>
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	88db      	ldrh	r3, [r3, #6]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d104      	bne.n	800c45e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c454:	7bbb      	ldrb	r3, [r7, #14]
 800c456:	4619      	mov	r1, r3
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f001 fa27 	bl	800d8ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 fd58 	bl	800cf14 <USBD_CtlSendStatus>

              break;
 800c464:	e004      	b.n	800c470 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c466:	6839      	ldr	r1, [r7, #0]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fc88 	bl	800cd7e <USBD_CtlError>
              break;
 800c46e:	bf00      	nop
          }
          break;
 800c470:	e107      	b.n	800c682 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d002      	beq.n	800c484 <USBD_StdEPReq+0x124>
 800c47e:	2b03      	cmp	r3, #3
 800c480:	d016      	beq.n	800c4b0 <USBD_StdEPReq+0x150>
 800c482:	e04b      	b.n	800c51c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c484:	7bbb      	ldrb	r3, [r7, #14]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00d      	beq.n	800c4a6 <USBD_StdEPReq+0x146>
 800c48a:	7bbb      	ldrb	r3, [r7, #14]
 800c48c:	2b80      	cmp	r3, #128	@ 0x80
 800c48e:	d00a      	beq.n	800c4a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c490:	7bbb      	ldrb	r3, [r7, #14]
 800c492:	4619      	mov	r1, r3
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f001 fa09 	bl	800d8ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c49a:	2180      	movs	r1, #128	@ 0x80
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f001 fa05 	bl	800d8ac <USBD_LL_StallEP>
 800c4a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4a4:	e040      	b.n	800c528 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c4a6:	6839      	ldr	r1, [r7, #0]
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 fc68 	bl	800cd7e <USBD_CtlError>
              break;
 800c4ae:	e03b      	b.n	800c528 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	885b      	ldrh	r3, [r3, #2]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d136      	bne.n	800c526 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c4b8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d004      	beq.n	800c4cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c4c2:	7bbb      	ldrb	r3, [r7, #14]
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f001 fa26 	bl	800d918 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fd21 	bl	800cf14 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c4d2:	7bbb      	ldrb	r3, [r7, #14]
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7ff fde4 	bl	800c0a4 <USBD_CoreFindEP>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4e0:	7b7b      	ldrb	r3, [r7, #13]
 800c4e2:	2bff      	cmp	r3, #255	@ 0xff
 800c4e4:	d01f      	beq.n	800c526 <USBD_StdEPReq+0x1c6>
 800c4e6:	7b7b      	ldrb	r3, [r7, #13]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d11c      	bne.n	800c526 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c4ec:	7b7a      	ldrb	r2, [r7, #13]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c4f4:	7b7a      	ldrb	r2, [r7, #13]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	32ae      	adds	r2, #174	@ 0xae
 800c4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d010      	beq.n	800c526 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c504:	7b7a      	ldrb	r2, [r7, #13]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	32ae      	adds	r2, #174	@ 0xae
 800c50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	4798      	blx	r3
 800c516:	4603      	mov	r3, r0
 800c518:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c51a:	e004      	b.n	800c526 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c51c:	6839      	ldr	r1, [r7, #0]
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fc2d 	bl	800cd7e <USBD_CtlError>
              break;
 800c524:	e000      	b.n	800c528 <USBD_StdEPReq+0x1c8>
              break;
 800c526:	bf00      	nop
          }
          break;
 800c528:	e0ab      	b.n	800c682 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2b02      	cmp	r3, #2
 800c534:	d002      	beq.n	800c53c <USBD_StdEPReq+0x1dc>
 800c536:	2b03      	cmp	r3, #3
 800c538:	d032      	beq.n	800c5a0 <USBD_StdEPReq+0x240>
 800c53a:	e097      	b.n	800c66c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c53c:	7bbb      	ldrb	r3, [r7, #14]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d007      	beq.n	800c552 <USBD_StdEPReq+0x1f2>
 800c542:	7bbb      	ldrb	r3, [r7, #14]
 800c544:	2b80      	cmp	r3, #128	@ 0x80
 800c546:	d004      	beq.n	800c552 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c548:	6839      	ldr	r1, [r7, #0]
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 fc17 	bl	800cd7e <USBD_CtlError>
                break;
 800c550:	e091      	b.n	800c676 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c556:	2b00      	cmp	r3, #0
 800c558:	da0b      	bge.n	800c572 <USBD_StdEPReq+0x212>
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
 800c55c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c560:	4613      	mov	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	3310      	adds	r3, #16
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	4413      	add	r3, r2
 800c56e:	3304      	adds	r3, #4
 800c570:	e00b      	b.n	800c58a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c572:	7bbb      	ldrb	r3, [r7, #14]
 800c574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c578:	4613      	mov	r3, r2
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	4413      	add	r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	4413      	add	r3, r2
 800c588:	3304      	adds	r3, #4
 800c58a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	2200      	movs	r2, #0
 800c590:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2202      	movs	r2, #2
 800c596:	4619      	mov	r1, r3
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fc61 	bl	800ce60 <USBD_CtlSendData>
              break;
 800c59e:	e06a      	b.n	800c676 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c5a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	da11      	bge.n	800c5cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5a8:	7bbb      	ldrb	r3, [r7, #14]
 800c5aa:	f003 020f 	and.w	r2, r3, #15
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	440b      	add	r3, r1
 800c5ba:	3324      	adds	r3, #36	@ 0x24
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d117      	bne.n	800c5f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c5c2:	6839      	ldr	r1, [r7, #0]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fbda 	bl	800cd7e <USBD_CtlError>
                  break;
 800c5ca:	e054      	b.n	800c676 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5cc:	7bbb      	ldrb	r3, [r7, #14]
 800c5ce:	f003 020f 	and.w	r2, r3, #15
 800c5d2:	6879      	ldr	r1, [r7, #4]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	440b      	add	r3, r1
 800c5de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c5e2:	881b      	ldrh	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d104      	bne.n	800c5f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fbc7 	bl	800cd7e <USBD_CtlError>
                  break;
 800c5f0:	e041      	b.n	800c676 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	da0b      	bge.n	800c612 <USBD_StdEPReq+0x2b2>
 800c5fa:	7bbb      	ldrb	r3, [r7, #14]
 800c5fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c600:	4613      	mov	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4413      	add	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	3310      	adds	r3, #16
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	4413      	add	r3, r2
 800c60e:	3304      	adds	r3, #4
 800c610:	e00b      	b.n	800c62a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c612:	7bbb      	ldrb	r3, [r7, #14]
 800c614:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c618:	4613      	mov	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	4413      	add	r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	4413      	add	r3, r2
 800c628:	3304      	adds	r3, #4
 800c62a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d002      	beq.n	800c638 <USBD_StdEPReq+0x2d8>
 800c632:	7bbb      	ldrb	r3, [r7, #14]
 800c634:	2b80      	cmp	r3, #128	@ 0x80
 800c636:	d103      	bne.n	800c640 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
 800c63e:	e00e      	b.n	800c65e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c640:	7bbb      	ldrb	r3, [r7, #14]
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f001 f99d 	bl	800d984 <USBD_LL_IsStallEP>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d003      	beq.n	800c658 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2201      	movs	r2, #1
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	e002      	b.n	800c65e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	2202      	movs	r2, #2
 800c662:	4619      	mov	r1, r3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fbfb 	bl	800ce60 <USBD_CtlSendData>
              break;
 800c66a:	e004      	b.n	800c676 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c66c:	6839      	ldr	r1, [r7, #0]
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 fb85 	bl	800cd7e <USBD_CtlError>
              break;
 800c674:	bf00      	nop
          }
          break;
 800c676:	e004      	b.n	800c682 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c678:	6839      	ldr	r1, [r7, #0]
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 fb7f 	bl	800cd7e <USBD_CtlError>
          break;
 800c680:	bf00      	nop
      }
      break;
 800c682:	e005      	b.n	800c690 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fb79 	bl	800cd7e <USBD_CtlError>
      break;
 800c68c:	e000      	b.n	800c690 <USBD_StdEPReq+0x330>
      break;
 800c68e:	bf00      	nop
  }

  return ret;
 800c690:	7bfb      	ldrb	r3, [r7, #15]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
	...

0800c69c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	885b      	ldrh	r3, [r3, #2]
 800c6b6:	0a1b      	lsrs	r3, r3, #8
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	2b0e      	cmp	r3, #14
 800c6be:	f200 8152 	bhi.w	800c966 <USBD_GetDescriptor+0x2ca>
 800c6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c6c8 <USBD_GetDescriptor+0x2c>)
 800c6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c8:	0800c739 	.word	0x0800c739
 800c6cc:	0800c751 	.word	0x0800c751
 800c6d0:	0800c791 	.word	0x0800c791
 800c6d4:	0800c967 	.word	0x0800c967
 800c6d8:	0800c967 	.word	0x0800c967
 800c6dc:	0800c907 	.word	0x0800c907
 800c6e0:	0800c933 	.word	0x0800c933
 800c6e4:	0800c967 	.word	0x0800c967
 800c6e8:	0800c967 	.word	0x0800c967
 800c6ec:	0800c967 	.word	0x0800c967
 800c6f0:	0800c967 	.word	0x0800c967
 800c6f4:	0800c967 	.word	0x0800c967
 800c6f8:	0800c967 	.word	0x0800c967
 800c6fc:	0800c967 	.word	0x0800c967
 800c700:	0800c705 	.word	0x0800c705
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c70a:	69db      	ldr	r3, [r3, #28]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00b      	beq.n	800c728 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c716:	69db      	ldr	r3, [r3, #28]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	7c12      	ldrb	r2, [r2, #16]
 800c71c:	f107 0108 	add.w	r1, r7, #8
 800c720:	4610      	mov	r0, r2
 800c722:	4798      	blx	r3
 800c724:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c726:	e126      	b.n	800c976 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 fb27 	bl	800cd7e <USBD_CtlError>
        err++;
 800c730:	7afb      	ldrb	r3, [r7, #11]
 800c732:	3301      	adds	r3, #1
 800c734:	72fb      	strb	r3, [r7, #11]
      break;
 800c736:	e11e      	b.n	800c976 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	7c12      	ldrb	r2, [r2, #16]
 800c744:	f107 0108 	add.w	r1, r7, #8
 800c748:	4610      	mov	r0, r2
 800c74a:	4798      	blx	r3
 800c74c:	60f8      	str	r0, [r7, #12]
      break;
 800c74e:	e112      	b.n	800c976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	7c1b      	ldrb	r3, [r3, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10d      	bne.n	800c774 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c760:	f107 0208 	add.w	r2, r7, #8
 800c764:	4610      	mov	r0, r2
 800c766:	4798      	blx	r3
 800c768:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3301      	adds	r3, #1
 800c76e:	2202      	movs	r2, #2
 800c770:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c772:	e100      	b.n	800c976 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c77c:	f107 0208 	add.w	r2, r7, #8
 800c780:	4610      	mov	r0, r2
 800c782:	4798      	blx	r3
 800c784:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	3301      	adds	r3, #1
 800c78a:	2202      	movs	r2, #2
 800c78c:	701a      	strb	r2, [r3, #0]
      break;
 800c78e:	e0f2      	b.n	800c976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	885b      	ldrh	r3, [r3, #2]
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2b05      	cmp	r3, #5
 800c798:	f200 80ac 	bhi.w	800c8f4 <USBD_GetDescriptor+0x258>
 800c79c:	a201      	add	r2, pc, #4	@ (adr r2, 800c7a4 <USBD_GetDescriptor+0x108>)
 800c79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a2:	bf00      	nop
 800c7a4:	0800c7bd 	.word	0x0800c7bd
 800c7a8:	0800c7f1 	.word	0x0800c7f1
 800c7ac:	0800c825 	.word	0x0800c825
 800c7b0:	0800c859 	.word	0x0800c859
 800c7b4:	0800c88d 	.word	0x0800c88d
 800c7b8:	0800c8c1 	.word	0x0800c8c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00b      	beq.n	800c7e0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	7c12      	ldrb	r2, [r2, #16]
 800c7d4:	f107 0108 	add.w	r1, r7, #8
 800c7d8:	4610      	mov	r0, r2
 800c7da:	4798      	blx	r3
 800c7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7de:	e091      	b.n	800c904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 facb 	bl	800cd7e <USBD_CtlError>
            err++;
 800c7e8:	7afb      	ldrb	r3, [r7, #11]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ee:	e089      	b.n	800c904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00b      	beq.n	800c814 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	7c12      	ldrb	r2, [r2, #16]
 800c808:	f107 0108 	add.w	r1, r7, #8
 800c80c:	4610      	mov	r0, r2
 800c80e:	4798      	blx	r3
 800c810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c812:	e077      	b.n	800c904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c814:	6839      	ldr	r1, [r7, #0]
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 fab1 	bl	800cd7e <USBD_CtlError>
            err++;
 800c81c:	7afb      	ldrb	r3, [r7, #11]
 800c81e:	3301      	adds	r3, #1
 800c820:	72fb      	strb	r3, [r7, #11]
          break;
 800c822:	e06f      	b.n	800c904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00b      	beq.n	800c848 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c836:	68db      	ldr	r3, [r3, #12]
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	7c12      	ldrb	r2, [r2, #16]
 800c83c:	f107 0108 	add.w	r1, r7, #8
 800c840:	4610      	mov	r0, r2
 800c842:	4798      	blx	r3
 800c844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c846:	e05d      	b.n	800c904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c848:	6839      	ldr	r1, [r7, #0]
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 fa97 	bl	800cd7e <USBD_CtlError>
            err++;
 800c850:	7afb      	ldrb	r3, [r7, #11]
 800c852:	3301      	adds	r3, #1
 800c854:	72fb      	strb	r3, [r7, #11]
          break;
 800c856:	e055      	b.n	800c904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00b      	beq.n	800c87c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	7c12      	ldrb	r2, [r2, #16]
 800c870:	f107 0108 	add.w	r1, r7, #8
 800c874:	4610      	mov	r0, r2
 800c876:	4798      	blx	r3
 800c878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c87a:	e043      	b.n	800c904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c87c:	6839      	ldr	r1, [r7, #0]
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 fa7d 	bl	800cd7e <USBD_CtlError>
            err++;
 800c884:	7afb      	ldrb	r3, [r7, #11]
 800c886:	3301      	adds	r3, #1
 800c888:	72fb      	strb	r3, [r7, #11]
          break;
 800c88a:	e03b      	b.n	800c904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c892:	695b      	ldr	r3, [r3, #20]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d00b      	beq.n	800c8b0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c89e:	695b      	ldr	r3, [r3, #20]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	7c12      	ldrb	r2, [r2, #16]
 800c8a4:	f107 0108 	add.w	r1, r7, #8
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	4798      	blx	r3
 800c8ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ae:	e029      	b.n	800c904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8b0:	6839      	ldr	r1, [r7, #0]
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 fa63 	bl	800cd7e <USBD_CtlError>
            err++;
 800c8b8:	7afb      	ldrb	r3, [r7, #11]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c8be:	e021      	b.n	800c904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8c6:	699b      	ldr	r3, [r3, #24]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00b      	beq.n	800c8e4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8d2:	699b      	ldr	r3, [r3, #24]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	7c12      	ldrb	r2, [r2, #16]
 800c8d8:	f107 0108 	add.w	r1, r7, #8
 800c8dc:	4610      	mov	r0, r2
 800c8de:	4798      	blx	r3
 800c8e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8e2:	e00f      	b.n	800c904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 fa49 	bl	800cd7e <USBD_CtlError>
            err++;
 800c8ec:	7afb      	ldrb	r3, [r7, #11]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c8f2:	e007      	b.n	800c904 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c8f4:	6839      	ldr	r1, [r7, #0]
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 fa41 	bl	800cd7e <USBD_CtlError>
          err++;
 800c8fc:	7afb      	ldrb	r3, [r7, #11]
 800c8fe:	3301      	adds	r3, #1
 800c900:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c902:	bf00      	nop
      }
      break;
 800c904:	e037      	b.n	800c976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	7c1b      	ldrb	r3, [r3, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d109      	bne.n	800c922 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c916:	f107 0208 	add.w	r2, r7, #8
 800c91a:	4610      	mov	r0, r2
 800c91c:	4798      	blx	r3
 800c91e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c920:	e029      	b.n	800c976 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c922:	6839      	ldr	r1, [r7, #0]
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 fa2a 	bl	800cd7e <USBD_CtlError>
        err++;
 800c92a:	7afb      	ldrb	r3, [r7, #11]
 800c92c:	3301      	adds	r3, #1
 800c92e:	72fb      	strb	r3, [r7, #11]
      break;
 800c930:	e021      	b.n	800c976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	7c1b      	ldrb	r3, [r3, #16]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d10d      	bne.n	800c956 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c942:	f107 0208 	add.w	r2, r7, #8
 800c946:	4610      	mov	r0, r2
 800c948:	4798      	blx	r3
 800c94a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3301      	adds	r3, #1
 800c950:	2207      	movs	r2, #7
 800c952:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c954:	e00f      	b.n	800c976 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fa10 	bl	800cd7e <USBD_CtlError>
        err++;
 800c95e:	7afb      	ldrb	r3, [r7, #11]
 800c960:	3301      	adds	r3, #1
 800c962:	72fb      	strb	r3, [r7, #11]
      break;
 800c964:	e007      	b.n	800c976 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fa08 	bl	800cd7e <USBD_CtlError>
      err++;
 800c96e:	7afb      	ldrb	r3, [r7, #11]
 800c970:	3301      	adds	r3, #1
 800c972:	72fb      	strb	r3, [r7, #11]
      break;
 800c974:	bf00      	nop
  }

  if (err != 0U)
 800c976:	7afb      	ldrb	r3, [r7, #11]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d11e      	bne.n	800c9ba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	88db      	ldrh	r3, [r3, #6]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d016      	beq.n	800c9b2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c984:	893b      	ldrh	r3, [r7, #8]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00e      	beq.n	800c9a8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	88da      	ldrh	r2, [r3, #6]
 800c98e:	893b      	ldrh	r3, [r7, #8]
 800c990:	4293      	cmp	r3, r2
 800c992:	bf28      	it	cs
 800c994:	4613      	movcs	r3, r2
 800c996:	b29b      	uxth	r3, r3
 800c998:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c99a:	893b      	ldrh	r3, [r7, #8]
 800c99c:	461a      	mov	r2, r3
 800c99e:	68f9      	ldr	r1, [r7, #12]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 fa5d 	bl	800ce60 <USBD_CtlSendData>
 800c9a6:	e009      	b.n	800c9bc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f9e7 	bl	800cd7e <USBD_CtlError>
 800c9b0:	e004      	b.n	800c9bc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 faae 	bl	800cf14 <USBD_CtlSendStatus>
 800c9b8:	e000      	b.n	800c9bc <USBD_GetDescriptor+0x320>
    return;
 800c9ba:	bf00      	nop
  }
}
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop

0800c9c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	889b      	ldrh	r3, [r3, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d131      	bne.n	800ca3a <USBD_SetAddress+0x76>
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	88db      	ldrh	r3, [r3, #6]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d12d      	bne.n	800ca3a <USBD_SetAddress+0x76>
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	885b      	ldrh	r3, [r3, #2]
 800c9e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9e4:	d829      	bhi.n	800ca3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	885b      	ldrh	r3, [r3, #2]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d104      	bne.n	800ca08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c9fe:	6839      	ldr	r1, [r7, #0]
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 f9bc 	bl	800cd7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca06:	e01d      	b.n	800ca44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7bfa      	ldrb	r2, [r7, #15]
 800ca0c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca10:	7bfb      	ldrb	r3, [r7, #15]
 800ca12:	4619      	mov	r1, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 ffe1 	bl	800d9dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 fa7a 	bl	800cf14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d004      	beq.n	800ca30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2202      	movs	r2, #2
 800ca2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca2e:	e009      	b.n	800ca44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2201      	movs	r2, #1
 800ca34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca38:	e004      	b.n	800ca44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f99e 	bl	800cd7e <USBD_CtlError>
  }
}
 800ca42:	bf00      	nop
 800ca44:	bf00      	nop
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	885b      	ldrh	r3, [r3, #2]
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	4b4e      	ldr	r3, [pc, #312]	@ (800cb9c <USBD_SetConfig+0x150>)
 800ca62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca64:	4b4d      	ldr	r3, [pc, #308]	@ (800cb9c <USBD_SetConfig+0x150>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d905      	bls.n	800ca78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 f985 	bl	800cd7e <USBD_CtlError>
    return USBD_FAIL;
 800ca74:	2303      	movs	r3, #3
 800ca76:	e08c      	b.n	800cb92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	d002      	beq.n	800ca8a <USBD_SetConfig+0x3e>
 800ca84:	2b03      	cmp	r3, #3
 800ca86:	d029      	beq.n	800cadc <USBD_SetConfig+0x90>
 800ca88:	e075      	b.n	800cb76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ca8a:	4b44      	ldr	r3, [pc, #272]	@ (800cb9c <USBD_SetConfig+0x150>)
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d020      	beq.n	800cad4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ca92:	4b42      	ldr	r3, [pc, #264]	@ (800cb9c <USBD_SetConfig+0x150>)
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	461a      	mov	r2, r3
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca9c:	4b3f      	ldr	r3, [pc, #252]	@ (800cb9c <USBD_SetConfig+0x150>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	4619      	mov	r1, r3
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7fe ffb9 	bl	800ba1a <USBD_SetClassConfig>
 800caa8:	4603      	mov	r3, r0
 800caaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d008      	beq.n	800cac4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cab2:	6839      	ldr	r1, [r7, #0]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 f962 	bl	800cd7e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2202      	movs	r2, #2
 800cabe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cac2:	e065      	b.n	800cb90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fa25 	bl	800cf14 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2203      	movs	r2, #3
 800cace:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cad2:	e05d      	b.n	800cb90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fa1d 	bl	800cf14 <USBD_CtlSendStatus>
      break;
 800cada:	e059      	b.n	800cb90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cadc:	4b2f      	ldr	r3, [pc, #188]	@ (800cb9c <USBD_SetConfig+0x150>)
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d112      	bne.n	800cb0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2202      	movs	r2, #2
 800cae8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800caec:	4b2b      	ldr	r3, [pc, #172]	@ (800cb9c <USBD_SetConfig+0x150>)
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	461a      	mov	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800caf6:	4b29      	ldr	r3, [pc, #164]	@ (800cb9c <USBD_SetConfig+0x150>)
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	4619      	mov	r1, r3
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7fe ffa8 	bl	800ba52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 fa06 	bl	800cf14 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb08:	e042      	b.n	800cb90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb0a:	4b24      	ldr	r3, [pc, #144]	@ (800cb9c <USBD_SetConfig+0x150>)
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	461a      	mov	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d02a      	beq.n	800cb6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	4619      	mov	r1, r3
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7fe ff96 	bl	800ba52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb26:	4b1d      	ldr	r3, [pc, #116]	@ (800cb9c <USBD_SetConfig+0x150>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb30:	4b1a      	ldr	r3, [pc, #104]	@ (800cb9c <USBD_SetConfig+0x150>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	4619      	mov	r1, r3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7fe ff6f 	bl	800ba1a <USBD_SetClassConfig>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb40:	7bfb      	ldrb	r3, [r7, #15]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00f      	beq.n	800cb66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f918 	bl	800cd7e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	4619      	mov	r1, r3
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f7fe ff7b 	bl	800ba52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2202      	movs	r2, #2
 800cb60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb64:	e014      	b.n	800cb90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f9d4 	bl	800cf14 <USBD_CtlSendStatus>
      break;
 800cb6c:	e010      	b.n	800cb90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f9d0 	bl	800cf14 <USBD_CtlSendStatus>
      break;
 800cb74:	e00c      	b.n	800cb90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 f900 	bl	800cd7e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb7e:	4b07      	ldr	r3, [pc, #28]	@ (800cb9c <USBD_SetConfig+0x150>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	4619      	mov	r1, r3
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7fe ff64 	bl	800ba52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cb8a:	2303      	movs	r3, #3
 800cb8c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb8e:	bf00      	nop
  }

  return ret;
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20003998 	.word	0x20003998

0800cba0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	88db      	ldrh	r3, [r3, #6]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d004      	beq.n	800cbbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f8e2 	bl	800cd7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cbba:	e023      	b.n	800cc04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	dc02      	bgt.n	800cbce <USBD_GetConfig+0x2e>
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	dc03      	bgt.n	800cbd4 <USBD_GetConfig+0x34>
 800cbcc:	e015      	b.n	800cbfa <USBD_GetConfig+0x5a>
 800cbce:	2b03      	cmp	r3, #3
 800cbd0:	d00b      	beq.n	800cbea <USBD_GetConfig+0x4a>
 800cbd2:	e012      	b.n	800cbfa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3308      	adds	r3, #8
 800cbde:	2201      	movs	r2, #1
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 f93c 	bl	800ce60 <USBD_CtlSendData>
        break;
 800cbe8:	e00c      	b.n	800cc04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	3304      	adds	r3, #4
 800cbee:	2201      	movs	r2, #1
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f934 	bl	800ce60 <USBD_CtlSendData>
        break;
 800cbf8:	e004      	b.n	800cc04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 f8be 	bl	800cd7e <USBD_CtlError>
        break;
 800cc02:	bf00      	nop
}
 800cc04:	bf00      	nop
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	d81e      	bhi.n	800cc62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	88db      	ldrh	r3, [r3, #6]
 800cc28:	2b02      	cmp	r3, #2
 800cc2a:	d004      	beq.n	800cc36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc2c:	6839      	ldr	r1, [r7, #0]
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 f8a5 	bl	800cd7e <USBD_CtlError>
        break;
 800cc34:	e01a      	b.n	800cc6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2201      	movs	r2, #1
 800cc3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d005      	beq.n	800cc52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	f043 0202 	orr.w	r2, r3, #2
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	330c      	adds	r3, #12
 800cc56:	2202      	movs	r2, #2
 800cc58:	4619      	mov	r1, r3
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f900 	bl	800ce60 <USBD_CtlSendData>
      break;
 800cc60:	e004      	b.n	800cc6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 f88a 	bl	800cd7e <USBD_CtlError>
      break;
 800cc6a:	bf00      	nop
  }
}
 800cc6c:	bf00      	nop
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	885b      	ldrh	r3, [r3, #2]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d107      	bne.n	800cc96 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f940 	bl	800cf14 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cc94:	e013      	b.n	800ccbe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	885b      	ldrh	r3, [r3, #2]
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	d10b      	bne.n	800ccb6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	889b      	ldrh	r3, [r3, #4]
 800cca2:	0a1b      	lsrs	r3, r3, #8
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	b2da      	uxtb	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f930 	bl	800cf14 <USBD_CtlSendStatus>
}
 800ccb4:	e003      	b.n	800ccbe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 f860 	bl	800cd7e <USBD_CtlError>
}
 800ccbe:	bf00      	nop
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b082      	sub	sp, #8
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
 800ccce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d80b      	bhi.n	800ccf6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	885b      	ldrh	r3, [r3, #2]
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d10c      	bne.n	800cd00 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f910 	bl	800cf14 <USBD_CtlSendStatus>
      }
      break;
 800ccf4:	e004      	b.n	800cd00 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ccf6:	6839      	ldr	r1, [r7, #0]
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 f840 	bl	800cd7e <USBD_CtlError>
      break;
 800ccfe:	e000      	b.n	800cd02 <USBD_ClrFeature+0x3c>
      break;
 800cd00:	bf00      	nop
  }
}
 800cd02:	bf00      	nop
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	781a      	ldrb	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	3301      	adds	r3, #1
 800cd24:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	781a      	ldrb	r2, [r3, #0]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	3301      	adds	r3, #1
 800cd32:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f7ff fa16 	bl	800c166 <SWAPBYTE>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	3301      	adds	r3, #1
 800cd46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f7ff fa09 	bl	800c166 <SWAPBYTE>
 800cd54:	4603      	mov	r3, r0
 800cd56:	461a      	mov	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	3301      	adds	r3, #1
 800cd66:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f7ff f9fc 	bl	800c166 <SWAPBYTE>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	461a      	mov	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	80da      	strh	r2, [r3, #6]
}
 800cd76:	bf00      	nop
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b082      	sub	sp, #8
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd88:	2180      	movs	r1, #128	@ 0x80
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fd8e 	bl	800d8ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd90:	2100      	movs	r1, #0
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fd8a 	bl	800d8ac <USBD_LL_StallEP>
}
 800cd98:	bf00      	nop
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cdac:	2300      	movs	r3, #0
 800cdae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d036      	beq.n	800ce24 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cdba:	6938      	ldr	r0, [r7, #16]
 800cdbc:	f000 f836 	bl	800ce2c <USBD_GetLen>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	005b      	lsls	r3, r3, #1
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	7812      	ldrb	r2, [r2, #0]
 800cdd8:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdda:	7dfb      	ldrb	r3, [r7, #23]
 800cddc:	3301      	adds	r3, #1
 800cdde:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cde0:	7dfb      	ldrb	r3, [r7, #23]
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	4413      	add	r3, r2
 800cde6:	2203      	movs	r2, #3
 800cde8:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdea:	7dfb      	ldrb	r3, [r7, #23]
 800cdec:	3301      	adds	r3, #1
 800cdee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cdf0:	e013      	b.n	800ce1a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cdf2:	7dfb      	ldrb	r3, [r7, #23]
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	693a      	ldr	r2, [r7, #16]
 800cdfa:	7812      	ldrb	r2, [r2, #0]
 800cdfc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	3301      	adds	r3, #1
 800ce02:	613b      	str	r3, [r7, #16]
    idx++;
 800ce04:	7dfb      	ldrb	r3, [r7, #23]
 800ce06:	3301      	adds	r3, #1
 800ce08:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	4413      	add	r3, r2
 800ce10:	2200      	movs	r2, #0
 800ce12:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce14:	7dfb      	ldrb	r3, [r7, #23]
 800ce16:	3301      	adds	r3, #1
 800ce18:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1e7      	bne.n	800cdf2 <USBD_GetString+0x52>
 800ce22:	e000      	b.n	800ce26 <USBD_GetString+0x86>
    return;
 800ce24:	bf00      	nop
  }
}
 800ce26:	3718      	adds	r7, #24
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce34:	2300      	movs	r3, #0
 800ce36:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce3c:	e005      	b.n	800ce4a <USBD_GetLen+0x1e>
  {
    len++;
 800ce3e:	7bfb      	ldrb	r3, [r7, #15]
 800ce40:	3301      	adds	r3, #1
 800ce42:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	3301      	adds	r3, #1
 800ce48:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1f5      	bne.n	800ce3e <USBD_GetLen+0x12>
  }

  return len;
 800ce52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3714      	adds	r7, #20
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	68ba      	ldr	r2, [r7, #8]
 800ce84:	2100      	movs	r1, #0
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f000 fdde 	bl	800da48 <USBD_LL_Transmit>

  return USBD_OK;
 800ce8c:	2300      	movs	r3, #0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b084      	sub	sp, #16
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	60f8      	str	r0, [r7, #12]
 800ce9e:	60b9      	str	r1, [r7, #8]
 800cea0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	68ba      	ldr	r2, [r7, #8]
 800cea6:	2100      	movs	r1, #0
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 fdcd 	bl	800da48 <USBD_LL_Transmit>

  return USBD_OK;
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2203      	movs	r2, #3
 800cec8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	68ba      	ldr	r2, [r7, #8]
 800cee0:	2100      	movs	r1, #0
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f000 fde8 	bl	800dab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b084      	sub	sp, #16
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	60f8      	str	r0, [r7, #12]
 800cefa:	60b9      	str	r1, [r7, #8]
 800cefc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	2100      	movs	r1, #0
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f000 fdd7 	bl	800dab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf0a:	2300      	movs	r3, #0
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2204      	movs	r2, #4
 800cf20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf24:	2300      	movs	r3, #0
 800cf26:	2200      	movs	r2, #0
 800cf28:	2100      	movs	r1, #0
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 fd8c 	bl	800da48 <USBD_LL_Transmit>

  return USBD_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b082      	sub	sp, #8
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2205      	movs	r2, #5
 800cf46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	2100      	movs	r1, #0
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 fdb1 	bl	800dab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cf64:	2200      	movs	r2, #0
 800cf66:	4912      	ldr	r1, [pc, #72]	@ (800cfb0 <MX_USB_DEVICE_Init+0x50>)
 800cf68:	4812      	ldr	r0, [pc, #72]	@ (800cfb4 <MX_USB_DEVICE_Init+0x54>)
 800cf6a:	f7fe fcd9 	bl	800b920 <USBD_Init>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d001      	beq.n	800cf78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf74:	f7f4 fab7 	bl	80014e6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf78:	490f      	ldr	r1, [pc, #60]	@ (800cfb8 <MX_USB_DEVICE_Init+0x58>)
 800cf7a:	480e      	ldr	r0, [pc, #56]	@ (800cfb4 <MX_USB_DEVICE_Init+0x54>)
 800cf7c:	f7fe fd00 	bl	800b980 <USBD_RegisterClass>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d001      	beq.n	800cf8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf86:	f7f4 faae 	bl	80014e6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cf8a:	490c      	ldr	r1, [pc, #48]	@ (800cfbc <MX_USB_DEVICE_Init+0x5c>)
 800cf8c:	4809      	ldr	r0, [pc, #36]	@ (800cfb4 <MX_USB_DEVICE_Init+0x54>)
 800cf8e:	f7fe fbf7 	bl	800b780 <USBD_CDC_RegisterInterface>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d001      	beq.n	800cf9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf98:	f7f4 faa5 	bl	80014e6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf9c:	4805      	ldr	r0, [pc, #20]	@ (800cfb4 <MX_USB_DEVICE_Init+0x54>)
 800cf9e:	f7fe fd25 	bl	800b9ec <USBD_Start>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d001      	beq.n	800cfac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cfa8:	f7f4 fa9d 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cfac:	bf00      	nop
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	200000ac 	.word	0x200000ac
 800cfb4:	2000399c 	.word	0x2000399c
 800cfb8:	20000018 	.word	0x20000018
 800cfbc:	20000098 	.word	0x20000098

0800cfc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	4905      	ldr	r1, [pc, #20]	@ (800cfdc <CDC_Init_FS+0x1c>)
 800cfc8:	4805      	ldr	r0, [pc, #20]	@ (800cfe0 <CDC_Init_FS+0x20>)
 800cfca:	f7fe fbf3 	bl	800b7b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cfce:	4905      	ldr	r1, [pc, #20]	@ (800cfe4 <CDC_Init_FS+0x24>)
 800cfd0:	4803      	ldr	r0, [pc, #12]	@ (800cfe0 <CDC_Init_FS+0x20>)
 800cfd2:	f7fe fc11 	bl	800b7f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cfd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	20004478 	.word	0x20004478
 800cfe0:	2000399c 	.word	0x2000399c
 800cfe4:	20003c78 	.word	0x20003c78

0800cfe8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cfec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4603      	mov	r3, r0
 800d000:	6039      	str	r1, [r7, #0]
 800d002:	71fb      	strb	r3, [r7, #7]
 800d004:	4613      	mov	r3, r2
 800d006:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d008:	79fb      	ldrb	r3, [r7, #7]
 800d00a:	2b23      	cmp	r3, #35	@ 0x23
 800d00c:	d84a      	bhi.n	800d0a4 <CDC_Control_FS+0xac>
 800d00e:	a201      	add	r2, pc, #4	@ (adr r2, 800d014 <CDC_Control_FS+0x1c>)
 800d010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d014:	0800d0a5 	.word	0x0800d0a5
 800d018:	0800d0a5 	.word	0x0800d0a5
 800d01c:	0800d0a5 	.word	0x0800d0a5
 800d020:	0800d0a5 	.word	0x0800d0a5
 800d024:	0800d0a5 	.word	0x0800d0a5
 800d028:	0800d0a5 	.word	0x0800d0a5
 800d02c:	0800d0a5 	.word	0x0800d0a5
 800d030:	0800d0a5 	.word	0x0800d0a5
 800d034:	0800d0a5 	.word	0x0800d0a5
 800d038:	0800d0a5 	.word	0x0800d0a5
 800d03c:	0800d0a5 	.word	0x0800d0a5
 800d040:	0800d0a5 	.word	0x0800d0a5
 800d044:	0800d0a5 	.word	0x0800d0a5
 800d048:	0800d0a5 	.word	0x0800d0a5
 800d04c:	0800d0a5 	.word	0x0800d0a5
 800d050:	0800d0a5 	.word	0x0800d0a5
 800d054:	0800d0a5 	.word	0x0800d0a5
 800d058:	0800d0a5 	.word	0x0800d0a5
 800d05c:	0800d0a5 	.word	0x0800d0a5
 800d060:	0800d0a5 	.word	0x0800d0a5
 800d064:	0800d0a5 	.word	0x0800d0a5
 800d068:	0800d0a5 	.word	0x0800d0a5
 800d06c:	0800d0a5 	.word	0x0800d0a5
 800d070:	0800d0a5 	.word	0x0800d0a5
 800d074:	0800d0a5 	.word	0x0800d0a5
 800d078:	0800d0a5 	.word	0x0800d0a5
 800d07c:	0800d0a5 	.word	0x0800d0a5
 800d080:	0800d0a5 	.word	0x0800d0a5
 800d084:	0800d0a5 	.word	0x0800d0a5
 800d088:	0800d0a5 	.word	0x0800d0a5
 800d08c:	0800d0a5 	.word	0x0800d0a5
 800d090:	0800d0a5 	.word	0x0800d0a5
 800d094:	0800d0a5 	.word	0x0800d0a5
 800d098:	0800d0a5 	.word	0x0800d0a5
 800d09c:	0800d0a5 	.word	0x0800d0a5
 800d0a0:	0800d0a5 	.word	0x0800d0a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d0a4:	bf00      	nop
  }

  return (USBD_OK);
 800d0a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d0be:	6879      	ldr	r1, [r7, #4]
 800d0c0:	4808      	ldr	r0, [pc, #32]	@ (800d0e4 <CDC_Receive_FS+0x30>)
 800d0c2:	f7fe fb99 	bl	800b7f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d0c6:	4807      	ldr	r0, [pc, #28]	@ (800d0e4 <CDC_Receive_FS+0x30>)
 800d0c8:	f7fe fbf4 	bl	800b8b4 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  //USB_My_Receive(Buf, *Len);
  comms_cdc_rx_callback(Buf, *Len);
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7f3 fd02 	bl	8000adc <comms_cdc_rx_callback>

  return (USBD_OK);
 800d0d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	2000399c 	.word	0x2000399c

0800d0e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d0f8:	4b0d      	ldr	r3, [pc, #52]	@ (800d130 <CDC_Transmit_FS+0x48>)
 800d0fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d0fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d10a:	2301      	movs	r3, #1
 800d10c:	e00b      	b.n	800d126 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d10e:	887b      	ldrh	r3, [r7, #2]
 800d110:	461a      	mov	r2, r3
 800d112:	6879      	ldr	r1, [r7, #4]
 800d114:	4806      	ldr	r0, [pc, #24]	@ (800d130 <CDC_Transmit_FS+0x48>)
 800d116:	f7fe fb4d 	bl	800b7b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d11a:	4805      	ldr	r0, [pc, #20]	@ (800d130 <CDC_Transmit_FS+0x48>)
 800d11c:	f7fe fb8a 	bl	800b834 <USBD_CDC_TransmitPacket>
 800d120:	4603      	mov	r3, r0
 800d122:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d124:	7bfb      	ldrb	r3, [r7, #15]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	2000399c 	.word	0x2000399c

0800d134 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d134:	b480      	push	{r7}
 800d136:	b087      	sub	sp, #28
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	4613      	mov	r3, r2
 800d140:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d146:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	371c      	adds	r7, #28
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
	...

0800d158 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	4603      	mov	r3, r0
 800d160:	6039      	str	r1, [r7, #0]
 800d162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	2212      	movs	r2, #18
 800d168:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d16a:	4b03      	ldr	r3, [pc, #12]	@ (800d178 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	200000cc 	.word	0x200000cc

0800d17c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	4603      	mov	r3, r0
 800d184:	6039      	str	r1, [r7, #0]
 800d186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2204      	movs	r2, #4
 800d18c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d18e:	4b03      	ldr	r3, [pc, #12]	@ (800d19c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d190:	4618      	mov	r0, r3
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	200000ec 	.word	0x200000ec

0800d1a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	6039      	str	r1, [r7, #0]
 800d1aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1ac:	79fb      	ldrb	r3, [r7, #7]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d105      	bne.n	800d1be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	4907      	ldr	r1, [pc, #28]	@ (800d1d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d1b6:	4808      	ldr	r0, [pc, #32]	@ (800d1d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d1b8:	f7ff fdf2 	bl	800cda0 <USBD_GetString>
 800d1bc:	e004      	b.n	800d1c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1be:	683a      	ldr	r2, [r7, #0]
 800d1c0:	4904      	ldr	r1, [pc, #16]	@ (800d1d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d1c2:	4805      	ldr	r0, [pc, #20]	@ (800d1d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d1c4:	f7ff fdec 	bl	800cda0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1c8:	4b02      	ldr	r3, [pc, #8]	@ (800d1d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20004c78 	.word	0x20004c78
 800d1d8:	0800dcb4 	.word	0x0800dcb4

0800d1dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	6039      	str	r1, [r7, #0]
 800d1e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d1e8:	683a      	ldr	r2, [r7, #0]
 800d1ea:	4904      	ldr	r1, [pc, #16]	@ (800d1fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d1ec:	4804      	ldr	r0, [pc, #16]	@ (800d200 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d1ee:	f7ff fdd7 	bl	800cda0 <USBD_GetString>
  return USBD_StrDesc;
 800d1f2:	4b02      	ldr	r3, [pc, #8]	@ (800d1fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	20004c78 	.word	0x20004c78
 800d200:	0800dccc 	.word	0x0800dccc

0800d204 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	4603      	mov	r3, r0
 800d20c:	6039      	str	r1, [r7, #0]
 800d20e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	221a      	movs	r2, #26
 800d214:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d216:	f000 f855 	bl	800d2c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d21a:	4b02      	ldr	r3, [pc, #8]	@ (800d224 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	200000f0 	.word	0x200000f0

0800d228 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	4603      	mov	r3, r0
 800d230:	6039      	str	r1, [r7, #0]
 800d232:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d234:	79fb      	ldrb	r3, [r7, #7]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d105      	bne.n	800d246 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d23a:	683a      	ldr	r2, [r7, #0]
 800d23c:	4907      	ldr	r1, [pc, #28]	@ (800d25c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d23e:	4808      	ldr	r0, [pc, #32]	@ (800d260 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d240:	f7ff fdae 	bl	800cda0 <USBD_GetString>
 800d244:	e004      	b.n	800d250 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	4904      	ldr	r1, [pc, #16]	@ (800d25c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d24a:	4805      	ldr	r0, [pc, #20]	@ (800d260 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d24c:	f7ff fda8 	bl	800cda0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d250:	4b02      	ldr	r3, [pc, #8]	@ (800d25c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d252:	4618      	mov	r0, r3
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	20004c78 	.word	0x20004c78
 800d260:	0800dce0 	.word	0x0800dce0

0800d264 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	4603      	mov	r3, r0
 800d26c:	6039      	str	r1, [r7, #0]
 800d26e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d270:	79fb      	ldrb	r3, [r7, #7]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d105      	bne.n	800d282 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	4907      	ldr	r1, [pc, #28]	@ (800d298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d27a:	4808      	ldr	r0, [pc, #32]	@ (800d29c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d27c:	f7ff fd90 	bl	800cda0 <USBD_GetString>
 800d280:	e004      	b.n	800d28c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	4904      	ldr	r1, [pc, #16]	@ (800d298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d286:	4805      	ldr	r0, [pc, #20]	@ (800d29c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d288:	f7ff fd8a 	bl	800cda0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d28c:	4b02      	ldr	r3, [pc, #8]	@ (800d298 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	20004c78 	.word	0x20004c78
 800d29c:	0800dcec 	.word	0x0800dcec

0800d2a0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	6039      	str	r1, [r7, #0]
 800d2aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	220c      	movs	r2, #12
 800d2b0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d2b2:	4b03      	ldr	r3, [pc, #12]	@ (800d2c0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	370c      	adds	r7, #12
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	200000e0 	.word	0x200000e0

0800d2c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d2ca:	4b0f      	ldr	r3, [pc, #60]	@ (800d308 <Get_SerialNum+0x44>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d2d0:	4b0e      	ldr	r3, [pc, #56]	@ (800d30c <Get_SerialNum+0x48>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d2d6:	4b0e      	ldr	r3, [pc, #56]	@ (800d310 <Get_SerialNum+0x4c>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d009      	beq.n	800d2fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d2ea:	2208      	movs	r2, #8
 800d2ec:	4909      	ldr	r1, [pc, #36]	@ (800d314 <Get_SerialNum+0x50>)
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f000 f814 	bl	800d31c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d2f4:	2204      	movs	r2, #4
 800d2f6:	4908      	ldr	r1, [pc, #32]	@ (800d318 <Get_SerialNum+0x54>)
 800d2f8:	68b8      	ldr	r0, [r7, #8]
 800d2fa:	f000 f80f 	bl	800d31c <IntToUnicode>
  }
}
 800d2fe:	bf00      	nop
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	1fff7590 	.word	0x1fff7590
 800d30c:	1fff7594 	.word	0x1fff7594
 800d310:	1fff7598 	.word	0x1fff7598
 800d314:	200000f2 	.word	0x200000f2
 800d318:	20000102 	.word	0x20000102

0800d31c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b087      	sub	sp, #28
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	4613      	mov	r3, r2
 800d328:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d32e:	2300      	movs	r3, #0
 800d330:	75fb      	strb	r3, [r7, #23]
 800d332:	e027      	b.n	800d384 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	0f1b      	lsrs	r3, r3, #28
 800d338:	2b09      	cmp	r3, #9
 800d33a:	d80b      	bhi.n	800d354 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	0f1b      	lsrs	r3, r3, #28
 800d340:	b2da      	uxtb	r2, r3
 800d342:	7dfb      	ldrb	r3, [r7, #23]
 800d344:	005b      	lsls	r3, r3, #1
 800d346:	4619      	mov	r1, r3
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	440b      	add	r3, r1
 800d34c:	3230      	adds	r2, #48	@ 0x30
 800d34e:	b2d2      	uxtb	r2, r2
 800d350:	701a      	strb	r2, [r3, #0]
 800d352:	e00a      	b.n	800d36a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	0f1b      	lsrs	r3, r3, #28
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	7dfb      	ldrb	r3, [r7, #23]
 800d35c:	005b      	lsls	r3, r3, #1
 800d35e:	4619      	mov	r1, r3
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	440b      	add	r3, r1
 800d364:	3237      	adds	r2, #55	@ 0x37
 800d366:	b2d2      	uxtb	r2, r2
 800d368:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	011b      	lsls	r3, r3, #4
 800d36e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d370:	7dfb      	ldrb	r3, [r7, #23]
 800d372:	005b      	lsls	r3, r3, #1
 800d374:	3301      	adds	r3, #1
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	4413      	add	r3, r2
 800d37a:	2200      	movs	r2, #0
 800d37c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d37e:	7dfb      	ldrb	r3, [r7, #23]
 800d380:	3301      	adds	r3, #1
 800d382:	75fb      	strb	r3, [r7, #23]
 800d384:	7dfa      	ldrb	r2, [r7, #23]
 800d386:	79fb      	ldrb	r3, [r7, #7]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d3d3      	bcc.n	800d334 <IntToUnicode+0x18>
  }
}
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	371c      	adds	r7, #28
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr
	...

0800d39c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b0b0      	sub	sp, #192	@ 0xc0
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3a4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	601a      	str	r2, [r3, #0]
 800d3ac:	605a      	str	r2, [r3, #4]
 800d3ae:	609a      	str	r2, [r3, #8]
 800d3b0:	60da      	str	r2, [r3, #12]
 800d3b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d3b4:	f107 0318 	add.w	r3, r7, #24
 800d3b8:	2294      	movs	r2, #148	@ 0x94
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f000 fc33 	bl	800dc28 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d3ca:	d174      	bne.n	800d4b6 <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d3cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d3d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d3d8:	f107 0318 	add.w	r3, r7, #24
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7f9 f829 	bl	8006434 <HAL_RCCEx_PeriphCLKConfig>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d3e8:	f7f4 f87d 	bl	80014e6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3ec:	4b34      	ldr	r3, [pc, #208]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d3ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3f0:	4a33      	ldr	r2, [pc, #204]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d3f2:	f043 0301 	orr.w	r3, r3, #1
 800d3f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d3f8:	4b31      	ldr	r3, [pc, #196]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d3fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	617b      	str	r3, [r7, #20]
 800d402:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d404:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800d408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d40c:	2302      	movs	r3, #2
 800d40e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d412:	2300      	movs	r3, #0
 800d414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d418:	2303      	movs	r3, #3
 800d41a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d41e:	230a      	movs	r3, #10
 800d420:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d424:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d428:	4619      	mov	r1, r3
 800d42a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d42e:	f7f6 fca9 	bl	8003d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d432:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d436:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d43a:	2300      	movs	r3, #0
 800d43c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d440:	2300      	movs	r3, #0
 800d442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d446:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d44a:	4619      	mov	r1, r3
 800d44c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d450:	f7f6 fc98 	bl	8003d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d454:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d458:	4a19      	ldr	r2, [pc, #100]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d45a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d45e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d460:	4b17      	ldr	r3, [pc, #92]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d464:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d468:	613b      	str	r3, [r7, #16]
 800d46a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d46c:	4b14      	ldr	r3, [pc, #80]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d46e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d474:	2b00      	cmp	r3, #0
 800d476:	d114      	bne.n	800d4a2 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d478:	4b11      	ldr	r3, [pc, #68]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d47a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d47c:	4a10      	ldr	r2, [pc, #64]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d47e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d482:	6593      	str	r3, [r2, #88]	@ 0x58
 800d484:	4b0e      	ldr	r3, [pc, #56]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d490:	f7f8 f8d8 	bl	8005644 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d494:	4b0a      	ldr	r3, [pc, #40]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d498:	4a09      	ldr	r2, [pc, #36]	@ (800d4c0 <HAL_PCD_MspInit+0x124>)
 800d49a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d49e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d4a0:	e001      	b.n	800d4a6 <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d4a2:	f7f8 f8cf 	bl	8005644 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	2043      	movs	r0, #67	@ 0x43
 800d4ac:	f7f6 f8bd 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d4b0:	2043      	movs	r0, #67	@ 0x43
 800d4b2:	f7f6 f8d6 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d4b6:	bf00      	nop
 800d4b8:	37c0      	adds	r7, #192	@ 0xc0
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	40021000 	.word	0x40021000

0800d4c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d4d8:	4619      	mov	r1, r3
 800d4da:	4610      	mov	r0, r2
 800d4dc:	f7fe fad3 	bl	800ba86 <USBD_LL_SetupStage>
}
 800d4e0:	bf00      	nop
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d4fa:	78fa      	ldrb	r2, [r7, #3]
 800d4fc:	6879      	ldr	r1, [r7, #4]
 800d4fe:	4613      	mov	r3, r2
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	4413      	add	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	440b      	add	r3, r1
 800d508:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	78fb      	ldrb	r3, [r7, #3]
 800d510:	4619      	mov	r1, r3
 800d512:	f7fe fb0d 	bl	800bb30 <USBD_LL_DataOutStage>
}
 800d516:	bf00      	nop
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b082      	sub	sp, #8
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
 800d526:	460b      	mov	r3, r1
 800d528:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d530:	78fa      	ldrb	r2, [r7, #3]
 800d532:	6879      	ldr	r1, [r7, #4]
 800d534:	4613      	mov	r3, r2
 800d536:	00db      	lsls	r3, r3, #3
 800d538:	4413      	add	r3, r2
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	440b      	add	r3, r1
 800d53e:	3348      	adds	r3, #72	@ 0x48
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	78fb      	ldrb	r3, [r7, #3]
 800d544:	4619      	mov	r1, r3
 800d546:	f7fe fba6 	bl	800bc96 <USBD_LL_DataInStage>
}
 800d54a:	bf00      	nop
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d560:	4618      	mov	r0, r3
 800d562:	f7fe fce0 	bl	800bf26 <USBD_LL_SOF>
}
 800d566:	bf00      	nop
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d56e:	b580      	push	{r7, lr}
 800d570:	b084      	sub	sp, #16
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d576:	2301      	movs	r3, #1
 800d578:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	691b      	ldr	r3, [r3, #16]
 800d57e:	2b02      	cmp	r3, #2
 800d580:	d001      	beq.n	800d586 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d582:	f7f3 ffb0 	bl	80014e6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d58c:	7bfa      	ldrb	r2, [r7, #15]
 800d58e:	4611      	mov	r1, r2
 800d590:	4618      	mov	r0, r3
 800d592:	f7fe fc84 	bl	800be9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fe fc2c 	bl	800bdfa <USBD_LL_Reset>
}
 800d5a2:	bf00      	nop
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
	...

0800d5ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	6812      	ldr	r2, [r2, #0]
 800d5c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d5c6:	f043 0301 	orr.w	r3, r3, #1
 800d5ca:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe fc73 	bl	800bebe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6a1b      	ldr	r3, [r3, #32]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d005      	beq.n	800d5ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5e0:	4b04      	ldr	r3, [pc, #16]	@ (800d5f4 <HAL_PCD_SuspendCallback+0x48>)
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	4a03      	ldr	r2, [pc, #12]	@ (800d5f4 <HAL_PCD_SuspendCallback+0x48>)
 800d5e6:	f043 0306 	orr.w	r3, r3, #6
 800d5ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	e000ed00 	.word	0xe000ed00

0800d5f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	6812      	ldr	r2, [r2, #0]
 800d60e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d612:	f023 0301 	bic.w	r3, r3, #1
 800d616:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a1b      	ldr	r3, [r3, #32]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d007      	beq.n	800d630 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d620:	4b08      	ldr	r3, [pc, #32]	@ (800d644 <HAL_PCD_ResumeCallback+0x4c>)
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	4a07      	ldr	r2, [pc, #28]	@ (800d644 <HAL_PCD_ResumeCallback+0x4c>)
 800d626:	f023 0306 	bic.w	r3, r3, #6
 800d62a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d62c:	f000 faf6 	bl	800dc1c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d636:	4618      	mov	r0, r3
 800d638:	f7fe fc5d 	bl	800bef6 <USBD_LL_Resume>
}
 800d63c:	bf00      	nop
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	e000ed00 	.word	0xe000ed00

0800d648 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	460b      	mov	r3, r1
 800d652:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d65a:	78fa      	ldrb	r2, [r7, #3]
 800d65c:	4611      	mov	r1, r2
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fe fcb3 	bl	800bfca <USBD_LL_IsoOUTIncomplete>
}
 800d664:	bf00      	nop
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	460b      	mov	r3, r1
 800d676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d67e:	78fa      	ldrb	r2, [r7, #3]
 800d680:	4611      	mov	r1, r2
 800d682:	4618      	mov	r0, r3
 800d684:	f7fe fc6f 	bl	800bf66 <USBD_LL_IsoINIncomplete>
}
 800d688:	bf00      	nop
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fe fcc5 	bl	800c02e <USBD_LL_DevConnected>
}
 800d6a4:	bf00      	nop
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fcc2 	bl	800c044 <USBD_LL_DevDisconnected>
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d13c      	bne.n	800d752 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d6d8:	4a20      	ldr	r2, [pc, #128]	@ (800d75c <USBD_LL_Init+0x94>)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a1e      	ldr	r2, [pc, #120]	@ (800d75c <USBD_LL_Init+0x94>)
 800d6e4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d6e8:	4b1c      	ldr	r3, [pc, #112]	@ (800d75c <USBD_LL_Init+0x94>)
 800d6ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d6ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d6f0:	4b1a      	ldr	r3, [pc, #104]	@ (800d75c <USBD_LL_Init+0x94>)
 800d6f2:	2206      	movs	r2, #6
 800d6f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d6f6:	4b19      	ldr	r3, [pc, #100]	@ (800d75c <USBD_LL_Init+0x94>)
 800d6f8:	2202      	movs	r2, #2
 800d6fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d6fc:	4b17      	ldr	r3, [pc, #92]	@ (800d75c <USBD_LL_Init+0x94>)
 800d6fe:	2202      	movs	r2, #2
 800d700:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d702:	4b16      	ldr	r3, [pc, #88]	@ (800d75c <USBD_LL_Init+0x94>)
 800d704:	2200      	movs	r2, #0
 800d706:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d708:	4b14      	ldr	r3, [pc, #80]	@ (800d75c <USBD_LL_Init+0x94>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d70e:	4b13      	ldr	r3, [pc, #76]	@ (800d75c <USBD_LL_Init+0x94>)
 800d710:	2200      	movs	r2, #0
 800d712:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d714:	4b11      	ldr	r3, [pc, #68]	@ (800d75c <USBD_LL_Init+0x94>)
 800d716:	2200      	movs	r2, #0
 800d718:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d71a:	4b10      	ldr	r3, [pc, #64]	@ (800d75c <USBD_LL_Init+0x94>)
 800d71c:	2200      	movs	r2, #0
 800d71e:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d720:	4b0e      	ldr	r3, [pc, #56]	@ (800d75c <USBD_LL_Init+0x94>)
 800d722:	2200      	movs	r2, #0
 800d724:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d726:	480d      	ldr	r0, [pc, #52]	@ (800d75c <USBD_LL_Init+0x94>)
 800d728:	f7f6 fd20 	bl	800416c <HAL_PCD_Init>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d001      	beq.n	800d736 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d732:	f7f3 fed8 	bl	80014e6 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d736:	2180      	movs	r1, #128	@ 0x80
 800d738:	4808      	ldr	r0, [pc, #32]	@ (800d75c <USBD_LL_Init+0x94>)
 800d73a:	f7f7 fe8a 	bl	8005452 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d73e:	2240      	movs	r2, #64	@ 0x40
 800d740:	2100      	movs	r1, #0
 800d742:	4806      	ldr	r0, [pc, #24]	@ (800d75c <USBD_LL_Init+0x94>)
 800d744:	f7f7 fe3e 	bl	80053c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d748:	2280      	movs	r2, #128	@ 0x80
 800d74a:	2101      	movs	r1, #1
 800d74c:	4803      	ldr	r0, [pc, #12]	@ (800d75c <USBD_LL_Init+0x94>)
 800d74e:	f7f7 fe39 	bl	80053c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3708      	adds	r7, #8
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	20004e78 	.word	0x20004e78

0800d760 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d768:	2300      	movs	r3, #0
 800d76a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d76c:	2300      	movs	r3, #0
 800d76e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d776:	4618      	mov	r0, r3
 800d778:	f7f6 fe1c 	bl	80043b4 <HAL_PCD_Start>
 800d77c:	4603      	mov	r3, r0
 800d77e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d780:	7bbb      	ldrb	r3, [r7, #14]
 800d782:	2b03      	cmp	r3, #3
 800d784:	d816      	bhi.n	800d7b4 <USBD_LL_Start+0x54>
 800d786:	a201      	add	r2, pc, #4	@ (adr r2, 800d78c <USBD_LL_Start+0x2c>)
 800d788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d78c:	0800d79d 	.word	0x0800d79d
 800d790:	0800d7a3 	.word	0x0800d7a3
 800d794:	0800d7a9 	.word	0x0800d7a9
 800d798:	0800d7af 	.word	0x0800d7af
    case HAL_OK :
      usb_status = USBD_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a0:	e00b      	b.n	800d7ba <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7a2:	2303      	movs	r3, #3
 800d7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a6:	e008      	b.n	800d7ba <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ac:	e005      	b.n	800d7ba <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b2:	e002      	b.n	800d7ba <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d7b4:	2303      	movs	r3, #3
 800d7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b8:	bf00      	nop
  }
  return usb_status;
 800d7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3710      	adds	r7, #16
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	4608      	mov	r0, r1
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	70fb      	strb	r3, [r7, #3]
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	70bb      	strb	r3, [r7, #2]
 800d7da:	4613      	mov	r3, r2
 800d7dc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7ec:	78bb      	ldrb	r3, [r7, #2]
 800d7ee:	883a      	ldrh	r2, [r7, #0]
 800d7f0:	78f9      	ldrb	r1, [r7, #3]
 800d7f2:	f7f7 fac6 	bl	8004d82 <HAL_PCD_EP_Open>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d7fa:	7bbb      	ldrb	r3, [r7, #14]
 800d7fc:	2b03      	cmp	r3, #3
 800d7fe:	d817      	bhi.n	800d830 <USBD_LL_OpenEP+0x6c>
 800d800:	a201      	add	r2, pc, #4	@ (adr r2, 800d808 <USBD_LL_OpenEP+0x44>)
 800d802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d806:	bf00      	nop
 800d808:	0800d819 	.word	0x0800d819
 800d80c:	0800d81f 	.word	0x0800d81f
 800d810:	0800d825 	.word	0x0800d825
 800d814:	0800d82b 	.word	0x0800d82b
    case HAL_OK :
      usb_status = USBD_OK;
 800d818:	2300      	movs	r3, #0
 800d81a:	73fb      	strb	r3, [r7, #15]
    break;
 800d81c:	e00b      	b.n	800d836 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d81e:	2303      	movs	r3, #3
 800d820:	73fb      	strb	r3, [r7, #15]
    break;
 800d822:	e008      	b.n	800d836 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d824:	2301      	movs	r3, #1
 800d826:	73fb      	strb	r3, [r7, #15]
    break;
 800d828:	e005      	b.n	800d836 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d82a:	2303      	movs	r3, #3
 800d82c:	73fb      	strb	r3, [r7, #15]
    break;
 800d82e:	e002      	b.n	800d836 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d830:	2303      	movs	r3, #3
 800d832:	73fb      	strb	r3, [r7, #15]
    break;
 800d834:	bf00      	nop
  }
  return usb_status;
 800d836:	7bfb      	ldrb	r3, [r7, #15]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3710      	adds	r7, #16
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	460b      	mov	r3, r1
 800d84a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d84c:	2300      	movs	r3, #0
 800d84e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d850:	2300      	movs	r3, #0
 800d852:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d85a:	78fa      	ldrb	r2, [r7, #3]
 800d85c:	4611      	mov	r1, r2
 800d85e:	4618      	mov	r0, r3
 800d860:	f7f7 faf7 	bl	8004e52 <HAL_PCD_EP_Close>
 800d864:	4603      	mov	r3, r0
 800d866:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d868:	7bbb      	ldrb	r3, [r7, #14]
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d816      	bhi.n	800d89c <USBD_LL_CloseEP+0x5c>
 800d86e:	a201      	add	r2, pc, #4	@ (adr r2, 800d874 <USBD_LL_CloseEP+0x34>)
 800d870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d874:	0800d885 	.word	0x0800d885
 800d878:	0800d88b 	.word	0x0800d88b
 800d87c:	0800d891 	.word	0x0800d891
 800d880:	0800d897 	.word	0x0800d897
    case HAL_OK :
      usb_status = USBD_OK;
 800d884:	2300      	movs	r3, #0
 800d886:	73fb      	strb	r3, [r7, #15]
    break;
 800d888:	e00b      	b.n	800d8a2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d88a:	2303      	movs	r3, #3
 800d88c:	73fb      	strb	r3, [r7, #15]
    break;
 800d88e:	e008      	b.n	800d8a2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d890:	2301      	movs	r3, #1
 800d892:	73fb      	strb	r3, [r7, #15]
    break;
 800d894:	e005      	b.n	800d8a2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d896:	2303      	movs	r3, #3
 800d898:	73fb      	strb	r3, [r7, #15]
    break;
 800d89a:	e002      	b.n	800d8a2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d89c:	2303      	movs	r3, #3
 800d89e:	73fb      	strb	r3, [r7, #15]
    break;
 800d8a0:	bf00      	nop
  }
  return usb_status;
 800d8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8c6:	78fa      	ldrb	r2, [r7, #3]
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7f7 fb86 	bl	8004fdc <HAL_PCD_EP_SetStall>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d8d4:	7bbb      	ldrb	r3, [r7, #14]
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d816      	bhi.n	800d908 <USBD_LL_StallEP+0x5c>
 800d8da:	a201      	add	r2, pc, #4	@ (adr r2, 800d8e0 <USBD_LL_StallEP+0x34>)
 800d8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e0:	0800d8f1 	.word	0x0800d8f1
 800d8e4:	0800d8f7 	.word	0x0800d8f7
 800d8e8:	0800d8fd 	.word	0x0800d8fd
 800d8ec:	0800d903 	.word	0x0800d903
    case HAL_OK :
      usb_status = USBD_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8f4:	e00b      	b.n	800d90e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d8fa:	e008      	b.n	800d90e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d900:	e005      	b.n	800d90e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d902:	2303      	movs	r3, #3
 800d904:	73fb      	strb	r3, [r7, #15]
    break;
 800d906:	e002      	b.n	800d90e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d908:	2303      	movs	r3, #3
 800d90a:	73fb      	strb	r3, [r7, #15]
    break;
 800d90c:	bf00      	nop
  }
  return usb_status;
 800d90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	460b      	mov	r3, r1
 800d922:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d924:	2300      	movs	r3, #0
 800d926:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d928:	2300      	movs	r3, #0
 800d92a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d932:	78fa      	ldrb	r2, [r7, #3]
 800d934:	4611      	mov	r1, r2
 800d936:	4618      	mov	r0, r3
 800d938:	f7f7 fbb2 	bl	80050a0 <HAL_PCD_EP_ClrStall>
 800d93c:	4603      	mov	r3, r0
 800d93e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d940:	7bbb      	ldrb	r3, [r7, #14]
 800d942:	2b03      	cmp	r3, #3
 800d944:	d816      	bhi.n	800d974 <USBD_LL_ClearStallEP+0x5c>
 800d946:	a201      	add	r2, pc, #4	@ (adr r2, 800d94c <USBD_LL_ClearStallEP+0x34>)
 800d948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94c:	0800d95d 	.word	0x0800d95d
 800d950:	0800d963 	.word	0x0800d963
 800d954:	0800d969 	.word	0x0800d969
 800d958:	0800d96f 	.word	0x0800d96f
    case HAL_OK :
      usb_status = USBD_OK;
 800d95c:	2300      	movs	r3, #0
 800d95e:	73fb      	strb	r3, [r7, #15]
    break;
 800d960:	e00b      	b.n	800d97a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d962:	2303      	movs	r3, #3
 800d964:	73fb      	strb	r3, [r7, #15]
    break;
 800d966:	e008      	b.n	800d97a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d968:	2301      	movs	r3, #1
 800d96a:	73fb      	strb	r3, [r7, #15]
    break;
 800d96c:	e005      	b.n	800d97a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d96e:	2303      	movs	r3, #3
 800d970:	73fb      	strb	r3, [r7, #15]
    break;
 800d972:	e002      	b.n	800d97a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d974:	2303      	movs	r3, #3
 800d976:	73fb      	strb	r3, [r7, #15]
    break;
 800d978:	bf00      	nop
  }
  return usb_status;
 800d97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	460b      	mov	r3, r1
 800d98e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d996:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	da0b      	bge.n	800d9b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9a0:	78fb      	ldrb	r3, [r7, #3]
 800d9a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9a6:	68f9      	ldr	r1, [r7, #12]
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	00db      	lsls	r3, r3, #3
 800d9ac:	4413      	add	r3, r2
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	440b      	add	r3, r1
 800d9b2:	333e      	adds	r3, #62	@ 0x3e
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	e00b      	b.n	800d9d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9b8:	78fb      	ldrb	r3, [r7, #3]
 800d9ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9be:	68f9      	ldr	r1, [r7, #12]
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	00db      	lsls	r3, r3, #3
 800d9c4:	4413      	add	r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	440b      	add	r3, r1
 800d9ca:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800d9ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3714      	adds	r7, #20
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9f6:	78fa      	ldrb	r2, [r7, #3]
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7f7 f99c 	bl	8004d38 <HAL_PCD_SetAddress>
 800da00:	4603      	mov	r3, r0
 800da02:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800da04:	7bbb      	ldrb	r3, [r7, #14]
 800da06:	2b03      	cmp	r3, #3
 800da08:	d816      	bhi.n	800da38 <USBD_LL_SetUSBAddress+0x5c>
 800da0a:	a201      	add	r2, pc, #4	@ (adr r2, 800da10 <USBD_LL_SetUSBAddress+0x34>)
 800da0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da10:	0800da21 	.word	0x0800da21
 800da14:	0800da27 	.word	0x0800da27
 800da18:	0800da2d 	.word	0x0800da2d
 800da1c:	0800da33 	.word	0x0800da33
    case HAL_OK :
      usb_status = USBD_OK;
 800da20:	2300      	movs	r3, #0
 800da22:	73fb      	strb	r3, [r7, #15]
    break;
 800da24:	e00b      	b.n	800da3e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da26:	2303      	movs	r3, #3
 800da28:	73fb      	strb	r3, [r7, #15]
    break;
 800da2a:	e008      	b.n	800da3e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da2c:	2301      	movs	r3, #1
 800da2e:	73fb      	strb	r3, [r7, #15]
    break;
 800da30:	e005      	b.n	800da3e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da32:	2303      	movs	r3, #3
 800da34:	73fb      	strb	r3, [r7, #15]
    break;
 800da36:	e002      	b.n	800da3e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800da38:	2303      	movs	r3, #3
 800da3a:	73fb      	strb	r3, [r7, #15]
    break;
 800da3c:	bf00      	nop
  }
  return usb_status;
 800da3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3710      	adds	r7, #16
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	607a      	str	r2, [r7, #4]
 800da52:	603b      	str	r3, [r7, #0]
 800da54:	460b      	mov	r3, r1
 800da56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da58:	2300      	movs	r3, #0
 800da5a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da66:	7af9      	ldrb	r1, [r7, #11]
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	f7f7 fa85 	bl	8004f7a <HAL_PCD_EP_Transmit>
 800da70:	4603      	mov	r3, r0
 800da72:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800da74:	7dbb      	ldrb	r3, [r7, #22]
 800da76:	2b03      	cmp	r3, #3
 800da78:	d816      	bhi.n	800daa8 <USBD_LL_Transmit+0x60>
 800da7a:	a201      	add	r2, pc, #4	@ (adr r2, 800da80 <USBD_LL_Transmit+0x38>)
 800da7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da80:	0800da91 	.word	0x0800da91
 800da84:	0800da97 	.word	0x0800da97
 800da88:	0800da9d 	.word	0x0800da9d
 800da8c:	0800daa3 	.word	0x0800daa3
    case HAL_OK :
      usb_status = USBD_OK;
 800da90:	2300      	movs	r3, #0
 800da92:	75fb      	strb	r3, [r7, #23]
    break;
 800da94:	e00b      	b.n	800daae <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da96:	2303      	movs	r3, #3
 800da98:	75fb      	strb	r3, [r7, #23]
    break;
 800da9a:	e008      	b.n	800daae <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da9c:	2301      	movs	r3, #1
 800da9e:	75fb      	strb	r3, [r7, #23]
    break;
 800daa0:	e005      	b.n	800daae <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800daa2:	2303      	movs	r3, #3
 800daa4:	75fb      	strb	r3, [r7, #23]
    break;
 800daa6:	e002      	b.n	800daae <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800daa8:	2303      	movs	r3, #3
 800daaa:	75fb      	strb	r3, [r7, #23]
    break;
 800daac:	bf00      	nop
  }
  return usb_status;
 800daae:	7dfb      	ldrb	r3, [r7, #23]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3718      	adds	r7, #24
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	607a      	str	r2, [r7, #4]
 800dac2:	603b      	str	r3, [r7, #0]
 800dac4:	460b      	mov	r3, r1
 800dac6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dac8:	2300      	movs	r3, #0
 800daca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dad6:	7af9      	ldrb	r1, [r7, #11]
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	f7f7 fa03 	bl	8004ee6 <HAL_PCD_EP_Receive>
 800dae0:	4603      	mov	r3, r0
 800dae2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800dae4:	7dbb      	ldrb	r3, [r7, #22]
 800dae6:	2b03      	cmp	r3, #3
 800dae8:	d816      	bhi.n	800db18 <USBD_LL_PrepareReceive+0x60>
 800daea:	a201      	add	r2, pc, #4	@ (adr r2, 800daf0 <USBD_LL_PrepareReceive+0x38>)
 800daec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf0:	0800db01 	.word	0x0800db01
 800daf4:	0800db07 	.word	0x0800db07
 800daf8:	0800db0d 	.word	0x0800db0d
 800dafc:	0800db13 	.word	0x0800db13
    case HAL_OK :
      usb_status = USBD_OK;
 800db00:	2300      	movs	r3, #0
 800db02:	75fb      	strb	r3, [r7, #23]
    break;
 800db04:	e00b      	b.n	800db1e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db06:	2303      	movs	r3, #3
 800db08:	75fb      	strb	r3, [r7, #23]
    break;
 800db0a:	e008      	b.n	800db1e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db0c:	2301      	movs	r3, #1
 800db0e:	75fb      	strb	r3, [r7, #23]
    break;
 800db10:	e005      	b.n	800db1e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db12:	2303      	movs	r3, #3
 800db14:	75fb      	strb	r3, [r7, #23]
    break;
 800db16:	e002      	b.n	800db1e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800db18:	2303      	movs	r3, #3
 800db1a:	75fb      	strb	r3, [r7, #23]
    break;
 800db1c:	bf00      	nop
  }
  return usb_status;
 800db1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	460b      	mov	r3, r1
 800db32:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db3a:	78fa      	ldrb	r2, [r7, #3]
 800db3c:	4611      	mov	r1, r2
 800db3e:	4618      	mov	r0, r3
 800db40:	f7f7 fa03 	bl	8004f4a <HAL_PCD_EP_GetRxCount>
 800db44:	4603      	mov	r3, r0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
	...

0800db50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	460b      	mov	r3, r1
 800db5a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800db5c:	78fb      	ldrb	r3, [r7, #3]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d002      	beq.n	800db68 <HAL_PCDEx_LPM_Callback+0x18>
 800db62:	2b01      	cmp	r3, #1
 800db64:	d01f      	beq.n	800dba6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800db66:	e03b      	b.n	800dbe0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a1b      	ldr	r3, [r3, #32]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d007      	beq.n	800db80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800db70:	f000 f854 	bl	800dc1c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db74:	4b1c      	ldr	r3, [pc, #112]	@ (800dbe8 <HAL_PCDEx_LPM_Callback+0x98>)
 800db76:	691b      	ldr	r3, [r3, #16]
 800db78:	4a1b      	ldr	r2, [pc, #108]	@ (800dbe8 <HAL_PCDEx_LPM_Callback+0x98>)
 800db7a:	f023 0306 	bic.w	r3, r3, #6
 800db7e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	6812      	ldr	r2, [r2, #0]
 800db8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db92:	f023 0301 	bic.w	r3, r3, #1
 800db96:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fe f9a9 	bl	800bef6 <USBD_LL_Resume>
    break;
 800dba4:	e01c      	b.n	800dbe0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	6812      	ldr	r2, [r2, #0]
 800dbb4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dbb8:	f043 0301 	orr.w	r3, r3, #1
 800dbbc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fe f97a 	bl	800bebe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a1b      	ldr	r3, [r3, #32]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d005      	beq.n	800dbde <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbd2:	4b05      	ldr	r3, [pc, #20]	@ (800dbe8 <HAL_PCDEx_LPM_Callback+0x98>)
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	4a04      	ldr	r2, [pc, #16]	@ (800dbe8 <HAL_PCDEx_LPM_Callback+0x98>)
 800dbd8:	f043 0306 	orr.w	r3, r3, #6
 800dbdc:	6113      	str	r3, [r2, #16]
    break;
 800dbde:	bf00      	nop
}
 800dbe0:	bf00      	nop
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	e000ed00 	.word	0xe000ed00

0800dbec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dbf4:	4b03      	ldr	r3, [pc, #12]	@ (800dc04 <USBD_static_malloc+0x18>)
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	370c      	adds	r7, #12
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	20005384 	.word	0x20005384

0800dc08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]

}
 800dc10:	bf00      	nop
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr

0800dc1c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dc20:	f7f3 fc0e 	bl	8001440 <SystemClock_Config>
}
 800dc24:	bf00      	nop
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <memset>:
 800dc28:	4402      	add	r2, r0
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d100      	bne.n	800dc32 <memset+0xa>
 800dc30:	4770      	bx	lr
 800dc32:	f803 1b01 	strb.w	r1, [r3], #1
 800dc36:	e7f9      	b.n	800dc2c <memset+0x4>

0800dc38 <__libc_init_array>:
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	4d0d      	ldr	r5, [pc, #52]	@ (800dc70 <__libc_init_array+0x38>)
 800dc3c:	4c0d      	ldr	r4, [pc, #52]	@ (800dc74 <__libc_init_array+0x3c>)
 800dc3e:	1b64      	subs	r4, r4, r5
 800dc40:	10a4      	asrs	r4, r4, #2
 800dc42:	2600      	movs	r6, #0
 800dc44:	42a6      	cmp	r6, r4
 800dc46:	d109      	bne.n	800dc5c <__libc_init_array+0x24>
 800dc48:	4d0b      	ldr	r5, [pc, #44]	@ (800dc78 <__libc_init_array+0x40>)
 800dc4a:	4c0c      	ldr	r4, [pc, #48]	@ (800dc7c <__libc_init_array+0x44>)
 800dc4c:	f000 f826 	bl	800dc9c <_init>
 800dc50:	1b64      	subs	r4, r4, r5
 800dc52:	10a4      	asrs	r4, r4, #2
 800dc54:	2600      	movs	r6, #0
 800dc56:	42a6      	cmp	r6, r4
 800dc58:	d105      	bne.n	800dc66 <__libc_init_array+0x2e>
 800dc5a:	bd70      	pop	{r4, r5, r6, pc}
 800dc5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc60:	4798      	blx	r3
 800dc62:	3601      	adds	r6, #1
 800dc64:	e7ee      	b.n	800dc44 <__libc_init_array+0xc>
 800dc66:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc6a:	4798      	blx	r3
 800dc6c:	3601      	adds	r6, #1
 800dc6e:	e7f2      	b.n	800dc56 <__libc_init_array+0x1e>
 800dc70:	0800dd74 	.word	0x0800dd74
 800dc74:	0800dd74 	.word	0x0800dd74
 800dc78:	0800dd74 	.word	0x0800dd74
 800dc7c:	0800dd78 	.word	0x0800dd78

0800dc80 <memcpy>:
 800dc80:	440a      	add	r2, r1
 800dc82:	4291      	cmp	r1, r2
 800dc84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dc88:	d100      	bne.n	800dc8c <memcpy+0xc>
 800dc8a:	4770      	bx	lr
 800dc8c:	b510      	push	{r4, lr}
 800dc8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc96:	4291      	cmp	r1, r2
 800dc98:	d1f9      	bne.n	800dc8e <memcpy+0xe>
 800dc9a:	bd10      	pop	{r4, pc}

0800dc9c <_init>:
 800dc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9e:	bf00      	nop
 800dca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dca2:	bc08      	pop	{r3}
 800dca4:	469e      	mov	lr, r3
 800dca6:	4770      	bx	lr

0800dca8 <_fini>:
 800dca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcaa:	bf00      	nop
 800dcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcae:	bc08      	pop	{r3}
 800dcb0:	469e      	mov	lr, r3
 800dcb2:	4770      	bx	lr
