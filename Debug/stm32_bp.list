
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcc8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800be84  0800be84  0000ce84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf3c  0800bf3c  0000d10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf3c  0800bf3c  0000cf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf44  0800bf44  0000d10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf44  0800bf44  0000cf44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf48  0800bf48  0000cf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800bf4c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c068  2000010c  0800c058  0000d10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c174  0800c058  0000d174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c71  00000000  00000000  0000d13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce8  00000000  00000000  00030dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  00035a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b5  00000000  00000000  000376c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff0f  00000000  00000000  00038c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023653  00000000  00000000  00068b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d5f5  00000000  00000000  0008c1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a97cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076b0  00000000  00000000  001a9810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b0ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800be6c 	.word	0x0800be6c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800be6c 	.word	0x0800be6c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2201      	movs	r2, #1
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 faa5 	bl	8001ab8 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fcaf 	bl	8000ed6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f001 fe21 	bl	80021dc <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fc99 	bl	8000ed6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f001 fe13 	bl	80021dc <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 fc8b 	bl	8000ed6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00b fbfd 	bl	800bdf8 <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fb0f 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 fc47 	bl	8000ed6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f002 ffa3 	bl	80035dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 fcc9 	bl	8003068 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 fbfb 	bl	8000ed6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 fc82 	bl	8002ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 fc9b 	bl	8003032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 fc6c 	bl	8003068 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fb9e 	bl	8000ed6 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 fc2b 	bl	8002ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 fc44 	bl	8003032 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 fc23 	bl	8002ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 fc3c 	bl	8003032 <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 fb15 	bl	8004e8c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 f83d 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 f838 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 f833 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f002 fe93 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f002 fe84 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f002 fe78 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f002 fe6a 	bl	80035dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f002 fe5c 	bl	80035dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fb66 	bl	8002ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fb7f 	bl	8003032 <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d119      	bne.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000974:	f002 ffc4 	bl	8003900 <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000988:	f002 ffba 	bl	8003900 <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000250 	.word	0x20000250
 80009a0:	48000400 	.word	0x48000400

080009a4 <comms_init>:

uint8_t tx_data_count = 0;
uint8_t * txArrayWritePosition; // 0 je id celeho ramce, 1 je pocet dat obsazenych v ramci


void comms_init(){
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	txArrayWritePosition = *(tx_buffer+2);
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <comms_init+0x18>)
 80009aa:	789b      	ldrb	r3, [r3, #2]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b04      	ldr	r3, [pc, #16]	@ (80009c0 <comms_init+0x1c>)
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	20004254 	.word	0x20004254
 80009c0:	20008254 	.word	0x20008254

080009c4 <m2s_Process>:
int SendInt2MTLB(uint16_t iD, int *xInt) {

	return DataTransmit2MTLB(iD, (uint8_t*) xInt, 1);
}

void m2s_Process() {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	// funkce volana z nekonecne smycky

	if (!m2s_Status)
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <m2s_Process+0x50>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d01e      	beq.n	8000a0e <m2s_Process+0x4a>
		return; // pokud neprisla data, ukonci se

	if (m2s_Status == 1) {
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <m2s_Process+0x50>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d111      	bne.n	80009fc <m2s_Process+0x38>
		// zpracuje data
		DataReceive_MTLB_Callback(m2s_ID, m2s_buf, m2s_nData_in_bytes / 4);
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <m2s_Process+0x54>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	b298      	uxth	r0, r3
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <m2s_Process+0x58>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da00      	bge.n	80009e8 <m2s_Process+0x24>
 80009e6:	3303      	adds	r3, #3
 80009e8:	109b      	asrs	r3, r3, #2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	490c      	ldr	r1, [pc, #48]	@ (8000a20 <m2s_Process+0x5c>)
 80009f0:	f000 f886 	bl	8000b00 <DataReceive_MTLB_Callback>
		m2s_Status = 0;
 80009f4:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <m2s_Process+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
		return;
 80009fa:	e009      	b.n	8000a10 <m2s_Process+0x4c>
	}

	if (m2s_Status == -1) {
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <m2s_Process+0x50>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a04:	d104      	bne.n	8000a10 <m2s_Process+0x4c>
		// inicializace
		m2s_Status = 0;
 8000a06:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <m2s_Process+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
		return;
 8000a0c:	e000      	b.n	8000a10 <m2s_Process+0x4c>
		return; // pokud neprisla data, ukonci se
 8000a0e:	bf00      	nop
	}

}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20008258 	.word	0x20008258
 8000a18:	2000825c 	.word	0x2000825c
 8000a1c:	20008260 	.word	0x20008260
 8000a20:	20000254 	.word	0x20000254

08000a24 <USB_My_Receive>:

void USB_My_Receive(uint8_t *Buf, uint32_t Len) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]

	// callback na prijem dat

	if (m2s_Status == 0) {
 8000a2e:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <USB_My_Receive+0x94>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10c      	bne.n	8000a50 <USB_My_Receive+0x2c>
		// iD
		m2s_ID = ((uint16_t*) Buf)[0];
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <USB_My_Receive+0x98>)
 8000a3e:	601a      	str	r2, [r3, #0]
		if (m2s_ID == 0)
 8000a40:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <USB_My_Receive+0x98>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d030      	beq.n	8000aaa <USB_My_Receive+0x86>
			return;
		m2s_Status = 100;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <USB_My_Receive+0x94>)
 8000a4a:	2264      	movs	r2, #100	@ 0x64
 8000a4c:	601a      	str	r2, [r3, #0]
		return;
 8000a4e:	e02f      	b.n	8000ab0 <USB_My_Receive+0x8c>
	}

	if (m2s_Status == 100) {
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <USB_My_Receive+0x94>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b64      	cmp	r3, #100	@ 0x64
 8000a56:	d110      	bne.n	8000a7a <USB_My_Receive+0x56>
		// nData
		m2s_nData_in_bytes = ((uint16_t*) Buf)[0] * 4;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4a18      	ldr	r2, [pc, #96]	@ (8000ac0 <USB_My_Receive+0x9c>)
 8000a60:	6013      	str	r3, [r2, #0]
		if (m2s_nData_in_bytes == 0) {
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <USB_My_Receive+0x9c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d103      	bne.n	8000a72 <USB_My_Receive+0x4e>
			m2s_Status = 1;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <USB_My_Receive+0x94>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
			return;
 8000a70:	e01e      	b.n	8000ab0 <USB_My_Receive+0x8c>
		}
		m2s_Status = 3; //wait for xData
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <USB_My_Receive+0x94>)
 8000a74:	2203      	movs	r2, #3
 8000a76:	601a      	str	r2, [r3, #0]
		return;
 8000a78:	e01a      	b.n	8000ab0 <USB_My_Receive+0x8c>
	}

	if (m2s_Status == 3) {
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <USB_My_Receive+0x94>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d115      	bne.n	8000aae <USB_My_Receive+0x8a>
		// xData
		if (Len < m2s_nData_in_bytes)
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <USB_My_Receive+0x9c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d202      	bcs.n	8000a94 <USB_My_Receive+0x70>
			m2s_nData_in_bytes = Len;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac0 <USB_My_Receive+0x9c>)
 8000a92:	6013      	str	r3, [r2, #0]
		memcpy(m2s_buf, Buf, m2s_nData_in_bytes);
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <USB_My_Receive+0x9c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <USB_My_Receive+0xa0>)
 8000a9e:	f00b f9d7 	bl	800be50 <memcpy>
		m2s_Status = 1;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <USB_My_Receive+0x94>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]
		return;
 8000aa8:	e002      	b.n	8000ab0 <USB_My_Receive+0x8c>
			return;
 8000aaa:	bf00      	nop
 8000aac:	e000      	b.n	8000ab0 <USB_My_Receive+0x8c>
	}

	return;
 8000aae:	bf00      	nop
}
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20008258 	.word	0x20008258
 8000abc:	2000825c 	.word	0x2000825c
 8000ac0:	20008260 	.word	0x20008260
 8000ac4:	20000254 	.word	0x20000254

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d108      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	4807      	ldr	r0, [pc, #28]	@ (8000af8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000adc:	f002 ff28 	bl	8003930 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ae8:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		//DataTransmit2MTLB(1, &periodical, 1);
	}
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000a3f0 	.word	0x2000a3f0
 8000af8:	48000400 	.word	0x48000400
 8000afc:	20008264 	.word	0x20008264

08000b00 <DataReceive_MTLB_Callback>:
//    	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);
//    }

}

void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	80bb      	strh	r3, [r7, #4]
	// funkce volana po prijmu dat

	switch (iD) {
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	2b14      	cmp	r3, #20
		//data odesilam zpet do matlabu
		//DataTransmit2MTLB(20, xData, nData_in_values);
		break;

	default:
		break;
 8000b14:	bf00      	nop
	}
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <myDmaFunction>:

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <myDmaFunction+0x28>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b32:	4a07      	ldr	r2, [pc, #28]	@ (8000b50 <myDmaFunction+0x2c>)
 8000b34:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <myDmaFunction+0x28>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3c:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <myDmaFunction+0x30>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	2000a3a4 	.word	0x2000a3a4
 8000b50:	20008270 	.word	0x20008270
 8000b54:	20008274 	.word	0x20008274

08000b58 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	@ 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8000b60:	4b51      	ldr	r3, [pc, #324]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0x150>)
 8000b62:	f04f 0200 	mov.w	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 8000b68:	4b50      	ldr	r3, [pc, #320]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x154>)
 8000b6a:	f04f 0200 	mov.w	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 100; i++) {
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
 8000b74:	e027      	b.n	8000bc6 <HAL_ADC_ConvCpltCallback+0x6e>
        adcValue += dma_data_buffer[i + 100]; // Použití druhé poloviny DMA bufferu
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3364      	adds	r3, #100	@ 0x64
 8000b7a:	4a4d      	ldr	r2, [pc, #308]	@ (8000cb0 <HAL_ADC_ConvCpltCallback+0x158>)
 8000b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b80:	ee07 3a90 	vmov	s15, r3
 8000b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b88:	4b47      	ldr	r3, [pc, #284]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0x150>)
 8000b8a:	edd3 7a00 	vldr	s15, [r3]
 8000b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b92:	4b45      	ldr	r3, [pc, #276]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0x150>)
 8000b94:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 100];
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	3365      	adds	r3, #101	@ 0x65
 8000b9c:	4a44      	ldr	r2, [pc, #272]	@ (8000cb0 <HAL_ADC_ConvCpltCallback+0x158>)
 8000b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba2:	ee07 3a90 	vmov	s15, r3
 8000ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000baa:	4b40      	ldr	r3, [pc, #256]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x154>)
 8000bac:	edd3 7a00 	vldr	s15, [r3]
 8000bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x154>)
 8000bb6:	edc3 7a00 	vstr	s15, [r3]
        i++;
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 100; i++) {
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	2b63      	cmp	r3, #99	@ 0x63
 8000bca:	ddd4      	ble.n	8000b76 <HAL_ADC_ConvCpltCallback+0x1e>
    }
    adcValue /= 50.0f;
 8000bcc:	4b36      	ldr	r3, [pc, #216]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0x150>)
 8000bce:	ed93 7a00 	vldr	s14, [r3]
 8000bd2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000cb4 <HAL_ADC_ConvCpltCallback+0x15c>
 8000bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bda:	4b33      	ldr	r3, [pc, #204]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0x150>)
 8000bdc:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 8000be0:	4b32      	ldr	r3, [pc, #200]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x154>)
 8000be2:	ed93 7a00 	vldr	s14, [r3]
 8000be6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8000cb4 <HAL_ADC_ConvCpltCallback+0x15c>
 8000bea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bee:	4b2f      	ldr	r3, [pc, #188]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x154>)
 8000bf0:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0x150>)
 8000bf6:	ed93 7a00 	vldr	s14, [r3]
 8000bfa:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000cb8 <HAL_ADC_ConvCpltCallback+0x160>
 8000bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c02:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000cbc <HAL_ADC_ConvCpltCallback+0x164>
 8000c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0a:	edc7 7a06 	vstr	s15, [r7, #24]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x168>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	ee07 3a90 	vmov	s15, r3
 8000c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c1a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000cb8 <HAL_ADC_ConvCpltCallback+0x160>
 8000c1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c22:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000cbc <HAL_ADC_ConvCpltCallback+0x164>
 8000c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c2a:	edc7 7a05 	vstr	s15, [r7, #20]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8000c2e:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c3a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000cb8 <HAL_ADC_ConvCpltCallback+0x160>
 8000c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c42:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000cbc <HAL_ADC_ConvCpltCallback+0x164>
 8000c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c4a:	edc7 7a04 	vstr	s15, [r7, #16]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8000c4e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c52:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c5a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000cc8 <HAL_ADC_ConvCpltCallback+0x170>
 8000c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c62:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000c66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <HAL_ADC_ConvCpltCallback+0x174>)
 8000c6c:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 8000c70:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <HAL_ADC_ConvCpltCallback+0x178>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	4a16      	ldr	r2, [pc, #88]	@ (8000cd0 <HAL_ADC_ConvCpltCallback+0x178>)
 8000c78:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    int temperatureInt = (int)temperature;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <HAL_ADC_ConvCpltCallback+0x174>)
 8000c7c:	edd3 7a00 	vldr	s15, [r3]
 8000c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c84:	ee17 3a90 	vmov	r3, s15
 8000c88:	60fb      	str	r3, [r7, #12]
    //SendInt2MTLB(2, &temperatureInt);

    int adcIn1Int = (int)adcIn1;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x154>)
 8000c8c:	edd3 7a00 	vldr	s15, [r3]
 8000c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c94:	ee17 3a90 	vmov	r3, s15
 8000c98:	60bb      	str	r3, [r7, #8]
    //SendInt2MTLB(23, &adcIn1Int);
}
 8000c9a:	bf00      	nop
 8000c9c:	3724      	adds	r7, #36	@ 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	2000a348 	.word	0x2000a348
 8000cac:	2000a350 	.word	0x2000a350
 8000cb0:	2000a1b8 	.word	0x2000a1b8
 8000cb4:	42480000 	.word	0x42480000
 8000cb8:	45800000 	.word	0x45800000
 8000cbc:	40533333 	.word	0x40533333
 8000cc0:	1fff75a8 	.word	0x1fff75a8
 8000cc4:	1fff75ca 	.word	0x1fff75ca
 8000cc8:	42a00000 	.word	0x42a00000
 8000ccc:	2000a34c 	.word	0x2000a34c
 8000cd0:	2000a354 	.word	0x2000a354

08000cd4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

	//SendInt2MTLB(23, &adcValueInt);
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	f5ad 6d00 	sub.w	sp, sp, #2048	@ 0x800
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf0:	f000 fc35 	bl	800155e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf4:	f000 f89c 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf8:	f7ff fd6a 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cfc:	f7ff fd0c 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 8000d00:	f000 fa36 	bl	8001170 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000d04:	f00a fa3a 	bl	800b17c <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000d08:	f000 f9e4 	bl	80010d4 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000d0c:	f7ff fbee 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d10:	f000 f992 	bl	8001038 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000d14:	f000 fb08 	bl	8001328 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8000d18:	f000 fab8 	bl	800128c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  comms_init();
 8000d1c:	f7ff fe42 	bl	80009a4 <comms_init>

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2180      	movs	r1, #128	@ 0x80
 8000d24:	4835      	ldr	r0, [pc, #212]	@ (8000dfc <main+0x114>)
 8000d26:	f002 fdeb 	bl	8003900 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 8000d2a:	4835      	ldr	r0, [pc, #212]	@ (8000e00 <main+0x118>)
 8000d2c:	f005 fd6e 	bl	800680c <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 8000d30:	4834      	ldr	r0, [pc, #208]	@ (8000e04 <main+0x11c>)
 8000d32:	f005 fd03 	bl	800673c <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
 8000d3c:	e011      	b.n	8000d62 <main+0x7a>
		dma[i] = i;
 8000d3e:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	@ 0x7fc
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e08 <main+0x120>)
 8000d4c:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	@ 0x7fc
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 8000d58:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	@ 0x7fc
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
 8000d62:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	@ 0x7fc
 8000d66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d6a:	dbe8      	blt.n	8000d3e <main+0x56>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 8000d6c:	4a27      	ldr	r2, [pc, #156]	@ (8000e0c <main+0x124>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4827      	ldr	r0, [pc, #156]	@ (8000e10 <main+0x128>)
 8000d72:	f002 fb4b 	bl	800340c <HAL_DMA_RegisterCallback>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f887 37fb 	strb.w	r3, [r7, #2043]	@ 0x7fb
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <main+0x11c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d82:	4a24      	ldr	r2, [pc, #144]	@ (8000e14 <main+0x12c>)
 8000d84:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8000d86:	4920      	ldr	r1, [pc, #128]	@ (8000e08 <main+0x120>)
 8000d88:	4a23      	ldr	r2, [pc, #140]	@ (8000e18 <main+0x130>)
 8000d8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8e:	4820      	ldr	r0, [pc, #128]	@ (8000e10 <main+0x128>)
 8000d90:	f002 fa12 	bl	80031b8 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 8000d94:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <main+0x11c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d9a:	4a20      	ldr	r2, [pc, #128]	@ (8000e1c <main+0x134>)
 8000d9c:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <main+0x11c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da4:	4a1e      	ldr	r2, [pc, #120]	@ (8000e20 <main+0x138>)
 8000da6:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 8000da8:	481e      	ldr	r0, [pc, #120]	@ (8000e24 <main+0x13c>)
 8000daa:	f005 fd2f 	bl	800680c <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dae:	217f      	movs	r1, #127	@ 0x7f
 8000db0:	481d      	ldr	r0, [pc, #116]	@ (8000e28 <main+0x140>)
 8000db2:	f001 ffb5 	bl	8002d20 <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 8000db6:	2032      	movs	r0, #50	@ 0x32
 8000db8:	f000 fc46 	bl	8001648 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 8000dbc:	22c8      	movs	r2, #200	@ 0xc8
 8000dbe:	491b      	ldr	r1, [pc, #108]	@ (8000e2c <main+0x144>)
 8000dc0:	4819      	ldr	r0, [pc, #100]	@ (8000e28 <main+0x140>)
 8000dc2:	f000 ffbf 	bl	8001d44 <HAL_ADC_Start_DMA>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 37fa 	strb.w	r3, [r7, #2042]	@ 0x7fa

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		void * nazevpole[255] = {NULL};
 8000dcc:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000dd0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f44f 737f 	mov.w	r3, #1020	@ 0x3fc
 8000dda:	461a      	mov	r2, r3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f00b f80b 	bl	800bdf8 <memset>

		void * nazevpole2[255];
		memset(nazevpole2, NULL, 255*sizeof(void *));
 8000de2:	f507 737f 	add.w	r3, r7, #1020	@ 0x3fc
 8000de6:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f00b f803 	bl	800bdf8 <memset>

		//load_CPU();
		m2s_Process();
 8000df2:	f7ff fde7 	bl	80009c4 <m2s_Process>
	while (1) {
 8000df6:	bf00      	nop
 8000df8:	e7e8      	b.n	8000dcc <main+0xe4>
 8000dfa:	bf00      	nop
 8000dfc:	48000800 	.word	0x48000800
 8000e00:	2000a3f0 	.word	0x2000a3f0
 8000e04:	2000a3a4 	.word	0x2000a3a4
 8000e08:	20008278 	.word	0x20008278
 8000e0c:	08000b25 	.word	0x08000b25
 8000e10:	200001f0 	.word	0x200001f0
 8000e14:	20008268 	.word	0x20008268
 8000e18:	20009218 	.word	0x20009218
 8000e1c:	20008274 	.word	0x20008274
 8000e20:	2000826c 	.word	0x2000826c
 8000e24:	2000a358 	.word	0x2000a358
 8000e28:	20000128 	.word	0x20000128
 8000e2c:	2000a1b8 	.word	0x2000a1b8

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b096      	sub	sp, #88	@ 0x58
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2244      	movs	r2, #68	@ 0x44
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f00a ffda 	bl	800bdf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000e52:	2000      	movs	r0, #0
 8000e54:	f003 ff66 	bl	8004d24 <HAL_PWREx_ControlVoltageScaling>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000e5e:	f000 f83a 	bl	8000ed6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000e62:	2322      	movs	r3, #34	@ 0x22
 8000e64:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e70:	2340      	movs	r3, #64	@ 0x40
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e74:	2302      	movs	r3, #2
 8000e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000e80:	231e      	movs	r3, #30
 8000e82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 f809 	bl	8004eac <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ea0:	f000 f819 	bl	8000ed6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 fc0e 	bl	80056e0 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000eca:	f000 f804 	bl	8000ed6 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3758      	adds	r7, #88	@ 0x58
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eda:	b672      	cpsid	i
}
 8000edc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ede:	bf00      	nop
 8000ee0:	e7fd      	b.n	8000ede <Error_Handler+0x8>
	...

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <HAL_MspInit+0x44>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eee:	4a0e      	ldr	r2, [pc, #56]	@ (8000f28 <HAL_MspInit+0x44>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <HAL_MspInit+0x44>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <HAL_MspInit+0x44>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	4a08      	ldr	r2, [pc, #32]	@ (8000f28 <HAL_MspInit+0x44>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <HAL_MspInit+0x44>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <NMI_Handler+0x4>

08000f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <MemManage_Handler+0x4>

08000f44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 fb41 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <DMA1_Channel1_IRQHandler+0x10>)
 8000f92:	f002 f98c 	bl	80032ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000190 	.word	0x20000190

08000fa0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <DMA1_Channel2_IRQHandler+0x10>)
 8000fa6:	f002 f982 	bl	80032ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001f0 	.word	0x200001f0

08000fb4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <ADC1_IRQHandler+0x10>)
 8000fba:	f000 ff47 	bl	8001e4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000128 	.word	0x20000128

08000fc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <TIM3_IRQHandler+0x10>)
 8000fce:	f005 fc8d 	bl	80068ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000a358 	.word	0x2000a358

08000fdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fe0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fe4:	f002 fcbe 	bl	8003964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <TIM6_DAC_IRQHandler+0x10>)
 8000ff2:	f005 fc7b 	bl	80068ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000a3f0 	.word	0x2000a3f0

08001000 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <OTG_FS_IRQHandler+0x10>)
 8001006:	f002 fe18 	bl	8003c3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000ba48 	.word	0x2000ba48

08001014 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <MX_TIM3_Init+0x94>)
 8001058:	4a1d      	ldr	r2, [pc, #116]	@ (80010d0 <MX_TIM3_Init+0x98>)
 800105a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <MX_TIM3_Init+0x94>)
 800105e:	2217      	movs	r2, #23
 8001060:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <MX_TIM3_Init+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <MX_TIM3_Init+0x94>)
 800106a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800106e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001070:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <MX_TIM3_Init+0x94>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <MX_TIM3_Init+0x94>)
 8001078:	2280      	movs	r2, #128	@ 0x80
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800107c:	4813      	ldr	r0, [pc, #76]	@ (80010cc <MX_TIM3_Init+0x94>)
 800107e:	f005 fb05 	bl	800668c <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001088:	f7ff ff25 	bl	8000ed6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001090:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <MX_TIM3_Init+0x94>)
 800109a:	f005 fd29 	bl	8006af0 <HAL_TIM_ConfigClockSource>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010a4:	f7ff ff17 	bl	8000ed6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010a8:	2320      	movs	r3, #32
 80010aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_TIM3_Init+0x94>)
 80010b6:	f005 ff41 	bl	8006f3c <HAL_TIMEx_MasterConfigSynchronization>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80010c0:	f7ff ff09 	bl	8000ed6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000a358 	.word	0x2000a358
 80010d0:	40000400 	.word	0x40000400

080010d4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <MX_TIM5_Init+0x94>)
 80010f4:	4a1d      	ldr	r2, [pc, #116]	@ (800116c <MX_TIM5_Init+0x98>)
 80010f6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <MX_TIM5_Init+0x94>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <MX_TIM5_Init+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001104:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <MX_TIM5_Init+0x94>)
 8001106:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800110a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110c:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <MX_TIM5_Init+0x94>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <MX_TIM5_Init+0x94>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001118:	4813      	ldr	r0, [pc, #76]	@ (8001168 <MX_TIM5_Init+0x94>)
 800111a:	f005 fab7 	bl	800668c <HAL_TIM_Base_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001124:	f7ff fed7 	bl	8000ed6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800112c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	4619      	mov	r1, r3
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <MX_TIM5_Init+0x94>)
 8001136:	f005 fcdb 	bl	8006af0 <HAL_TIM_ConfigClockSource>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001140:	f7ff fec9 	bl	8000ed6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	@ (8001168 <MX_TIM5_Init+0x94>)
 8001152:	f005 fef3 	bl	8006f3c <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800115c:	f7ff febb 	bl	8000ed6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000a3a4 	.word	0x2000a3a4
 800116c:	40000c00 	.word	0x40000c00

08001170 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <MX_TIM6_Init+0x68>)
 8001182:	4a16      	ldr	r2, [pc, #88]	@ (80011dc <MX_TIM6_Init+0x6c>)
 8001184:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_TIM6_Init+0x68>)
 8001188:	f242 7210 	movw	r2, #10000	@ 0x2710
 800118c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_TIM6_Init+0x68>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 8001194:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_TIM6_Init+0x68>)
 8001196:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800119a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_TIM6_Init+0x68>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011a2:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <MX_TIM6_Init+0x68>)
 80011a4:	f005 fa72 	bl	800668c <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011ae:	f7ff fe92 	bl	8000ed6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	@ (80011d8 <MX_TIM6_Init+0x68>)
 80011c0:	f005 febc 	bl	8006f3c <HAL_TIMEx_MasterConfigSynchronization>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80011ca:	f7ff fe84 	bl	8000ed6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000a3f0 	.word	0x2000a3f0
 80011dc:	40001000 	.word	0x40001000

080011e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a23      	ldr	r2, [pc, #140]	@ (800127c <HAL_TIM_Base_MspInit+0x9c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d114      	bne.n	800121c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f2:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <HAL_TIM_Base_MspInit+0xa0>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f6:	4a22      	ldr	r2, [pc, #136]	@ (8001280 <HAL_TIM_Base_MspInit+0xa0>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fe:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <HAL_TIM_Base_MspInit+0xa0>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	201d      	movs	r0, #29
 8001210:	f001 fef3 	bl	8002ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001214:	201d      	movs	r0, #29
 8001216:	f001 ff0c 	bl	8003032 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800121a:	e02a      	b.n	8001272 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a18      	ldr	r2, [pc, #96]	@ (8001284 <HAL_TIM_Base_MspInit+0xa4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10c      	bne.n	8001240 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <HAL_TIM_Base_MspInit+0xa0>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122a:	4a15      	ldr	r2, [pc, #84]	@ (8001280 <HAL_TIM_Base_MspInit+0xa0>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	6593      	str	r3, [r2, #88]	@ 0x58
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <HAL_TIM_Base_MspInit+0xa0>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
}
 800123e:	e018      	b.n	8001272 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a10      	ldr	r2, [pc, #64]	@ (8001288 <HAL_TIM_Base_MspInit+0xa8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d113      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <HAL_TIM_Base_MspInit+0xa0>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124e:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <HAL_TIM_Base_MspInit+0xa0>)
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	6593      	str	r3, [r2, #88]	@ 0x58
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_TIM_Base_MspInit+0xa0>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2036      	movs	r0, #54	@ 0x36
 8001268:	f001 fec7 	bl	8002ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800126c:	2036      	movs	r0, #54	@ 0x36
 800126e:	f001 fee0 	bl	8003032 <HAL_NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40000400 	.word	0x40000400
 8001280:	40021000 	.word	0x40021000
 8001284:	40000c00 	.word	0x40000c00
 8001288:	40001000 	.word	0x40001000

0800128c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001290:	4b22      	ldr	r3, [pc, #136]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 8001292:	4a23      	ldr	r2, [pc, #140]	@ (8001320 <MX_LPUART1_UART_Init+0x94>)
 8001294:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001296:	4b21      	ldr	r3, [pc, #132]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 8001298:	4a22      	ldr	r2, [pc, #136]	@ (8001324 <MX_LPUART1_UART_Init+0x98>)
 800129a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 800129e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b19      	ldr	r3, [pc, #100]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c2:	4b16      	ldr	r3, [pc, #88]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012d4:	4811      	ldr	r0, [pc, #68]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 80012d6:	f005 fed7 	bl	8007088 <HAL_UART_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80012e0:	f7ff fdf9 	bl	8000ed6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e4:	2100      	movs	r1, #0
 80012e6:	480d      	ldr	r0, [pc, #52]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 80012e8:	f006 fc6c 	bl	8007bc4 <HAL_UARTEx_SetTxFifoThreshold>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012f2:	f7ff fdf0 	bl	8000ed6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4808      	ldr	r0, [pc, #32]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 80012fa:	f006 fca1 	bl	8007c40 <HAL_UARTEx_SetRxFifoThreshold>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001304:	f7ff fde7 	bl	8000ed6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_LPUART1_UART_Init+0x90>)
 800130a:	f006 fc22 	bl	8007b52 <HAL_UARTEx_DisableFifoMode>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001314:	f7ff fddf 	bl	8000ed6 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000a43c 	.word	0x2000a43c
 8001320:	40008000 	.word	0x40008000
 8001324:	00033324 	.word	0x00033324

08001328 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800132c:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 800132e:	4a23      	ldr	r2, [pc, #140]	@ (80013bc <MX_USART3_UART_Init+0x94>)
 8001330:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001346:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135e:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001370:	4811      	ldr	r0, [pc, #68]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 8001372:	f005 fe89 	bl	8007088 <HAL_UART_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800137c:	f7ff fdab 	bl	8000ed6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001380:	2100      	movs	r1, #0
 8001382:	480d      	ldr	r0, [pc, #52]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 8001384:	f006 fc1e 	bl	8007bc4 <HAL_UARTEx_SetTxFifoThreshold>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800138e:	f7ff fda2 	bl	8000ed6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001392:	2100      	movs	r1, #0
 8001394:	4808      	ldr	r0, [pc, #32]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 8001396:	f006 fc53 	bl	8007c40 <HAL_UARTEx_SetRxFifoThreshold>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013a0:	f7ff fd99 	bl	8000ed6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <MX_USART3_UART_Init+0x90>)
 80013a6:	f006 fbd4 	bl	8007b52 <HAL_UARTEx_DisableFifoMode>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013b0:	f7ff fd91 	bl	8000ed6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000a4d0 	.word	0x2000a4d0
 80013bc:	40004800 	.word	0x40004800

080013c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0b0      	sub	sp, #192	@ 0xc0
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	2294      	movs	r2, #148	@ 0x94
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f00a fd09 	bl	800bdf8 <memset>
  if(uartHandle->Instance==LPUART1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a43      	ldr	r2, [pc, #268]	@ (80014f8 <HAL_UART_MspInit+0x138>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d13e      	bne.n	800146e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80013f0:	2320      	movs	r3, #32
 80013f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	f107 0318 	add.w	r3, r7, #24
 80013fc:	4618      	mov	r0, r3
 80013fe:	f004 fc2d 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001408:	f7ff fd65 	bl	8000ed6 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800140c:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 800140e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001410:	4a3a      	ldr	r2, [pc, #232]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001418:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 800141a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001424:	4b35      	ldr	r3, [pc, #212]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001428:	4a34      	ldr	r2, [pc, #208]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 800142a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800142e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001430:	4b32      	ldr	r3, [pc, #200]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800143c:	f003 fd26 	bl	8004e8c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001440:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001444:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800145a:	2308      	movs	r3, #8
 800145c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001460:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001464:	4619      	mov	r1, r3
 8001466:	4826      	ldr	r0, [pc, #152]	@ (8001500 <HAL_UART_MspInit+0x140>)
 8001468:	f002 f8b8 	bl	80035dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800146c:	e040      	b.n	80014f0 <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART3)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a24      	ldr	r2, [pc, #144]	@ (8001504 <HAL_UART_MspInit+0x144>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d13b      	bne.n	80014f0 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001478:	2304      	movs	r3, #4
 800147a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4618      	mov	r0, r3
 8001486:	f004 fbe9 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001490:	f7ff fd21 	bl	8000ed6 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001498:	4a18      	ldr	r2, [pc, #96]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 800149a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149e:	6593      	str	r3, [r2, #88]	@ 0x58
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b0:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 80014b2:	f043 0308 	orr.w	r3, r3, #8
 80014b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <HAL_UART_MspInit+0x13c>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014de:	2307      	movs	r3, #7
 80014e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014e8:	4619      	mov	r1, r3
 80014ea:	4807      	ldr	r0, [pc, #28]	@ (8001508 <HAL_UART_MspInit+0x148>)
 80014ec:	f002 f876 	bl	80035dc <HAL_GPIO_Init>
}
 80014f0:	bf00      	nop
 80014f2:	37c0      	adds	r7, #192	@ 0xc0
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40008000 	.word	0x40008000
 80014fc:	40021000 	.word	0x40021000
 8001500:	48001800 	.word	0x48001800
 8001504:	40004800 	.word	0x40004800
 8001508:	48000c00 	.word	0x48000c00

0800150c <Reset_Handler>:
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001544 <LoopForever+0x2>
 8001510:	f7ff fd80 	bl	8001014 <SystemInit>
 8001514:	480c      	ldr	r0, [pc, #48]	@ (8001548 <LoopForever+0x6>)
 8001516:	490d      	ldr	r1, [pc, #52]	@ (800154c <LoopForever+0xa>)
 8001518:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <LoopForever+0xe>)
 800151a:	2300      	movs	r3, #0
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:
 800151e:	58d4      	ldr	r4, [r2, r3]
 8001520:	50c4      	str	r4, [r0, r3]
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:
 8001524:	18c4      	adds	r4, r0, r3
 8001526:	428c      	cmp	r4, r1
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <LoopForever+0x12>)
 800152c:	4c0a      	ldr	r4, [pc, #40]	@ (8001558 <LoopForever+0x16>)
 800152e:	2300      	movs	r3, #0
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:
 8001536:	42a2      	cmp	r2, r4
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>
 800153a:	f00a fc65 	bl	800be08 <__libc_init_array>
 800153e:	f7ff fbd3 	bl	8000ce8 <main>

08001542 <LoopForever>:
 8001542:	e7fe      	b.n	8001542 <LoopForever>
 8001544:	200a0000 	.word	0x200a0000
 8001548:	20000000 	.word	0x20000000
 800154c:	2000010c 	.word	0x2000010c
 8001550:	0800bf4c 	.word	0x0800bf4c
 8001554:	2000010c 	.word	0x2000010c
 8001558:	2000c174 	.word	0x2000c174

0800155c <CAN1_RX0_IRQHandler>:
 800155c:	e7fe      	b.n	800155c <CAN1_RX0_IRQHandler>

0800155e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f001 fd3b 	bl	8002fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156e:	2000      	movs	r0, #0
 8001570:	f000 f80e 	bl	8001590 <HAL_InitTick>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	e001      	b.n	8001584 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001580:	f7ff fcb0 	bl	8000ee4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001584:	79fb      	ldrb	r3, [r7, #7]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800159c:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <HAL_InitTick+0x6c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d023      	beq.n	80015ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015a4:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <HAL_InitTick+0x70>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <HAL_InitTick+0x6c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 fd47 	bl	800304e <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10f      	bne.n	80015e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d809      	bhi.n	80015e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015d4:	f001 fd11 	bl	8002ffa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <HAL_InitTick+0x74>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e007      	b.n	80015f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e004      	b.n	80015f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e001      	b.n	80015f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000000 	.word	0x20000000
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_IncTick+0x20>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_IncTick+0x24>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a04      	ldr	r2, [pc, #16]	@ (800162c <HAL_IncTick+0x24>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000008 	.word	0x20000008
 800162c:	2000a564 	.word	0x2000a564

08001630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <HAL_GetTick+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000a564 	.word	0x2000a564

08001648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff ffee 	bl	8001630 <HAL_GetTick>
 8001654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001660:	d005      	beq.n	800166e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_Delay+0x44>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800166e:	bf00      	nop
 8001670:	f7ff ffde 	bl	8001630 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d8f7      	bhi.n	8001670 <HAL_Delay+0x28>
  {
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008

08001690 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	609a      	str	r2, [r3, #8]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3360      	adds	r3, #96	@ 0x60
 800170a:	461a      	mov	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <LL_ADC_SetOffset+0x44>)
 800171a:	4013      	ands	r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	4313      	orrs	r3, r2
 8001728:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	03fff000 	.word	0x03fff000

08001740 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3360      	adds	r3, #96	@ 0x60
 800174e:	461a      	mov	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3360      	adds	r3, #96	@ 0x60
 800177c:	461a      	mov	r2, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	431a      	orrs	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	615a      	str	r2, [r3, #20]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b087      	sub	sp, #28
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3330      	adds	r3, #48	@ 0x30
 80017fe:	461a      	mov	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	4413      	add	r3, r2
 800180c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	211f      	movs	r1, #31
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	401a      	ands	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0e9b      	lsrs	r3, r3, #26
 8001826:	f003 011f 	and.w	r1, r3, #31
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	431a      	orrs	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800183a:	bf00      	nop
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3314      	adds	r3, #20
 800187c:	461a      	mov	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	0e5b      	lsrs	r3, r3, #25
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	4413      	add	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	0d1b      	lsrs	r3, r3, #20
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2107      	movs	r1, #7
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	401a      	ands	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	0d1b      	lsrs	r3, r3, #20
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018b6:	bf00      	nop
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0318 	and.w	r3, r3, #24
 80018e6:	4908      	ldr	r1, [pc, #32]	@ (8001908 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018e8:	40d9      	lsrs	r1, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	400b      	ands	r3, r1
 80018ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f2:	431a      	orrs	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	0007ffff 	.word	0x0007ffff

0800190c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800191c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6093      	str	r3, [r2, #8]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001944:	d101      	bne.n	800194a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001968:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800196c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001994:	d101      	bne.n	800199a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019e4:	f043 0202 	orr.w	r2, r3, #2
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <LL_ADC_IsEnabled+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_ADC_IsEnabled+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d101      	bne.n	8001a36 <LL_ADC_IsDisableOngoing+0x18>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_ADC_IsDisableOngoing+0x1a>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a58:	f043 0204 	orr.w	r2, r3, #4
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d101      	bne.n	8001a84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d101      	bne.n	8001aaa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e129      	b.n	8001d26 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7fe fd79 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff19 	bl	8001930 <LL_ADC_IsDeepPowerDownEnabled>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff feff 	bl	800190c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff34 	bl	8001980 <LL_ADC_IsInternalRegulatorEnabled>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d115      	bne.n	8001b4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff18 	bl	8001958 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b28:	4b81      	ldr	r3, [pc, #516]	@ (8001d30 <HAL_ADC_Init+0x278>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	4a81      	ldr	r2, [pc, #516]	@ (8001d34 <HAL_ADC_Init+0x27c>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	3301      	adds	r3, #1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f9      	bne.n	8001b3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff16 	bl	8001980 <LL_ADC_IsInternalRegulatorEnabled>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	f043 0210 	orr.w	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff76 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8001b80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 80c2 	bne.w	8001d14 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 80be 	bne.w	8001d14 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ba0:	f043 0202 	orr.w	r2, r3, #2
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff23 	bl	80019f8 <LL_ADC_IsEnabled>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bb8:	485f      	ldr	r0, [pc, #380]	@ (8001d38 <HAL_ADC_Init+0x280>)
 8001bba:	f7ff ff1d 	bl	80019f8 <LL_ADC_IsEnabled>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	485c      	ldr	r0, [pc, #368]	@ (8001d3c <HAL_ADC_Init+0x284>)
 8001bcc:	f7ff fd60 	bl	8001690 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7e5b      	ldrb	r3, [r3, #25]
 8001bd4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bda:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001be0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001be6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d106      	bne.n	8001c0c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	3b01      	subs	r3, #1
 8001c04:	045b      	lsls	r3, r3, #17
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c18:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c20:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	4b44      	ldr	r3, [pc, #272]	@ (8001d40 <HAL_ADC_Init+0x288>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	69b9      	ldr	r1, [r7, #24]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff26 	bl	8001a92 <LL_ADC_INJ_IsConversionOngoing>
 8001c46:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d140      	bne.n	8001cd0 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d13d      	bne.n	8001cd0 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7e1b      	ldrb	r3, [r3, #24]
 8001c5c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c5e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c66:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c76:	f023 0306 	bic.w	r3, r3, #6
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	430b      	orrs	r3, r1
 8001c82:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d118      	bne.n	8001cc0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001caa:	4311      	orrs	r1, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	e007      	b.n	8001cd0 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f023 010f 	bic.w	r1, r3, #15
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	1e5a      	subs	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cf0:	e007      	b.n	8001d02 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 020f 	bic.w	r2, r2, #15
 8001d00:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d06:	f023 0303 	bic.w	r3, r3, #3
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d12:	e007      	b.n	8001d24 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d18:	f043 0210 	orr.w	r2, r3, #16
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d24:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000
 8001d34:	053e2d63 	.word	0x053e2d63
 8001d38:	50040000 	.word	0x50040000
 8001d3c:	50040300 	.word	0x50040300
 8001d40:	fff0c007 	.word	0xfff0c007

08001d44 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fe89 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d167      	bne.n	8001e30 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_Start_DMA+0x2a>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e063      	b.n	8001e36 <HAL_ADC_Start_DMA+0xf2>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fe2c 	bl	80029d4 <ADC_Enable>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d14f      	bne.n	8001e26 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001daa:	f023 0206 	bic.w	r2, r3, #6
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001db2:	e002      	b.n	8001dba <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dbe:	4a20      	ldr	r2, [pc, #128]	@ (8001e40 <HAL_ADC_Start_DMA+0xfc>)
 8001dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e44 <HAL_ADC_Start_DMA+0x100>)
 8001dc8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dce:	4a1e      	ldr	r2, [pc, #120]	@ (8001e48 <HAL_ADC_Start_DMA+0x104>)
 8001dd0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	221c      	movs	r2, #28
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0210 	orr.w	r2, r2, #16
 8001df0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3340      	adds	r3, #64	@ 0x40
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f001 f9d1 	bl	80031b8 <HAL_DMA_Start_IT>
 8001e16:	4603      	mov	r3, r0
 8001e18:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fe10 	bl	8001a44 <LL_ADC_REG_StartConversion>
 8001e24:	e006      	b.n	8001e34 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001e2e:	e001      	b.n	8001e34 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e30:	2302      	movs	r3, #2
 8001e32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	08002b9f 	.word	0x08002b9f
 8001e44:	08002c77 	.word	0x08002c77
 8001e48:	08002c93 	.word	0x08002c93

08001e4c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d017      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x56>
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d012      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 ffcb 	bl	8002e30 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_ADC_IRQHandler+0x6a>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d05e      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d059      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fc6e 	bl	80017c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d03e      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d135      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d12e      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fda8 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d11a      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 020c 	bic.w	r2, r2, #12
 8001f30:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d112      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f56:	e00b      	b.n	8001f70 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f043 0210 	orr.w	r2, r3, #16
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f68:	f043 0201 	orr.w	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe fdf1 	bl	8000b58 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <HAL_ADC_IRQHandler+0x146>
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d072      	beq.n	8002082 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d06d      	beq.n	8002082 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d105      	bne.n	8001fbe <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fc3f 	bl	8001846 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001fc8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fbfa 	bl	80017c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fd4:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d047      	beq.n	8002074 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_ADC_IRQHandler+0x1b2>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d03f      	beq.n	8002074 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d13a      	bne.n	8002074 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002008:	2b40      	cmp	r3, #64	@ 0x40
 800200a:	d133      	bne.n	8002074 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12e      	bne.n	8002074 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fd39 	bl	8001a92 <LL_ADC_INJ_IsConversionOngoing>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d11a      	bne.n	800205c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002034:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d112      	bne.n	8002074 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	659a      	str	r2, [r3, #88]	@ 0x58
 800205a:	e00b      	b.n	8002074 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002060:	f043 0210 	orr.w	r2, r3, #16
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 feb3 	bl	8002de0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2260      	movs	r2, #96	@ 0x60
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002088:	2b00      	cmp	r3, #0
 800208a:	d011      	beq.n	80020b0 <HAL_ADC_IRQHandler+0x264>
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00c      	beq.n	80020b0 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f886 	bl	80021b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2280      	movs	r2, #128	@ 0x80
 80020ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d012      	beq.n	80020e0 <HAL_ADC_IRQHandler+0x294>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fe99 	bl	8002e08 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d012      	beq.n	8002110 <HAL_ADC_IRQHandler+0x2c4>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00d      	beq.n	8002110 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fe8b 	bl	8002e1c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800210e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d02a      	beq.n	8002170 <HAL_ADC_IRQHandler+0x324>
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	d025      	beq.n	8002170 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800212c:	2301      	movs	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	e008      	b.n	8002144 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002140:	2301      	movs	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10e      	bne.n	8002168 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	f043 0202 	orr.w	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f830 	bl	80021c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2210      	movs	r2, #16
 800216e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002176:	2b00      	cmp	r3, #0
 8002178:	d018      	beq.n	80021ac <HAL_ADC_IRQHandler+0x360>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	f043 0208 	orr.w	r2, r3, #8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021a4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fe24 	bl	8002df4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b0b6      	sub	sp, #216	@ 0xd8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x22>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e3d5      	b.n	80029aa <HAL_ADC_ConfigChannel+0x7ce>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fc2e 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	f040 83ba 	bne.w	800298c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d824      	bhi.n	8002272 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	3b02      	subs	r3, #2
 800222e:	2b03      	cmp	r3, #3
 8002230:	d81b      	bhi.n	800226a <HAL_ADC_ConfigChannel+0x8e>
 8002232:	a201      	add	r2, pc, #4	@ (adr r2, 8002238 <HAL_ADC_ConfigChannel+0x5c>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002249 	.word	0x08002249
 800223c:	08002251 	.word	0x08002251
 8002240:	08002259 	.word	0x08002259
 8002244:	08002261 	.word	0x08002261
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002248:	230c      	movs	r3, #12
 800224a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800224e:	e010      	b.n	8002272 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002250:	2312      	movs	r3, #18
 8002252:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002256:	e00c      	b.n	8002272 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002258:	2318      	movs	r3, #24
 800225a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800225e:	e008      	b.n	8002272 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002260:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002268:	e003      	b.n	8002272 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800226a:	2306      	movs	r3, #6
 800226c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002270:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002280:	f7ff fab5 	bl	80017ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fbef 	bl	8001a6c <LL_ADC_REG_IsConversionOngoing>
 800228e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fbfb 	bl	8001a92 <LL_ADC_INJ_IsConversionOngoing>
 800229c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 81bf 	bne.w	8002628 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 81ba 	bne.w	8002628 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022bc:	d10f      	bne.n	80022de <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7ff facf 	bl	800186c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fa63 	bl	80017a2 <LL_ADC_SetSamplingTimeCommonConfig>
 80022dc:	e00e      	b.n	80022fc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f7ff fabe 	bl	800186c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fa53 	bl	80017a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	08db      	lsrs	r3, r3, #3
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b04      	cmp	r3, #4
 800231c:	d00a      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6919      	ldr	r1, [r3, #16]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800232e:	f7ff f9e3 	bl	80016f8 <LL_ADC_SetOffset>
 8002332:	e179      	b.n	8002628 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fa00 	bl	8001740 <LL_ADC_GetOffsetChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x184>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff f9f5 	bl	8001740 <LL_ADC_GetOffsetChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	0e9b      	lsrs	r3, r3, #26
 800235a:	f003 021f 	and.w	r2, r3, #31
 800235e:	e01e      	b.n	800239e <HAL_ADC_ConfigChannel+0x1c2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff f9ea 	bl	8001740 <LL_ADC_GetOffsetChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800237e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002386:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e004      	b.n	800239c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002392:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x1da>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	0e9b      	lsrs	r3, r3, #26
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	e018      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x20c>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80023ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80023d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e004      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80023de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d106      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f9b9 	bl	800176c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2101      	movs	r1, #1
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff f99d 	bl	8001740 <LL_ADC_GetOffsetChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x24a>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff f992 	bl	8001740 <LL_ADC_GetOffsetChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	e01e      	b.n	8002464 <HAL_ADC_ConfigChannel+0x288>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2101      	movs	r1, #1
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff f987 	bl	8001740 <LL_ADC_GetOffsetChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002444:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002448:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800244c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e004      	b.n	8002462 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002458:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <HAL_ADC_ConfigChannel+0x2a0>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0e9b      	lsrs	r3, r3, #26
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	e018      	b.n	80024ae <HAL_ADC_ConfigChannel+0x2d2>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002490:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	e004      	b.n	80024ae <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80024a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d106      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2200      	movs	r2, #0
 80024b8:	2101      	movs	r1, #1
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f956 	bl	800176c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2102      	movs	r1, #2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f93a 	bl	8001740 <LL_ADC_GetOffsetChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x310>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2102      	movs	r1, #2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff f92f 	bl	8001740 <LL_ADC_GetOffsetChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	f003 021f 	and.w	r2, r3, #31
 80024ea:	e01e      	b.n	800252a <HAL_ADC_ConfigChannel+0x34e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f924 	bl	8001740 <LL_ADC_GetOffsetChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800250a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800250e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e004      	b.n	8002528 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800251e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x366>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	e014      	b.n	800256c <HAL_ADC_ConfigChannel+0x390>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002552:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002556:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800255e:	2320      	movs	r3, #32
 8002560:	e004      	b.n	800256c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002562:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800256c:	429a      	cmp	r2, r3
 800256e:	d106      	bne.n	800257e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	2102      	movs	r1, #2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff f8f7 	bl	800176c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2103      	movs	r1, #3
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f8db 	bl	8001740 <LL_ADC_GetOffsetChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x3ce>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2103      	movs	r1, #3
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff f8d0 	bl	8001740 <LL_ADC_GetOffsetChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	0e9b      	lsrs	r3, r3, #26
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	e017      	b.n	80025da <HAL_ADC_ConfigChannel+0x3fe>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2103      	movs	r1, #3
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff f8c5 	bl	8001740 <LL_ADC_GetOffsetChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025c4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80025c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80025cc:	2320      	movs	r3, #32
 80025ce:	e003      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80025d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x416>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0e9b      	lsrs	r3, r3, #26
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	e011      	b.n	8002616 <HAL_ADC_ConfigChannel+0x43a>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002600:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002602:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800260a:	2320      	movs	r3, #32
 800260c:	e003      	b.n	8002616 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800260e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002616:	429a      	cmp	r2, r3
 8002618:	d106      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	2103      	movs	r1, #3
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff f8a2 	bl	800176c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff f9e3 	bl	80019f8 <LL_ADC_IsEnabled>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	f040 813f 	bne.w	80028b8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	461a      	mov	r2, r3
 8002648:	f7ff f93c 	bl	80018c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4a8e      	ldr	r2, [pc, #568]	@ (800288c <HAL_ADC_ConfigChannel+0x6b0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	f040 8130 	bne.w	80028b8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10b      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x4a4>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	3301      	adds	r3, #1
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2b09      	cmp	r3, #9
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e019      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x4d8>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800268e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002690:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e003      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800269c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2b09      	cmp	r3, #9
 80026ac:	bf94      	ite	ls
 80026ae:	2301      	movls	r3, #1
 80026b0:	2300      	movhi	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d079      	beq.n	80027ac <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x4f8>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	3301      	adds	r3, #1
 80026cc:	069b      	lsls	r3, r3, #26
 80026ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026d2:	e015      	b.n	8002700 <HAL_ADC_ConfigChannel+0x524>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80026e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80026e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80026f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	069b      	lsls	r3, r3, #26
 80026fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x544>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	3301      	adds	r3, #1
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	2101      	movs	r1, #1
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	e017      	b.n	8002750 <HAL_ADC_ConfigChannel+0x574>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800272e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002730:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e003      	b.n	8002744 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800273c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3301      	adds	r3, #1
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	ea42 0103 	orr.w	r1, r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x59a>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	3301      	adds	r3, #1
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	051b      	lsls	r3, r3, #20
 8002774:	e018      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x5cc>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002786:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e003      	b.n	800279a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a8:	430b      	orrs	r3, r1
 80027aa:	e080      	b.n	80028ae <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d107      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x5ec>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	3301      	adds	r3, #1
 80027c0:	069b      	lsls	r3, r3, #26
 80027c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027c6:	e015      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x618>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80027da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80027e0:	2320      	movs	r3, #32
 80027e2:	e003      	b.n	80027ec <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80027e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	069b      	lsls	r3, r3, #26
 80027f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x638>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	3301      	adds	r3, #1
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	e017      	b.n	8002844 <HAL_ADC_ConfigChannel+0x668>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa93 f3a3 	rbit	r3, r3
 8002820:	61bb      	str	r3, [r7, #24]
  return result;
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800282c:	2320      	movs	r3, #32
 800282e:	e003      	b.n	8002838 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3301      	adds	r3, #1
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	ea42 0103 	orr.w	r1, r2, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10d      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x694>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	3301      	adds	r3, #1
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	3b1e      	subs	r3, #30
 8002868:	051b      	lsls	r3, r3, #20
 800286a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800286e:	e01d      	b.n	80028ac <HAL_ADC_ConfigChannel+0x6d0>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	60fb      	str	r3, [r7, #12]
  return result;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d103      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002888:	2320      	movs	r3, #32
 800288a:	e005      	b.n	8002898 <HAL_ADC_ConfigChannel+0x6bc>
 800288c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	3301      	adds	r3, #1
 800289a:	f003 021f 	and.w	r2, r3, #31
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	3b1e      	subs	r3, #30
 80028a6:	051b      	lsls	r3, r3, #20
 80028a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b2:	4619      	mov	r1, r3
 80028b4:	f7fe ffda 	bl	800186c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b3d      	ldr	r3, [pc, #244]	@ (80029b4 <HAL_ADC_ConfigChannel+0x7d8>)
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d06c      	beq.n	800299e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028c4:	483c      	ldr	r0, [pc, #240]	@ (80029b8 <HAL_ADC_ConfigChannel+0x7dc>)
 80028c6:	f7fe ff09 	bl	80016dc <LL_ADC_GetCommonPathInternalCh>
 80028ca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a3a      	ldr	r2, [pc, #232]	@ (80029bc <HAL_ADC_ConfigChannel+0x7e0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d127      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d121      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a35      	ldr	r2, [pc, #212]	@ (80029c0 <HAL_ADC_ConfigChannel+0x7e4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d157      	bne.n	800299e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028f6:	4619      	mov	r1, r3
 80028f8:	482f      	ldr	r0, [pc, #188]	@ (80029b8 <HAL_ADC_ConfigChannel+0x7dc>)
 80028fa:	f7fe fedc 	bl	80016b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028fe:	4b31      	ldr	r3, [pc, #196]	@ (80029c4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	4a30      	ldr	r2, [pc, #192]	@ (80029c8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	099b      	lsrs	r3, r3, #6
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002918:	e002      	b.n	8002920 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	3b01      	subs	r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f9      	bne.n	800291a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002926:	e03a      	b.n	800299e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a27      	ldr	r2, [pc, #156]	@ (80029cc <HAL_ADC_ConfigChannel+0x7f0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d113      	bne.n	800295a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002936:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10d      	bne.n	800295a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1f      	ldr	r2, [pc, #124]	@ (80029c0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d12a      	bne.n	800299e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800294c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002950:	4619      	mov	r1, r3
 8002952:	4819      	ldr	r0, [pc, #100]	@ (80029b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002954:	f7fe feaf 	bl	80016b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002958:	e021      	b.n	800299e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1c      	ldr	r2, [pc, #112]	@ (80029d0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d11c      	bne.n	800299e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002968:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d116      	bne.n	800299e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a12      	ldr	r2, [pc, #72]	@ (80029c0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d111      	bne.n	800299e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800297a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800297e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002982:	4619      	mov	r1, r3
 8002984:	480c      	ldr	r0, [pc, #48]	@ (80029b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002986:	f7fe fe96 	bl	80016b6 <LL_ADC_SetCommonPathInternalCh>
 800298a:	e008      	b.n	800299e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80029a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	37d8      	adds	r7, #216	@ 0xd8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	80080000 	.word	0x80080000
 80029b8:	50040300 	.word	0x50040300
 80029bc:	c7520000 	.word	0xc7520000
 80029c0:	50040000 	.word	0x50040000
 80029c4:	20000000 	.word	0x20000000
 80029c8:	053e2d63 	.word	0x053e2d63
 80029cc:	cb840000 	.word	0xcb840000
 80029d0:	80000001 	.word	0x80000001

080029d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029dc:	2300      	movs	r3, #0
 80029de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f807 	bl	80019f8 <LL_ADC_IsEnabled>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d169      	bne.n	8002ac4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	4b36      	ldr	r3, [pc, #216]	@ (8002ad0 <ADC_Enable+0xfc>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e055      	b.n	8002ac6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe ffc2 	bl	80019a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a24:	482b      	ldr	r0, [pc, #172]	@ (8002ad4 <ADC_Enable+0x100>)
 8002a26:	f7fe fe59 	bl	80016dc <LL_ADC_GetCommonPathInternalCh>
 8002a2a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a34:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <ADC_Enable+0x104>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	099b      	lsrs	r3, r3, #6
 8002a3a:	4a28      	ldr	r2, [pc, #160]	@ (8002adc <ADC_Enable+0x108>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a4e:	e002      	b.n	8002a56 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f9      	bne.n	8002a50 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fde8 	bl	8001630 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a62:	e028      	b.n	8002ab6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe ffc5 	bl	80019f8 <LL_ADC_IsEnabled>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe ff95 	bl	80019a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a7e:	f7fe fdd7 	bl	8001630 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d914      	bls.n	8002ab6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d00d      	beq.n	8002ab6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	f043 0210 	orr.w	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e007      	b.n	8002ac6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d1cf      	bne.n	8002a64 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	8000003f 	.word	0x8000003f
 8002ad4:	50040300 	.word	0x50040300
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	053e2d63 	.word	0x053e2d63

08002ae0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe ff96 	bl	8001a1e <LL_ADC_IsDisableOngoing>
 8002af2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe ff7d 	bl	80019f8 <LL_ADC_IsEnabled>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d047      	beq.n	8002b94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d144      	bne.n	8002b94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030d 	and.w	r3, r3, #13
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d10c      	bne.n	8002b32 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe ff57 	bl	80019d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2203      	movs	r2, #3
 8002b28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b2a:	f7fe fd81 	bl	8001630 <HAL_GetTick>
 8002b2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b30:	e029      	b.n	8002b86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b36:	f043 0210 	orr.w	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e023      	b.n	8002b96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b4e:	f7fe fd6f 	bl	8001630 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d914      	bls.n	8002b86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00d      	beq.n	8002b86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6e:	f043 0210 	orr.w	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e007      	b.n	8002b96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1dc      	bne.n	8002b4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d14b      	bne.n	8002c50 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d021      	beq.n	8002c16 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fdf6 	bl	80017c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d032      	beq.n	8002c48 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d12b      	bne.n	8002c48 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d11f      	bne.n	8002c48 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c14:	e018      	b.n	8002c48 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d111      	bne.n	8002c48 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c40:	f043 0201 	orr.w	r2, r3, #1
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7fd ff85 	bl	8000b58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c4e:	e00e      	b.n	8002c6e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f7ff fab3 	bl	80021c8 <HAL_ADC_ErrorCallback>
}
 8002c62:	e004      	b.n	8002c6e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	4798      	blx	r3
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7fe f825 	bl	8000cd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7ff fa85 	bl	80021c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <LL_ADC_StartCalibration>:
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002cd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	609a      	str	r2, [r3, #8]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_IsCalibrationOnGoing>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d0c:	d101      	bne.n	8002d12 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_ADCEx_Calibration_Start+0x1c>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e04d      	b.n	8002dd8 <HAL_ADCEx_Calibration_Start+0xb8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fecb 	bl	8002ae0 <ADC_Disable>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d136      	bne.n	8002dc2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d58:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d5c:	f023 0302 	bic.w	r3, r3, #2
 8002d60:	f043 0202 	orr.w	r2, r3, #2
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6839      	ldr	r1, [r7, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ffa9 	bl	8002cc6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d74:	e014      	b.n	8002da0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002d82:	d30d      	bcc.n	8002da0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d88:	f023 0312 	bic.w	r3, r3, #18
 8002d8c:	f043 0210 	orr.w	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e01b      	b.n	8002dd8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ffa7 	bl	8002cf8 <LL_ADC_IsCalibrationOnGoing>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e2      	bne.n	8002d76 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db4:	f023 0303 	bic.w	r3, r3, #3
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dc0:	e005      	b.n	8002dce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc6:	f043 0210 	orr.w	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e60:	4013      	ands	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e76:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60d3      	str	r3, [r2, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e90:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	f003 0307 	and.w	r3, r3, #7
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db0b      	blt.n	8002ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	4907      	ldr	r1, [pc, #28]	@ (8002ee0 <__NVIC_EnableIRQ+0x38>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2001      	movs	r0, #1
 8002eca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000e100 	.word	0xe000e100

08002ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	6039      	str	r1, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	db0a      	blt.n	8002f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	490c      	ldr	r1, [pc, #48]	@ (8002f30 <__NVIC_SetPriority+0x4c>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	0112      	lsls	r2, r2, #4
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	440b      	add	r3, r1
 8002f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f0c:	e00a      	b.n	8002f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4908      	ldr	r1, [pc, #32]	@ (8002f34 <__NVIC_SetPriority+0x50>)
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	3b04      	subs	r3, #4
 8002f1c:	0112      	lsls	r2, r2, #4
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	440b      	add	r3, r1
 8002f22:	761a      	strb	r2, [r3, #24]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000e100 	.word	0xe000e100
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	@ 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f1c3 0307 	rsb	r3, r3, #7
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	bf28      	it	cs
 8002f56:	2304      	movcs	r3, #4
 8002f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d902      	bls.n	8002f68 <NVIC_EncodePriority+0x30>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3b03      	subs	r3, #3
 8002f66:	e000      	b.n	8002f6a <NVIC_EncodePriority+0x32>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	43d9      	mvns	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f90:	4313      	orrs	r3, r2
         );
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3724      	adds	r7, #36	@ 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fb0:	d301      	bcc.n	8002fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e00f      	b.n	8002fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <SysTick_Config+0x40>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fbe:	210f      	movs	r1, #15
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fc4:	f7ff ff8e 	bl	8002ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <SysTick_Config+0x40>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fce:	4b04      	ldr	r3, [pc, #16]	@ (8002fe0 <SysTick_Config+0x40>)
 8002fd0:	2207      	movs	r2, #7
 8002fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	e000e010 	.word	0xe000e010

08002fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff ff29 	bl	8002e44 <__NVIC_SetPriorityGrouping>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b086      	sub	sp, #24
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	4603      	mov	r3, r0
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800300c:	f7ff ff3e 	bl	8002e8c <__NVIC_GetPriorityGrouping>
 8003010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	6978      	ldr	r0, [r7, #20]
 8003018:	f7ff ff8e 	bl	8002f38 <NVIC_EncodePriority>
 800301c:	4602      	mov	r2, r0
 800301e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff5d 	bl	8002ee4 <__NVIC_SetPriority>
}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	4603      	mov	r3, r0
 800303a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800303c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff31 	bl	8002ea8 <__NVIC_EnableIRQ>
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ffa2 	bl	8002fa0 <SysTick_Config>
 800305c:	4603      	mov	r3, r0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e08d      	b.n	8003196 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	4b47      	ldr	r3, [pc, #284]	@ (80031a0 <HAL_DMA_Init+0x138>)
 8003082:	429a      	cmp	r2, r3
 8003084:	d80f      	bhi.n	80030a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	4b45      	ldr	r3, [pc, #276]	@ (80031a4 <HAL_DMA_Init+0x13c>)
 800308e:	4413      	add	r3, r2
 8003090:	4a45      	ldr	r2, [pc, #276]	@ (80031a8 <HAL_DMA_Init+0x140>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	009a      	lsls	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a42      	ldr	r2, [pc, #264]	@ (80031ac <HAL_DMA_Init+0x144>)
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80030a4:	e00e      	b.n	80030c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b40      	ldr	r3, [pc, #256]	@ (80031b0 <HAL_DMA_Init+0x148>)
 80030ae:	4413      	add	r3, r2
 80030b0:	4a3d      	ldr	r2, [pc, #244]	@ (80031a8 <HAL_DMA_Init+0x140>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	009a      	lsls	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a3c      	ldr	r2, [pc, #240]	@ (80031b4 <HAL_DMA_Init+0x14c>)
 80030c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80030da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003100:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f9fe 	bl	8003518 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003124:	d102      	bne.n	800312c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003140:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d010      	beq.n	800316c <HAL_DMA_Init+0x104>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d80c      	bhi.n	800316c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fa1e 	bl	8003594 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	e008      	b.n	800317e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40020407 	.word	0x40020407
 80031a4:	bffdfff8 	.word	0xbffdfff8
 80031a8:	cccccccd 	.word	0xcccccccd
 80031ac:	40020000 	.word	0x40020000
 80031b0:	bffdfbf8 	.word	0xbffdfbf8
 80031b4:	40020400 	.word	0x40020400

080031b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_DMA_Start_IT+0x20>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e066      	b.n	80032a6 <HAL_DMA_Start_IT+0xee>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d155      	bne.n	8003298 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f943 	bl	800349c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 020e 	orr.w	r2, r2, #14
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e00f      	b.n	8003250 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0204 	bic.w	r2, r2, #4
 800323e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 020a 	orr.w	r2, r2, #10
 800324e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800326c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003280:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003284:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e005      	b.n	80032a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
 80032a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	f003 031c 	and.w	r3, r3, #28
 80032ce:	2204      	movs	r2, #4
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d026      	beq.n	8003328 <HAL_DMA_IRQHandler+0x7a>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d021      	beq.n	8003328 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0204 	bic.w	r2, r2, #4
 8003300:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f003 021c 	and.w	r2, r3, #28
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	2104      	movs	r1, #4
 8003310:	fa01 f202 	lsl.w	r2, r1, r2
 8003314:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	2b00      	cmp	r3, #0
 800331c:	d071      	beq.n	8003402 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003326:	e06c      	b.n	8003402 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332c:	f003 031c 	and.w	r3, r3, #28
 8003330:	2202      	movs	r2, #2
 8003332:	409a      	lsls	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d02e      	beq.n	800339a <HAL_DMA_IRQHandler+0xec>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d029      	beq.n	800339a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 020a 	bic.w	r2, r2, #10
 8003362:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003370:	f003 021c 	and.w	r2, r3, #28
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	2102      	movs	r1, #2
 800337a:	fa01 f202 	lsl.w	r2, r1, r2
 800337e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d038      	beq.n	8003402 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003398:	e033      	b.n	8003402 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	f003 031c 	and.w	r3, r3, #28
 80033a2:	2208      	movs	r2, #8
 80033a4:	409a      	lsls	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d02a      	beq.n	8003404 <HAL_DMA_IRQHandler+0x156>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d025      	beq.n	8003404 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 020e 	bic.w	r2, r2, #14
 80033c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033cc:	f003 021c 	and.w	r2, r3, #28
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f202 	lsl.w	r2, r1, r2
 80033da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d004      	beq.n	8003404 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003402:	bf00      	nop
 8003404:	bf00      	nop
}
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	460b      	mov	r3, r1
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_DMA_RegisterCallback+0x20>
 8003428:	2302      	movs	r3, #2
 800342a:	e031      	b.n	8003490 <HAL_DMA_RegisterCallback+0x84>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d120      	bne.n	8003482 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003440:	7afb      	ldrb	r3, [r7, #11]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d81a      	bhi.n	800347c <HAL_DMA_RegisterCallback+0x70>
 8003446:	a201      	add	r2, pc, #4	@ (adr r2, 800344c <HAL_DMA_RegisterCallback+0x40>)
 8003448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344c:	0800345d 	.word	0x0800345d
 8003450:	08003465 	.word	0x08003465
 8003454:	0800346d 	.word	0x0800346d
 8003458:	08003475 	.word	0x08003475
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003462:	e010      	b.n	8003486 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 800346a:	e00c      	b.n	8003486 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003472:	e008      	b.n	8003486 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800347a:	e004      	b.n	8003486 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	75fb      	strb	r3, [r7, #23]
        break;
 8003480:	e001      	b.n	8003486 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003490:	4618      	mov	r0, r3
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034b2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d004      	beq.n	80034c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034c4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	f003 021c 	and.w	r2, r3, #28
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f202 	lsl.w	r2, r1, r2
 80034d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d108      	bne.n	80034fc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034fa:	e007      	b.n	800350c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	60da      	str	r2, [r3, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003528:	429a      	cmp	r2, r3
 800352a:	d80a      	bhi.n	8003542 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003538:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003540:	e007      	b.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	009a      	lsls	r2, r3, #2
 800354a:	4b0f      	ldr	r3, [pc, #60]	@ (8003588 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800354c:	4413      	add	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3b08      	subs	r3, #8
 800355a:	4a0c      	ldr	r2, [pc, #48]	@ (800358c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003568:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	2201      	movs	r2, #1
 8003572:	409a      	lsls	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40020407 	.word	0x40020407
 8003588:	4002081c 	.word	0x4002081c
 800358c:	cccccccd 	.word	0xcccccccd
 8003590:	40020880 	.word	0x40020880

08003594 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	461a      	mov	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a08      	ldr	r2, [pc, #32]	@ (80035d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035b6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2201      	movs	r2, #1
 80035c2:	409a      	lsls	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	1000823f 	.word	0x1000823f
 80035d8:	40020940 	.word	0x40020940

080035dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ea:	e166      	b.n	80038ba <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	2101      	movs	r1, #1
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	4013      	ands	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8158 	beq.w	80038b4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d005      	beq.n	800361c <HAL_GPIO_Init+0x40>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d130      	bne.n	800367e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003652:	2201      	movs	r2, #1
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4013      	ands	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	f003 0201 	and.w	r2, r3, #1
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b03      	cmp	r3, #3
 8003688:	d017      	beq.n	80036ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	2203      	movs	r2, #3
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d123      	bne.n	800370e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	08da      	lsrs	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3208      	adds	r2, #8
 80036ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	220f      	movs	r2, #15
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	08da      	lsrs	r2, r3, #3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3208      	adds	r2, #8
 8003708:	6939      	ldr	r1, [r7, #16]
 800370a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0203 	and.w	r2, r3, #3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80b2 	beq.w	80038b4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003750:	4b61      	ldr	r3, [pc, #388]	@ (80038d8 <HAL_GPIO_Init+0x2fc>)
 8003752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003754:	4a60      	ldr	r2, [pc, #384]	@ (80038d8 <HAL_GPIO_Init+0x2fc>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6613      	str	r3, [r2, #96]	@ 0x60
 800375c:	4b5e      	ldr	r3, [pc, #376]	@ (80038d8 <HAL_GPIO_Init+0x2fc>)
 800375e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003768:	4a5c      	ldr	r2, [pc, #368]	@ (80038dc <HAL_GPIO_Init+0x300>)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	3302      	adds	r3, #2
 8003770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	220f      	movs	r2, #15
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003792:	d02b      	beq.n	80037ec <HAL_GPIO_Init+0x210>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a52      	ldr	r2, [pc, #328]	@ (80038e0 <HAL_GPIO_Init+0x304>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d025      	beq.n	80037e8 <HAL_GPIO_Init+0x20c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a51      	ldr	r2, [pc, #324]	@ (80038e4 <HAL_GPIO_Init+0x308>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d01f      	beq.n	80037e4 <HAL_GPIO_Init+0x208>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a50      	ldr	r2, [pc, #320]	@ (80038e8 <HAL_GPIO_Init+0x30c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d019      	beq.n	80037e0 <HAL_GPIO_Init+0x204>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a4f      	ldr	r2, [pc, #316]	@ (80038ec <HAL_GPIO_Init+0x310>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d013      	beq.n	80037dc <HAL_GPIO_Init+0x200>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a4e      	ldr	r2, [pc, #312]	@ (80038f0 <HAL_GPIO_Init+0x314>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00d      	beq.n	80037d8 <HAL_GPIO_Init+0x1fc>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a4d      	ldr	r2, [pc, #308]	@ (80038f4 <HAL_GPIO_Init+0x318>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d007      	beq.n	80037d4 <HAL_GPIO_Init+0x1f8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a4c      	ldr	r2, [pc, #304]	@ (80038f8 <HAL_GPIO_Init+0x31c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_GPIO_Init+0x1f4>
 80037cc:	2307      	movs	r3, #7
 80037ce:	e00e      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037d0:	2308      	movs	r3, #8
 80037d2:	e00c      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037d4:	2306      	movs	r3, #6
 80037d6:	e00a      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037d8:	2305      	movs	r3, #5
 80037da:	e008      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037dc:	2304      	movs	r3, #4
 80037de:	e006      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037e0:	2303      	movs	r3, #3
 80037e2:	e004      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e002      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037ec:	2300      	movs	r3, #0
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	f002 0203 	and.w	r2, r2, #3
 80037f4:	0092      	lsls	r2, r2, #2
 80037f6:	4093      	lsls	r3, r2
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037fe:	4937      	ldr	r1, [pc, #220]	@ (80038dc <HAL_GPIO_Init+0x300>)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	3302      	adds	r3, #2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800380c:	4b3b      	ldr	r3, [pc, #236]	@ (80038fc <HAL_GPIO_Init+0x320>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	43db      	mvns	r3, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003830:	4a32      	ldr	r2, [pc, #200]	@ (80038fc <HAL_GPIO_Init+0x320>)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003836:	4b31      	ldr	r3, [pc, #196]	@ (80038fc <HAL_GPIO_Init+0x320>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800385a:	4a28      	ldr	r2, [pc, #160]	@ (80038fc <HAL_GPIO_Init+0x320>)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003860:	4b26      	ldr	r3, [pc, #152]	@ (80038fc <HAL_GPIO_Init+0x320>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	43db      	mvns	r3, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003884:	4a1d      	ldr	r2, [pc, #116]	@ (80038fc <HAL_GPIO_Init+0x320>)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800388a:	4b1c      	ldr	r3, [pc, #112]	@ (80038fc <HAL_GPIO_Init+0x320>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	43db      	mvns	r3, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038ae:	4a13      	ldr	r2, [pc, #76]	@ (80038fc <HAL_GPIO_Init+0x320>)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	3301      	adds	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f ae91 	bne.w	80035ec <HAL_GPIO_Init+0x10>
  }
}
 80038ca:	bf00      	nop
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40010000 	.word	0x40010000
 80038e0:	48000400 	.word	0x48000400
 80038e4:	48000800 	.word	0x48000800
 80038e8:	48000c00 	.word	0x48000c00
 80038ec:	48001000 	.word	0x48001000
 80038f0:	48001400 	.word	0x48001400
 80038f4:	48001800 	.word	0x48001800
 80038f8:	48001c00 	.word	0x48001c00
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	807b      	strh	r3, [r7, #2]
 800390c:	4613      	mov	r3, r2
 800390e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003910:	787b      	ldrb	r3, [r7, #1]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003916:	887a      	ldrh	r2, [r7, #2]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800391c:	e002      	b.n	8003924 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800391e:	887a      	ldrh	r2, [r7, #2]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4013      	ands	r3, r2
 8003948:	041a      	lsls	r2, r3, #16
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	43d9      	mvns	r1, r3
 800394e:	887b      	ldrh	r3, [r7, #2]
 8003950:	400b      	ands	r3, r1
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800396e:	4b08      	ldr	r3, [pc, #32]	@ (8003990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d006      	beq.n	8003988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800397a:	4a05      	ldr	r2, [pc, #20]	@ (8003990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fc ffe2 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40010400 	.word	0x40010400

08003994 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003996:	b08f      	sub	sp, #60	@ 0x3c
 8003998:	af0a      	add	r7, sp, #40	@ 0x28
 800399a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e116      	b.n	8003bd4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f007 fdd3 	bl	800b56c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2203      	movs	r2, #3
 80039ca:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f004 fa90 	bl	8007f0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	687e      	ldr	r6, [r7, #4]
 80039f2:	466d      	mov	r5, sp
 80039f4:	f106 0410 	add.w	r4, r6, #16
 80039f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a04:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a08:	1d33      	adds	r3, r6, #4
 8003a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a0c:	6838      	ldr	r0, [r7, #0]
 8003a0e:	f004 f9a3 	bl	8007d58 <USB_CoreInit>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0d7      	b.n	8003bd4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 fa7e 	bl	8007f2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	e04a      	b.n	8003acc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	333d      	adds	r3, #61	@ 0x3d
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	333c      	adds	r3, #60	@ 0x3c
 8003a5a:	7bfa      	ldrb	r2, [r7, #15]
 8003a5c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	b298      	uxth	r0, r3
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3356      	adds	r3, #86	@ 0x56
 8003a72:	4602      	mov	r2, r0
 8003a74:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a76:	7bfa      	ldrb	r2, [r7, #15]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	3340      	adds	r3, #64	@ 0x40
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3344      	adds	r3, #68	@ 0x44
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	3348      	adds	r3, #72	@ 0x48
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	334c      	adds	r3, #76	@ 0x4c
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3af      	bcc.n	8003a36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
 8003ada:	e044      	b.n	8003b66 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003af2:	7bfa      	ldrb	r2, [r7, #15]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b1e:	7bfa      	ldrb	r2, [r7, #15]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	3301      	adds	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d3b5      	bcc.n	8003adc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	687e      	ldr	r6, [r7, #4]
 8003b78:	466d      	mov	r5, sp
 8003b7a:	f106 0410 	add.w	r4, r6, #16
 8003b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b8e:	1d33      	adds	r3, r6, #4
 8003b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b92:	6838      	ldr	r0, [r7, #0]
 8003b94:	f004 fa16 	bl	8007fc4 <USB_DevInit>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e014      	b.n	8003bd4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d102      	bne.n	8003bc8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f001 f86a 	bl	8004c9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f005 f9c4 	bl	8008f5a <USB_DevDisconnect>

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bdc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_PCD_Start+0x1c>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e01c      	b.n	8003c32 <HAL_PCD_Start+0x56>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d105      	bne.n	8003c14 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f004 f965 	bl	8007ee8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f005 f978 	bl	8008f18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c3a:	b590      	push	{r4, r7, lr}
 8003c3c:	b08d      	sub	sp, #52	@ 0x34
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f005 fa36 	bl	80090c2 <USB_GetMode>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f040 847e 	bne.w	800455a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f005 f99a 	bl	8008f9c <USB_ReadInterrupts>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8474 	beq.w	8004558 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f005 f987 	bl	8008f9c <USB_ReadInterrupts>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d107      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f002 0202 	and.w	r2, r2, #2
 8003ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f005 f975 	bl	8008f9c <USB_ReadInterrupts>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d161      	bne.n	8003d80 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0210 	bic.w	r2, r2, #16
 8003cca:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f003 020f 	and.w	r2, r3, #15
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3304      	adds	r3, #4
 8003cea:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	0c5b      	lsrs	r3, r3, #17
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d124      	bne.n	8003d42 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d035      	beq.n	8003d70 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	6a38      	ldr	r0, [r7, #32]
 8003d18:	f004 ffac 	bl	8008c74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d28:	441a      	add	r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d3a:	441a      	add	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	615a      	str	r2, [r3, #20]
 8003d40:	e016      	b.n	8003d70 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	0c5b      	lsrs	r3, r3, #17
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d110      	bne.n	8003d70 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003d54:	2208      	movs	r2, #8
 8003d56:	4619      	mov	r1, r3
 8003d58:	6a38      	ldr	r0, [r7, #32]
 8003d5a:	f004 ff8b 	bl	8008c74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d6a:	441a      	add	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0210 	orr.w	r2, r2, #16
 8003d7e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f005 f909 	bl	8008f9c <USB_ReadInterrupts>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d94:	f040 80a7 	bne.w	8003ee6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f005 f90e 	bl	8008fc2 <USB_ReadDevAllOutEpInterrupt>
 8003da6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003da8:	e099      	b.n	8003ede <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 808e 	beq.w	8003ed2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f005 f932 	bl	800902a <USB_ReadDevOutEPInterrupt>
 8003dc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00c      	beq.n	8003dec <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dde:	461a      	mov	r2, r3
 8003de0:	2301      	movs	r3, #1
 8003de2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003de4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fe7e 	bl	8004ae8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00c      	beq.n	8003e10 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e02:	461a      	mov	r2, r3
 8003e04:	2308      	movs	r3, #8
 8003e06:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 feba 	bl	8004b84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e26:	461a      	mov	r2, r3
 8003e28:	2310      	movs	r3, #16
 8003e2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d030      	beq.n	8003e98 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3e:	2b80      	cmp	r3, #128	@ 0x80
 8003e40:	d109      	bne.n	8003e56 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e54:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	4413      	add	r3, r2
 8003e68:	3304      	adds	r3, #4
 8003e6a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	78db      	ldrb	r3, [r3, #3]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d108      	bne.n	8003e86 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2200      	movs	r2, #0
 8003e78:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	4619      	mov	r1, r3
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f007 fcc9 	bl	800b818 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e92:	461a      	mov	r2, r3
 8003e94:	2302      	movs	r3, #2
 8003e96:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ed0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f47f af62 	bne.w	8003daa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f005 f856 	bl	8008f9c <USB_ReadInterrupts>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ef6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003efa:	f040 80a4 	bne.w	8004046 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f005 f877 	bl	8008ff6 <USB_ReadDevAllInEpInterrupt>
 8003f08:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003f0e:	e096      	b.n	800403e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 808b 	beq.w	8004032 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f005 f89d 	bl	8009066 <USB_ReadDevInEPInterrupt>
 8003f2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d020      	beq.n	8003f7a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	2201      	movs	r2, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69f9      	ldr	r1, [r7, #28]
 8003f54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f58:	4013      	ands	r3, r2
 8003f5a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f007 fbba 	bl	800b6ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f90:	461a      	mov	r2, r3
 8003f92:	2308      	movs	r3, #8
 8003f94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fac:	461a      	mov	r2, r3
 8003fae:	2310      	movs	r3, #16
 8003fb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2340      	movs	r3, #64	@ 0x40
 8003fcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d023      	beq.n	8004020 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003fd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fda:	6a38      	ldr	r0, [r7, #32]
 8003fdc:	f004 f934 	bl	8008248 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	3338      	adds	r3, #56	@ 0x38
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4413      	add	r3, r2
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	78db      	ldrb	r3, [r3, #3]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d108      	bne.n	800400e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2200      	movs	r2, #0
 8004000:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	b2db      	uxtb	r3, r3
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f007 fc17 	bl	800b83c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401a:	461a      	mov	r2, r3
 800401c:	2302      	movs	r3, #2
 800401e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800402a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fcd2 	bl	80049d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	3301      	adds	r3, #1
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004040:	2b00      	cmp	r3, #0
 8004042:	f47f af65 	bne.w	8003f10 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f004 ffa6 	bl	8008f9c <USB_ReadInterrupts>
 8004050:	4603      	mov	r3, r0
 8004052:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004056:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800405a:	d122      	bne.n	80040a2 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004076:	2b01      	cmp	r3, #1
 8004078:	d108      	bne.n	800408c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004082:	2100      	movs	r1, #0
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f007 fe4b 	bl	800bd20 <HAL_PCDEx_LPM_Callback>
 800408a:	e002      	b.n	8004092 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f007 fb9b 	bl	800b7c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80040a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f004 ff78 	bl	8008f9c <USB_ReadInterrupts>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040b6:	d112      	bne.n	80040de <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f007 fb57 	bl	800b77c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80040dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f004 ff5a 	bl	8008f9c <USB_ReadInterrupts>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040f2:	d121      	bne.n	8004138 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004102:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d111      	bne.n	8004132 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	f003 020f 	and.w	r2, r3, #15
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004128:	2101      	movs	r1, #1
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f007 fdf8 	bl	800bd20 <HAL_PCDEx_LPM_Callback>
 8004130:	e002      	b.n	8004138 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f007 fb22 	bl	800b77c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f004 ff2d 	bl	8008f9c <USB_ReadInterrupts>
 8004142:	4603      	mov	r3, r0
 8004144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800414c:	f040 80b5 	bne.w	80042ba <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2110      	movs	r1, #16
 800416a:	4618      	mov	r0, r3
 800416c:	f004 f86c 	bl	8008248 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004170:	2300      	movs	r3, #0
 8004172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004174:	e046      	b.n	8004204 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004182:	461a      	mov	r2, r3
 8004184:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004188:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800418a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b6:	461a      	mov	r2, r3
 80041b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ce:	0151      	lsls	r1, r2, #5
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	440a      	add	r2, r1
 80041d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80041fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004200:	3301      	adds	r3, #1
 8004202:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800420a:	429a      	cmp	r2, r3
 800420c:	d3b3      	bcc.n	8004176 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800421c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004220:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800423a:	f043 030b 	orr.w	r3, r3, #11
 800423e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004250:	f043 030b 	orr.w	r3, r3, #11
 8004254:	6453      	str	r3, [r2, #68]	@ 0x44
 8004256:	e015      	b.n	8004284 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004266:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800426a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800426e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800427e:	f043 030b 	orr.w	r3, r3, #11
 8004282:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004292:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004296:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f004 ff3d 	bl	8009124 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80042b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f004 fe6c 	bl	8008f9c <USB_ReadInterrupts>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ce:	d124      	bne.n	800431a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f004 ff02 	bl	80090de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f004 f82f 	bl	8008342 <USB_GetDevSpeed>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461a      	mov	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681c      	ldr	r4, [r3, #0]
 80042f0:	f001 fbbc 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 80042f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	4620      	mov	r0, r4
 8004300:	f003 fd56 	bl	8007db0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f007 fa1a 	bl	800b73e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695a      	ldr	r2, [r3, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004318:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f004 fe3c 	bl	8008f9c <USB_ReadInterrupts>
 8004324:	4603      	mov	r3, r0
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b08      	cmp	r3, #8
 800432c:	d10a      	bne.n	8004344 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f007 f9f7 	bl	800b722 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f002 0208 	and.w	r2, r2, #8
 8004342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f004 fe27 	bl	8008f9c <USB_ReadInterrupts>
 800434e:	4603      	mov	r3, r0
 8004350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004354:	2b80      	cmp	r3, #128	@ 0x80
 8004356:	d122      	bne.n	800439e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004364:	2301      	movs	r3, #1
 8004366:	627b      	str	r3, [r7, #36]	@ 0x24
 8004368:	e014      	b.n	8004394 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436e:	4613      	mov	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d105      	bne.n	800438e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	b2db      	uxtb	r3, r3
 8004386:	4619      	mov	r1, r3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 faf3 	bl	8004974 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	3301      	adds	r3, #1
 8004392:	627b      	str	r3, [r7, #36]	@ 0x24
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439a:	429a      	cmp	r2, r3
 800439c:	d3e5      	bcc.n	800436a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f004 fdfa 	bl	8008f9c <USB_ReadInterrupts>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043b2:	d13b      	bne.n	800442c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b4:	2301      	movs	r3, #1
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b8:	e02b      	b.n	8004412 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	3340      	adds	r3, #64	@ 0x40
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d115      	bne.n	800440c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da12      	bge.n	800440c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	333f      	adds	r3, #63	@ 0x3f
 80043f6:	2201      	movs	r2, #1
 80043f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004402:	b2db      	uxtb	r3, r3
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fab4 	bl	8004974 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	3301      	adds	r3, #1
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004418:	429a      	cmp	r2, r3
 800441a:	d3ce      	bcc.n	80043ba <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800442a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f004 fdb3 	bl	8008f9c <USB_ReadInterrupts>
 8004436:	4603      	mov	r3, r0
 8004438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800443c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004440:	d155      	bne.n	80044ee <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004442:	2301      	movs	r3, #1
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
 8004446:	e045      	b.n	80044d4 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d12e      	bne.n	80044ce <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004470:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004472:	2b00      	cmp	r3, #0
 8004474:	da2b      	bge.n	80044ce <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004482:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004486:	429a      	cmp	r2, r3
 8004488:	d121      	bne.n	80044ce <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800448e:	4613      	mov	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800449c:	2201      	movs	r2, #1
 800449e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044ca:	6053      	str	r3, [r2, #4]
            break;
 80044cc:	e007      	b.n	80044de <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	3301      	adds	r3, #1
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044da:	429a      	cmp	r2, r3
 80044dc:	d3b4      	bcc.n	8004448 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80044ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f004 fd52 	bl	8008f9c <USB_ReadInterrupts>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80044fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004502:	d10a      	bne.n	800451a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f007 f9ab 	bl	800b860 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f004 fd3c 	bl	8008f9c <USB_ReadInterrupts>
 8004524:	4603      	mov	r3, r0
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d115      	bne.n	800455a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f007 f99b 	bl	800b87c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6859      	ldr	r1, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	e000      	b.n	800455a <HAL_PCD_IRQHandler+0x920>
      return;
 8004558:	bf00      	nop
    }
  }
}
 800455a:	3734      	adds	r7, #52	@ 0x34
 800455c:	46bd      	mov	sp, r7
 800455e:	bd90      	pop	{r4, r7, pc}

08004560 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_PCD_SetAddress+0x1a>
 8004576:	2302      	movs	r3, #2
 8004578:	e013      	b.n	80045a2 <HAL_PCD_SetAddress+0x42>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f004 fc9a 	bl	8008ecc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	4608      	mov	r0, r1
 80045b4:	4611      	mov	r1, r2
 80045b6:	461a      	mov	r2, r3
 80045b8:	4603      	mov	r3, r0
 80045ba:	70fb      	strb	r3, [r7, #3]
 80045bc:	460b      	mov	r3, r1
 80045be:	803b      	strh	r3, [r7, #0]
 80045c0:	4613      	mov	r3, r2
 80045c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	da0f      	bge.n	80045f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	3338      	adds	r3, #56	@ 0x38
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	3304      	adds	r3, #4
 80045e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	705a      	strb	r2, [r3, #1]
 80045ee:	e00f      	b.n	8004610 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	f003 020f 	and.w	r2, r3, #15
 80045f6:	4613      	mov	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	3304      	adds	r3, #4
 8004608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	b2da      	uxtb	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800461c:	883a      	ldrh	r2, [r7, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	78ba      	ldrb	r2, [r7, #2]
 8004626:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	785b      	ldrb	r3, [r3, #1]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800463a:	78bb      	ldrb	r3, [r7, #2]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d102      	bne.n	8004646 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_PCD_EP_Open+0xaa>
 8004650:	2302      	movs	r3, #2
 8004652:	e00e      	b.n	8004672 <HAL_PCD_EP_Open+0xc8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68f9      	ldr	r1, [r7, #12]
 8004662:	4618      	mov	r0, r3
 8004664:	f003 fe8c 	bl	8008380 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004670:	7afb      	ldrb	r3, [r7, #11]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800468a:	2b00      	cmp	r3, #0
 800468c:	da0f      	bge.n	80046ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 020f 	and.w	r2, r3, #15
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	3338      	adds	r3, #56	@ 0x38
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	3304      	adds	r3, #4
 80046a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	705a      	strb	r2, [r3, #1]
 80046ac:	e00f      	b.n	80046ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	f003 020f 	and.w	r2, r3, #15
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4413      	add	r3, r2
 80046c4:	3304      	adds	r3, #4
 80046c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_PCD_EP_Close+0x6e>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e00e      	b.n	8004706 <HAL_PCD_EP_Close+0x8c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68f9      	ldr	r1, [r7, #12]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f003 feca 	bl	8008490 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b086      	sub	sp, #24
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	460b      	mov	r3, r1
 800471c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800471e:	7afb      	ldrb	r3, [r7, #11]
 8004720:	f003 020f 	and.w	r2, r3, #15
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	3304      	adds	r3, #4
 8004736:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2200      	movs	r2, #0
 8004748:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2200      	movs	r2, #0
 800474e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004750:	7afb      	ldrb	r3, [r7, #11]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	b2da      	uxtb	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6979      	ldr	r1, [r7, #20]
 8004762:	4618      	mov	r0, r3
 8004764:	f003 ff70 	bl	8008648 <USB_EPStartXfer>

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	460b      	mov	r3, r1
 800477c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	f003 020f 	and.w	r2, r3, #15
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004794:	681b      	ldr	r3, [r3, #0]
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b086      	sub	sp, #24
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	460b      	mov	r3, r1
 80047b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047b2:	7afb      	ldrb	r3, [r7, #11]
 80047b4:	f003 020f 	and.w	r2, r3, #15
 80047b8:	4613      	mov	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	3338      	adds	r3, #56	@ 0x38
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	3304      	adds	r3, #4
 80047c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2200      	movs	r2, #0
 80047da:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2201      	movs	r2, #1
 80047e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047e2:	7afb      	ldrb	r3, [r7, #11]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6979      	ldr	r1, [r7, #20]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f003 ff27 	bl	8008648 <USB_EPStartXfer>

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	f003 020f 	and.w	r2, r3, #15
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	429a      	cmp	r2, r3
 800481c:	d901      	bls.n	8004822 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e04e      	b.n	80048c0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004826:	2b00      	cmp	r3, #0
 8004828:	da0f      	bge.n	800484a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	f003 020f 	and.w	r2, r3, #15
 8004830:	4613      	mov	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	3338      	adds	r3, #56	@ 0x38
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	3304      	adds	r3, #4
 8004840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	705a      	strb	r2, [r3, #1]
 8004848:	e00d      	b.n	8004866 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800484a:	78fa      	ldrb	r2, [r7, #3]
 800484c:	4613      	mov	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	4413      	add	r3, r2
 800485c:	3304      	adds	r3, #4
 800485e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	b2da      	uxtb	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_PCD_EP_SetStall+0x82>
 8004882:	2302      	movs	r3, #2
 8004884:	e01c      	b.n	80048c0 <HAL_PCD_EP_SetStall+0xbc>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	4618      	mov	r0, r3
 8004896:	f004 fa45 	bl	8008d24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d108      	bne.n	80048b6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80048ae:	4619      	mov	r1, r3
 80048b0:	4610      	mov	r0, r2
 80048b2:	f004 fc37 	bl	8009124 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	f003 020f 	and.w	r2, r3, #15
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d901      	bls.n	80048e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e042      	b.n	800496c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	da0f      	bge.n	800490e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	f003 020f 	and.w	r2, r3, #15
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	3338      	adds	r3, #56	@ 0x38
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4413      	add	r3, r2
 8004902:	3304      	adds	r3, #4
 8004904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	705a      	strb	r2, [r3, #1]
 800490c:	e00f      	b.n	800492e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	f003 020f 	and.w	r2, r3, #15
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4413      	add	r3, r2
 8004924:	3304      	adds	r3, #4
 8004926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	b2da      	uxtb	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_PCD_EP_ClrStall+0x86>
 800494a:	2302      	movs	r3, #2
 800494c:	e00e      	b.n	800496c <HAL_PCD_EP_ClrStall+0xa4>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	4618      	mov	r0, r3
 800495e:	f004 fa4f 	bl	8008e00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004984:	2b00      	cmp	r3, #0
 8004986:	da0c      	bge.n	80049a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	f003 020f 	and.w	r2, r3, #15
 800498e:	4613      	mov	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	3338      	adds	r3, #56	@ 0x38
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	4413      	add	r3, r2
 800499c:	3304      	adds	r3, #4
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e00c      	b.n	80049bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	f003 020f 	and.w	r2, r3, #15
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	4413      	add	r3, r2
 80049b8:	3304      	adds	r3, #4
 80049ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68f9      	ldr	r1, [r7, #12]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f004 f872 	bl	8008aac <USB_EPStopXfer>
 80049c8:	4603      	mov	r3, r0
 80049ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80049cc:	7afb      	ldrb	r3, [r7, #11]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b088      	sub	sp, #32
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	3338      	adds	r3, #56	@ 0x38
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	3304      	adds	r3, #4
 80049fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	695a      	ldr	r2, [r3, #20]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d901      	bls.n	8004a0e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e067      	b.n	8004ade <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d902      	bls.n	8004a2a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	3303      	adds	r3, #3
 8004a2e:	089b      	lsrs	r3, r3, #2
 8004a30:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a32:	e026      	b.n	8004a82 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d902      	bls.n	8004a50 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	3303      	adds	r3, #3
 8004a54:	089b      	lsrs	r3, r3, #2
 8004a56:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68d9      	ldr	r1, [r3, #12]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	6978      	ldr	r0, [r7, #20]
 8004a66:	f004 f8cb 	bl	8008c00 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	441a      	add	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	441a      	add	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d809      	bhi.n	8004aac <PCD_WriteEmptyTxFifo+0xd6>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d203      	bcs.n	8004aac <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1c3      	bne.n	8004a34 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d811      	bhi.n	8004adc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	2201      	movs	r2, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	6939      	ldr	r1, [r7, #16]
 8004ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ad8:	4013      	ands	r3, r2
 8004ada:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	333c      	adds	r3, #60	@ 0x3c
 8004b00:	3304      	adds	r3, #4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a19      	ldr	r2, [pc, #100]	@ (8004b80 <PCD_EP_OutXfrComplete_int+0x98>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d124      	bne.n	8004b68 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b34:	461a      	mov	r2, r3
 8004b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3a:	6093      	str	r3, [r2, #8]
 8004b3c:	e01a      	b.n	8004b74 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b54:	461a      	mov	r2, r3
 8004b56:	2320      	movs	r3, #32
 8004b58:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f006 fda9 	bl	800b6b8 <HAL_PCD_DataOutStageCallback>
 8004b66:	e005      	b.n	8004b74 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f006 fda2 	bl	800b6b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	4f54310a 	.word	0x4f54310a

08004b84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	333c      	adds	r3, #60	@ 0x3c
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8004be8 <PCD_EP_OutSetupPacket_int+0x64>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d90e      	bls.n	8004bd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d009      	beq.n	8004bd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f006 fd5b 	bl	800b694 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	4f54300a 	.word	0x4f54300a

08004bec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d107      	bne.n	8004c1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c0a:	883b      	ldrh	r3, [r7, #0]
 8004c0c:	0419      	lsls	r1, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c18:	e028      	b.n	8004c6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4413      	add	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	73fb      	strb	r3, [r7, #15]
 8004c2c:	e00d      	b.n	8004c4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	3340      	adds	r3, #64	@ 0x40
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	4413      	add	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	3301      	adds	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
 8004c4a:	7bfa      	ldrb	r2, [r7, #15]
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d3ec      	bcc.n	8004c2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c54:	883b      	ldrh	r3, [r7, #0]
 8004c56:	0418      	lsls	r0, r3, #16
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6819      	ldr	r1, [r3, #0]
 8004c5c:	78fb      	ldrb	r3, [r7, #3]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	4302      	orrs	r2, r0
 8004c64:	3340      	adds	r3, #64	@ 0x40
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	460b      	mov	r3, r1
 8004c84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	887a      	ldrh	r2, [r7, #2]
 8004c8c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cce:	f043 0303 	orr.w	r3, r3, #3
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf4:	d102      	bne.n	8004cfc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cfa:	e00b      	b.n	8004d14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004cfc:	4b08      	ldr	r3, [pc, #32]	@ (8004d20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0a:	d102      	bne.n	8004d12 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004d0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d10:	e000      	b.n	8004d14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004d12:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40007000 	.word	0x40007000

08004d24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d141      	bne.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d32:	4b4b      	ldr	r3, [pc, #300]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d3e:	d131      	bne.n	8004da4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d40:	4b47      	ldr	r3, [pc, #284]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d46:	4a46      	ldr	r2, [pc, #280]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d50:	4b43      	ldr	r3, [pc, #268]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d58:	4a41      	ldr	r2, [pc, #260]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d60:	4b40      	ldr	r3, [pc, #256]	@ (8004e64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2232      	movs	r2, #50	@ 0x32
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
 8004d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	0c9b      	lsrs	r3, r3, #18
 8004d72:	3301      	adds	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d76:	e002      	b.n	8004d7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d7e:	4b38      	ldr	r3, [pc, #224]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d8a:	d102      	bne.n	8004d92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f2      	bne.n	8004d78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d92:	4b33      	ldr	r3, [pc, #204]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d9e:	d158      	bne.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e057      	b.n	8004e54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004da4:	4b2e      	ldr	r3, [pc, #184]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004daa:	4a2d      	ldr	r2, [pc, #180]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004db4:	e04d      	b.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dbc:	d141      	bne.n	8004e42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dbe:	4b28      	ldr	r3, [pc, #160]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dca:	d131      	bne.n	8004e30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dcc:	4b24      	ldr	r3, [pc, #144]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dd2:	4a23      	ldr	r2, [pc, #140]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ddc:	4b20      	ldr	r3, [pc, #128]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004de4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004dec:	4b1d      	ldr	r3, [pc, #116]	@ (8004e64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2232      	movs	r2, #50	@ 0x32
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
 8004df6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004df8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfc:	0c9b      	lsrs	r3, r3, #18
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e02:	e002      	b.n	8004e0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e0a:	4b15      	ldr	r3, [pc, #84]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e16:	d102      	bne.n	8004e1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f2      	bne.n	8004e04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e1e:	4b10      	ldr	r3, [pc, #64]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e2a:	d112      	bne.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e011      	b.n	8004e54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e30:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e36:	4a0a      	ldr	r2, [pc, #40]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e40:	e007      	b.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e42:	4b07      	ldr	r3, [pc, #28]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e4a:	4a05      	ldr	r2, [pc, #20]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e50:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40007000 	.word	0x40007000
 8004e64:	20000000 	.word	0x20000000
 8004e68:	431bde83 	.word	0x431bde83

08004e6c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004e70:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	4a04      	ldr	r2, [pc, #16]	@ (8004e88 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e7a:	6053      	str	r3, [r2, #4]
}
 8004e7c:	bf00      	nop
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40007000 	.word	0x40007000

08004e8c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004e90:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4a04      	ldr	r2, [pc, #16]	@ (8004ea8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e9a:	6053      	str	r3, [r2, #4]
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40007000 	.word	0x40007000

08004eac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	f000 bc08 	b.w	80056d0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ec0:	4b96      	ldr	r3, [pc, #600]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 030c 	and.w	r3, r3, #12
 8004ec8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eca:	4b94      	ldr	r3, [pc, #592]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80e4 	beq.w	80050aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x4c>
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b0c      	cmp	r3, #12
 8004eec:	f040 808b 	bne.w	8005006 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	f040 8087 	bne.w	8005006 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ef8:	4b88      	ldr	r3, [pc, #544]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_OscConfig+0x64>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e3df      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1a      	ldr	r2, [r3, #32]
 8004f14:	4b81      	ldr	r3, [pc, #516]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <HAL_RCC_OscConfig+0x7e>
 8004f20:	4b7e      	ldr	r3, [pc, #504]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f28:	e005      	b.n	8004f36 <HAL_RCC_OscConfig+0x8a>
 8004f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d223      	bcs.n	8004f82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fdcc 	bl	8005adc <RCC_SetFlashLatencyFromMSIRange>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e3c0      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f4e:	4b73      	ldr	r3, [pc, #460]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a72      	ldr	r2, [pc, #456]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f54:	f043 0308 	orr.w	r3, r3, #8
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	4b70      	ldr	r3, [pc, #448]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	496d      	ldr	r1, [pc, #436]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f6c:	4b6b      	ldr	r3, [pc, #428]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	4968      	ldr	r1, [pc, #416]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	604b      	str	r3, [r1, #4]
 8004f80:	e025      	b.n	8004fce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f82:	4b66      	ldr	r3, [pc, #408]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a65      	ldr	r2, [pc, #404]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f88:	f043 0308 	orr.w	r3, r3, #8
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	4b63      	ldr	r3, [pc, #396]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	4960      	ldr	r1, [pc, #384]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fa0:	4b5e      	ldr	r3, [pc, #376]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	495b      	ldr	r1, [pc, #364]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fd8c 	bl	8005adc <RCC_SetFlashLatencyFromMSIRange>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e380      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fce:	f000 fcc1 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	4b51      	ldr	r3, [pc, #324]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	4950      	ldr	r1, [pc, #320]	@ (8005120 <HAL_RCC_OscConfig+0x274>)
 8004fe0:	5ccb      	ldrb	r3, [r1, r3]
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fea:	4a4e      	ldr	r2, [pc, #312]	@ (8005124 <HAL_RCC_OscConfig+0x278>)
 8004fec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fee:	4b4e      	ldr	r3, [pc, #312]	@ (8005128 <HAL_RCC_OscConfig+0x27c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fc facc 	bl	8001590 <HAL_InitTick>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d052      	beq.n	80050a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	e364      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d032      	beq.n	8005074 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800500e:	4b43      	ldr	r3, [pc, #268]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a42      	ldr	r2, [pc, #264]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800501a:	f7fc fb09 	bl	8001630 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005022:	f7fc fb05 	bl	8001630 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e34d      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005034:	4b39      	ldr	r3, [pc, #228]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005040:	4b36      	ldr	r3, [pc, #216]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a35      	ldr	r2, [pc, #212]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8005046:	f043 0308 	orr.w	r3, r3, #8
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	4b33      	ldr	r3, [pc, #204]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	4930      	ldr	r1, [pc, #192]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800505e:	4b2f      	ldr	r3, [pc, #188]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	492b      	ldr	r1, [pc, #172]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 800506e:	4313      	orrs	r3, r2
 8005070:	604b      	str	r3, [r1, #4]
 8005072:	e01a      	b.n	80050aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005074:	4b29      	ldr	r3, [pc, #164]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a28      	ldr	r2, [pc, #160]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005080:	f7fc fad6 	bl	8001630 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005088:	f7fc fad2 	bl	8001630 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e31a      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800509a:	4b20      	ldr	r3, [pc, #128]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f0      	bne.n	8005088 <HAL_RCC_OscConfig+0x1dc>
 80050a6:	e000      	b.n	80050aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d073      	beq.n	800519e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_OscConfig+0x21c>
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b0c      	cmp	r3, #12
 80050c0:	d10e      	bne.n	80050e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c8:	4b14      	ldr	r3, [pc, #80]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d063      	beq.n	800519c <HAL_RCC_OscConfig+0x2f0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d15f      	bne.n	800519c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e2f7      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e8:	d106      	bne.n	80050f8 <HAL_RCC_OscConfig+0x24c>
 80050ea:	4b0c      	ldr	r3, [pc, #48]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a0b      	ldr	r2, [pc, #44]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e025      	b.n	8005144 <HAL_RCC_OscConfig+0x298>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005100:	d114      	bne.n	800512c <HAL_RCC_OscConfig+0x280>
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a05      	ldr	r2, [pc, #20]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8005108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	4b03      	ldr	r3, [pc, #12]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a02      	ldr	r2, [pc, #8]	@ (800511c <HAL_RCC_OscConfig+0x270>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e013      	b.n	8005144 <HAL_RCC_OscConfig+0x298>
 800511c:	40021000 	.word	0x40021000
 8005120:	0800becc 	.word	0x0800becc
 8005124:	20000000 	.word	0x20000000
 8005128:	20000004 	.word	0x20000004
 800512c:	4ba0      	ldr	r3, [pc, #640]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a9f      	ldr	r2, [pc, #636]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	4b9d      	ldr	r3, [pc, #628]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a9c      	ldr	r2, [pc, #624]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 800513e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fc fa70 	bl	8001630 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005154:	f7fc fa6c 	bl	8001630 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b64      	cmp	r3, #100	@ 0x64
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e2b4      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005166:	4b92      	ldr	r3, [pc, #584]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x2a8>
 8005172:	e014      	b.n	800519e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fc fa5c 	bl	8001630 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800517c:	f7fc fa58 	bl	8001630 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	@ 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e2a0      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800518e:	4b88      	ldr	r3, [pc, #544]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x2d0>
 800519a:	e000      	b.n	800519e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800519c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d060      	beq.n	800526c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_OscConfig+0x310>
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b0c      	cmp	r3, #12
 80051b4:	d119      	bne.n	80051ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d116      	bne.n	80051ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051bc:	4b7c      	ldr	r3, [pc, #496]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_RCC_OscConfig+0x328>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e27d      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d4:	4b76      	ldr	r3, [pc, #472]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	061b      	lsls	r3, r3, #24
 80051e2:	4973      	ldr	r1, [pc, #460]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051e8:	e040      	b.n	800526c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d023      	beq.n	800523a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f2:	4b6f      	ldr	r3, [pc, #444]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a6e      	ldr	r2, [pc, #440]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fe:	f7fc fa17 	bl	8001630 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005206:	f7fc fa13 	bl	8001630 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e25b      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005218:	4b65      	ldr	r3, [pc, #404]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005224:	4b62      	ldr	r3, [pc, #392]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	495f      	ldr	r1, [pc, #380]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
 8005238:	e018      	b.n	800526c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523a:	4b5d      	ldr	r3, [pc, #372]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a5c      	ldr	r2, [pc, #368]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005246:	f7fc f9f3 	bl	8001630 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800524e:	f7fc f9ef 	bl	8001630 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e237      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005260:	4b53      	ldr	r3, [pc, #332]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f0      	bne.n	800524e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d03c      	beq.n	80052f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01c      	beq.n	80052ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005280:	4b4b      	ldr	r3, [pc, #300]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005286:	4a4a      	ldr	r2, [pc, #296]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fc f9ce 	bl	8001630 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005298:	f7fc f9ca 	bl	8001630 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e212      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052aa:	4b41      	ldr	r3, [pc, #260]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ef      	beq.n	8005298 <HAL_RCC_OscConfig+0x3ec>
 80052b8:	e01b      	b.n	80052f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ba:	4b3d      	ldr	r3, [pc, #244]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052c0:	4a3b      	ldr	r2, [pc, #236]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fc f9b1 	bl	8001630 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d2:	f7fc f9ad 	bl	8001630 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e1f5      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052e4:	4b32      	ldr	r3, [pc, #200]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ef      	bne.n	80052d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80a6 	beq.w	800544c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005300:	2300      	movs	r3, #0
 8005302:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005304:	4b2a      	ldr	r3, [pc, #168]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10d      	bne.n	800532c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005310:	4b27      	ldr	r3, [pc, #156]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005314:	4a26      	ldr	r2, [pc, #152]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800531a:	6593      	str	r3, [r2, #88]	@ 0x58
 800531c:	4b24      	ldr	r3, [pc, #144]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 800531e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005328:	2301      	movs	r3, #1
 800532a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800532c:	4b21      	ldr	r3, [pc, #132]	@ (80053b4 <HAL_RCC_OscConfig+0x508>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d118      	bne.n	800536a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005338:	4b1e      	ldr	r3, [pc, #120]	@ (80053b4 <HAL_RCC_OscConfig+0x508>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1d      	ldr	r2, [pc, #116]	@ (80053b4 <HAL_RCC_OscConfig+0x508>)
 800533e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005344:	f7fc f974 	bl	8001630 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534c:	f7fc f970 	bl	8001630 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e1b8      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800535e:	4b15      	ldr	r3, [pc, #84]	@ (80053b4 <HAL_RCC_OscConfig+0x508>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d108      	bne.n	8005384 <HAL_RCC_OscConfig+0x4d8>
 8005372:	4b0f      	ldr	r3, [pc, #60]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005378:	4a0d      	ldr	r2, [pc, #52]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005382:	e029      	b.n	80053d8 <HAL_RCC_OscConfig+0x52c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b05      	cmp	r3, #5
 800538a:	d115      	bne.n	80053b8 <HAL_RCC_OscConfig+0x50c>
 800538c:	4b08      	ldr	r3, [pc, #32]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005392:	4a07      	ldr	r2, [pc, #28]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005394:	f043 0304 	orr.w	r3, r3, #4
 8005398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800539c:	4b04      	ldr	r3, [pc, #16]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a2:	4a03      	ldr	r2, [pc, #12]	@ (80053b0 <HAL_RCC_OscConfig+0x504>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053ac:	e014      	b.n	80053d8 <HAL_RCC_OscConfig+0x52c>
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40007000 	.word	0x40007000
 80053b8:	4b9d      	ldr	r3, [pc, #628]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053be:	4a9c      	ldr	r2, [pc, #624]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053c8:	4b99      	ldr	r3, [pc, #612]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ce:	4a98      	ldr	r2, [pc, #608]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80053d0:	f023 0304 	bic.w	r3, r3, #4
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d016      	beq.n	800540e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e0:	f7fc f926 	bl	8001630 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e6:	e00a      	b.n	80053fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e8:	f7fc f922 	bl	8001630 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e168      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053fe:	4b8c      	ldr	r3, [pc, #560]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 8005400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0ed      	beq.n	80053e8 <HAL_RCC_OscConfig+0x53c>
 800540c:	e015      	b.n	800543a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540e:	f7fc f90f 	bl	8001630 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005414:	e00a      	b.n	800542c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005416:	f7fc f90b 	bl	8001630 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005424:	4293      	cmp	r3, r2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e151      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800542c:	4b80      	ldr	r3, [pc, #512]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ed      	bne.n	8005416 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800543a:	7ffb      	ldrb	r3, [r7, #31]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005440:	4b7b      	ldr	r3, [pc, #492]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 8005442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005444:	4a7a      	ldr	r2, [pc, #488]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 8005446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800544a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d03c      	beq.n	80054d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01c      	beq.n	800549a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005460:	4b73      	ldr	r3, [pc, #460]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 8005462:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005466:	4a72      	ldr	r2, [pc, #456]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005470:	f7fc f8de 	bl	8001630 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005478:	f7fc f8da 	bl	8001630 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e122      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800548a:	4b69      	ldr	r3, [pc, #420]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 800548c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ef      	beq.n	8005478 <HAL_RCC_OscConfig+0x5cc>
 8005498:	e01b      	b.n	80054d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800549a:	4b65      	ldr	r3, [pc, #404]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 800549c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054a0:	4a63      	ldr	r2, [pc, #396]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054aa:	f7fc f8c1 	bl	8001630 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054b2:	f7fc f8bd 	bl	8001630 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e105      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80054c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1ef      	bne.n	80054b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80f9 	beq.w	80056ce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	f040 80cf 	bne.w	8005684 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054e6:	4b52      	ldr	r3, [pc, #328]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f003 0203 	and.w	r2, r3, #3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d12c      	bne.n	8005554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005504:	3b01      	subs	r3, #1
 8005506:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d123      	bne.n	8005554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005516:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d11b      	bne.n	8005554 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005526:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005528:	429a      	cmp	r2, r3
 800552a:	d113      	bne.n	8005554 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	3b01      	subs	r3, #1
 800553a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800553c:	429a      	cmp	r2, r3
 800553e:	d109      	bne.n	8005554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	085b      	lsrs	r3, r3, #1
 800554c:	3b01      	subs	r3, #1
 800554e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005550:	429a      	cmp	r2, r3
 8005552:	d071      	beq.n	8005638 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b0c      	cmp	r3, #12
 8005558:	d068      	beq.n	800562c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800555a:	4b35      	ldr	r3, [pc, #212]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005566:	4b32      	ldr	r3, [pc, #200]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e0ac      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005576:	4b2e      	ldr	r3, [pc, #184]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2d      	ldr	r2, [pc, #180]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 800557c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005580:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005582:	f7fc f855 	bl	8001630 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558a:	f7fc f851 	bl	8001630 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e099      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800559c:	4b24      	ldr	r3, [pc, #144]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f0      	bne.n	800558a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055a8:	4b21      	ldr	r3, [pc, #132]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	4b21      	ldr	r3, [pc, #132]	@ (8005634 <HAL_RCC_OscConfig+0x788>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80055b8:	3a01      	subs	r2, #1
 80055ba:	0112      	lsls	r2, r2, #4
 80055bc:	4311      	orrs	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055c2:	0212      	lsls	r2, r2, #8
 80055c4:	4311      	orrs	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055ca:	0852      	lsrs	r2, r2, #1
 80055cc:	3a01      	subs	r2, #1
 80055ce:	0552      	lsls	r2, r2, #21
 80055d0:	4311      	orrs	r1, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80055d6:	0852      	lsrs	r2, r2, #1
 80055d8:	3a01      	subs	r2, #1
 80055da:	0652      	lsls	r2, r2, #25
 80055dc:	4311      	orrs	r1, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80055e2:	06d2      	lsls	r2, r2, #27
 80055e4:	430a      	orrs	r2, r1
 80055e6:	4912      	ldr	r1, [pc, #72]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055ec:	4b10      	ldr	r3, [pc, #64]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80055f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 80055fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005602:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005604:	f7fc f814 	bl	8001630 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800560c:	f7fc f810 	bl	8001630 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e058      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561e:	4b04      	ldr	r3, [pc, #16]	@ (8005630 <HAL_RCC_OscConfig+0x784>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800562a:	e050      	b.n	80056ce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e04f      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
 8005630:	40021000 	.word	0x40021000
 8005634:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005638:	4b27      	ldr	r3, [pc, #156]	@ (80056d8 <HAL_RCC_OscConfig+0x82c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d144      	bne.n	80056ce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005644:	4b24      	ldr	r3, [pc, #144]	@ (80056d8 <HAL_RCC_OscConfig+0x82c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a23      	ldr	r2, [pc, #140]	@ (80056d8 <HAL_RCC_OscConfig+0x82c>)
 800564a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800564e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005650:	4b21      	ldr	r3, [pc, #132]	@ (80056d8 <HAL_RCC_OscConfig+0x82c>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4a20      	ldr	r2, [pc, #128]	@ (80056d8 <HAL_RCC_OscConfig+0x82c>)
 8005656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800565a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800565c:	f7fb ffe8 	bl	8001630 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005664:	f7fb ffe4 	bl	8001630 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e02c      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005676:	4b18      	ldr	r3, [pc, #96]	@ (80056d8 <HAL_RCC_OscConfig+0x82c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0x7b8>
 8005682:	e024      	b.n	80056ce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2b0c      	cmp	r3, #12
 8005688:	d01f      	beq.n	80056ca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568a:	4b13      	ldr	r3, [pc, #76]	@ (80056d8 <HAL_RCC_OscConfig+0x82c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a12      	ldr	r2, [pc, #72]	@ (80056d8 <HAL_RCC_OscConfig+0x82c>)
 8005690:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005696:	f7fb ffcb 	bl	8001630 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800569e:	f7fb ffc7 	bl	8001630 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e00f      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b0:	4b09      	ldr	r3, [pc, #36]	@ (80056d8 <HAL_RCC_OscConfig+0x82c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f0      	bne.n	800569e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80056bc:	4b06      	ldr	r3, [pc, #24]	@ (80056d8 <HAL_RCC_OscConfig+0x82c>)
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	4905      	ldr	r1, [pc, #20]	@ (80056d8 <HAL_RCC_OscConfig+0x82c>)
 80056c2:	4b06      	ldr	r3, [pc, #24]	@ (80056dc <HAL_RCC_OscConfig+0x830>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	60cb      	str	r3, [r1, #12]
 80056c8:	e001      	b.n	80056ce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40021000 	.word	0x40021000
 80056dc:	feeefffc 	.word	0xfeeefffc

080056e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e11d      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056f8:	4b90      	ldr	r3, [pc, #576]	@ (800593c <HAL_RCC_ClockConfig+0x25c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d910      	bls.n	8005728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005706:	4b8d      	ldr	r3, [pc, #564]	@ (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 020f 	bic.w	r2, r3, #15
 800570e:	498b      	ldr	r1, [pc, #556]	@ (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	4313      	orrs	r3, r2
 8005714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005716:	4b89      	ldr	r3, [pc, #548]	@ (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d001      	beq.n	8005728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e105      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d010      	beq.n	8005756 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	4b81      	ldr	r3, [pc, #516]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005740:	429a      	cmp	r2, r3
 8005742:	d908      	bls.n	8005756 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005744:	4b7e      	ldr	r3, [pc, #504]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	497b      	ldr	r1, [pc, #492]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d079      	beq.n	8005856 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b03      	cmp	r3, #3
 8005768:	d11e      	bne.n	80057a8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800576a:	4b75      	ldr	r3, [pc, #468]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e0dc      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800577a:	f000 fa09 	bl	8005b90 <RCC_GetSysClockFreqFromPLLSource>
 800577e:	4603      	mov	r3, r0
 8005780:	4a70      	ldr	r2, [pc, #448]	@ (8005944 <HAL_RCC_ClockConfig+0x264>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d946      	bls.n	8005814 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005786:	4b6e      	ldr	r3, [pc, #440]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d140      	bne.n	8005814 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005792:	4b6b      	ldr	r3, [pc, #428]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800579a:	4a69      	ldr	r2, [pc, #420]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 800579c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057a2:	2380      	movs	r3, #128	@ 0x80
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e035      	b.n	8005814 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d107      	bne.n	80057c0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057b0:	4b63      	ldr	r3, [pc, #396]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d115      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0b9      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d107      	bne.n	80057d8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057c8:	4b5d      	ldr	r3, [pc, #372]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0ad      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057d8:	4b59      	ldr	r3, [pc, #356]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0a5      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80057e8:	f000 f8b4 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 80057ec:	4603      	mov	r3, r0
 80057ee:	4a55      	ldr	r2, [pc, #340]	@ (8005944 <HAL_RCC_ClockConfig+0x264>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d90f      	bls.n	8005814 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057f4:	4b52      	ldr	r3, [pc, #328]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005800:	4b4f      	ldr	r3, [pc, #316]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005808:	4a4d      	ldr	r2, [pc, #308]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 800580a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800580e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005810:	2380      	movs	r3, #128	@ 0x80
 8005812:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005814:	4b4a      	ldr	r3, [pc, #296]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f023 0203 	bic.w	r2, r3, #3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4947      	ldr	r1, [pc, #284]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005822:	4313      	orrs	r3, r2
 8005824:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005826:	f7fb ff03 	bl	8001630 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582c:	e00a      	b.n	8005844 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800582e:	f7fb feff 	bl	8001630 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e077      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005844:	4b3e      	ldr	r3, [pc, #248]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 020c 	and.w	r2, r3, #12
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	429a      	cmp	r2, r3
 8005854:	d1eb      	bne.n	800582e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b80      	cmp	r3, #128	@ 0x80
 800585a:	d105      	bne.n	8005868 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800585c:	4b38      	ldr	r3, [pc, #224]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4a37      	ldr	r2, [pc, #220]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005866:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d010      	beq.n	8005896 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	4b31      	ldr	r3, [pc, #196]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005880:	429a      	cmp	r2, r3
 8005882:	d208      	bcs.n	8005896 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005884:	4b2e      	ldr	r3, [pc, #184]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	492b      	ldr	r1, [pc, #172]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005892:	4313      	orrs	r3, r2
 8005894:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005896:	4b29      	ldr	r3, [pc, #164]	@ (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d210      	bcs.n	80058c6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a4:	4b25      	ldr	r3, [pc, #148]	@ (800593c <HAL_RCC_ClockConfig+0x25c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f023 020f 	bic.w	r2, r3, #15
 80058ac:	4923      	ldr	r1, [pc, #140]	@ (800593c <HAL_RCC_ClockConfig+0x25c>)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b4:	4b21      	ldr	r3, [pc, #132]	@ (800593c <HAL_RCC_ClockConfig+0x25c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d001      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e036      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	4918      	ldr	r1, [pc, #96]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058f0:	4b13      	ldr	r3, [pc, #76]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	4910      	ldr	r1, [pc, #64]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005900:	4313      	orrs	r3, r2
 8005902:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005904:	f000 f826 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8005908:	4602      	mov	r2, r0
 800590a:	4b0d      	ldr	r3, [pc, #52]	@ (8005940 <HAL_RCC_ClockConfig+0x260>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	490c      	ldr	r1, [pc, #48]	@ (8005948 <HAL_RCC_ClockConfig+0x268>)
 8005916:	5ccb      	ldrb	r3, [r1, r3]
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	4a0a      	ldr	r2, [pc, #40]	@ (800594c <HAL_RCC_ClockConfig+0x26c>)
 8005922:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005924:	4b0a      	ldr	r3, [pc, #40]	@ (8005950 <HAL_RCC_ClockConfig+0x270>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7fb fe31 	bl	8001590 <HAL_InitTick>
 800592e:	4603      	mov	r3, r0
 8005930:	73fb      	strb	r3, [r7, #15]

  return status;
 8005932:	7bfb      	ldrb	r3, [r7, #15]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40022000 	.word	0x40022000
 8005940:	40021000 	.word	0x40021000
 8005944:	04c4b400 	.word	0x04c4b400
 8005948:	0800becc 	.word	0x0800becc
 800594c:	20000000 	.word	0x20000000
 8005950:	20000004 	.word	0x20000004

08005954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005954:	b480      	push	{r7}
 8005956:	b089      	sub	sp, #36	@ 0x24
 8005958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	2300      	movs	r3, #0
 8005960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005962:	4b3e      	ldr	r3, [pc, #248]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800596c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0x34>
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b0c      	cmp	r3, #12
 8005980:	d121      	bne.n	80059c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d11e      	bne.n	80059c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005988:	4b34      	ldr	r3, [pc, #208]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d107      	bne.n	80059a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005994:	4b31      	ldr	r3, [pc, #196]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	e005      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059a4:	4b2d      	ldr	r3, [pc, #180]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10d      	bne.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059c4:	e00a      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d102      	bne.n	80059d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059cc:	4b25      	ldr	r3, [pc, #148]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	e004      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059d8:	4b23      	ldr	r3, [pc, #140]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80059da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b0c      	cmp	r3, #12
 80059e0:	d134      	bne.n	8005a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059e2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d003      	beq.n	80059fa <HAL_RCC_GetSysClockFreq+0xa6>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d003      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0xac>
 80059f8:	e005      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80059fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80059fc:	617b      	str	r3, [r7, #20]
      break;
 80059fe:	e005      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a00:	4b19      	ldr	r3, [pc, #100]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a02:	617b      	str	r3, [r7, #20]
      break;
 8005a04:	e002      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	617b      	str	r3, [r7, #20]
      break;
 8005a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a0c:	4b13      	ldr	r3, [pc, #76]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	3301      	adds	r3, #1
 8005a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a1a:	4b10      	ldr	r3, [pc, #64]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	fb03 f202 	mul.w	r2, r3, r2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a32:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	0e5b      	lsrs	r3, r3, #25
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3724      	adds	r7, #36	@ 0x24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	0800bee4 	.word	0x0800bee4
 8005a64:	00f42400 	.word	0x00f42400
 8005a68:	007a1200 	.word	0x007a1200

08005a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a70:	4b03      	ldr	r3, [pc, #12]	@ (8005a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000000 	.word	0x20000000

08005a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a88:	f7ff fff0 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	4b06      	ldr	r3, [pc, #24]	@ (8005aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	4904      	ldr	r1, [pc, #16]	@ (8005aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a9a:	5ccb      	ldrb	r3, [r1, r3]
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	0800bedc 	.word	0x0800bedc

08005ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ab4:	f7ff ffda 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4b06      	ldr	r3, [pc, #24]	@ (8005ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	0adb      	lsrs	r3, r3, #11
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	4904      	ldr	r1, [pc, #16]	@ (8005ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	0800bedc 	.word	0x0800bedc

08005adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ae8:	4b27      	ldr	r3, [pc, #156]	@ (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005af4:	f7ff f8f6 	bl	8004ce4 <HAL_PWREx_GetVoltageRange>
 8005af8:	6178      	str	r0, [r7, #20]
 8005afa:	e014      	b.n	8005b26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005afc:	4b22      	ldr	r3, [pc, #136]	@ (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b00:	4a21      	ldr	r2, [pc, #132]	@ (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b08:	4b1f      	ldr	r3, [pc, #124]	@ (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b14:	f7ff f8e6 	bl	8004ce4 <HAL_PWREx_GetVoltageRange>
 8005b18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b2c:	d10b      	bne.n	8005b46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b80      	cmp	r3, #128	@ 0x80
 8005b32:	d913      	bls.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2ba0      	cmp	r3, #160	@ 0xa0
 8005b38:	d902      	bls.n	8005b40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	e00d      	b.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b40:	2301      	movs	r3, #1
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	e00a      	b.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b4a:	d902      	bls.n	8005b52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	e004      	b.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b70      	cmp	r3, #112	@ 0x70
 8005b56:	d101      	bne.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b58:	2301      	movs	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f023 020f 	bic.w	r2, r3, #15
 8005b64:	4909      	ldr	r1, [pc, #36]	@ (8005b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b6c:	4b07      	ldr	r3, [pc, #28]	@ (8005b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d001      	beq.n	8005b7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	40022000 	.word	0x40022000

08005b90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b96:	4b2d      	ldr	r3, [pc, #180]	@ (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d00b      	beq.n	8005bbe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d825      	bhi.n	8005bf8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d008      	beq.n	8005bc4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d11f      	bne.n	8005bf8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005bb8:	4b25      	ldr	r3, [pc, #148]	@ (8005c50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005bba:	613b      	str	r3, [r7, #16]
    break;
 8005bbc:	e01f      	b.n	8005bfe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005bbe:	4b25      	ldr	r3, [pc, #148]	@ (8005c54 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005bc0:	613b      	str	r3, [r7, #16]
    break;
 8005bc2:	e01c      	b.n	8005bfe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005bc4:	4b21      	ldr	r3, [pc, #132]	@ (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	e005      	b.n	8005bec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005be0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	091b      	lsrs	r3, r3, #4
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005bec:	4a1a      	ldr	r2, [pc, #104]	@ (8005c58 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf4:	613b      	str	r3, [r7, #16]
    break;
 8005bf6:	e002      	b.n	8005bfe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	613b      	str	r3, [r7, #16]
    break;
 8005bfc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bfe:	4b13      	ldr	r3, [pc, #76]	@ (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	0a1b      	lsrs	r3, r3, #8
 8005c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	fb03 f202 	mul.w	r2, r3, r2
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c22:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c24:	4b09      	ldr	r3, [pc, #36]	@ (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	0e5b      	lsrs	r3, r3, #25
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	3301      	adds	r3, #1
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005c3e:	683b      	ldr	r3, [r7, #0]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	00f42400 	.word	0x00f42400
 8005c54:	007a1200 	.word	0x007a1200
 8005c58:	0800bee4 	.word	0x0800bee4

08005c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c64:	2300      	movs	r3, #0
 8005c66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c68:	2300      	movs	r3, #0
 8005c6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d040      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c7c:	2b80      	cmp	r3, #128	@ 0x80
 8005c7e:	d02a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c80:	2b80      	cmp	r3, #128	@ 0x80
 8005c82:	d825      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c84:	2b60      	cmp	r3, #96	@ 0x60
 8005c86:	d026      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c88:	2b60      	cmp	r3, #96	@ 0x60
 8005c8a:	d821      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c8c:	2b40      	cmp	r3, #64	@ 0x40
 8005c8e:	d006      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005c90:	2b40      	cmp	r3, #64	@ 0x40
 8005c92:	d81d      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d010      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005c9c:	e018      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c9e:	4b89      	ldr	r3, [pc, #548]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	4a88      	ldr	r2, [pc, #544]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005caa:	e015      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fb02 	bl	80062bc <RCCEx_PLLSAI1_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cbc:	e00c      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3320      	adds	r3, #32
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fbed 	bl	80064a4 <RCCEx_PLLSAI2_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cce:	e003      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	74fb      	strb	r3, [r7, #19]
      break;
 8005cd4:	e000      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cde:	4b79      	ldr	r3, [pc, #484]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ce4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cec:	4975      	ldr	r1, [pc, #468]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005cf4:	e001      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf6:	7cfb      	ldrb	r3, [r7, #19]
 8005cf8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d047      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d0e:	d030      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d14:	d82a      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d1a:	d02a      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d20:	d824      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d26:	d008      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d2c:	d81e      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d36:	d010      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005d38:	e018      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d3a:	4b62      	ldr	r3, [pc, #392]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	4a61      	ldr	r2, [pc, #388]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d44:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d46:	e015      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fab4 	bl	80062bc <RCCEx_PLLSAI1_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d58:	e00c      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3320      	adds	r3, #32
 8005d5e:	2100      	movs	r1, #0
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fb9f 	bl	80064a4 <RCCEx_PLLSAI2_Config>
 8005d66:	4603      	mov	r3, r0
 8005d68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d6a:	e003      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	74fb      	strb	r3, [r7, #19]
      break;
 8005d70:	e000      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d74:	7cfb      	ldrb	r3, [r7, #19]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10b      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d7a:	4b52      	ldr	r3, [pc, #328]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d88:	494e      	ldr	r1, [pc, #312]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005d90:	e001      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d92:	7cfb      	ldrb	r3, [r7, #19]
 8005d94:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 809f 	beq.w	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005da4:	2300      	movs	r3, #0
 8005da6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005da8:	4b46      	ldr	r3, [pc, #280]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005db8:	2300      	movs	r3, #0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dbe:	4b41      	ldr	r3, [pc, #260]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc2:	4a40      	ldr	r2, [pc, #256]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dca:	4b3e      	ldr	r3, [pc, #248]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dd2:	60bb      	str	r3, [r7, #8]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dda:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a3a      	ldr	r2, [pc, #232]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005de4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005de6:	f7fb fc23 	bl	8001630 <HAL_GetTick>
 8005dea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dec:	e009      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dee:	f7fb fc1f 	bl	8001630 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d902      	bls.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	74fb      	strb	r3, [r7, #19]
        break;
 8005e00:	e005      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e02:	4b31      	ldr	r3, [pc, #196]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0ef      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005e0e:	7cfb      	ldrb	r3, [r7, #19]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d15b      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e14:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e1e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01f      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d019      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e32:	4b24      	ldr	r3, [pc, #144]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e3e:	4b21      	ldr	r3, [pc, #132]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e44:	4a1f      	ldr	r2, [pc, #124]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e54:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e5e:	4a19      	ldr	r2, [pc, #100]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d016      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fb fbde 	bl	8001630 <HAL_GetTick>
 8005e74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e76:	e00b      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e78:	f7fb fbda 	bl	8001630 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d902      	bls.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	74fb      	strb	r3, [r7, #19]
            break;
 8005e8e:	e006      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e90:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0ec      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10c      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ea4:	4b07      	ldr	r3, [pc, #28]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eaa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb4:	4903      	ldr	r1, [pc, #12]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ebe:	7cfb      	ldrb	r3, [r7, #19]
 8005ec0:	74bb      	strb	r3, [r7, #18]
 8005ec2:	e005      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ecc:	7cfb      	ldrb	r3, [r7, #19]
 8005ece:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ed0:	7c7b      	ldrb	r3, [r7, #17]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d105      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed6:	4ba0      	ldr	r3, [pc, #640]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eda:	4a9f      	ldr	r2, [pc, #636]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ee0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eee:	4b9a      	ldr	r3, [pc, #616]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef4:	f023 0203 	bic.w	r2, r3, #3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efc:	4996      	ldr	r1, [pc, #600]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f10:	4b91      	ldr	r3, [pc, #580]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f16:	f023 020c 	bic.w	r2, r3, #12
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1e:	498e      	ldr	r1, [pc, #568]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f32:	4b89      	ldr	r3, [pc, #548]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f40:	4985      	ldr	r1, [pc, #532]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f54:	4b80      	ldr	r3, [pc, #512]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f62:	497d      	ldr	r1, [pc, #500]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f76:	4b78      	ldr	r3, [pc, #480]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f84:	4974      	ldr	r1, [pc, #464]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f98:	4b6f      	ldr	r3, [pc, #444]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa6:	496c      	ldr	r1, [pc, #432]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fba:	4b67      	ldr	r3, [pc, #412]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fc8:	4963      	ldr	r1, [pc, #396]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fea:	495b      	ldr	r1, [pc, #364]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ffe:	4b56      	ldr	r3, [pc, #344]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006004:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600c:	4952      	ldr	r1, [pc, #328]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006020:	4b4d      	ldr	r3, [pc, #308]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006026:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602e:	494a      	ldr	r1, [pc, #296]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006030:	4313      	orrs	r3, r2
 8006032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006042:	4b45      	ldr	r3, [pc, #276]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006048:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006050:	4941      	ldr	r1, [pc, #260]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006052:	4313      	orrs	r3, r2
 8006054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006064:	4b3c      	ldr	r3, [pc, #240]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006066:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800606a:	f023 0203 	bic.w	r2, r3, #3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006072:	4939      	ldr	r1, [pc, #228]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006074:	4313      	orrs	r3, r2
 8006076:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d028      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006086:	4b34      	ldr	r3, [pc, #208]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006094:	4930      	ldr	r1, [pc, #192]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060a4:	d106      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060b0:	60d3      	str	r3, [r2, #12]
 80060b2:	e011      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3304      	adds	r3, #4
 80060c2:	2101      	movs	r1, #1
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 f8f9 	bl	80062bc <RCCEx_PLLSAI1_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060ce:	7cfb      	ldrb	r3, [r7, #19]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80060d4:	7cfb      	ldrb	r3, [r7, #19]
 80060d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d04d      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060ec:	d108      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80060ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060f4:	4a18      	ldr	r2, [pc, #96]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060fa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80060fe:	e012      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006100:	4b15      	ldr	r3, [pc, #84]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006102:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006106:	4a14      	ldr	r2, [pc, #80]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006108:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800610c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006110:	4b11      	ldr	r3, [pc, #68]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006116:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800611e:	490e      	ldr	r1, [pc, #56]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800612a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800612e:	d106      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006130:	4b09      	ldr	r3, [pc, #36]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	4a08      	ldr	r2, [pc, #32]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800613a:	60d3      	str	r3, [r2, #12]
 800613c:	e020      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006142:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006146:	d109      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006148:	4b03      	ldr	r3, [pc, #12]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	4a02      	ldr	r2, [pc, #8]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800614e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006152:	60d3      	str	r3, [r2, #12]
 8006154:	e014      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006156:	bf00      	nop
 8006158:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006160:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006164:	d10c      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	2101      	movs	r1, #1
 800616c:	4618      	mov	r0, r3
 800616e:	f000 f8a5 	bl	80062bc <RCCEx_PLLSAI1_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006176:	7cfb      	ldrb	r3, [r7, #19]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800617c:	7cfb      	ldrb	r3, [r7, #19]
 800617e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d028      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800618c:	4b4a      	ldr	r3, [pc, #296]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006192:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800619a:	4947      	ldr	r1, [pc, #284]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061aa:	d106      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ac:	4b42      	ldr	r3, [pc, #264]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	4a41      	ldr	r2, [pc, #260]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061b6:	60d3      	str	r3, [r2, #12]
 80061b8:	e011      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061c2:	d10c      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	2101      	movs	r1, #1
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f876 	bl	80062bc <RCCEx_PLLSAI1_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061d4:	7cfb      	ldrb	r3, [r7, #19]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80061da:	7cfb      	ldrb	r3, [r7, #19]
 80061dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01e      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061ea:	4b33      	ldr	r3, [pc, #204]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061fa:	492f      	ldr	r1, [pc, #188]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800620c:	d10c      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3304      	adds	r3, #4
 8006212:	2102      	movs	r1, #2
 8006214:	4618      	mov	r0, r3
 8006216:	f000 f851 	bl	80062bc <RCCEx_PLLSAI1_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800621e:	7cfb      	ldrb	r3, [r7, #19]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006224:	7cfb      	ldrb	r3, [r7, #19]
 8006226:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006234:	4b20      	ldr	r3, [pc, #128]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800623a:	f023 0204 	bic.w	r2, r3, #4
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006244:	491c      	ldr	r1, [pc, #112]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006258:	4b17      	ldr	r3, [pc, #92]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800625a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800625e:	f023 0218 	bic.w	r2, r3, #24
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006268:	4913      	ldr	r1, [pc, #76]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d017      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800627c:	4b0e      	ldr	r3, [pc, #56]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800627e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006282:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800628c:	490a      	ldr	r1, [pc, #40]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800629a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800629e:	d105      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a0:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	4a04      	ldr	r2, [pc, #16]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80062ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40021000 	.word	0x40021000

080062bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062ca:	4b72      	ldr	r3, [pc, #456]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00e      	beq.n	80062f4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80062d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f003 0203 	and.w	r2, r3, #3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d103      	bne.n	80062ee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
       ||
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d142      	bne.n	8006374 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	73fb      	strb	r3, [r7, #15]
 80062f2:	e03f      	b.n	8006374 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d018      	beq.n	800632e <RCCEx_PLLSAI1_Config+0x72>
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d825      	bhi.n	800634c <RCCEx_PLLSAI1_Config+0x90>
 8006300:	2b01      	cmp	r3, #1
 8006302:	d002      	beq.n	800630a <RCCEx_PLLSAI1_Config+0x4e>
 8006304:	2b02      	cmp	r3, #2
 8006306:	d009      	beq.n	800631c <RCCEx_PLLSAI1_Config+0x60>
 8006308:	e020      	b.n	800634c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800630a:	4b62      	ldr	r3, [pc, #392]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d11d      	bne.n	8006352 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800631a:	e01a      	b.n	8006352 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800631c:	4b5d      	ldr	r3, [pc, #372]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006324:	2b00      	cmp	r3, #0
 8006326:	d116      	bne.n	8006356 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800632c:	e013      	b.n	8006356 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800632e:	4b59      	ldr	r3, [pc, #356]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10f      	bne.n	800635a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800633a:	4b56      	ldr	r3, [pc, #344]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d109      	bne.n	800635a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800634a:	e006      	b.n	800635a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
      break;
 8006350:	e004      	b.n	800635c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006352:	bf00      	nop
 8006354:	e002      	b.n	800635c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006356:	bf00      	nop
 8006358:	e000      	b.n	800635c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800635a:	bf00      	nop
    }

    if(status == HAL_OK)
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d108      	bne.n	8006374 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006362:	4b4c      	ldr	r3, [pc, #304]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f023 0203 	bic.w	r2, r3, #3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4949      	ldr	r1, [pc, #292]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006370:	4313      	orrs	r3, r2
 8006372:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f040 8086 	bne.w	8006488 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800637c:	4b45      	ldr	r3, [pc, #276]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a44      	ldr	r2, [pc, #272]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006382:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006388:	f7fb f952 	bl	8001630 <HAL_GetTick>
 800638c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800638e:	e009      	b.n	80063a4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006390:	f7fb f94e 	bl	8001630 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d902      	bls.n	80063a4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	73fb      	strb	r3, [r7, #15]
        break;
 80063a2:	e005      	b.n	80063b0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1ef      	bne.n	8006390 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d168      	bne.n	8006488 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d113      	bne.n	80063e4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063bc:	4b35      	ldr	r3, [pc, #212]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	4b35      	ldr	r3, [pc, #212]	@ (8006498 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063c2:	4013      	ands	r3, r2
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6892      	ldr	r2, [r2, #8]
 80063c8:	0211      	lsls	r1, r2, #8
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	68d2      	ldr	r2, [r2, #12]
 80063ce:	06d2      	lsls	r2, r2, #27
 80063d0:	4311      	orrs	r1, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6852      	ldr	r2, [r2, #4]
 80063d6:	3a01      	subs	r2, #1
 80063d8:	0112      	lsls	r2, r2, #4
 80063da:	430a      	orrs	r2, r1
 80063dc:	492d      	ldr	r1, [pc, #180]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	610b      	str	r3, [r1, #16]
 80063e2:	e02d      	b.n	8006440 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d115      	bne.n	8006416 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	4b2b      	ldr	r3, [pc, #172]	@ (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6892      	ldr	r2, [r2, #8]
 80063f6:	0211      	lsls	r1, r2, #8
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6912      	ldr	r2, [r2, #16]
 80063fc:	0852      	lsrs	r2, r2, #1
 80063fe:	3a01      	subs	r2, #1
 8006400:	0552      	lsls	r2, r2, #21
 8006402:	4311      	orrs	r1, r2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6852      	ldr	r2, [r2, #4]
 8006408:	3a01      	subs	r2, #1
 800640a:	0112      	lsls	r2, r2, #4
 800640c:	430a      	orrs	r2, r1
 800640e:	4921      	ldr	r1, [pc, #132]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006410:	4313      	orrs	r3, r2
 8006412:	610b      	str	r3, [r1, #16]
 8006414:	e014      	b.n	8006440 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006416:	4b1f      	ldr	r3, [pc, #124]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	4b21      	ldr	r3, [pc, #132]	@ (80064a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800641c:	4013      	ands	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6892      	ldr	r2, [r2, #8]
 8006422:	0211      	lsls	r1, r2, #8
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6952      	ldr	r2, [r2, #20]
 8006428:	0852      	lsrs	r2, r2, #1
 800642a:	3a01      	subs	r2, #1
 800642c:	0652      	lsls	r2, r2, #25
 800642e:	4311      	orrs	r1, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6852      	ldr	r2, [r2, #4]
 8006434:	3a01      	subs	r2, #1
 8006436:	0112      	lsls	r2, r2, #4
 8006438:	430a      	orrs	r2, r1
 800643a:	4916      	ldr	r1, [pc, #88]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 800643c:	4313      	orrs	r3, r2
 800643e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006440:	4b14      	ldr	r3, [pc, #80]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a13      	ldr	r2, [pc, #76]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006446:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800644a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800644c:	f7fb f8f0 	bl	8001630 <HAL_GetTick>
 8006450:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006452:	e009      	b.n	8006468 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006454:	f7fb f8ec 	bl	8001630 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d902      	bls.n	8006468 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	73fb      	strb	r3, [r7, #15]
          break;
 8006466:	e005      	b.n	8006474 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006468:	4b0a      	ldr	r3, [pc, #40]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0ef      	beq.n	8006454 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800647a:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	4904      	ldr	r1, [pc, #16]	@ (8006494 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006484:	4313      	orrs	r3, r2
 8006486:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40021000 	.word	0x40021000
 8006498:	07ff800f 	.word	0x07ff800f
 800649c:	ff9f800f 	.word	0xff9f800f
 80064a0:	f9ff800f 	.word	0xf9ff800f

080064a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064b2:	4b72      	ldr	r3, [pc, #456]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00e      	beq.n	80064dc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80064be:	4b6f      	ldr	r3, [pc, #444]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f003 0203 	and.w	r2, r3, #3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d103      	bne.n	80064d6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
       ||
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d142      	bne.n	800655c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	73fb      	strb	r3, [r7, #15]
 80064da:	e03f      	b.n	800655c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d018      	beq.n	8006516 <RCCEx_PLLSAI2_Config+0x72>
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d825      	bhi.n	8006534 <RCCEx_PLLSAI2_Config+0x90>
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d002      	beq.n	80064f2 <RCCEx_PLLSAI2_Config+0x4e>
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d009      	beq.n	8006504 <RCCEx_PLLSAI2_Config+0x60>
 80064f0:	e020      	b.n	8006534 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064f2:	4b62      	ldr	r3, [pc, #392]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d11d      	bne.n	800653a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006502:	e01a      	b.n	800653a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006504:	4b5d      	ldr	r3, [pc, #372]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800650c:	2b00      	cmp	r3, #0
 800650e:	d116      	bne.n	800653e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006514:	e013      	b.n	800653e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006516:	4b59      	ldr	r3, [pc, #356]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006522:	4b56      	ldr	r3, [pc, #344]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d109      	bne.n	8006542 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006532:	e006      	b.n	8006542 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	73fb      	strb	r3, [r7, #15]
      break;
 8006538:	e004      	b.n	8006544 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800653a:	bf00      	nop
 800653c:	e002      	b.n	8006544 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800653e:	bf00      	nop
 8006540:	e000      	b.n	8006544 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006542:	bf00      	nop
    }

    if(status == HAL_OK)
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d108      	bne.n	800655c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800654a:	4b4c      	ldr	r3, [pc, #304]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f023 0203 	bic.w	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4949      	ldr	r1, [pc, #292]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006558:	4313      	orrs	r3, r2
 800655a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f040 8086 	bne.w	8006670 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006564:	4b45      	ldr	r3, [pc, #276]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a44      	ldr	r2, [pc, #272]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 800656a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800656e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006570:	f7fb f85e 	bl	8001630 <HAL_GetTick>
 8006574:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006576:	e009      	b.n	800658c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006578:	f7fb f85a 	bl	8001630 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d902      	bls.n	800658c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	73fb      	strb	r3, [r7, #15]
        break;
 800658a:	e005      	b.n	8006598 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800658c:	4b3b      	ldr	r3, [pc, #236]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1ef      	bne.n	8006578 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d168      	bne.n	8006670 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d113      	bne.n	80065cc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065a4:	4b35      	ldr	r3, [pc, #212]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065a6:	695a      	ldr	r2, [r3, #20]
 80065a8:	4b35      	ldr	r3, [pc, #212]	@ (8006680 <RCCEx_PLLSAI2_Config+0x1dc>)
 80065aa:	4013      	ands	r3, r2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6892      	ldr	r2, [r2, #8]
 80065b0:	0211      	lsls	r1, r2, #8
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	68d2      	ldr	r2, [r2, #12]
 80065b6:	06d2      	lsls	r2, r2, #27
 80065b8:	4311      	orrs	r1, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6852      	ldr	r2, [r2, #4]
 80065be:	3a01      	subs	r2, #1
 80065c0:	0112      	lsls	r2, r2, #4
 80065c2:	430a      	orrs	r2, r1
 80065c4:	492d      	ldr	r1, [pc, #180]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	614b      	str	r3, [r1, #20]
 80065ca:	e02d      	b.n	8006628 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d115      	bne.n	80065fe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065d2:	4b2a      	ldr	r3, [pc, #168]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d4:	695a      	ldr	r2, [r3, #20]
 80065d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006684 <RCCEx_PLLSAI2_Config+0x1e0>)
 80065d8:	4013      	ands	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6892      	ldr	r2, [r2, #8]
 80065de:	0211      	lsls	r1, r2, #8
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6912      	ldr	r2, [r2, #16]
 80065e4:	0852      	lsrs	r2, r2, #1
 80065e6:	3a01      	subs	r2, #1
 80065e8:	0552      	lsls	r2, r2, #21
 80065ea:	4311      	orrs	r1, r2
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6852      	ldr	r2, [r2, #4]
 80065f0:	3a01      	subs	r2, #1
 80065f2:	0112      	lsls	r2, r2, #4
 80065f4:	430a      	orrs	r2, r1
 80065f6:	4921      	ldr	r1, [pc, #132]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	614b      	str	r3, [r1, #20]
 80065fc:	e014      	b.n	8006628 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065fe:	4b1f      	ldr	r3, [pc, #124]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006600:	695a      	ldr	r2, [r3, #20]
 8006602:	4b21      	ldr	r3, [pc, #132]	@ (8006688 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006604:	4013      	ands	r3, r2
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6892      	ldr	r2, [r2, #8]
 800660a:	0211      	lsls	r1, r2, #8
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6952      	ldr	r2, [r2, #20]
 8006610:	0852      	lsrs	r2, r2, #1
 8006612:	3a01      	subs	r2, #1
 8006614:	0652      	lsls	r2, r2, #25
 8006616:	4311      	orrs	r1, r2
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6852      	ldr	r2, [r2, #4]
 800661c:	3a01      	subs	r2, #1
 800661e:	0112      	lsls	r2, r2, #4
 8006620:	430a      	orrs	r2, r1
 8006622:	4916      	ldr	r1, [pc, #88]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006624:	4313      	orrs	r3, r2
 8006626:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006628:	4b14      	ldr	r3, [pc, #80]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a13      	ldr	r2, [pc, #76]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 800662e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006632:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006634:	f7fa fffc 	bl	8001630 <HAL_GetTick>
 8006638:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800663a:	e009      	b.n	8006650 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800663c:	f7fa fff8 	bl	8001630 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d902      	bls.n	8006650 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	73fb      	strb	r3, [r7, #15]
          break;
 800664e:	e005      	b.n	800665c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006650:	4b0a      	ldr	r3, [pc, #40]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0ef      	beq.n	800663c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006662:	4b06      	ldr	r3, [pc, #24]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	4904      	ldr	r1, [pc, #16]	@ (800667c <RCCEx_PLLSAI2_Config+0x1d8>)
 800666c:	4313      	orrs	r3, r2
 800666e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40021000 	.word	0x40021000
 8006680:	07ff800f 	.word	0x07ff800f
 8006684:	ff9f800f 	.word	0xff9f800f
 8006688:	f9ff800f 	.word	0xf9ff800f

0800668c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e049      	b.n	8006732 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fa fd94 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f000 fb02 	bl	8006cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	d001      	beq.n	8006754 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e047      	b.n	80067e4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a23      	ldr	r2, [pc, #140]	@ (80067f0 <HAL_TIM_Base_Start+0xb4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d01d      	beq.n	80067a2 <HAL_TIM_Base_Start+0x66>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800676e:	d018      	beq.n	80067a2 <HAL_TIM_Base_Start+0x66>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1f      	ldr	r2, [pc, #124]	@ (80067f4 <HAL_TIM_Base_Start+0xb8>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <HAL_TIM_Base_Start+0x66>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1e      	ldr	r2, [pc, #120]	@ (80067f8 <HAL_TIM_Base_Start+0xbc>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00e      	beq.n	80067a2 <HAL_TIM_Base_Start+0x66>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a1c      	ldr	r2, [pc, #112]	@ (80067fc <HAL_TIM_Base_Start+0xc0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d009      	beq.n	80067a2 <HAL_TIM_Base_Start+0x66>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a1b      	ldr	r2, [pc, #108]	@ (8006800 <HAL_TIM_Base_Start+0xc4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <HAL_TIM_Base_Start+0x66>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a19      	ldr	r2, [pc, #100]	@ (8006804 <HAL_TIM_Base_Start+0xc8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d115      	bne.n	80067ce <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	4b17      	ldr	r3, [pc, #92]	@ (8006808 <HAL_TIM_Base_Start+0xcc>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b06      	cmp	r3, #6
 80067b2:	d015      	beq.n	80067e0 <HAL_TIM_Base_Start+0xa4>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ba:	d011      	beq.n	80067e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0201 	orr.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067cc:	e008      	b.n	80067e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0201 	orr.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e000      	b.n	80067e2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	40012c00 	.word	0x40012c00
 80067f4:	40000400 	.word	0x40000400
 80067f8:	40000800 	.word	0x40000800
 80067fc:	40000c00 	.word	0x40000c00
 8006800:	40013400 	.word	0x40013400
 8006804:	40014000 	.word	0x40014000
 8006808:	00010007 	.word	0x00010007

0800680c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	d001      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e04f      	b.n	80068c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a23      	ldr	r2, [pc, #140]	@ (80068d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d01d      	beq.n	8006882 <HAL_TIM_Base_Start_IT+0x76>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684e:	d018      	beq.n	8006882 <HAL_TIM_Base_Start_IT+0x76>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1f      	ldr	r2, [pc, #124]	@ (80068d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d013      	beq.n	8006882 <HAL_TIM_Base_Start_IT+0x76>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1e      	ldr	r2, [pc, #120]	@ (80068d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00e      	beq.n	8006882 <HAL_TIM_Base_Start_IT+0x76>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1c      	ldr	r2, [pc, #112]	@ (80068dc <HAL_TIM_Base_Start_IT+0xd0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d009      	beq.n	8006882 <HAL_TIM_Base_Start_IT+0x76>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1b      	ldr	r2, [pc, #108]	@ (80068e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d004      	beq.n	8006882 <HAL_TIM_Base_Start_IT+0x76>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a19      	ldr	r2, [pc, #100]	@ (80068e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d115      	bne.n	80068ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	4b17      	ldr	r3, [pc, #92]	@ (80068e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800688a:	4013      	ands	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b06      	cmp	r3, #6
 8006892:	d015      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0xb4>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800689a:	d011      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ac:	e008      	b.n	80068c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f042 0201 	orr.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	e000      	b.n	80068c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	40012c00 	.word	0x40012c00
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40000800 	.word	0x40000800
 80068dc:	40000c00 	.word	0x40000c00
 80068e0:	40013400 	.word	0x40013400
 80068e4:	40014000 	.word	0x40014000
 80068e8:	00010007 	.word	0x00010007

080068ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d020      	beq.n	8006950 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01b      	beq.n	8006950 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0202 	mvn.w	r2, #2
 8006920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f9ad 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 800693c:	e005      	b.n	800694a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f99f 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f9b0 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b00      	cmp	r3, #0
 8006958:	d020      	beq.n	800699c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d01b      	beq.n	800699c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f06f 0204 	mvn.w	r2, #4
 800696c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2202      	movs	r2, #2
 8006972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f987 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 8006988:	e005      	b.n	8006996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f979 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f98a 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 0308 	and.w	r3, r3, #8
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d020      	beq.n	80069e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01b      	beq.n	80069e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0208 	mvn.w	r2, #8
 80069b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2204      	movs	r2, #4
 80069be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f961 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 80069d4:	e005      	b.n	80069e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f953 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f964 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f003 0310 	and.w	r3, r3, #16
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d020      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f003 0310 	and.w	r3, r3, #16
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01b      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0210 	mvn.w	r2, #16
 8006a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2208      	movs	r2, #8
 8006a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f93b 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 8006a20:	e005      	b.n	8006a2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f92d 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f93e 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00c      	beq.n	8006a58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0201 	mvn.w	r2, #1
 8006a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fa f838 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00c      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d007      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 faf2 	bl	8007060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00c      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 faea 	bl	8007074 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00c      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8fd 	bl	8006cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00c      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f003 0320 	and.w	r3, r3, #32
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0220 	mvn.w	r2, #32
 8006ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fab2 	bl	800704c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <HAL_TIM_ConfigClockSource+0x1c>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e0b6      	b.n	8006c7a <HAL_TIM_ConfigClockSource+0x18a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b48:	d03e      	beq.n	8006bc8 <HAL_TIM_ConfigClockSource+0xd8>
 8006b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b4e:	f200 8087 	bhi.w	8006c60 <HAL_TIM_ConfigClockSource+0x170>
 8006b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b56:	f000 8086 	beq.w	8006c66 <HAL_TIM_ConfigClockSource+0x176>
 8006b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b5e:	d87f      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x170>
 8006b60:	2b70      	cmp	r3, #112	@ 0x70
 8006b62:	d01a      	beq.n	8006b9a <HAL_TIM_ConfigClockSource+0xaa>
 8006b64:	2b70      	cmp	r3, #112	@ 0x70
 8006b66:	d87b      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x170>
 8006b68:	2b60      	cmp	r3, #96	@ 0x60
 8006b6a:	d050      	beq.n	8006c0e <HAL_TIM_ConfigClockSource+0x11e>
 8006b6c:	2b60      	cmp	r3, #96	@ 0x60
 8006b6e:	d877      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x170>
 8006b70:	2b50      	cmp	r3, #80	@ 0x50
 8006b72:	d03c      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0xfe>
 8006b74:	2b50      	cmp	r3, #80	@ 0x50
 8006b76:	d873      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x170>
 8006b78:	2b40      	cmp	r3, #64	@ 0x40
 8006b7a:	d058      	beq.n	8006c2e <HAL_TIM_ConfigClockSource+0x13e>
 8006b7c:	2b40      	cmp	r3, #64	@ 0x40
 8006b7e:	d86f      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x170>
 8006b80:	2b30      	cmp	r3, #48	@ 0x30
 8006b82:	d064      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15e>
 8006b84:	2b30      	cmp	r3, #48	@ 0x30
 8006b86:	d86b      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x170>
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d060      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15e>
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d867      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x170>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d05c      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15e>
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d05a      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15e>
 8006b98:	e062      	b.n	8006c60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006baa:	f000 f9a7 	bl	8006efc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006bbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	609a      	str	r2, [r3, #8]
      break;
 8006bc6:	e04f      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bd8:	f000 f990 	bl	8006efc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bea:	609a      	str	r2, [r3, #8]
      break;
 8006bec:	e03c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f000 f904 	bl	8006e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2150      	movs	r1, #80	@ 0x50
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 f95d 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 8006c0c:	e02c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f000 f923 	bl	8006e66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2160      	movs	r1, #96	@ 0x60
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f94d 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 8006c2c:	e01c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f000 f8e4 	bl	8006e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2140      	movs	r1, #64	@ 0x40
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 f93d 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 8006c4c:	e00c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f000 f934 	bl	8006ec6 <TIM_ITRx_SetConfig>
      break;
 8006c5e:	e003      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
      break;
 8006c64:	e000      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a40      	ldr	r2, [pc, #256]	@ (8006de8 <TIM_Base_SetConfig+0x114>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d013      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf2:	d00f      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a3d      	ldr	r2, [pc, #244]	@ (8006dec <TIM_Base_SetConfig+0x118>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00b      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a3c      	ldr	r2, [pc, #240]	@ (8006df0 <TIM_Base_SetConfig+0x11c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d007      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a3b      	ldr	r2, [pc, #236]	@ (8006df4 <TIM_Base_SetConfig+0x120>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d003      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8006df8 <TIM_Base_SetConfig+0x124>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d108      	bne.n	8006d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2f      	ldr	r2, [pc, #188]	@ (8006de8 <TIM_Base_SetConfig+0x114>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d01f      	beq.n	8006d6e <TIM_Base_SetConfig+0x9a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d34:	d01b      	beq.n	8006d6e <TIM_Base_SetConfig+0x9a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2c      	ldr	r2, [pc, #176]	@ (8006dec <TIM_Base_SetConfig+0x118>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d017      	beq.n	8006d6e <TIM_Base_SetConfig+0x9a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a2b      	ldr	r2, [pc, #172]	@ (8006df0 <TIM_Base_SetConfig+0x11c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <TIM_Base_SetConfig+0x9a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a2a      	ldr	r2, [pc, #168]	@ (8006df4 <TIM_Base_SetConfig+0x120>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00f      	beq.n	8006d6e <TIM_Base_SetConfig+0x9a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a29      	ldr	r2, [pc, #164]	@ (8006df8 <TIM_Base_SetConfig+0x124>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00b      	beq.n	8006d6e <TIM_Base_SetConfig+0x9a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a28      	ldr	r2, [pc, #160]	@ (8006dfc <TIM_Base_SetConfig+0x128>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d007      	beq.n	8006d6e <TIM_Base_SetConfig+0x9a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a27      	ldr	r2, [pc, #156]	@ (8006e00 <TIM_Base_SetConfig+0x12c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d003      	beq.n	8006d6e <TIM_Base_SetConfig+0x9a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a26      	ldr	r2, [pc, #152]	@ (8006e04 <TIM_Base_SetConfig+0x130>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d108      	bne.n	8006d80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a10      	ldr	r2, [pc, #64]	@ (8006de8 <TIM_Base_SetConfig+0x114>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00f      	beq.n	8006dcc <TIM_Base_SetConfig+0xf8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a12      	ldr	r2, [pc, #72]	@ (8006df8 <TIM_Base_SetConfig+0x124>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00b      	beq.n	8006dcc <TIM_Base_SetConfig+0xf8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a11      	ldr	r2, [pc, #68]	@ (8006dfc <TIM_Base_SetConfig+0x128>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d007      	beq.n	8006dcc <TIM_Base_SetConfig+0xf8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a10      	ldr	r2, [pc, #64]	@ (8006e00 <TIM_Base_SetConfig+0x12c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_Base_SetConfig+0xf8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8006e04 <TIM_Base_SetConfig+0x130>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d103      	bne.n	8006dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	615a      	str	r2, [r3, #20]
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40000400 	.word	0x40000400
 8006df0:	40000800 	.word	0x40000800
 8006df4:	40000c00 	.word	0x40000c00
 8006df8:	40013400 	.word	0x40013400
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400
 8006e04:	40014800 	.word	0x40014800

08006e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f023 0201 	bic.w	r2, r3, #1
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f023 030a 	bic.w	r3, r3, #10
 8006e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b087      	sub	sp, #28
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	f023 0210 	bic.w	r2, r3, #16
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	031b      	lsls	r3, r3, #12
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	621a      	str	r2, [r3, #32]
}
 8006eba:	bf00      	nop
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	f043 0307 	orr.w	r3, r3, #7
 8006ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	609a      	str	r2, [r3, #8]
}
 8006ef0:	bf00      	nop
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	021a      	lsls	r2, r3, #8
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	609a      	str	r2, [r3, #8]
}
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e068      	b.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a2e      	ldr	r2, [pc, #184]	@ (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a2d      	ldr	r2, [pc, #180]	@ (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d108      	bne.n	8006f9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d01d      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc6:	d018      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800703c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d013      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8007040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00e      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a18      	ldr	r2, [pc, #96]	@ (8007044 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d009      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a13      	ldr	r2, [pc, #76]	@ (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d004      	beq.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a14      	ldr	r2, [pc, #80]	@ (8007048 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d10c      	bne.n	8007014 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	4313      	orrs	r3, r2
 800700a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40012c00 	.word	0x40012c00
 8007038:	40013400 	.word	0x40013400
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800
 8007044:	40000c00 	.word	0x40000c00
 8007048:	40014000 	.word	0x40014000

0800704c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e042      	b.n	8007120 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d106      	bne.n	80070b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7fa f987 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2224      	movs	r2, #36	@ 0x24
 80070b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fb24 	bl	8007720 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f825 	bl	8007128 <UART_SetConfig>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e01b      	b.n	8007120 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0201 	orr.w	r2, r2, #1
 8007116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fba3 	bl	8007864 <UART_CheckIdleState>
 800711e:	4603      	mov	r3, r0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800712c:	b08c      	sub	sp, #48	@ 0x30
 800712e:	af00      	add	r7, sp, #0
 8007130:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	431a      	orrs	r2, r3
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	431a      	orrs	r2, r3
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	4313      	orrs	r3, r2
 800714e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4baa      	ldr	r3, [pc, #680]	@ (8007400 <UART_SetConfig+0x2d8>)
 8007158:	4013      	ands	r3, r2
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007160:	430b      	orrs	r3, r1
 8007162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a9f      	ldr	r2, [pc, #636]	@ (8007404 <UART_SetConfig+0x2dc>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007190:	4313      	orrs	r3, r2
 8007192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800719e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071a8:	430b      	orrs	r3, r1
 80071aa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b2:	f023 010f 	bic.w	r1, r3, #15
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a90      	ldr	r2, [pc, #576]	@ (8007408 <UART_SetConfig+0x2e0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d125      	bne.n	8007218 <UART_SetConfig+0xf0>
 80071cc:	4b8f      	ldr	r3, [pc, #572]	@ (800740c <UART_SetConfig+0x2e4>)
 80071ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d81a      	bhi.n	8007210 <UART_SetConfig+0xe8>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <UART_SetConfig+0xb8>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	080071f1 	.word	0x080071f1
 80071e4:	08007201 	.word	0x08007201
 80071e8:	080071f9 	.word	0x080071f9
 80071ec:	08007209 	.word	0x08007209
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f6:	e116      	b.n	8007426 <UART_SetConfig+0x2fe>
 80071f8:	2302      	movs	r3, #2
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fe:	e112      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007200:	2304      	movs	r3, #4
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007206:	e10e      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007208:	2308      	movs	r3, #8
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800720e:	e10a      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007210:	2310      	movs	r3, #16
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007216:	e106      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a7c      	ldr	r2, [pc, #496]	@ (8007410 <UART_SetConfig+0x2e8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d138      	bne.n	8007294 <UART_SetConfig+0x16c>
 8007222:	4b7a      	ldr	r3, [pc, #488]	@ (800740c <UART_SetConfig+0x2e4>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007228:	f003 030c 	and.w	r3, r3, #12
 800722c:	2b0c      	cmp	r3, #12
 800722e:	d82d      	bhi.n	800728c <UART_SetConfig+0x164>
 8007230:	a201      	add	r2, pc, #4	@ (adr r2, 8007238 <UART_SetConfig+0x110>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	0800726d 	.word	0x0800726d
 800723c:	0800728d 	.word	0x0800728d
 8007240:	0800728d 	.word	0x0800728d
 8007244:	0800728d 	.word	0x0800728d
 8007248:	0800727d 	.word	0x0800727d
 800724c:	0800728d 	.word	0x0800728d
 8007250:	0800728d 	.word	0x0800728d
 8007254:	0800728d 	.word	0x0800728d
 8007258:	08007275 	.word	0x08007275
 800725c:	0800728d 	.word	0x0800728d
 8007260:	0800728d 	.word	0x0800728d
 8007264:	0800728d 	.word	0x0800728d
 8007268:	08007285 	.word	0x08007285
 800726c:	2300      	movs	r3, #0
 800726e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007272:	e0d8      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007274:	2302      	movs	r3, #2
 8007276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800727a:	e0d4      	b.n	8007426 <UART_SetConfig+0x2fe>
 800727c:	2304      	movs	r3, #4
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007282:	e0d0      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007284:	2308      	movs	r3, #8
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800728a:	e0cc      	b.n	8007426 <UART_SetConfig+0x2fe>
 800728c:	2310      	movs	r3, #16
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007292:	e0c8      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a5e      	ldr	r2, [pc, #376]	@ (8007414 <UART_SetConfig+0x2ec>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d125      	bne.n	80072ea <UART_SetConfig+0x1c2>
 800729e:	4b5b      	ldr	r3, [pc, #364]	@ (800740c <UART_SetConfig+0x2e4>)
 80072a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80072a8:	2b30      	cmp	r3, #48	@ 0x30
 80072aa:	d016      	beq.n	80072da <UART_SetConfig+0x1b2>
 80072ac:	2b30      	cmp	r3, #48	@ 0x30
 80072ae:	d818      	bhi.n	80072e2 <UART_SetConfig+0x1ba>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d00a      	beq.n	80072ca <UART_SetConfig+0x1a2>
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d814      	bhi.n	80072e2 <UART_SetConfig+0x1ba>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <UART_SetConfig+0x19a>
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d008      	beq.n	80072d2 <UART_SetConfig+0x1aa>
 80072c0:	e00f      	b.n	80072e2 <UART_SetConfig+0x1ba>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072c8:	e0ad      	b.n	8007426 <UART_SetConfig+0x2fe>
 80072ca:	2302      	movs	r3, #2
 80072cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072d0:	e0a9      	b.n	8007426 <UART_SetConfig+0x2fe>
 80072d2:	2304      	movs	r3, #4
 80072d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072d8:	e0a5      	b.n	8007426 <UART_SetConfig+0x2fe>
 80072da:	2308      	movs	r3, #8
 80072dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072e0:	e0a1      	b.n	8007426 <UART_SetConfig+0x2fe>
 80072e2:	2310      	movs	r3, #16
 80072e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072e8:	e09d      	b.n	8007426 <UART_SetConfig+0x2fe>
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a4a      	ldr	r2, [pc, #296]	@ (8007418 <UART_SetConfig+0x2f0>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d125      	bne.n	8007340 <UART_SetConfig+0x218>
 80072f4:	4b45      	ldr	r3, [pc, #276]	@ (800740c <UART_SetConfig+0x2e4>)
 80072f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80072fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007300:	d016      	beq.n	8007330 <UART_SetConfig+0x208>
 8007302:	2bc0      	cmp	r3, #192	@ 0xc0
 8007304:	d818      	bhi.n	8007338 <UART_SetConfig+0x210>
 8007306:	2b80      	cmp	r3, #128	@ 0x80
 8007308:	d00a      	beq.n	8007320 <UART_SetConfig+0x1f8>
 800730a:	2b80      	cmp	r3, #128	@ 0x80
 800730c:	d814      	bhi.n	8007338 <UART_SetConfig+0x210>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <UART_SetConfig+0x1f0>
 8007312:	2b40      	cmp	r3, #64	@ 0x40
 8007314:	d008      	beq.n	8007328 <UART_SetConfig+0x200>
 8007316:	e00f      	b.n	8007338 <UART_SetConfig+0x210>
 8007318:	2300      	movs	r3, #0
 800731a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800731e:	e082      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007320:	2302      	movs	r3, #2
 8007322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007326:	e07e      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007328:	2304      	movs	r3, #4
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800732e:	e07a      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007330:	2308      	movs	r3, #8
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007336:	e076      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007338:	2310      	movs	r3, #16
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800733e:	e072      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a35      	ldr	r2, [pc, #212]	@ (800741c <UART_SetConfig+0x2f4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d12a      	bne.n	80073a0 <UART_SetConfig+0x278>
 800734a:	4b30      	ldr	r3, [pc, #192]	@ (800740c <UART_SetConfig+0x2e4>)
 800734c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007350:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007354:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007358:	d01a      	beq.n	8007390 <UART_SetConfig+0x268>
 800735a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800735e:	d81b      	bhi.n	8007398 <UART_SetConfig+0x270>
 8007360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007364:	d00c      	beq.n	8007380 <UART_SetConfig+0x258>
 8007366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800736a:	d815      	bhi.n	8007398 <UART_SetConfig+0x270>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <UART_SetConfig+0x250>
 8007370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007374:	d008      	beq.n	8007388 <UART_SetConfig+0x260>
 8007376:	e00f      	b.n	8007398 <UART_SetConfig+0x270>
 8007378:	2300      	movs	r3, #0
 800737a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800737e:	e052      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007380:	2302      	movs	r3, #2
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007386:	e04e      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007388:	2304      	movs	r3, #4
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738e:	e04a      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007396:	e046      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800739e:	e042      	b.n	8007426 <UART_SetConfig+0x2fe>
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a17      	ldr	r2, [pc, #92]	@ (8007404 <UART_SetConfig+0x2dc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d13a      	bne.n	8007420 <UART_SetConfig+0x2f8>
 80073aa:	4b18      	ldr	r3, [pc, #96]	@ (800740c <UART_SetConfig+0x2e4>)
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80073b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073b8:	d01a      	beq.n	80073f0 <UART_SetConfig+0x2c8>
 80073ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073be:	d81b      	bhi.n	80073f8 <UART_SetConfig+0x2d0>
 80073c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073c4:	d00c      	beq.n	80073e0 <UART_SetConfig+0x2b8>
 80073c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073ca:	d815      	bhi.n	80073f8 <UART_SetConfig+0x2d0>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <UART_SetConfig+0x2b0>
 80073d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d4:	d008      	beq.n	80073e8 <UART_SetConfig+0x2c0>
 80073d6:	e00f      	b.n	80073f8 <UART_SetConfig+0x2d0>
 80073d8:	2300      	movs	r3, #0
 80073da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073de:	e022      	b.n	8007426 <UART_SetConfig+0x2fe>
 80073e0:	2302      	movs	r3, #2
 80073e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e6:	e01e      	b.n	8007426 <UART_SetConfig+0x2fe>
 80073e8:	2304      	movs	r3, #4
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ee:	e01a      	b.n	8007426 <UART_SetConfig+0x2fe>
 80073f0:	2308      	movs	r3, #8
 80073f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073f6:	e016      	b.n	8007426 <UART_SetConfig+0x2fe>
 80073f8:	2310      	movs	r3, #16
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073fe:	e012      	b.n	8007426 <UART_SetConfig+0x2fe>
 8007400:	cfff69f3 	.word	0xcfff69f3
 8007404:	40008000 	.word	0x40008000
 8007408:	40013800 	.word	0x40013800
 800740c:	40021000 	.word	0x40021000
 8007410:	40004400 	.word	0x40004400
 8007414:	40004800 	.word	0x40004800
 8007418:	40004c00 	.word	0x40004c00
 800741c:	40005000 	.word	0x40005000
 8007420:	2310      	movs	r3, #16
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4aae      	ldr	r2, [pc, #696]	@ (80076e4 <UART_SetConfig+0x5bc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	f040 8097 	bne.w	8007560 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007432:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007436:	2b08      	cmp	r3, #8
 8007438:	d823      	bhi.n	8007482 <UART_SetConfig+0x35a>
 800743a:	a201      	add	r2, pc, #4	@ (adr r2, 8007440 <UART_SetConfig+0x318>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007465 	.word	0x08007465
 8007444:	08007483 	.word	0x08007483
 8007448:	0800746d 	.word	0x0800746d
 800744c:	08007483 	.word	0x08007483
 8007450:	08007473 	.word	0x08007473
 8007454:	08007483 	.word	0x08007483
 8007458:	08007483 	.word	0x08007483
 800745c:	08007483 	.word	0x08007483
 8007460:	0800747b 	.word	0x0800747b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007464:	f7fe fb0e 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 8007468:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800746a:	e010      	b.n	800748e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800746c:	4b9e      	ldr	r3, [pc, #632]	@ (80076e8 <UART_SetConfig+0x5c0>)
 800746e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007470:	e00d      	b.n	800748e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007472:	f7fe fa6f 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8007476:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007478:	e009      	b.n	800748e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800747a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800747e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007480:	e005      	b.n	800748e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800748c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 8130 	beq.w	80076f6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749a:	4a94      	ldr	r2, [pc, #592]	@ (80076ec <UART_SetConfig+0x5c4>)
 800749c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	4413      	add	r3, r2
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d305      	bcc.n	80074c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d903      	bls.n	80074ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074cc:	e113      	b.n	80076f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d0:	2200      	movs	r2, #0
 80074d2:	60bb      	str	r3, [r7, #8]
 80074d4:	60fa      	str	r2, [r7, #12]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074da:	4a84      	ldr	r2, [pc, #528]	@ (80076ec <UART_SetConfig+0x5c4>)
 80074dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2200      	movs	r2, #0
 80074e4:	603b      	str	r3, [r7, #0]
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074f0:	f7f8 fe84 	bl	80001fc <__aeabi_uldivmod>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4610      	mov	r0, r2
 80074fa:	4619      	mov	r1, r3
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	020b      	lsls	r3, r1, #8
 8007506:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800750a:	0202      	lsls	r2, r0, #8
 800750c:	6979      	ldr	r1, [r7, #20]
 800750e:	6849      	ldr	r1, [r1, #4]
 8007510:	0849      	lsrs	r1, r1, #1
 8007512:	2000      	movs	r0, #0
 8007514:	460c      	mov	r4, r1
 8007516:	4605      	mov	r5, r0
 8007518:	eb12 0804 	adds.w	r8, r2, r4
 800751c:	eb43 0905 	adc.w	r9, r3, r5
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	469a      	mov	sl, r3
 8007528:	4693      	mov	fp, r2
 800752a:	4652      	mov	r2, sl
 800752c:	465b      	mov	r3, fp
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7f8 fe63 	bl	80001fc <__aeabi_uldivmod>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4613      	mov	r3, r2
 800753c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007544:	d308      	bcc.n	8007558 <UART_SetConfig+0x430>
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800754c:	d204      	bcs.n	8007558 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a3a      	ldr	r2, [r7, #32]
 8007554:	60da      	str	r2, [r3, #12]
 8007556:	e0ce      	b.n	80076f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800755e:	e0ca      	b.n	80076f6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007568:	d166      	bne.n	8007638 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800756a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800756e:	2b08      	cmp	r3, #8
 8007570:	d827      	bhi.n	80075c2 <UART_SetConfig+0x49a>
 8007572:	a201      	add	r2, pc, #4	@ (adr r2, 8007578 <UART_SetConfig+0x450>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	0800759d 	.word	0x0800759d
 800757c:	080075a5 	.word	0x080075a5
 8007580:	080075ad 	.word	0x080075ad
 8007584:	080075c3 	.word	0x080075c3
 8007588:	080075b3 	.word	0x080075b3
 800758c:	080075c3 	.word	0x080075c3
 8007590:	080075c3 	.word	0x080075c3
 8007594:	080075c3 	.word	0x080075c3
 8007598:	080075bb 	.word	0x080075bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800759c:	f7fe fa72 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 80075a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075a2:	e014      	b.n	80075ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075a4:	f7fe fa84 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 80075a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075aa:	e010      	b.n	80075ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ac:	4b4e      	ldr	r3, [pc, #312]	@ (80076e8 <UART_SetConfig+0x5c0>)
 80075ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075b0:	e00d      	b.n	80075ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075b2:	f7fe f9cf 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 80075b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075b8:	e009      	b.n	80075ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075c0:	e005      	b.n	80075ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8090 	beq.w	80076f6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075da:	4a44      	ldr	r2, [pc, #272]	@ (80076ec <UART_SetConfig+0x5c4>)
 80075dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80075e8:	005a      	lsls	r2, r3, #1
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	085b      	lsrs	r3, r3, #1
 80075f0:	441a      	add	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	2b0f      	cmp	r3, #15
 8007600:	d916      	bls.n	8007630 <UART_SetConfig+0x508>
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007608:	d212      	bcs.n	8007630 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f023 030f 	bic.w	r3, r3, #15
 8007612:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	b29b      	uxth	r3, r3
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	b29a      	uxth	r2, r3
 8007620:	8bfb      	ldrh	r3, [r7, #30]
 8007622:	4313      	orrs	r3, r2
 8007624:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	8bfa      	ldrh	r2, [r7, #30]
 800762c:	60da      	str	r2, [r3, #12]
 800762e:	e062      	b.n	80076f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007636:	e05e      	b.n	80076f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007638:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800763c:	2b08      	cmp	r3, #8
 800763e:	d828      	bhi.n	8007692 <UART_SetConfig+0x56a>
 8007640:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <UART_SetConfig+0x520>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	0800766d 	.word	0x0800766d
 800764c:	08007675 	.word	0x08007675
 8007650:	0800767d 	.word	0x0800767d
 8007654:	08007693 	.word	0x08007693
 8007658:	08007683 	.word	0x08007683
 800765c:	08007693 	.word	0x08007693
 8007660:	08007693 	.word	0x08007693
 8007664:	08007693 	.word	0x08007693
 8007668:	0800768b 	.word	0x0800768b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800766c:	f7fe fa0a 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 8007670:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007672:	e014      	b.n	800769e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007674:	f7fe fa1c 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 8007678:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800767a:	e010      	b.n	800769e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800767c:	4b1a      	ldr	r3, [pc, #104]	@ (80076e8 <UART_SetConfig+0x5c0>)
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007680:	e00d      	b.n	800769e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007682:	f7fe f967 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8007686:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007688:	e009      	b.n	800769e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800768e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007690:	e005      	b.n	800769e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800769c:	bf00      	nop
    }

    if (pclk != 0U)
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d028      	beq.n	80076f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a8:	4a10      	ldr	r2, [pc, #64]	@ (80076ec <UART_SetConfig+0x5c4>)
 80076aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ae:	461a      	mov	r2, r3
 80076b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	441a      	add	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	d910      	bls.n	80076f0 <UART_SetConfig+0x5c8>
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076d4:	d20c      	bcs.n	80076f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	b29a      	uxth	r2, r3
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60da      	str	r2, [r3, #12]
 80076e0:	e009      	b.n	80076f6 <UART_SetConfig+0x5ce>
 80076e2:	bf00      	nop
 80076e4:	40008000 	.word	0x40008000
 80076e8:	00f42400 	.word	0x00f42400
 80076ec:	0800bf14 	.word	0x0800bf14
      }
      else
      {
        ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2201      	movs	r2, #1
 8007702:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2200      	movs	r2, #0
 800770a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2200      	movs	r2, #0
 8007710:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007712:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007716:	4618      	mov	r0, r3
 8007718:	3730      	adds	r7, #48	@ 0x30
 800771a:	46bd      	mov	sp, r7
 800771c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00a      	beq.n	800774a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b4:	f003 0310 	and.w	r3, r3, #16
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01a      	beq.n	8007836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800781a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800781e:	d10a      	bne.n	8007836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	605a      	str	r2, [r3, #4]
  }
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b098      	sub	sp, #96	@ 0x60
 8007868:	af02      	add	r7, sp, #8
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007874:	f7f9 fedc 	bl	8001630 <HAL_GetTick>
 8007878:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b08      	cmp	r3, #8
 8007886:	d12f      	bne.n	80078e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007888:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007890:	2200      	movs	r2, #0
 8007892:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f88e 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d022      	beq.n	80078e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e6      	bne.n	80078a2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e063      	b.n	80079b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d149      	bne.n	800798a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078fe:	2200      	movs	r2, #0
 8007900:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f857 	bl	80079b8 <UART_WaitOnFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d03c      	beq.n	800798a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	623b      	str	r3, [r7, #32]
   return(result);
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800792e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007930:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e6      	bne.n	8007910 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3308      	adds	r3, #8
 8007948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	60fb      	str	r3, [r7, #12]
   return(result);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3308      	adds	r3, #8
 8007960:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007962:	61fa      	str	r2, [r7, #28]
 8007964:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	69b9      	ldr	r1, [r7, #24]
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	617b      	str	r3, [r7, #20]
   return(result);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e5      	bne.n	8007942 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e012      	b.n	80079b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3758      	adds	r7, #88	@ 0x58
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c8:	e049      	b.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079d0:	d045      	beq.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d2:	f7f9 fe2d 	bl	8001630 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d302      	bcc.n	80079e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e048      	b.n	8007a7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d031      	beq.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d110      	bne.n	8007a2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f838 	bl	8007a86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2208      	movs	r2, #8
 8007a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e029      	b.n	8007a7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a38:	d111      	bne.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 f81e 	bl	8007a86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e00f      	b.n	8007a7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69da      	ldr	r2, [r3, #28]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	4013      	ands	r3, r2
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	bf0c      	ite	eq
 8007a6e:	2301      	moveq	r3, #1
 8007a70:	2300      	movne	r3, #0
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	461a      	mov	r2, r3
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d0a6      	beq.n	80079ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b095      	sub	sp, #84	@ 0x54
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aac:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e6      	bne.n	8007a8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ad6:	f023 0301 	bic.w	r3, r3, #1
 8007ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e3      	bne.n	8007ac0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d118      	bne.n	8007b32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f023 0310 	bic.w	r3, r3, #16
 8007b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b1e:	61bb      	str	r3, [r7, #24]
 8007b20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	6979      	ldr	r1, [r7, #20]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e6      	bne.n	8007b00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b46:	bf00      	nop
 8007b48:	3754      	adds	r7, #84	@ 0x54
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e027      	b.n	8007bb8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2224      	movs	r2, #36	@ 0x24
 8007b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e02d      	b.n	8007c38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2224      	movs	r2, #36	@ 0x24
 8007be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0201 	bic.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f84f 	bl	8007cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e02d      	b.n	8007cb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2224      	movs	r2, #36	@ 0x24
 8007c64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0201 	bic.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f811 	bl	8007cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d108      	bne.n	8007cde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cdc:	e031      	b.n	8007d42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cde:	2308      	movs	r3, #8
 8007ce0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	0e5b      	lsrs	r3, r3, #25
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	0f5b      	lsrs	r3, r3, #29
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	7b3a      	ldrb	r2, [r7, #12]
 8007d0a:	4911      	ldr	r1, [pc, #68]	@ (8007d50 <UARTEx_SetNbDataToProcess+0x94>)
 8007d0c:	5c8a      	ldrb	r2, [r1, r2]
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d12:	7b3a      	ldrb	r2, [r7, #12]
 8007d14:	490f      	ldr	r1, [pc, #60]	@ (8007d54 <UARTEx_SetNbDataToProcess+0x98>)
 8007d16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d18:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	7b7a      	ldrb	r2, [r7, #13]
 8007d28:	4909      	ldr	r1, [pc, #36]	@ (8007d50 <UARTEx_SetNbDataToProcess+0x94>)
 8007d2a:	5c8a      	ldrb	r2, [r1, r2]
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d30:	7b7a      	ldrb	r2, [r7, #13]
 8007d32:	4908      	ldr	r1, [pc, #32]	@ (8007d54 <UARTEx_SetNbDataToProcess+0x98>)
 8007d34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d36:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	0800bf2c 	.word	0x0800bf2c
 8007d54:	0800bf34 	.word	0x0800bf34

08007d58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d58:	b084      	sub	sp, #16
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	f107 001c 	add.w	r0, r7, #28
 8007d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 fa1c 	bl	80091b4 <USB_CoreReset>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d92:	e005      	b.n	8007da0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dac:	b004      	add	sp, #16
 8007dae:	4770      	bx	lr

08007db0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007dbe:	79fb      	ldrb	r3, [r7, #7]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d165      	bne.n	8007e90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4a3e      	ldr	r2, [pc, #248]	@ (8007ec0 <USB_SetTurnaroundTime+0x110>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d906      	bls.n	8007dda <USB_SetTurnaroundTime+0x2a>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	4a3d      	ldr	r2, [pc, #244]	@ (8007ec4 <USB_SetTurnaroundTime+0x114>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d202      	bcs.n	8007dda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007dd4:	230f      	movs	r3, #15
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	e05c      	b.n	8007e94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	4a39      	ldr	r2, [pc, #228]	@ (8007ec4 <USB_SetTurnaroundTime+0x114>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d306      	bcc.n	8007df0 <USB_SetTurnaroundTime+0x40>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	4a38      	ldr	r2, [pc, #224]	@ (8007ec8 <USB_SetTurnaroundTime+0x118>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d202      	bcs.n	8007df0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007dea:	230e      	movs	r3, #14
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	e051      	b.n	8007e94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4a35      	ldr	r2, [pc, #212]	@ (8007ec8 <USB_SetTurnaroundTime+0x118>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d306      	bcc.n	8007e06 <USB_SetTurnaroundTime+0x56>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4a34      	ldr	r2, [pc, #208]	@ (8007ecc <USB_SetTurnaroundTime+0x11c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d202      	bcs.n	8007e06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e00:	230d      	movs	r3, #13
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e046      	b.n	8007e94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	4a30      	ldr	r2, [pc, #192]	@ (8007ecc <USB_SetTurnaroundTime+0x11c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d306      	bcc.n	8007e1c <USB_SetTurnaroundTime+0x6c>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	4a2f      	ldr	r2, [pc, #188]	@ (8007ed0 <USB_SetTurnaroundTime+0x120>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d802      	bhi.n	8007e1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007e16:	230c      	movs	r3, #12
 8007e18:	617b      	str	r3, [r7, #20]
 8007e1a:	e03b      	b.n	8007e94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8007ed0 <USB_SetTurnaroundTime+0x120>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d906      	bls.n	8007e32 <USB_SetTurnaroundTime+0x82>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	4a2b      	ldr	r2, [pc, #172]	@ (8007ed4 <USB_SetTurnaroundTime+0x124>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d802      	bhi.n	8007e32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007e2c:	230b      	movs	r3, #11
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	e030      	b.n	8007e94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	4a27      	ldr	r2, [pc, #156]	@ (8007ed4 <USB_SetTurnaroundTime+0x124>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d906      	bls.n	8007e48 <USB_SetTurnaroundTime+0x98>
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	4a26      	ldr	r2, [pc, #152]	@ (8007ed8 <USB_SetTurnaroundTime+0x128>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d802      	bhi.n	8007e48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e42:	230a      	movs	r3, #10
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	e025      	b.n	8007e94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4a23      	ldr	r2, [pc, #140]	@ (8007ed8 <USB_SetTurnaroundTime+0x128>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d906      	bls.n	8007e5e <USB_SetTurnaroundTime+0xae>
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4a22      	ldr	r2, [pc, #136]	@ (8007edc <USB_SetTurnaroundTime+0x12c>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d202      	bcs.n	8007e5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007e58:	2309      	movs	r3, #9
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e01a      	b.n	8007e94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	4a1e      	ldr	r2, [pc, #120]	@ (8007edc <USB_SetTurnaroundTime+0x12c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d306      	bcc.n	8007e74 <USB_SetTurnaroundTime+0xc4>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee0 <USB_SetTurnaroundTime+0x130>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d802      	bhi.n	8007e74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e6e:	2308      	movs	r3, #8
 8007e70:	617b      	str	r3, [r7, #20]
 8007e72:	e00f      	b.n	8007e94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4a1a      	ldr	r2, [pc, #104]	@ (8007ee0 <USB_SetTurnaroundTime+0x130>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d906      	bls.n	8007e8a <USB_SetTurnaroundTime+0xda>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4a19      	ldr	r2, [pc, #100]	@ (8007ee4 <USB_SetTurnaroundTime+0x134>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d202      	bcs.n	8007e8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e84:	2307      	movs	r3, #7
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	e004      	b.n	8007e94 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007e8a:	2306      	movs	r3, #6
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	e001      	b.n	8007e94 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007e90:	2309      	movs	r3, #9
 8007e92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68da      	ldr	r2, [r3, #12]
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	029b      	lsls	r3, r3, #10
 8007ea8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007eac:	431a      	orrs	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	00d8acbf 	.word	0x00d8acbf
 8007ec4:	00e4e1c0 	.word	0x00e4e1c0
 8007ec8:	00f42400 	.word	0x00f42400
 8007ecc:	01067380 	.word	0x01067380
 8007ed0:	011a499f 	.word	0x011a499f
 8007ed4:	01312cff 	.word	0x01312cff
 8007ed8:	014ca43f 	.word	0x014ca43f
 8007edc:	016e3600 	.word	0x016e3600
 8007ee0:	01a6ab1f 	.word	0x01a6ab1f
 8007ee4:	01e84800 	.word	0x01e84800

08007ee8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f043 0201 	orr.w	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f023 0201 	bic.w	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d115      	bne.n	8007f7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	f7f9 fb74 	bl	8001648 <HAL_Delay>
      ms++;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3301      	adds	r3, #1
 8007f64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 f8ab 	bl	80090c2 <USB_GetMode>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d01e      	beq.n	8007fb0 <USB_SetCurrentMode+0x84>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b31      	cmp	r3, #49	@ 0x31
 8007f76:	d9f0      	bls.n	8007f5a <USB_SetCurrentMode+0x2e>
 8007f78:	e01a      	b.n	8007fb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d115      	bne.n	8007fac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	f7f9 fb5b 	bl	8001648 <HAL_Delay>
      ms++;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3301      	adds	r3, #1
 8007f96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 f892 	bl	80090c2 <USB_GetMode>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d005      	beq.n	8007fb0 <USB_SetCurrentMode+0x84>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b31      	cmp	r3, #49	@ 0x31
 8007fa8:	d9f0      	bls.n	8007f8c <USB_SetCurrentMode+0x60>
 8007faa:	e001      	b.n	8007fb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e005      	b.n	8007fbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b32      	cmp	r3, #50	@ 0x32
 8007fb4:	d101      	bne.n	8007fba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e000      	b.n	8007fbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b086      	sub	sp, #24
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007fde:	2300      	movs	r3, #0
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	e009      	b.n	8007ff8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	3340      	adds	r3, #64	@ 0x40
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	2200      	movs	r2, #0
 8007ff0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	613b      	str	r3, [r7, #16]
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b0e      	cmp	r3, #14
 8007ffc:	d9f2      	bls.n	8007fe4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008000:	2b00      	cmp	r3, #0
 8008002:	d11c      	bne.n	800803e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008012:	f043 0302 	orr.w	r3, r3, #2
 8008016:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	e005      	b.n	800804a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008042:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008050:	461a      	mov	r2, r3
 8008052:	2300      	movs	r3, #0
 8008054:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008056:	2103      	movs	r1, #3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f959 	bl	8008310 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800805e:	2110      	movs	r1, #16
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f8f1 	bl	8008248 <USB_FlushTxFifo>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f91d 	bl	80082b0 <USB_FlushRxFifo>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008086:	461a      	mov	r2, r3
 8008088:	2300      	movs	r3, #0
 800808a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008092:	461a      	mov	r2, r3
 8008094:	2300      	movs	r3, #0
 8008096:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800809e:	461a      	mov	r2, r3
 80080a0:	2300      	movs	r3, #0
 80080a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080a4:	2300      	movs	r3, #0
 80080a6:	613b      	str	r3, [r7, #16]
 80080a8:	e043      	b.n	8008132 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080c0:	d118      	bne.n	80080f4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d4:	461a      	mov	r2, r3
 80080d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	e013      	b.n	8008106 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ea:	461a      	mov	r2, r3
 80080ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	e008      	b.n	8008106 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008100:	461a      	mov	r2, r3
 8008102:	2300      	movs	r3, #0
 8008104:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008112:	461a      	mov	r2, r3
 8008114:	2300      	movs	r3, #0
 8008116:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008124:	461a      	mov	r2, r3
 8008126:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800812a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	3301      	adds	r3, #1
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	429a      	cmp	r2, r3
 8008138:	d3b7      	bcc.n	80080aa <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800813a:	2300      	movs	r3, #0
 800813c:	613b      	str	r3, [r7, #16]
 800813e:	e043      	b.n	80081c8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008152:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008156:	d118      	bne.n	800818a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800816a:	461a      	mov	r2, r3
 800816c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	e013      	b.n	800819c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008180:	461a      	mov	r2, r3
 8008182:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008186:	6013      	str	r3, [r2, #0]
 8008188:	e008      	b.n	800819c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008196:	461a      	mov	r2, r3
 8008198:	2300      	movs	r3, #0
 800819a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a8:	461a      	mov	r2, r3
 80081aa:	2300      	movs	r3, #0
 80081ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ba:	461a      	mov	r2, r3
 80081bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	3301      	adds	r3, #1
 80081c6:	613b      	str	r3, [r7, #16]
 80081c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d3b7      	bcc.n	8008140 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80081f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	f043 0210 	orr.w	r2, r3, #16
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699a      	ldr	r2, [r3, #24]
 8008202:	4b10      	ldr	r3, [pc, #64]	@ (8008244 <USB_DevInit+0x280>)
 8008204:	4313      	orrs	r3, r2
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800820a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	f043 0208 	orr.w	r2, r3, #8
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800821c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800821e:	2b01      	cmp	r3, #1
 8008220:	d107      	bne.n	8008232 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800822a:	f043 0304 	orr.w	r3, r3, #4
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008232:	7dfb      	ldrb	r3, [r7, #23]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800823e:	b004      	add	sp, #16
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	803c3800 	.word	0x803c3800

08008248 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3301      	adds	r3, #1
 800825a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4a13      	ldr	r2, [pc, #76]	@ (80082ac <USB_FlushTxFifo+0x64>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d901      	bls.n	8008268 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e01b      	b.n	80082a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	daf2      	bge.n	8008256 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	019b      	lsls	r3, r3, #6
 8008278:	f043 0220 	orr.w	r2, r3, #32
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3301      	adds	r3, #1
 8008284:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4a08      	ldr	r2, [pc, #32]	@ (80082ac <USB_FlushTxFifo+0x64>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d901      	bls.n	8008292 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e006      	b.n	80082a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b20      	cmp	r3, #32
 800829c:	d0f0      	beq.n	8008280 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	00030d40 	.word	0x00030d40

080082b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3301      	adds	r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4a11      	ldr	r2, [pc, #68]	@ (800830c <USB_FlushRxFifo+0x5c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d901      	bls.n	80082ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e018      	b.n	8008300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	daf2      	bge.n	80082bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2210      	movs	r2, #16
 80082de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
 80082e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a08      	ldr	r2, [pc, #32]	@ (800830c <USB_FlushRxFifo+0x5c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d901      	bls.n	80082f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e006      	b.n	8008300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0310 	and.w	r3, r3, #16
 80082fa:	2b10      	cmp	r3, #16
 80082fc:	d0f0      	beq.n	80082e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	00030d40 	.word	0x00030d40

08008310 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008330:	4313      	orrs	r3, r2
 8008332:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008342:	b480      	push	{r7}
 8008344:	b087      	sub	sp, #28
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f003 0306 	and.w	r3, r3, #6
 800835a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b02      	cmp	r3, #2
 8008360:	d002      	beq.n	8008368 <USB_GetDevSpeed+0x26>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b06      	cmp	r3, #6
 8008366:	d102      	bne.n	800836e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008368:	2302      	movs	r3, #2
 800836a:	75fb      	strb	r3, [r7, #23]
 800836c:	e001      	b.n	8008372 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800836e:	230f      	movs	r3, #15
 8008370:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008372:	7dfb      	ldrb	r3, [r7, #23]
}
 8008374:	4618      	mov	r0, r3
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	785b      	ldrb	r3, [r3, #1]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d13a      	bne.n	8008412 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a2:	69da      	ldr	r2, [r3, #28]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f003 030f 	and.w	r3, r3, #15
 80083ac:	2101      	movs	r1, #1
 80083ae:	fa01 f303 	lsl.w	r3, r1, r3
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	68f9      	ldr	r1, [r7, #12]
 80083b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083ba:	4313      	orrs	r3, r2
 80083bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d155      	bne.n	8008480 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	791b      	ldrb	r3, [r3, #4]
 80083ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	059b      	lsls	r3, r3, #22
 80083f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083f8:	4313      	orrs	r3, r2
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	440a      	add	r2, r1
 8008402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800840a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	e036      	b.n	8008480 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008418:	69da      	ldr	r2, [r3, #28]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	f003 030f 	and.w	r3, r3, #15
 8008422:	2101      	movs	r1, #1
 8008424:	fa01 f303 	lsl.w	r3, r1, r3
 8008428:	041b      	lsls	r3, r3, #16
 800842a:	68f9      	ldr	r1, [r7, #12]
 800842c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008430:	4313      	orrs	r3, r2
 8008432:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d11a      	bne.n	8008480 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4413      	add	r3, r2
 8008452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	791b      	ldrb	r3, [r3, #4]
 8008464:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008466:	430b      	orrs	r3, r1
 8008468:	4313      	orrs	r3, r2
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	0151      	lsls	r1, r2, #5
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	440a      	add	r2, r1
 8008472:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800847a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800847e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d161      	bne.n	8008570 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084c2:	d11f      	bne.n	8008504 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	0151      	lsls	r1, r2, #5
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	440a      	add	r2, r1
 80084da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	0151      	lsls	r1, r2, #5
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	440a      	add	r2, r1
 80084fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008502:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800850a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	f003 030f 	and.w	r3, r3, #15
 8008514:	2101      	movs	r1, #1
 8008516:	fa01 f303 	lsl.w	r3, r1, r3
 800851a:	b29b      	uxth	r3, r3
 800851c:	43db      	mvns	r3, r3
 800851e:	68f9      	ldr	r1, [r7, #12]
 8008520:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008524:	4013      	ands	r3, r2
 8008526:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800852e:	69da      	ldr	r2, [r3, #28]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	f003 030f 	and.w	r3, r3, #15
 8008538:	2101      	movs	r1, #1
 800853a:	fa01 f303 	lsl.w	r3, r1, r3
 800853e:	b29b      	uxth	r3, r3
 8008540:	43db      	mvns	r3, r3
 8008542:	68f9      	ldr	r1, [r7, #12]
 8008544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008548:	4013      	ands	r3, r2
 800854a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	0159      	lsls	r1, r3, #5
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	440b      	add	r3, r1
 8008562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008566:	4619      	mov	r1, r3
 8008568:	4b35      	ldr	r3, [pc, #212]	@ (8008640 <USB_DeactivateEndpoint+0x1b0>)
 800856a:	4013      	ands	r3, r2
 800856c:	600b      	str	r3, [r1, #0]
 800856e:	e060      	b.n	8008632 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008582:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008586:	d11f      	bne.n	80085c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	2101      	movs	r1, #1
 80085da:	fa01 f303 	lsl.w	r3, r1, r3
 80085de:	041b      	lsls	r3, r3, #16
 80085e0:	43db      	mvns	r3, r3
 80085e2:	68f9      	ldr	r1, [r7, #12]
 80085e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085e8:	4013      	ands	r3, r2
 80085ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085f2:	69da      	ldr	r2, [r3, #28]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	f003 030f 	and.w	r3, r3, #15
 80085fc:	2101      	movs	r1, #1
 80085fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008602:	041b      	lsls	r3, r3, #16
 8008604:	43db      	mvns	r3, r3
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800860c:	4013      	ands	r3, r2
 800860e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	0159      	lsls	r1, r3, #5
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	440b      	add	r3, r1
 8008626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800862a:	4619      	mov	r1, r3
 800862c:	4b05      	ldr	r3, [pc, #20]	@ (8008644 <USB_DeactivateEndpoint+0x1b4>)
 800862e:	4013      	ands	r3, r2
 8008630:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	ec337800 	.word	0xec337800
 8008644:	eff37800 	.word	0xeff37800

08008648 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	785b      	ldrb	r3, [r3, #1]
 8008660:	2b01      	cmp	r3, #1
 8008662:	f040 8128 	bne.w	80088b6 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d132      	bne.n	80086d4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	0151      	lsls	r1, r2, #5
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	440a      	add	r2, r1
 8008684:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008688:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800868c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	0151      	lsls	r1, r2, #5
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	440a      	add	r2, r1
 80086a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	0151      	lsls	r1, r2, #5
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	440a      	add	r2, r1
 80086c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086cc:	0cdb      	lsrs	r3, r3, #19
 80086ce:	04db      	lsls	r3, r3, #19
 80086d0:	6113      	str	r3, [r2, #16]
 80086d2:	e092      	b.n	80087fa <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	0151      	lsls	r1, r2, #5
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	440a      	add	r2, r1
 80086ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086ee:	0cdb      	lsrs	r3, r3, #19
 80086f0:	04db      	lsls	r3, r3, #19
 80086f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	0151      	lsls	r1, r2, #5
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	440a      	add	r2, r1
 800870a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800870e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008712:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008716:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d11a      	bne.n	8008754 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	691a      	ldr	r2, [r3, #16]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	429a      	cmp	r2, r3
 8008728:	d903      	bls.n	8008732 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	0151      	lsls	r1, r2, #5
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	440a      	add	r2, r1
 8008748:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800874c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008750:	6113      	str	r3, [r2, #16]
 8008752:	e01b      	b.n	800878c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008760:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6919      	ldr	r1, [r3, #16]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	440b      	add	r3, r1
 800876c:	1e59      	subs	r1, r3, #1
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	fbb1 f3f3 	udiv	r3, r1, r3
 8008776:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008778:	4b8d      	ldr	r3, [pc, #564]	@ (80089b0 <USB_EPStartXfer+0x368>)
 800877a:	400b      	ands	r3, r1
 800877c:	6939      	ldr	r1, [r7, #16]
 800877e:	0148      	lsls	r0, r1, #5
 8008780:	6979      	ldr	r1, [r7, #20]
 8008782:	4401      	add	r1, r0
 8008784:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008788:	4313      	orrs	r3, r2
 800878a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087a2:	6939      	ldr	r1, [r7, #16]
 80087a4:	0148      	lsls	r0, r1, #5
 80087a6:	6979      	ldr	r1, [r7, #20]
 80087a8:	4401      	add	r1, r0
 80087aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80087ae:	4313      	orrs	r3, r2
 80087b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	791b      	ldrb	r3, [r3, #4]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d11f      	bne.n	80087fa <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087d4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80087d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	0151      	lsls	r1, r2, #5
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	440a      	add	r2, r1
 80087f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087f8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	0151      	lsls	r1, r2, #5
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	440a      	add	r2, r1
 8008810:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008814:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008818:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	791b      	ldrb	r3, [r3, #4]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d015      	beq.n	800884e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 8139 	beq.w	8008a9e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	f003 030f 	and.w	r3, r3, #15
 800883c:	2101      	movs	r1, #1
 800883e:	fa01 f303 	lsl.w	r3, r1, r3
 8008842:	6979      	ldr	r1, [r7, #20]
 8008844:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008848:	4313      	orrs	r3, r2
 800884a:	634b      	str	r3, [r1, #52]	@ 0x34
 800884c:	e127      	b.n	8008a9e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800885a:	2b00      	cmp	r3, #0
 800885c:	d110      	bne.n	8008880 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	4413      	add	r3, r2
 8008866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	440a      	add	r2, r1
 8008874:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008878:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	e00f      	b.n	80088a0 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	0151      	lsls	r1, r2, #5
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	440a      	add	r2, r1
 8008896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800889a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800889e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	68d9      	ldr	r1, [r3, #12]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f9a6 	bl	8008c00 <USB_WritePacket>
 80088b4:	e0f3      	b.n	8008a9e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088d0:	0cdb      	lsrs	r3, r3, #19
 80088d2:	04db      	lsls	r3, r3, #19
 80088d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80088f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80088f8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d12f      	bne.n	8008960 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	4413      	add	r3, r2
 8008920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800892e:	6939      	ldr	r1, [r7, #16]
 8008930:	0148      	lsls	r0, r1, #5
 8008932:	6979      	ldr	r1, [r7, #20]
 8008934:	4401      	add	r1, r0
 8008936:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800893a:	4313      	orrs	r3, r2
 800893c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	0151      	lsls	r1, r2, #5
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	440a      	add	r2, r1
 8008954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008958:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800895c:	6113      	str	r3, [r2, #16]
 800895e:	e061      	b.n	8008a24 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d125      	bne.n	80089b4 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	4413      	add	r3, r2
 8008970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008974:	691a      	ldr	r2, [r3, #16]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800897e:	6939      	ldr	r1, [r7, #16]
 8008980:	0148      	lsls	r0, r1, #5
 8008982:	6979      	ldr	r1, [r7, #20]
 8008984:	4401      	add	r1, r0
 8008986:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800898a:	4313      	orrs	r3, r2
 800898c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	4413      	add	r3, r2
 8008996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	0151      	lsls	r1, r2, #5
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	440a      	add	r2, r1
 80089a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089ac:	6113      	str	r3, [r2, #16]
 80089ae:	e039      	b.n	8008a24 <USB_EPStartXfer+0x3dc>
 80089b0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	4413      	add	r3, r2
 80089be:	1e5a      	subs	r2, r3, #1
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c8:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	89fa      	ldrh	r2, [r7, #14]
 80089d0:	fb03 f202 	mul.w	r2, r3, r2
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e4:	691a      	ldr	r2, [r3, #16]
 80089e6:	89fb      	ldrh	r3, [r7, #14]
 80089e8:	04d9      	lsls	r1, r3, #19
 80089ea:	4b2f      	ldr	r3, [pc, #188]	@ (8008aa8 <USB_EPStartXfer+0x460>)
 80089ec:	400b      	ands	r3, r1
 80089ee:	6939      	ldr	r1, [r7, #16]
 80089f0:	0148      	lsls	r0, r1, #5
 80089f2:	6979      	ldr	r1, [r7, #20]
 80089f4:	4401      	add	r1, r0
 80089f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80089fa:	4313      	orrs	r3, r2
 80089fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a0a:	691a      	ldr	r2, [r3, #16]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a14:	6939      	ldr	r1, [r7, #16]
 8008a16:	0148      	lsls	r0, r1, #5
 8008a18:	6979      	ldr	r1, [r7, #20]
 8008a1a:	4401      	add	r1, r0
 8008a1c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a20:	4313      	orrs	r3, r2
 8008a22:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	791b      	ldrb	r3, [r3, #4]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d128      	bne.n	8008a7e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d110      	bne.n	8008a5e <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	0151      	lsls	r1, r2, #5
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	440a      	add	r2, r1
 8008a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	e00f      	b.n	8008a7e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	0151      	lsls	r1, r2, #5
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	440a      	add	r2, r1
 8008a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a7c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	0151      	lsls	r1, r2, #5
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	440a      	add	r2, r1
 8008a94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a98:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008a9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	1ff80000 	.word	0x1ff80000

08008aac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	785b      	ldrb	r3, [r3, #1]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d14a      	bne.n	8008b60 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ade:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ae2:	f040 8086 	bne.w	8008bf2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	7812      	ldrb	r2, [r2, #0]
 8008afa:	0151      	lsls	r1, r2, #5
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	440a      	add	r2, r1
 8008b00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b08:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	7812      	ldrb	r2, [r2, #0]
 8008b1e:	0151      	lsls	r1, r2, #5
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	440a      	add	r2, r1
 8008b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3301      	adds	r3, #1
 8008b32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d902      	bls.n	8008b44 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]
          break;
 8008b42:	e056      	b.n	8008bf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b5c:	d0e7      	beq.n	8008b2e <USB_EPStopXfer+0x82>
 8008b5e:	e048      	b.n	8008bf2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b78:	d13b      	bne.n	8008bf2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	7812      	ldrb	r2, [r2, #0]
 8008b8e:	0151      	lsls	r1, r2, #5
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	440a      	add	r2, r1
 8008b94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b9c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	7812      	ldrb	r2, [r2, #0]
 8008bb2:	0151      	lsls	r1, r2, #5
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	440a      	add	r2, r1
 8008bb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d902      	bls.n	8008bd8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	75fb      	strb	r3, [r7, #23]
          break;
 8008bd6:	e00c      	b.n	8008bf2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bf0:	d0e7      	beq.n	8008bc2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b089      	sub	sp, #36	@ 0x24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	460b      	mov	r3, r1
 8008c10:	71fb      	strb	r3, [r7, #7]
 8008c12:	4613      	mov	r3, r2
 8008c14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008c1e:	88bb      	ldrh	r3, [r7, #4]
 8008c20:	3303      	adds	r3, #3
 8008c22:	089b      	lsrs	r3, r3, #2
 8008c24:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008c26:	2300      	movs	r3, #0
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	e018      	b.n	8008c5e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	031a      	lsls	r2, r3, #12
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c38:	461a      	mov	r2, r3
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	3301      	adds	r3, #1
 8008c44:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	3301      	adds	r3, #1
 8008c56:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	61bb      	str	r3, [r7, #24]
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d3e2      	bcc.n	8008c2c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3724      	adds	r7, #36	@ 0x24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b08b      	sub	sp, #44	@ 0x2c
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c8a:	88fb      	ldrh	r3, [r7, #6]
 8008c8c:	089b      	lsrs	r3, r3, #2
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008c92:	88fb      	ldrh	r3, [r7, #6]
 8008c94:	f003 0303 	and.w	r3, r3, #3
 8008c98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
 8008c9e:	e014      	b.n	8008cca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008caa:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cae:	3301      	adds	r3, #1
 8008cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cba:	3301      	adds	r3, #1
 8008cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	623b      	str	r3, [r7, #32]
 8008cca:	6a3a      	ldr	r2, [r7, #32]
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d3e6      	bcc.n	8008ca0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008cd2:	8bfb      	ldrh	r3, [r7, #30]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01e      	beq.n	8008d16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f107 0310 	add.w	r3, r7, #16
 8008ce8:	6812      	ldr	r2, [r2, #0]
 8008cea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfc:	701a      	strb	r2, [r3, #0]
      i++;
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	3301      	adds	r3, #1
 8008d02:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d06:	3301      	adds	r3, #1
 8008d08:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008d0a:	8bfb      	ldrh	r3, [r7, #30]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d10:	8bfb      	ldrh	r3, [r7, #30]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1ea      	bne.n	8008cec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	372c      	adds	r7, #44	@ 0x2c
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d12c      	bne.n	8008d9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	db12      	blt.n	8008d78 <USB_EPSetStall+0x54>
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00f      	beq.n	8008d78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	0151      	lsls	r1, r2, #5
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	440a      	add	r2, r1
 8008d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	0151      	lsls	r1, r2, #5
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	440a      	add	r2, r1
 8008d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	e02b      	b.n	8008df2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	db12      	blt.n	8008dd2 <USB_EPSetStall+0xae>
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00f      	beq.n	8008dd2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	0151      	lsls	r1, r2, #5
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	440a      	add	r2, r1
 8008dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dcc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008dd0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	0151      	lsls	r1, r2, #5
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	440a      	add	r2, r1
 8008de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008df0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	785b      	ldrb	r3, [r3, #1]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d128      	bne.n	8008e6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	0151      	lsls	r1, r2, #5
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	440a      	add	r2, r1
 8008e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	791b      	ldrb	r3, [r3, #4]
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d003      	beq.n	8008e4c <USB_EPClearStall+0x4c>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	791b      	ldrb	r3, [r3, #4]
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d138      	bne.n	8008ebe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	0151      	lsls	r1, r2, #5
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	440a      	add	r2, r1
 8008e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	e027      	b.n	8008ebe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	015a      	lsls	r2, r3, #5
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	4413      	add	r3, r2
 8008e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	0151      	lsls	r1, r2, #5
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	440a      	add	r2, r1
 8008e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	791b      	ldrb	r3, [r3, #4]
 8008e92:	2b03      	cmp	r3, #3
 8008e94:	d003      	beq.n	8008e9e <USB_EPClearStall+0x9e>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	791b      	ldrb	r3, [r3, #4]
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d10f      	bne.n	8008ebe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	0151      	lsls	r1, r2, #5
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	440a      	add	r2, r1
 8008eb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ebc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008eea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008eee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	011b      	lsls	r3, r3, #4
 8008efc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008f00:	68f9      	ldr	r1, [r7, #12]
 8008f02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f06:	4313      	orrs	r3, r2
 8008f08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f32:	f023 0303 	bic.w	r3, r3, #3
 8008f36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f46:	f023 0302 	bic.w	r3, r3, #2
 8008f4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f74:	f023 0303 	bic.w	r3, r3, #3
 8008f78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f88:	f043 0302 	orr.w	r3, r3, #2
 8008f8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b085      	sub	sp, #20
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	0c1b      	lsrs	r3, r3, #16
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	4013      	ands	r3, r2
 8009018:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	b29b      	uxth	r3, r3
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	460b      	mov	r3, r1
 8009034:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4413      	add	r3, r2
 8009042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	4013      	ands	r3, r2
 8009056:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009058:	68bb      	ldr	r3, [r7, #8]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009066:	b480      	push	{r7}
 8009068:	b087      	sub	sp, #28
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009088:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	f003 030f 	and.w	r3, r3, #15
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	fa22 f303 	lsr.w	r3, r2, r3
 8009096:	01db      	lsls	r3, r3, #7
 8009098:	b2db      	uxtb	r3, r3
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	4313      	orrs	r3, r2
 800909e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	4013      	ands	r3, r2
 80090b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090b4:	68bb      	ldr	r3, [r7, #8]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	371c      	adds	r7, #28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b083      	sub	sp, #12
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	f003 0301 	and.w	r3, r3, #1
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	370c      	adds	r7, #12
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80090fc:	f023 0307 	bic.w	r3, r3, #7
 8009100:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009114:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	333c      	adds	r3, #60	@ 0x3c
 8009136:	3304      	adds	r3, #4
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	4a1c      	ldr	r2, [pc, #112]	@ (80091b0 <USB_EP0_OutStart+0x8c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d90a      	bls.n	800915a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009154:	d101      	bne.n	800915a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	e024      	b.n	80091a4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009160:	461a      	mov	r2, r3
 8009162:	2300      	movs	r3, #0
 8009164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009174:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009188:	f043 0318 	orr.w	r3, r3, #24
 800918c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800919c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80091a0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	4f54300a 	.word	0x4f54300a

080091b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3301      	adds	r3, #1
 80091c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4a13      	ldr	r2, [pc, #76]	@ (8009218 <USB_CoreReset+0x64>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d901      	bls.n	80091d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e01b      	b.n	800920a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	daf2      	bge.n	80091c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	f043 0201 	orr.w	r2, r3, #1
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a09      	ldr	r2, [pc, #36]	@ (8009218 <USB_CoreReset+0x64>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d901      	bls.n	80091fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e006      	b.n	800920a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b01      	cmp	r3, #1
 8009206:	d0f0      	beq.n	80091ea <USB_CoreReset+0x36>

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	00030d40 	.word	0x00030d40

0800921c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009228:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800922c:	f002 fdc6 	bl	800bdbc <USBD_static_malloc>
 8009230:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d109      	bne.n	800924c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	32b0      	adds	r2, #176	@ 0xb0
 8009242:	2100      	movs	r1, #0
 8009244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009248:	2302      	movs	r3, #2
 800924a:	e0d4      	b.n	80093f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800924c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009250:	2100      	movs	r1, #0
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f002 fdd0 	bl	800bdf8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	32b0      	adds	r2, #176	@ 0xb0
 8009262:	68f9      	ldr	r1, [r7, #12]
 8009264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	32b0      	adds	r2, #176	@ 0xb0
 8009272:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	7c1b      	ldrb	r3, [r3, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d138      	bne.n	80092f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009284:	4b5e      	ldr	r3, [pc, #376]	@ (8009400 <USBD_CDC_Init+0x1e4>)
 8009286:	7819      	ldrb	r1, [r3, #0]
 8009288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800928c:	2202      	movs	r2, #2
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f002 fb80 	bl	800b994 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009294:	4b5a      	ldr	r3, [pc, #360]	@ (8009400 <USBD_CDC_Init+0x1e4>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	f003 020f 	and.w	r2, r3, #15
 800929c:	6879      	ldr	r1, [r7, #4]
 800929e:	4613      	mov	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4413      	add	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	440b      	add	r3, r1
 80092a8:	3324      	adds	r3, #36	@ 0x24
 80092aa:	2201      	movs	r2, #1
 80092ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092ae:	4b55      	ldr	r3, [pc, #340]	@ (8009404 <USBD_CDC_Init+0x1e8>)
 80092b0:	7819      	ldrb	r1, [r3, #0]
 80092b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092b6:	2202      	movs	r2, #2
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f002 fb6b 	bl	800b994 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092be:	4b51      	ldr	r3, [pc, #324]	@ (8009404 <USBD_CDC_Init+0x1e8>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	f003 020f 	and.w	r2, r3, #15
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092d6:	2201      	movs	r2, #1
 80092d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80092da:	4b4b      	ldr	r3, [pc, #300]	@ (8009408 <USBD_CDC_Init+0x1ec>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	f003 020f 	and.w	r2, r3, #15
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	440b      	add	r3, r1
 80092ee:	3326      	adds	r3, #38	@ 0x26
 80092f0:	2210      	movs	r2, #16
 80092f2:	801a      	strh	r2, [r3, #0]
 80092f4:	e035      	b.n	8009362 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80092f6:	4b42      	ldr	r3, [pc, #264]	@ (8009400 <USBD_CDC_Init+0x1e4>)
 80092f8:	7819      	ldrb	r1, [r3, #0]
 80092fa:	2340      	movs	r3, #64	@ 0x40
 80092fc:	2202      	movs	r2, #2
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f002 fb48 	bl	800b994 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009304:	4b3e      	ldr	r3, [pc, #248]	@ (8009400 <USBD_CDC_Init+0x1e4>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	f003 020f 	and.w	r2, r3, #15
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	4613      	mov	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	440b      	add	r3, r1
 8009318:	3324      	adds	r3, #36	@ 0x24
 800931a:	2201      	movs	r2, #1
 800931c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800931e:	4b39      	ldr	r3, [pc, #228]	@ (8009404 <USBD_CDC_Init+0x1e8>)
 8009320:	7819      	ldrb	r1, [r3, #0]
 8009322:	2340      	movs	r3, #64	@ 0x40
 8009324:	2202      	movs	r2, #2
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f002 fb34 	bl	800b994 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800932c:	4b35      	ldr	r3, [pc, #212]	@ (8009404 <USBD_CDC_Init+0x1e8>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	f003 020f 	and.w	r2, r3, #15
 8009334:	6879      	ldr	r1, [r7, #4]
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	440b      	add	r3, r1
 8009340:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009344:	2201      	movs	r2, #1
 8009346:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009348:	4b2f      	ldr	r3, [pc, #188]	@ (8009408 <USBD_CDC_Init+0x1ec>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	f003 020f 	and.w	r2, r3, #15
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	4613      	mov	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	3326      	adds	r3, #38	@ 0x26
 800935e:	2210      	movs	r2, #16
 8009360:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009362:	4b29      	ldr	r3, [pc, #164]	@ (8009408 <USBD_CDC_Init+0x1ec>)
 8009364:	7819      	ldrb	r1, [r3, #0]
 8009366:	2308      	movs	r3, #8
 8009368:	2203      	movs	r2, #3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f002 fb12 	bl	800b994 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009370:	4b25      	ldr	r3, [pc, #148]	@ (8009408 <USBD_CDC_Init+0x1ec>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	f003 020f 	and.w	r2, r3, #15
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	440b      	add	r3, r1
 8009384:	3324      	adds	r3, #36	@ 0x24
 8009386:	2201      	movs	r2, #1
 8009388:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	33b0      	adds	r3, #176	@ 0xb0
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d101      	bne.n	80093c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80093c0:	2302      	movs	r3, #2
 80093c2:	e018      	b.n	80093f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	7c1b      	ldrb	r3, [r3, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009404 <USBD_CDC_Init+0x1e8>)
 80093ce:	7819      	ldrb	r1, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f002 fc54 	bl	800bc88 <USBD_LL_PrepareReceive>
 80093e0:	e008      	b.n	80093f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093e2:	4b08      	ldr	r3, [pc, #32]	@ (8009404 <USBD_CDC_Init+0x1e8>)
 80093e4:	7819      	ldrb	r1, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093ec:	2340      	movs	r3, #64	@ 0x40
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f002 fc4a 	bl	800bc88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20000093 	.word	0x20000093
 8009404:	20000094 	.word	0x20000094
 8009408:	20000095 	.word	0x20000095

0800940c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009418:	4b3a      	ldr	r3, [pc, #232]	@ (8009504 <USBD_CDC_DeInit+0xf8>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f002 faf6 	bl	800ba10 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009424:	4b37      	ldr	r3, [pc, #220]	@ (8009504 <USBD_CDC_DeInit+0xf8>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	f003 020f 	and.w	r2, r3, #15
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	4613      	mov	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	440b      	add	r3, r1
 8009438:	3324      	adds	r3, #36	@ 0x24
 800943a:	2200      	movs	r2, #0
 800943c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800943e:	4b32      	ldr	r3, [pc, #200]	@ (8009508 <USBD_CDC_DeInit+0xfc>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f002 fae3 	bl	800ba10 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800944a:	4b2f      	ldr	r3, [pc, #188]	@ (8009508 <USBD_CDC_DeInit+0xfc>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	f003 020f 	and.w	r2, r3, #15
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	440b      	add	r3, r1
 800945e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009462:	2200      	movs	r2, #0
 8009464:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009466:	4b29      	ldr	r3, [pc, #164]	@ (800950c <USBD_CDC_DeInit+0x100>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	4619      	mov	r1, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f002 facf 	bl	800ba10 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009472:	4b26      	ldr	r3, [pc, #152]	@ (800950c <USBD_CDC_DeInit+0x100>)
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	f003 020f 	and.w	r2, r3, #15
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	3324      	adds	r3, #36	@ 0x24
 8009488:	2200      	movs	r2, #0
 800948a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800948c:	4b1f      	ldr	r3, [pc, #124]	@ (800950c <USBD_CDC_DeInit+0x100>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	f003 020f 	and.w	r2, r3, #15
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	440b      	add	r3, r1
 80094a0:	3326      	adds	r3, #38	@ 0x26
 80094a2:	2200      	movs	r2, #0
 80094a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	32b0      	adds	r2, #176	@ 0xb0
 80094b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d01f      	beq.n	80094f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	33b0      	adds	r3, #176	@ 0xb0
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	32b0      	adds	r2, #176	@ 0xb0
 80094d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094da:	4618      	mov	r0, r3
 80094dc:	f002 fc7c 	bl	800bdd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	32b0      	adds	r2, #176	@ 0xb0
 80094ea:	2100      	movs	r1, #0
 80094ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20000093 	.word	0x20000093
 8009508:	20000094 	.word	0x20000094
 800950c:	20000095 	.word	0x20000095

08009510 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	32b0      	adds	r2, #176	@ 0xb0
 8009524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009528:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800953c:	2303      	movs	r3, #3
 800953e:	e0bf      	b.n	80096c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009548:	2b00      	cmp	r3, #0
 800954a:	d050      	beq.n	80095ee <USBD_CDC_Setup+0xde>
 800954c:	2b20      	cmp	r3, #32
 800954e:	f040 80af 	bne.w	80096b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	88db      	ldrh	r3, [r3, #6]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d03a      	beq.n	80095d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	b25b      	sxtb	r3, r3
 8009560:	2b00      	cmp	r3, #0
 8009562:	da1b      	bge.n	800959c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	33b0      	adds	r3, #176	@ 0xb0
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800957a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	88d2      	ldrh	r2, [r2, #6]
 8009580:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	88db      	ldrh	r3, [r3, #6]
 8009586:	2b07      	cmp	r3, #7
 8009588:	bf28      	it	cs
 800958a:	2307      	movcs	r3, #7
 800958c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	89fa      	ldrh	r2, [r7, #14]
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f001 fd71 	bl	800b07c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800959a:	e090      	b.n	80096be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	785a      	ldrb	r2, [r3, #1]
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	88db      	ldrh	r3, [r3, #6]
 80095aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80095ac:	d803      	bhi.n	80095b6 <USBD_CDC_Setup+0xa6>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	88db      	ldrh	r3, [r3, #6]
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	e000      	b.n	80095b8 <USBD_CDC_Setup+0xa8>
 80095b6:	2240      	movs	r2, #64	@ 0x40
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80095be:	6939      	ldr	r1, [r7, #16]
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80095c6:	461a      	mov	r2, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f001 fd83 	bl	800b0d4 <USBD_CtlPrepareRx>
      break;
 80095ce:	e076      	b.n	80096be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	33b0      	adds	r3, #176	@ 0xb0
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	7850      	ldrb	r0, [r2, #1]
 80095e6:	2200      	movs	r2, #0
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	4798      	blx	r3
      break;
 80095ec:	e067      	b.n	80096be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	785b      	ldrb	r3, [r3, #1]
 80095f2:	2b0b      	cmp	r3, #11
 80095f4:	d851      	bhi.n	800969a <USBD_CDC_Setup+0x18a>
 80095f6:	a201      	add	r2, pc, #4	@ (adr r2, 80095fc <USBD_CDC_Setup+0xec>)
 80095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fc:	0800962d 	.word	0x0800962d
 8009600:	080096a9 	.word	0x080096a9
 8009604:	0800969b 	.word	0x0800969b
 8009608:	0800969b 	.word	0x0800969b
 800960c:	0800969b 	.word	0x0800969b
 8009610:	0800969b 	.word	0x0800969b
 8009614:	0800969b 	.word	0x0800969b
 8009618:	0800969b 	.word	0x0800969b
 800961c:	0800969b 	.word	0x0800969b
 8009620:	0800969b 	.word	0x0800969b
 8009624:	08009657 	.word	0x08009657
 8009628:	08009681 	.word	0x08009681
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b03      	cmp	r3, #3
 8009636:	d107      	bne.n	8009648 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009638:	f107 030a 	add.w	r3, r7, #10
 800963c:	2202      	movs	r2, #2
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f001 fd1b 	bl	800b07c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009646:	e032      	b.n	80096ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 fca5 	bl	800af9a <USBD_CtlError>
            ret = USBD_FAIL;
 8009650:	2303      	movs	r3, #3
 8009652:	75fb      	strb	r3, [r7, #23]
          break;
 8009654:	e02b      	b.n	80096ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b03      	cmp	r3, #3
 8009660:	d107      	bne.n	8009672 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009662:	f107 030d 	add.w	r3, r7, #13
 8009666:	2201      	movs	r2, #1
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f001 fd06 	bl	800b07c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009670:	e01d      	b.n	80096ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f001 fc90 	bl	800af9a <USBD_CtlError>
            ret = USBD_FAIL;
 800967a:	2303      	movs	r3, #3
 800967c:	75fb      	strb	r3, [r7, #23]
          break;
 800967e:	e016      	b.n	80096ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b03      	cmp	r3, #3
 800968a:	d00f      	beq.n	80096ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 fc83 	bl	800af9a <USBD_CtlError>
            ret = USBD_FAIL;
 8009694:	2303      	movs	r3, #3
 8009696:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009698:	e008      	b.n	80096ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f001 fc7c 	bl	800af9a <USBD_CtlError>
          ret = USBD_FAIL;
 80096a2:	2303      	movs	r3, #3
 80096a4:	75fb      	strb	r3, [r7, #23]
          break;
 80096a6:	e002      	b.n	80096ae <USBD_CDC_Setup+0x19e>
          break;
 80096a8:	bf00      	nop
 80096aa:	e008      	b.n	80096be <USBD_CDC_Setup+0x1ae>
          break;
 80096ac:	bf00      	nop
      }
      break;
 80096ae:	e006      	b.n	80096be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 fc71 	bl	800af9a <USBD_CtlError>
      ret = USBD_FAIL;
 80096b8:	2303      	movs	r3, #3
 80096ba:	75fb      	strb	r3, [r7, #23]
      break;
 80096bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	32b0      	adds	r2, #176	@ 0xb0
 80096e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e065      	b.n	80097be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	32b0      	adds	r2, #176	@ 0xb0
 80096fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009700:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009702:	78fb      	ldrb	r3, [r7, #3]
 8009704:	f003 020f 	and.w	r2, r3, #15
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	4613      	mov	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	3318      	adds	r3, #24
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d02f      	beq.n	800977c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800971c:	78fb      	ldrb	r3, [r7, #3]
 800971e:	f003 020f 	and.w	r2, r3, #15
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	4613      	mov	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	440b      	add	r3, r1
 800972e:	3318      	adds	r3, #24
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	78fb      	ldrb	r3, [r7, #3]
 8009734:	f003 010f 	and.w	r1, r3, #15
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	460b      	mov	r3, r1
 800973c:	00db      	lsls	r3, r3, #3
 800973e:	440b      	add	r3, r1
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4403      	add	r3, r0
 8009744:	3344      	adds	r3, #68	@ 0x44
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	fbb2 f1f3 	udiv	r1, r2, r3
 800974c:	fb01 f303 	mul.w	r3, r1, r3
 8009750:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009752:	2b00      	cmp	r3, #0
 8009754:	d112      	bne.n	800977c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	f003 020f 	and.w	r2, r3, #15
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	4613      	mov	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	440b      	add	r3, r1
 8009768:	3318      	adds	r3, #24
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800976e:	78f9      	ldrb	r1, [r7, #3]
 8009770:	2300      	movs	r3, #0
 8009772:	2200      	movs	r2, #0
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f002 fa4f 	bl	800bc18 <USBD_LL_Transmit>
 800977a:	e01f      	b.n	80097bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2200      	movs	r2, #0
 8009780:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	33b0      	adds	r3, #176	@ 0xb0
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d010      	beq.n	80097bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	33b0      	adds	r3, #176	@ 0xb0
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	32b0      	adds	r2, #176	@ 0xb0
 80097dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	32b0      	adds	r2, #176	@ 0xb0
 80097ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e01a      	b.n	800982e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f002 fa7b 	bl	800bcf8 <USBD_LL_GetRxDataSize>
 8009802:	4602      	mov	r2, r0
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	33b0      	adds	r3, #176	@ 0xb0
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009828:	4611      	mov	r1, r2
 800982a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	32b0      	adds	r2, #176	@ 0xb0
 8009848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009854:	2303      	movs	r3, #3
 8009856:	e024      	b.n	80098a2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	33b0      	adds	r3, #176	@ 0xb0
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d019      	beq.n	80098a0 <USBD_CDC_EP0_RxReady+0x6a>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009872:	2bff      	cmp	r3, #255	@ 0xff
 8009874:	d014      	beq.n	80098a0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	33b0      	adds	r3, #176	@ 0xb0
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800988e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009896:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	22ff      	movs	r2, #255	@ 0xff
 800989c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098b4:	2182      	movs	r1, #130	@ 0x82
 80098b6:	4818      	ldr	r0, [pc, #96]	@ (8009918 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098b8:	f000 fd0f 	bl	800a2da <USBD_GetEpDesc>
 80098bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098be:	2101      	movs	r1, #1
 80098c0:	4815      	ldr	r0, [pc, #84]	@ (8009918 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098c2:	f000 fd0a 	bl	800a2da <USBD_GetEpDesc>
 80098c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098c8:	2181      	movs	r1, #129	@ 0x81
 80098ca:	4813      	ldr	r0, [pc, #76]	@ (8009918 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098cc:	f000 fd05 	bl	800a2da <USBD_GetEpDesc>
 80098d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	2210      	movs	r2, #16
 80098dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d006      	beq.n	80098f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098ec:	711a      	strb	r2, [r3, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d006      	beq.n	8009906 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009900:	711a      	strb	r2, [r3, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2243      	movs	r2, #67	@ 0x43
 800990a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800990c:	4b02      	ldr	r3, [pc, #8]	@ (8009918 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800990e:	4618      	mov	r0, r3
 8009910:	3718      	adds	r7, #24
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20000050 	.word	0x20000050

0800991c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009924:	2182      	movs	r1, #130	@ 0x82
 8009926:	4818      	ldr	r0, [pc, #96]	@ (8009988 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009928:	f000 fcd7 	bl	800a2da <USBD_GetEpDesc>
 800992c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800992e:	2101      	movs	r1, #1
 8009930:	4815      	ldr	r0, [pc, #84]	@ (8009988 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009932:	f000 fcd2 	bl	800a2da <USBD_GetEpDesc>
 8009936:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009938:	2181      	movs	r1, #129	@ 0x81
 800993a:	4813      	ldr	r0, [pc, #76]	@ (8009988 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800993c:	f000 fccd 	bl	800a2da <USBD_GetEpDesc>
 8009940:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	2210      	movs	r2, #16
 800994c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d006      	beq.n	8009962 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	2200      	movs	r2, #0
 8009958:	711a      	strb	r2, [r3, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f042 0202 	orr.w	r2, r2, #2
 8009960:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d006      	beq.n	8009976 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	711a      	strb	r2, [r3, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f042 0202 	orr.w	r2, r2, #2
 8009974:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2243      	movs	r2, #67	@ 0x43
 800997a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800997c:	4b02      	ldr	r3, [pc, #8]	@ (8009988 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	20000050 	.word	0x20000050

0800998c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009994:	2182      	movs	r1, #130	@ 0x82
 8009996:	4818      	ldr	r0, [pc, #96]	@ (80099f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009998:	f000 fc9f 	bl	800a2da <USBD_GetEpDesc>
 800999c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800999e:	2101      	movs	r1, #1
 80099a0:	4815      	ldr	r0, [pc, #84]	@ (80099f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099a2:	f000 fc9a 	bl	800a2da <USBD_GetEpDesc>
 80099a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099a8:	2181      	movs	r1, #129	@ 0x81
 80099aa:	4813      	ldr	r0, [pc, #76]	@ (80099f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099ac:	f000 fc95 	bl	800a2da <USBD_GetEpDesc>
 80099b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	2210      	movs	r2, #16
 80099bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d006      	beq.n	80099d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099cc:	711a      	strb	r2, [r3, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d006      	beq.n	80099e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099e0:	711a      	strb	r2, [r3, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2243      	movs	r2, #67	@ 0x43
 80099ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099ec:	4b02      	ldr	r3, [pc, #8]	@ (80099f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20000050 	.word	0x20000050

080099fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	220a      	movs	r2, #10
 8009a08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009a0a:	4b03      	ldr	r3, [pc, #12]	@ (8009a18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	2000000c 	.word	0x2000000c

08009a1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e009      	b.n	8009a44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	33b0      	adds	r3, #176	@ 0xb0
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	32b0      	adds	r2, #176	@ 0xb0
 8009a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e008      	b.n	8009a88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	32b0      	adds	r2, #176	@ 0xb0
 8009aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e004      	b.n	8009ac2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
	...

08009ad0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	32b0      	adds	r2, #176	@ 0xb0
 8009ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	32b0      	adds	r2, #176	@ 0xb0
 8009af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e018      	b.n	8009b30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	7c1b      	ldrb	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10a      	bne.n	8009b1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b06:	4b0c      	ldr	r3, [pc, #48]	@ (8009b38 <USBD_CDC_ReceivePacket+0x68>)
 8009b08:	7819      	ldrb	r1, [r3, #0]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f002 f8b7 	bl	800bc88 <USBD_LL_PrepareReceive>
 8009b1a:	e008      	b.n	8009b2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b1c:	4b06      	ldr	r3, [pc, #24]	@ (8009b38 <USBD_CDC_ReceivePacket+0x68>)
 8009b1e:	7819      	ldrb	r1, [r3, #0]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b26:	2340      	movs	r3, #64	@ 0x40
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f002 f8ad 	bl	800bc88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	20000094 	.word	0x20000094

08009b3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	4613      	mov	r3, r2
 8009b48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e01f      	b.n	8009b94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	68ba      	ldr	r2, [r7, #8]
 8009b76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	79fa      	ldrb	r2, [r7, #7]
 8009b86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f001 fe85 	bl	800b898 <USBD_LL_Init>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e025      	b.n	8009c00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	32ae      	adds	r2, #174	@ 0xae
 8009bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00f      	beq.n	8009bf0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	32ae      	adds	r2, #174	@ 0xae
 8009bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be0:	f107 020e 	add.w	r2, r7, #14
 8009be4:	4610      	mov	r0, r2
 8009be6:	4798      	blx	r3
 8009be8:	4602      	mov	r2, r0
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 fe8d 	bl	800b930 <USBD_LL_Start>
 8009c16:	4603      	mov	r3, r0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d009      	beq.n	8009c64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	78fa      	ldrb	r2, [r7, #3]
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	4798      	blx	r3
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	460b      	mov	r3, r1
 8009c78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	78fa      	ldrb	r2, [r7, #3]
 8009c88:	4611      	mov	r1, r2
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	4798      	blx	r3
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d001      	beq.n	8009c98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009c94:	2303      	movs	r3, #3
 8009c96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f001 f936 	bl	800af26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009cc8:	461a      	mov	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009cd6:	f003 031f 	and.w	r3, r3, #31
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d01a      	beq.n	8009d14 <USBD_LL_SetupStage+0x72>
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d822      	bhi.n	8009d28 <USBD_LL_SetupStage+0x86>
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <USBD_LL_SetupStage+0x4a>
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d00a      	beq.n	8009d00 <USBD_LL_SetupStage+0x5e>
 8009cea:	e01d      	b.n	8009d28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fb63 	bl	800a3c0 <USBD_StdDevReq>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8009cfe:	e020      	b.n	8009d42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fbcb 	bl	800a4a4 <USBD_StdItfReq>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	73fb      	strb	r3, [r7, #15]
      break;
 8009d12:	e016      	b.n	8009d42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fc2d 	bl	800a57c <USBD_StdEPReq>
 8009d22:	4603      	mov	r3, r0
 8009d24:	73fb      	strb	r3, [r7, #15]
      break;
 8009d26:	e00c      	b.n	8009d42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009d2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f001 fea0 	bl	800ba7c <USBD_LL_StallEP>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d40:	bf00      	nop
  }

  return ret;
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	460b      	mov	r3, r1
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009d5e:	7afb      	ldrb	r3, [r7, #11]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d16e      	bne.n	8009e42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009d6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	f040 8098 	bne.w	8009ea8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	689a      	ldr	r2, [r3, #8]
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d913      	bls.n	8009dac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	689a      	ldr	r2, [r3, #8]
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	1ad2      	subs	r2, r2, r3
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	68da      	ldr	r2, [r3, #12]
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	bf28      	it	cs
 8009d9e:	4613      	movcs	r3, r2
 8009da0:	461a      	mov	r2, r3
 8009da2:	6879      	ldr	r1, [r7, #4]
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f001 f9b2 	bl	800b10e <USBD_CtlContinueRx>
 8009daa:	e07d      	b.n	8009ea8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009db2:	f003 031f 	and.w	r3, r3, #31
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d014      	beq.n	8009de4 <USBD_LL_DataOutStage+0x98>
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d81d      	bhi.n	8009dfa <USBD_LL_DataOutStage+0xae>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d002      	beq.n	8009dc8 <USBD_LL_DataOutStage+0x7c>
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d003      	beq.n	8009dce <USBD_LL_DataOutStage+0x82>
 8009dc6:	e018      	b.n	8009dfa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	75bb      	strb	r3, [r7, #22]
            break;
 8009dcc:	e018      	b.n	8009e00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f000 fa64 	bl	800a2a6 <USBD_CoreFindIF>
 8009dde:	4603      	mov	r3, r0
 8009de0:	75bb      	strb	r3, [r7, #22]
            break;
 8009de2:	e00d      	b.n	8009e00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	4619      	mov	r1, r3
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 fa66 	bl	800a2c0 <USBD_CoreFindEP>
 8009df4:	4603      	mov	r3, r0
 8009df6:	75bb      	strb	r3, [r7, #22]
            break;
 8009df8:	e002      	b.n	8009e00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	75bb      	strb	r3, [r7, #22]
            break;
 8009dfe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e00:	7dbb      	ldrb	r3, [r7, #22]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d119      	bne.n	8009e3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d113      	bne.n	8009e3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e12:	7dba      	ldrb	r2, [r7, #22]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	32ae      	adds	r2, #174	@ 0xae
 8009e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00b      	beq.n	8009e3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009e22:	7dba      	ldrb	r2, [r7, #22]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009e2a:	7dba      	ldrb	r2, [r7, #22]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	32ae      	adds	r2, #174	@ 0xae
 8009e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f001 f978 	bl	800b130 <USBD_CtlSendStatus>
 8009e40:	e032      	b.n	8009ea8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009e42:	7afb      	ldrb	r3, [r7, #11]
 8009e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f000 fa37 	bl	800a2c0 <USBD_CoreFindEP>
 8009e52:	4603      	mov	r3, r0
 8009e54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e56:	7dbb      	ldrb	r3, [r7, #22]
 8009e58:	2bff      	cmp	r3, #255	@ 0xff
 8009e5a:	d025      	beq.n	8009ea8 <USBD_LL_DataOutStage+0x15c>
 8009e5c:	7dbb      	ldrb	r3, [r7, #22]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d122      	bne.n	8009ea8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d117      	bne.n	8009e9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009e6e:	7dba      	ldrb	r2, [r7, #22]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	32ae      	adds	r2, #174	@ 0xae
 8009e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00f      	beq.n	8009e9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009e7e:	7dba      	ldrb	r2, [r7, #22]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009e86:	7dba      	ldrb	r2, [r7, #22]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	32ae      	adds	r2, #174	@ 0xae
 8009e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	7afa      	ldrb	r2, [r7, #11]
 8009e94:	4611      	mov	r1, r2
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	4798      	blx	r3
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
 8009ea6:	e000      	b.n	8009eaa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b086      	sub	sp, #24
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	60f8      	str	r0, [r7, #12]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	607a      	str	r2, [r7, #4]
 8009ebe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ec0:	7afb      	ldrb	r3, [r7, #11]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d16f      	bne.n	8009fa6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3314      	adds	r3, #20
 8009eca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d15a      	bne.n	8009f8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	689a      	ldr	r2, [r3, #8]
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d914      	bls.n	8009f0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	1ad2      	subs	r2, r2, r3
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f001 f8da 	bl	800b0b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009efe:	2300      	movs	r3, #0
 8009f00:	2200      	movs	r2, #0
 8009f02:	2100      	movs	r1, #0
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f001 febf 	bl	800bc88 <USBD_LL_PrepareReceive>
 8009f0a:	e03f      	b.n	8009f8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d11c      	bne.n	8009f52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d316      	bcc.n	8009f52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d20f      	bcs.n	8009f52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f32:	2200      	movs	r2, #0
 8009f34:	2100      	movs	r1, #0
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f001 f8bb 	bl	800b0b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f44:	2300      	movs	r3, #0
 8009f46:	2200      	movs	r2, #0
 8009f48:	2100      	movs	r1, #0
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f001 fe9c 	bl	800bc88 <USBD_LL_PrepareReceive>
 8009f50:	e01c      	b.n	8009f8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d10f      	bne.n	8009f7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d009      	beq.n	8009f7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f7e:	2180      	movs	r1, #128	@ 0x80
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f001 fd7b 	bl	800ba7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f001 f8e5 	bl	800b156 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d03a      	beq.n	800a00c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f7ff fe42 	bl	8009c20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009fa4:	e032      	b.n	800a00c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	4619      	mov	r1, r3
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 f985 	bl	800a2c0 <USBD_CoreFindEP>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
 8009fbc:	2bff      	cmp	r3, #255	@ 0xff
 8009fbe:	d025      	beq.n	800a00c <USBD_LL_DataInStage+0x15a>
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d122      	bne.n	800a00c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d11c      	bne.n	800a00c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009fd2:	7dfa      	ldrb	r2, [r7, #23]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	32ae      	adds	r2, #174	@ 0xae
 8009fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d014      	beq.n	800a00c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009fe2:	7dfa      	ldrb	r2, [r7, #23]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009fea:	7dfa      	ldrb	r2, [r7, #23]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	32ae      	adds	r2, #174	@ 0xae
 8009ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	7afa      	ldrb	r2, [r7, #11]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	4798      	blx	r3
 8009ffe:	4603      	mov	r3, r0
 800a000:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a002:	7dbb      	ldrb	r3, [r7, #22]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a008:	7dbb      	ldrb	r3, [r7, #22]
 800a00a:	e000      	b.n	800a00e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3718      	adds	r7, #24
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b084      	sub	sp, #16
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d014      	beq.n	800a07c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00e      	beq.n	800a07c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	6852      	ldr	r2, [r2, #4]
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	4611      	mov	r1, r2
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	4798      	blx	r3
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a078:	2303      	movs	r3, #3
 800a07a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a07c:	2340      	movs	r3, #64	@ 0x40
 800a07e:	2200      	movs	r2, #0
 800a080:	2100      	movs	r1, #0
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 fc86 	bl	800b994 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2240      	movs	r2, #64	@ 0x40
 800a094:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a098:	2340      	movs	r3, #64	@ 0x40
 800a09a:	2200      	movs	r2, #0
 800a09c:	2180      	movs	r1, #128	@ 0x80
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 fc78 	bl	800b994 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2240      	movs	r2, #64	@ 0x40
 800a0ae:	621a      	str	r2, [r3, #32]

  return ret;
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	78fa      	ldrb	r2, [r7, #3]
 800a0ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d006      	beq.n	800a0fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2204      	movs	r2, #4
 800a100:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a112:	b480      	push	{r7}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b04      	cmp	r3, #4
 800a124:	d106      	bne.n	800a134 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b03      	cmp	r3, #3
 800a154:	d110      	bne.n	800a178 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00b      	beq.n	800a178 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d005      	beq.n	800a178 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a172:	69db      	ldr	r3, [r3, #28]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b082      	sub	sp, #8
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	32ae      	adds	r2, #174	@ 0xae
 800a198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d101      	bne.n	800a1a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e01c      	b.n	800a1de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d115      	bne.n	800a1dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	32ae      	adds	r2, #174	@ 0xae
 800a1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	32ae      	adds	r2, #174	@ 0xae
 800a1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d2:	6a1b      	ldr	r3, [r3, #32]
 800a1d4:	78fa      	ldrb	r2, [r7, #3]
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b082      	sub	sp, #8
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	32ae      	adds	r2, #174	@ 0xae
 800a1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a204:	2303      	movs	r3, #3
 800a206:	e01c      	b.n	800a242 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b03      	cmp	r3, #3
 800a212:	d115      	bne.n	800a240 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	32ae      	adds	r2, #174	@ 0xae
 800a21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00b      	beq.n	800a240 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	32ae      	adds	r2, #174	@ 0xae
 800a232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a238:	78fa      	ldrb	r2, [r7, #3]
 800a23a:	4611      	mov	r1, r2
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00e      	beq.n	800a29c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	6852      	ldr	r2, [r2, #4]
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	4611      	mov	r1, r2
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	4798      	blx	r3
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a298:	2303      	movs	r3, #3
 800a29a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b083      	sub	sp, #12
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b086      	sub	sp, #24
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	885b      	ldrh	r3, [r3, #2]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	7812      	ldrb	r2, [r2, #0]
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d91f      	bls.n	800a340 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a306:	e013      	b.n	800a330 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a308:	f107 030a 	add.w	r3, r7, #10
 800a30c:	4619      	mov	r1, r3
 800a30e:	6978      	ldr	r0, [r7, #20]
 800a310:	f000 f81b 	bl	800a34a <USBD_GetNextDesc>
 800a314:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	785b      	ldrb	r3, [r3, #1]
 800a31a:	2b05      	cmp	r3, #5
 800a31c:	d108      	bne.n	800a330 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	789b      	ldrb	r3, [r3, #2]
 800a326:	78fa      	ldrb	r2, [r7, #3]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d008      	beq.n	800a33e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a32c:	2300      	movs	r3, #0
 800a32e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	885b      	ldrh	r3, [r3, #2]
 800a334:	b29a      	uxth	r2, r3
 800a336:	897b      	ldrh	r3, [r7, #10]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d8e5      	bhi.n	800a308 <USBD_GetEpDesc+0x2e>
 800a33c:	e000      	b.n	800a340 <USBD_GetEpDesc+0x66>
          break;
 800a33e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a340:	693b      	ldr	r3, [r7, #16]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b085      	sub	sp, #20
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	7812      	ldrb	r2, [r2, #0]
 800a360:	4413      	add	r3, r2
 800a362:	b29a      	uxth	r2, r3
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	461a      	mov	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4413      	add	r3, r2
 800a372:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a374:	68fb      	ldr	r3, [r7, #12]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a382:	b480      	push	{r7}
 800a384:	b087      	sub	sp, #28
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	3301      	adds	r3, #1
 800a398:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a3a0:	8a3b      	ldrh	r3, [r7, #16]
 800a3a2:	021b      	lsls	r3, r3, #8
 800a3a4:	b21a      	sxth	r2, r3
 800a3a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	b21b      	sxth	r3, r3
 800a3ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a3b0:	89fb      	ldrh	r3, [r7, #14]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	371c      	adds	r7, #28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
	...

0800a3c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3d6:	2b40      	cmp	r3, #64	@ 0x40
 800a3d8:	d005      	beq.n	800a3e6 <USBD_StdDevReq+0x26>
 800a3da:	2b40      	cmp	r3, #64	@ 0x40
 800a3dc:	d857      	bhi.n	800a48e <USBD_StdDevReq+0xce>
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00f      	beq.n	800a402 <USBD_StdDevReq+0x42>
 800a3e2:	2b20      	cmp	r3, #32
 800a3e4:	d153      	bne.n	800a48e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	32ae      	adds	r2, #174	@ 0xae
 800a3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	4798      	blx	r3
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a400:	e04a      	b.n	800a498 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	785b      	ldrb	r3, [r3, #1]
 800a406:	2b09      	cmp	r3, #9
 800a408:	d83b      	bhi.n	800a482 <USBD_StdDevReq+0xc2>
 800a40a:	a201      	add	r2, pc, #4	@ (adr r2, 800a410 <USBD_StdDevReq+0x50>)
 800a40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a410:	0800a465 	.word	0x0800a465
 800a414:	0800a479 	.word	0x0800a479
 800a418:	0800a483 	.word	0x0800a483
 800a41c:	0800a46f 	.word	0x0800a46f
 800a420:	0800a483 	.word	0x0800a483
 800a424:	0800a443 	.word	0x0800a443
 800a428:	0800a439 	.word	0x0800a439
 800a42c:	0800a483 	.word	0x0800a483
 800a430:	0800a45b 	.word	0x0800a45b
 800a434:	0800a44d 	.word	0x0800a44d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fa3c 	bl	800a8b8 <USBD_GetDescriptor>
          break;
 800a440:	e024      	b.n	800a48c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fbcb 	bl	800abe0 <USBD_SetAddress>
          break;
 800a44a:	e01f      	b.n	800a48c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fc0a 	bl	800ac68 <USBD_SetConfig>
 800a454:	4603      	mov	r3, r0
 800a456:	73fb      	strb	r3, [r7, #15]
          break;
 800a458:	e018      	b.n	800a48c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fcad 	bl	800adbc <USBD_GetConfig>
          break;
 800a462:	e013      	b.n	800a48c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fcde 	bl	800ae28 <USBD_GetStatus>
          break;
 800a46c:	e00e      	b.n	800a48c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fd0d 	bl	800ae90 <USBD_SetFeature>
          break;
 800a476:	e009      	b.n	800a48c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fd31 	bl	800aee2 <USBD_ClrFeature>
          break;
 800a480:	e004      	b.n	800a48c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fd88 	bl	800af9a <USBD_CtlError>
          break;
 800a48a:	bf00      	nop
      }
      break;
 800a48c:	e004      	b.n	800a498 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fd82 	bl	800af9a <USBD_CtlError>
      break;
 800a496:	bf00      	nop
  }

  return ret;
 800a498:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop

0800a4a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4ba:	2b40      	cmp	r3, #64	@ 0x40
 800a4bc:	d005      	beq.n	800a4ca <USBD_StdItfReq+0x26>
 800a4be:	2b40      	cmp	r3, #64	@ 0x40
 800a4c0:	d852      	bhi.n	800a568 <USBD_StdItfReq+0xc4>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <USBD_StdItfReq+0x26>
 800a4c6:	2b20      	cmp	r3, #32
 800a4c8:	d14e      	bne.n	800a568 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d840      	bhi.n	800a55a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	889b      	ldrh	r3, [r3, #4]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d836      	bhi.n	800a550 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	889b      	ldrh	r3, [r3, #4]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff fedb 	bl	800a2a6 <USBD_CoreFindIF>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4f4:	7bbb      	ldrb	r3, [r7, #14]
 800a4f6:	2bff      	cmp	r3, #255	@ 0xff
 800a4f8:	d01d      	beq.n	800a536 <USBD_StdItfReq+0x92>
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d11a      	bne.n	800a536 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a500:	7bba      	ldrb	r2, [r7, #14]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	32ae      	adds	r2, #174	@ 0xae
 800a506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00f      	beq.n	800a530 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a510:	7bba      	ldrb	r2, [r7, #14]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a518:	7bba      	ldrb	r2, [r7, #14]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	32ae      	adds	r2, #174	@ 0xae
 800a51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	4798      	blx	r3
 800a52a:	4603      	mov	r3, r0
 800a52c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a52e:	e004      	b.n	800a53a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a530:	2303      	movs	r3, #3
 800a532:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a534:	e001      	b.n	800a53a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a536:	2303      	movs	r3, #3
 800a538:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	88db      	ldrh	r3, [r3, #6]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d110      	bne.n	800a564 <USBD_StdItfReq+0xc0>
 800a542:	7bfb      	ldrb	r3, [r7, #15]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10d      	bne.n	800a564 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fdf1 	bl	800b130 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a54e:	e009      	b.n	800a564 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fd21 	bl	800af9a <USBD_CtlError>
          break;
 800a558:	e004      	b.n	800a564 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fd1c 	bl	800af9a <USBD_CtlError>
          break;
 800a562:	e000      	b.n	800a566 <USBD_StdItfReq+0xc2>
          break;
 800a564:	bf00      	nop
      }
      break;
 800a566:	e004      	b.n	800a572 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fd15 	bl	800af9a <USBD_CtlError>
      break;
 800a570:	bf00      	nop
  }

  return ret;
 800a572:	7bfb      	ldrb	r3, [r7, #15]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	889b      	ldrh	r3, [r3, #4]
 800a58e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a598:	2b40      	cmp	r3, #64	@ 0x40
 800a59a:	d007      	beq.n	800a5ac <USBD_StdEPReq+0x30>
 800a59c:	2b40      	cmp	r3, #64	@ 0x40
 800a59e:	f200 817f 	bhi.w	800a8a0 <USBD_StdEPReq+0x324>
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d02a      	beq.n	800a5fc <USBD_StdEPReq+0x80>
 800a5a6:	2b20      	cmp	r3, #32
 800a5a8:	f040 817a 	bne.w	800a8a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f7ff fe85 	bl	800a2c0 <USBD_CoreFindEP>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5ba:	7b7b      	ldrb	r3, [r7, #13]
 800a5bc:	2bff      	cmp	r3, #255	@ 0xff
 800a5be:	f000 8174 	beq.w	800a8aa <USBD_StdEPReq+0x32e>
 800a5c2:	7b7b      	ldrb	r3, [r7, #13]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f040 8170 	bne.w	800a8aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a5ca:	7b7a      	ldrb	r2, [r7, #13]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a5d2:	7b7a      	ldrb	r2, [r7, #13]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	32ae      	adds	r2, #174	@ 0xae
 800a5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 8163 	beq.w	800a8aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a5e4:	7b7a      	ldrb	r2, [r7, #13]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	32ae      	adds	r2, #174	@ 0xae
 800a5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	4798      	blx	r3
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a5fa:	e156      	b.n	800a8aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	785b      	ldrb	r3, [r3, #1]
 800a600:	2b03      	cmp	r3, #3
 800a602:	d008      	beq.n	800a616 <USBD_StdEPReq+0x9a>
 800a604:	2b03      	cmp	r3, #3
 800a606:	f300 8145 	bgt.w	800a894 <USBD_StdEPReq+0x318>
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 809b 	beq.w	800a746 <USBD_StdEPReq+0x1ca>
 800a610:	2b01      	cmp	r3, #1
 800a612:	d03c      	beq.n	800a68e <USBD_StdEPReq+0x112>
 800a614:	e13e      	b.n	800a894 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d002      	beq.n	800a628 <USBD_StdEPReq+0xac>
 800a622:	2b03      	cmp	r3, #3
 800a624:	d016      	beq.n	800a654 <USBD_StdEPReq+0xd8>
 800a626:	e02c      	b.n	800a682 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a628:	7bbb      	ldrb	r3, [r7, #14]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00d      	beq.n	800a64a <USBD_StdEPReq+0xce>
 800a62e:	7bbb      	ldrb	r3, [r7, #14]
 800a630:	2b80      	cmp	r3, #128	@ 0x80
 800a632:	d00a      	beq.n	800a64a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f001 fa1f 	bl	800ba7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a63e:	2180      	movs	r1, #128	@ 0x80
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f001 fa1b 	bl	800ba7c <USBD_LL_StallEP>
 800a646:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a648:	e020      	b.n	800a68c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fca4 	bl	800af9a <USBD_CtlError>
              break;
 800a652:	e01b      	b.n	800a68c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	885b      	ldrh	r3, [r3, #2]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10e      	bne.n	800a67a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a65c:	7bbb      	ldrb	r3, [r7, #14]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00b      	beq.n	800a67a <USBD_StdEPReq+0xfe>
 800a662:	7bbb      	ldrb	r3, [r7, #14]
 800a664:	2b80      	cmp	r3, #128	@ 0x80
 800a666:	d008      	beq.n	800a67a <USBD_StdEPReq+0xfe>
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	88db      	ldrh	r3, [r3, #6]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d104      	bne.n	800a67a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	4619      	mov	r1, r3
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f001 fa01 	bl	800ba7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fd58 	bl	800b130 <USBD_CtlSendStatus>

              break;
 800a680:	e004      	b.n	800a68c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fc88 	bl	800af9a <USBD_CtlError>
              break;
 800a68a:	bf00      	nop
          }
          break;
 800a68c:	e107      	b.n	800a89e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b02      	cmp	r3, #2
 800a698:	d002      	beq.n	800a6a0 <USBD_StdEPReq+0x124>
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d016      	beq.n	800a6cc <USBD_StdEPReq+0x150>
 800a69e:	e04b      	b.n	800a738 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00d      	beq.n	800a6c2 <USBD_StdEPReq+0x146>
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
 800a6a8:	2b80      	cmp	r3, #128	@ 0x80
 800a6aa:	d00a      	beq.n	800a6c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f001 f9e3 	bl	800ba7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6b6:	2180      	movs	r1, #128	@ 0x80
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f001 f9df 	bl	800ba7c <USBD_LL_StallEP>
 800a6be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6c0:	e040      	b.n	800a744 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fc68 	bl	800af9a <USBD_CtlError>
              break;
 800a6ca:	e03b      	b.n	800a744 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	885b      	ldrh	r3, [r3, #2]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d136      	bne.n	800a742 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6d4:	7bbb      	ldrb	r3, [r7, #14]
 800a6d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d004      	beq.n	800a6e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6de:	7bbb      	ldrb	r3, [r7, #14]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f001 fa00 	bl	800bae8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fd21 	bl	800b130 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7ff fde4 	bl	800a2c0 <USBD_CoreFindEP>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6fc:	7b7b      	ldrb	r3, [r7, #13]
 800a6fe:	2bff      	cmp	r3, #255	@ 0xff
 800a700:	d01f      	beq.n	800a742 <USBD_StdEPReq+0x1c6>
 800a702:	7b7b      	ldrb	r3, [r7, #13]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d11c      	bne.n	800a742 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a708:	7b7a      	ldrb	r2, [r7, #13]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a710:	7b7a      	ldrb	r2, [r7, #13]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	32ae      	adds	r2, #174	@ 0xae
 800a716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d010      	beq.n	800a742 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a720:	7b7a      	ldrb	r2, [r7, #13]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	32ae      	adds	r2, #174	@ 0xae
 800a726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	6839      	ldr	r1, [r7, #0]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	4798      	blx	r3
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a736:	e004      	b.n	800a742 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fc2d 	bl	800af9a <USBD_CtlError>
              break;
 800a740:	e000      	b.n	800a744 <USBD_StdEPReq+0x1c8>
              break;
 800a742:	bf00      	nop
          }
          break;
 800a744:	e0ab      	b.n	800a89e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d002      	beq.n	800a758 <USBD_StdEPReq+0x1dc>
 800a752:	2b03      	cmp	r3, #3
 800a754:	d032      	beq.n	800a7bc <USBD_StdEPReq+0x240>
 800a756:	e097      	b.n	800a888 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a758:	7bbb      	ldrb	r3, [r7, #14]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d007      	beq.n	800a76e <USBD_StdEPReq+0x1f2>
 800a75e:	7bbb      	ldrb	r3, [r7, #14]
 800a760:	2b80      	cmp	r3, #128	@ 0x80
 800a762:	d004      	beq.n	800a76e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fc17 	bl	800af9a <USBD_CtlError>
                break;
 800a76c:	e091      	b.n	800a892 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a76e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a772:	2b00      	cmp	r3, #0
 800a774:	da0b      	bge.n	800a78e <USBD_StdEPReq+0x212>
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a77c:	4613      	mov	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	3310      	adds	r3, #16
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	4413      	add	r3, r2
 800a78a:	3304      	adds	r3, #4
 800a78c:	e00b      	b.n	800a7a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a794:	4613      	mov	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fc61 	bl	800b07c <USBD_CtlSendData>
              break;
 800a7ba:	e06a      	b.n	800a892 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a7bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	da11      	bge.n	800a7e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
 800a7c6:	f003 020f 	and.w	r2, r3, #15
 800a7ca:	6879      	ldr	r1, [r7, #4]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	4413      	add	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	440b      	add	r3, r1
 800a7d6:	3324      	adds	r3, #36	@ 0x24
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d117      	bne.n	800a80e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fbda 	bl	800af9a <USBD_CtlError>
                  break;
 800a7e6:	e054      	b.n	800a892 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	f003 020f 	and.w	r2, r3, #15
 800a7ee:	6879      	ldr	r1, [r7, #4]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	440b      	add	r3, r1
 800a7fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d104      	bne.n	800a80e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a804:	6839      	ldr	r1, [r7, #0]
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fbc7 	bl	800af9a <USBD_CtlError>
                  break;
 800a80c:	e041      	b.n	800a892 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a80e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a812:	2b00      	cmp	r3, #0
 800a814:	da0b      	bge.n	800a82e <USBD_StdEPReq+0x2b2>
 800a816:	7bbb      	ldrb	r3, [r7, #14]
 800a818:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	3310      	adds	r3, #16
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	4413      	add	r3, r2
 800a82a:	3304      	adds	r3, #4
 800a82c:	e00b      	b.n	800a846 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a834:	4613      	mov	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	4413      	add	r3, r2
 800a844:	3304      	adds	r3, #4
 800a846:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a848:	7bbb      	ldrb	r3, [r7, #14]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <USBD_StdEPReq+0x2d8>
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	2b80      	cmp	r3, #128	@ 0x80
 800a852:	d103      	bne.n	800a85c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	2200      	movs	r2, #0
 800a858:	601a      	str	r2, [r3, #0]
 800a85a:	e00e      	b.n	800a87a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f001 f977 	bl	800bb54 <USBD_LL_IsStallEP>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2201      	movs	r2, #1
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	e002      	b.n	800a87a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2202      	movs	r2, #2
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fbfb 	bl	800b07c <USBD_CtlSendData>
              break;
 800a886:	e004      	b.n	800a892 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fb85 	bl	800af9a <USBD_CtlError>
              break;
 800a890:	bf00      	nop
          }
          break;
 800a892:	e004      	b.n	800a89e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fb7f 	bl	800af9a <USBD_CtlError>
          break;
 800a89c:	bf00      	nop
      }
      break;
 800a89e:	e005      	b.n	800a8ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fb79 	bl	800af9a <USBD_CtlError>
      break;
 800a8a8:	e000      	b.n	800a8ac <USBD_StdEPReq+0x330>
      break;
 800a8aa:	bf00      	nop
  }

  return ret;
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
	...

0800a8b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	885b      	ldrh	r3, [r3, #2]
 800a8d2:	0a1b      	lsrs	r3, r3, #8
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	2b0e      	cmp	r3, #14
 800a8da:	f200 8152 	bhi.w	800ab82 <USBD_GetDescriptor+0x2ca>
 800a8de:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e4 <USBD_GetDescriptor+0x2c>)
 800a8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e4:	0800a955 	.word	0x0800a955
 800a8e8:	0800a96d 	.word	0x0800a96d
 800a8ec:	0800a9ad 	.word	0x0800a9ad
 800a8f0:	0800ab83 	.word	0x0800ab83
 800a8f4:	0800ab83 	.word	0x0800ab83
 800a8f8:	0800ab23 	.word	0x0800ab23
 800a8fc:	0800ab4f 	.word	0x0800ab4f
 800a900:	0800ab83 	.word	0x0800ab83
 800a904:	0800ab83 	.word	0x0800ab83
 800a908:	0800ab83 	.word	0x0800ab83
 800a90c:	0800ab83 	.word	0x0800ab83
 800a910:	0800ab83 	.word	0x0800ab83
 800a914:	0800ab83 	.word	0x0800ab83
 800a918:	0800ab83 	.word	0x0800ab83
 800a91c:	0800a921 	.word	0x0800a921
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a926:	69db      	ldr	r3, [r3, #28]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00b      	beq.n	800a944 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a932:	69db      	ldr	r3, [r3, #28]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	7c12      	ldrb	r2, [r2, #16]
 800a938:	f107 0108 	add.w	r1, r7, #8
 800a93c:	4610      	mov	r0, r2
 800a93e:	4798      	blx	r3
 800a940:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a942:	e126      	b.n	800ab92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fb27 	bl	800af9a <USBD_CtlError>
        err++;
 800a94c:	7afb      	ldrb	r3, [r7, #11]
 800a94e:	3301      	adds	r3, #1
 800a950:	72fb      	strb	r3, [r7, #11]
      break;
 800a952:	e11e      	b.n	800ab92 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	7c12      	ldrb	r2, [r2, #16]
 800a960:	f107 0108 	add.w	r1, r7, #8
 800a964:	4610      	mov	r0, r2
 800a966:	4798      	blx	r3
 800a968:	60f8      	str	r0, [r7, #12]
      break;
 800a96a:	e112      	b.n	800ab92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	7c1b      	ldrb	r3, [r3, #16]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10d      	bne.n	800a990 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97c:	f107 0208 	add.w	r2, r7, #8
 800a980:	4610      	mov	r0, r2
 800a982:	4798      	blx	r3
 800a984:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	3301      	adds	r3, #1
 800a98a:	2202      	movs	r2, #2
 800a98c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a98e:	e100      	b.n	800ab92 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a998:	f107 0208 	add.w	r2, r7, #8
 800a99c:	4610      	mov	r0, r2
 800a99e:	4798      	blx	r3
 800a9a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	701a      	strb	r2, [r3, #0]
      break;
 800a9aa:	e0f2      	b.n	800ab92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	885b      	ldrh	r3, [r3, #2]
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b05      	cmp	r3, #5
 800a9b4:	f200 80ac 	bhi.w	800ab10 <USBD_GetDescriptor+0x258>
 800a9b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a9c0 <USBD_GetDescriptor+0x108>)
 800a9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9be:	bf00      	nop
 800a9c0:	0800a9d9 	.word	0x0800a9d9
 800a9c4:	0800aa0d 	.word	0x0800aa0d
 800a9c8:	0800aa41 	.word	0x0800aa41
 800a9cc:	0800aa75 	.word	0x0800aa75
 800a9d0:	0800aaa9 	.word	0x0800aaa9
 800a9d4:	0800aadd 	.word	0x0800aadd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00b      	beq.n	800a9fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	7c12      	ldrb	r2, [r2, #16]
 800a9f0:	f107 0108 	add.w	r1, r7, #8
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	4798      	blx	r3
 800a9f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9fa:	e091      	b.n	800ab20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 facb 	bl	800af9a <USBD_CtlError>
            err++;
 800aa04:	7afb      	ldrb	r3, [r7, #11]
 800aa06:	3301      	adds	r3, #1
 800aa08:	72fb      	strb	r3, [r7, #11]
          break;
 800aa0a:	e089      	b.n	800ab20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00b      	beq.n	800aa30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	7c12      	ldrb	r2, [r2, #16]
 800aa24:	f107 0108 	add.w	r1, r7, #8
 800aa28:	4610      	mov	r0, r2
 800aa2a:	4798      	blx	r3
 800aa2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa2e:	e077      	b.n	800ab20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fab1 	bl	800af9a <USBD_CtlError>
            err++;
 800aa38:	7afb      	ldrb	r3, [r7, #11]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa3e:	e06f      	b.n	800ab20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00b      	beq.n	800aa64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	7c12      	ldrb	r2, [r2, #16]
 800aa58:	f107 0108 	add.w	r1, r7, #8
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	4798      	blx	r3
 800aa60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa62:	e05d      	b.n	800ab20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fa97 	bl	800af9a <USBD_CtlError>
            err++;
 800aa6c:	7afb      	ldrb	r3, [r7, #11]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	72fb      	strb	r3, [r7, #11]
          break;
 800aa72:	e055      	b.n	800ab20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00b      	beq.n	800aa98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	7c12      	ldrb	r2, [r2, #16]
 800aa8c:	f107 0108 	add.w	r1, r7, #8
 800aa90:	4610      	mov	r0, r2
 800aa92:	4798      	blx	r3
 800aa94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa96:	e043      	b.n	800ab20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fa7d 	bl	800af9a <USBD_CtlError>
            err++;
 800aaa0:	7afb      	ldrb	r3, [r7, #11]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	72fb      	strb	r3, [r7, #11]
          break;
 800aaa6:	e03b      	b.n	800ab20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00b      	beq.n	800aacc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	7c12      	ldrb	r2, [r2, #16]
 800aac0:	f107 0108 	add.w	r1, r7, #8
 800aac4:	4610      	mov	r0, r2
 800aac6:	4798      	blx	r3
 800aac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaca:	e029      	b.n	800ab20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fa63 	bl	800af9a <USBD_CtlError>
            err++;
 800aad4:	7afb      	ldrb	r3, [r7, #11]
 800aad6:	3301      	adds	r3, #1
 800aad8:	72fb      	strb	r3, [r7, #11]
          break;
 800aada:	e021      	b.n	800ab20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00b      	beq.n	800ab00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaee:	699b      	ldr	r3, [r3, #24]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	7c12      	ldrb	r2, [r2, #16]
 800aaf4:	f107 0108 	add.w	r1, r7, #8
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4798      	blx	r3
 800aafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aafe:	e00f      	b.n	800ab20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fa49 	bl	800af9a <USBD_CtlError>
            err++;
 800ab08:	7afb      	ldrb	r3, [r7, #11]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab0e:	e007      	b.n	800ab20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fa41 	bl	800af9a <USBD_CtlError>
          err++;
 800ab18:	7afb      	ldrb	r3, [r7, #11]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ab1e:	bf00      	nop
      }
      break;
 800ab20:	e037      	b.n	800ab92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	7c1b      	ldrb	r3, [r3, #16]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d109      	bne.n	800ab3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab32:	f107 0208 	add.w	r2, r7, #8
 800ab36:	4610      	mov	r0, r2
 800ab38:	4798      	blx	r3
 800ab3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab3c:	e029      	b.n	800ab92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fa2a 	bl	800af9a <USBD_CtlError>
        err++;
 800ab46:	7afb      	ldrb	r3, [r7, #11]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab4c:	e021      	b.n	800ab92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	7c1b      	ldrb	r3, [r3, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10d      	bne.n	800ab72 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab5e:	f107 0208 	add.w	r2, r7, #8
 800ab62:	4610      	mov	r0, r2
 800ab64:	4798      	blx	r3
 800ab66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	2207      	movs	r2, #7
 800ab6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab70:	e00f      	b.n	800ab92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fa10 	bl	800af9a <USBD_CtlError>
        err++;
 800ab7a:	7afb      	ldrb	r3, [r7, #11]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	72fb      	strb	r3, [r7, #11]
      break;
 800ab80:	e007      	b.n	800ab92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fa08 	bl	800af9a <USBD_CtlError>
      err++;
 800ab8a:	7afb      	ldrb	r3, [r7, #11]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ab90:	bf00      	nop
  }

  if (err != 0U)
 800ab92:	7afb      	ldrb	r3, [r7, #11]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d11e      	bne.n	800abd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	88db      	ldrh	r3, [r3, #6]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d016      	beq.n	800abce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800aba0:	893b      	ldrh	r3, [r7, #8]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00e      	beq.n	800abc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	88da      	ldrh	r2, [r3, #6]
 800abaa:	893b      	ldrh	r3, [r7, #8]
 800abac:	4293      	cmp	r3, r2
 800abae:	bf28      	it	cs
 800abb0:	4613      	movcs	r3, r2
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800abb6:	893b      	ldrh	r3, [r7, #8]
 800abb8:	461a      	mov	r2, r3
 800abba:	68f9      	ldr	r1, [r7, #12]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 fa5d 	bl	800b07c <USBD_CtlSendData>
 800abc2:	e009      	b.n	800abd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 f9e7 	bl	800af9a <USBD_CtlError>
 800abcc:	e004      	b.n	800abd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 faae 	bl	800b130 <USBD_CtlSendStatus>
 800abd4:	e000      	b.n	800abd8 <USBD_GetDescriptor+0x320>
    return;
 800abd6:	bf00      	nop
  }
}
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop

0800abe0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	889b      	ldrh	r3, [r3, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d131      	bne.n	800ac56 <USBD_SetAddress+0x76>
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	88db      	ldrh	r3, [r3, #6]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d12d      	bne.n	800ac56 <USBD_SetAddress+0x76>
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	885b      	ldrh	r3, [r3, #2]
 800abfe:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac00:	d829      	bhi.n	800ac56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	885b      	ldrh	r3, [r3, #2]
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b03      	cmp	r3, #3
 800ac18:	d104      	bne.n	800ac24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f9bc 	bl	800af9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac22:	e01d      	b.n	800ac60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7bfa      	ldrb	r2, [r7, #15]
 800ac28:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 ffbb 	bl	800bbac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fa7a 	bl	800b130 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d004      	beq.n	800ac4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2202      	movs	r2, #2
 800ac46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac4a:	e009      	b.n	800ac60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac54:	e004      	b.n	800ac60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac56:	6839      	ldr	r1, [r7, #0]
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f99e 	bl	800af9a <USBD_CtlError>
  }
}
 800ac5e:	bf00      	nop
 800ac60:	bf00      	nop
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	885b      	ldrh	r3, [r3, #2]
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	4b4e      	ldr	r3, [pc, #312]	@ (800adb8 <USBD_SetConfig+0x150>)
 800ac7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac80:	4b4d      	ldr	r3, [pc, #308]	@ (800adb8 <USBD_SetConfig+0x150>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d905      	bls.n	800ac94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f985 	bl	800af9a <USBD_CtlError>
    return USBD_FAIL;
 800ac90:	2303      	movs	r3, #3
 800ac92:	e08c      	b.n	800adae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	d002      	beq.n	800aca6 <USBD_SetConfig+0x3e>
 800aca0:	2b03      	cmp	r3, #3
 800aca2:	d029      	beq.n	800acf8 <USBD_SetConfig+0x90>
 800aca4:	e075      	b.n	800ad92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aca6:	4b44      	ldr	r3, [pc, #272]	@ (800adb8 <USBD_SetConfig+0x150>)
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d020      	beq.n	800acf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800acae:	4b42      	ldr	r3, [pc, #264]	@ (800adb8 <USBD_SetConfig+0x150>)
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	461a      	mov	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acb8:	4b3f      	ldr	r3, [pc, #252]	@ (800adb8 <USBD_SetConfig+0x150>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7fe ffb9 	bl	8009c36 <USBD_SetClassConfig>
 800acc4:	4603      	mov	r3, r0
 800acc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d008      	beq.n	800ace0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f962 	bl	800af9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2202      	movs	r2, #2
 800acda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800acde:	e065      	b.n	800adac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fa25 	bl	800b130 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2203      	movs	r2, #3
 800acea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800acee:	e05d      	b.n	800adac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fa1d 	bl	800b130 <USBD_CtlSendStatus>
      break;
 800acf6:	e059      	b.n	800adac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800acf8:	4b2f      	ldr	r3, [pc, #188]	@ (800adb8 <USBD_SetConfig+0x150>)
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d112      	bne.n	800ad26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2202      	movs	r2, #2
 800ad04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ad08:	4b2b      	ldr	r3, [pc, #172]	@ (800adb8 <USBD_SetConfig+0x150>)
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad12:	4b29      	ldr	r3, [pc, #164]	@ (800adb8 <USBD_SetConfig+0x150>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7fe ffa8 	bl	8009c6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa06 	bl	800b130 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad24:	e042      	b.n	800adac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ad26:	4b24      	ldr	r3, [pc, #144]	@ (800adb8 <USBD_SetConfig+0x150>)
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d02a      	beq.n	800ad8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7fe ff96 	bl	8009c6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad42:	4b1d      	ldr	r3, [pc, #116]	@ (800adb8 <USBD_SetConfig+0x150>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad4c:	4b1a      	ldr	r3, [pc, #104]	@ (800adb8 <USBD_SetConfig+0x150>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7fe ff6f 	bl	8009c36 <USBD_SetClassConfig>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00f      	beq.n	800ad82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f918 	bl	800af9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7fe ff7b 	bl	8009c6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2202      	movs	r2, #2
 800ad7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ad80:	e014      	b.n	800adac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f9d4 	bl	800b130 <USBD_CtlSendStatus>
      break;
 800ad88:	e010      	b.n	800adac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f9d0 	bl	800b130 <USBD_CtlSendStatus>
      break;
 800ad90:	e00c      	b.n	800adac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f900 	bl	800af9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad9a:	4b07      	ldr	r3, [pc, #28]	@ (800adb8 <USBD_SetConfig+0x150>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7fe ff64 	bl	8009c6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ada6:	2303      	movs	r3, #3
 800ada8:	73fb      	strb	r3, [r7, #15]
      break;
 800adaa:	bf00      	nop
  }

  return ret;
 800adac:	7bfb      	ldrb	r3, [r7, #15]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	2000a568 	.word	0x2000a568

0800adbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	88db      	ldrh	r3, [r3, #6]
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d004      	beq.n	800add8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 f8e2 	bl	800af9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800add6:	e023      	b.n	800ae20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	dc02      	bgt.n	800adea <USBD_GetConfig+0x2e>
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	dc03      	bgt.n	800adf0 <USBD_GetConfig+0x34>
 800ade8:	e015      	b.n	800ae16 <USBD_GetConfig+0x5a>
 800adea:	2b03      	cmp	r3, #3
 800adec:	d00b      	beq.n	800ae06 <USBD_GetConfig+0x4a>
 800adee:	e012      	b.n	800ae16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	3308      	adds	r3, #8
 800adfa:	2201      	movs	r2, #1
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f93c 	bl	800b07c <USBD_CtlSendData>
        break;
 800ae04:	e00c      	b.n	800ae20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	3304      	adds	r3, #4
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f934 	bl	800b07c <USBD_CtlSendData>
        break;
 800ae14:	e004      	b.n	800ae20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f8be 	bl	800af9a <USBD_CtlError>
        break;
 800ae1e:	bf00      	nop
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d81e      	bhi.n	800ae7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	88db      	ldrh	r3, [r3, #6]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d004      	beq.n	800ae52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f8a5 	bl	800af9a <USBD_CtlError>
        break;
 800ae50:	e01a      	b.n	800ae88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2201      	movs	r2, #1
 800ae56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d005      	beq.n	800ae6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	f043 0202 	orr.w	r2, r3, #2
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	330c      	adds	r3, #12
 800ae72:	2202      	movs	r2, #2
 800ae74:	4619      	mov	r1, r3
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f900 	bl	800b07c <USBD_CtlSendData>
      break;
 800ae7c:	e004      	b.n	800ae88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f88a 	bl	800af9a <USBD_CtlError>
      break;
 800ae86:	bf00      	nop
  }
}
 800ae88:	bf00      	nop
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	885b      	ldrh	r3, [r3, #2]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d107      	bne.n	800aeb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f940 	bl	800b130 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800aeb0:	e013      	b.n	800aeda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	885b      	ldrh	r3, [r3, #2]
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d10b      	bne.n	800aed2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	889b      	ldrh	r3, [r3, #4]
 800aebe:	0a1b      	lsrs	r3, r3, #8
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f930 	bl	800b130 <USBD_CtlSendStatus>
}
 800aed0:	e003      	b.n	800aeda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f860 	bl	800af9a <USBD_CtlError>
}
 800aeda:	bf00      	nop
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	3b01      	subs	r3, #1
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d80b      	bhi.n	800af12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	885b      	ldrh	r3, [r3, #2]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d10c      	bne.n	800af1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f910 	bl	800b130 <USBD_CtlSendStatus>
      }
      break;
 800af10:	e004      	b.n	800af1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f840 	bl	800af9a <USBD_CtlError>
      break;
 800af1a:	e000      	b.n	800af1e <USBD_ClrFeature+0x3c>
      break;
 800af1c:	bf00      	nop
  }
}
 800af1e:	bf00      	nop
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b084      	sub	sp, #16
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	781a      	ldrb	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3301      	adds	r3, #1
 800af40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	781a      	ldrb	r2, [r3, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	3301      	adds	r3, #1
 800af4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f7ff fa16 	bl	800a382 <SWAPBYTE>
 800af56:	4603      	mov	r3, r0
 800af58:	461a      	mov	r2, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	3301      	adds	r3, #1
 800af62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3301      	adds	r3, #1
 800af68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f7ff fa09 	bl	800a382 <SWAPBYTE>
 800af70:	4603      	mov	r3, r0
 800af72:	461a      	mov	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	3301      	adds	r3, #1
 800af7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3301      	adds	r3, #1
 800af82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7ff f9fc 	bl	800a382 <SWAPBYTE>
 800af8a:	4603      	mov	r3, r0
 800af8c:	461a      	mov	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	80da      	strh	r2, [r3, #6]
}
 800af92:	bf00      	nop
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800afa4:	2180      	movs	r1, #128	@ 0x80
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fd68 	bl	800ba7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800afac:	2100      	movs	r1, #0
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fd64 	bl	800ba7c <USBD_LL_StallEP>
}
 800afb4:	bf00      	nop
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800afc8:	2300      	movs	r3, #0
 800afca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d036      	beq.n	800b040 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800afd6:	6938      	ldr	r0, [r7, #16]
 800afd8:	f000 f836 	bl	800b048 <USBD_GetLen>
 800afdc:	4603      	mov	r3, r0
 800afde:	3301      	adds	r3, #1
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800afea:	7dfb      	ldrb	r3, [r7, #23]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	4413      	add	r3, r2
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	7812      	ldrb	r2, [r2, #0]
 800aff4:	701a      	strb	r2, [r3, #0]
  idx++;
 800aff6:	7dfb      	ldrb	r3, [r7, #23]
 800aff8:	3301      	adds	r3, #1
 800affa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800affc:	7dfb      	ldrb	r3, [r7, #23]
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	4413      	add	r3, r2
 800b002:	2203      	movs	r2, #3
 800b004:	701a      	strb	r2, [r3, #0]
  idx++;
 800b006:	7dfb      	ldrb	r3, [r7, #23]
 800b008:	3301      	adds	r3, #1
 800b00a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b00c:	e013      	b.n	800b036 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	4413      	add	r3, r2
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	7812      	ldrb	r2, [r2, #0]
 800b018:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	3301      	adds	r3, #1
 800b01e:	613b      	str	r3, [r7, #16]
    idx++;
 800b020:	7dfb      	ldrb	r3, [r7, #23]
 800b022:	3301      	adds	r3, #1
 800b024:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b026:	7dfb      	ldrb	r3, [r7, #23]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	4413      	add	r3, r2
 800b02c:	2200      	movs	r2, #0
 800b02e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b030:	7dfb      	ldrb	r3, [r7, #23]
 800b032:	3301      	adds	r3, #1
 800b034:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1e7      	bne.n	800b00e <USBD_GetString+0x52>
 800b03e:	e000      	b.n	800b042 <USBD_GetString+0x86>
    return;
 800b040:	bf00      	nop
  }
}
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b050:	2300      	movs	r3, #0
 800b052:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b058:	e005      	b.n	800b066 <USBD_GetLen+0x1e>
  {
    len++;
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
 800b05c:	3301      	adds	r3, #1
 800b05e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	3301      	adds	r3, #1
 800b064:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1f5      	bne.n	800b05a <USBD_GetLen+0x12>
  }

  return len;
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2202      	movs	r2, #2
 800b08c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 fdb8 	bl	800bc18 <USBD_LL_Transmit>

  return USBD_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	60f8      	str	r0, [r7, #12]
 800b0ba:	60b9      	str	r1, [r7, #8]
 800b0bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f000 fda7 	bl	800bc18 <USBD_LL_Transmit>

  return USBD_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f000 fdc2 	bl	800bc88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	60f8      	str	r0, [r7, #12]
 800b116:	60b9      	str	r1, [r7, #8]
 800b118:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	2100      	movs	r1, #0
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 fdb1 	bl	800bc88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2204      	movs	r2, #4
 800b13c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b140:	2300      	movs	r3, #0
 800b142:	2200      	movs	r2, #0
 800b144:	2100      	movs	r1, #0
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fd66 	bl	800bc18 <USBD_LL_Transmit>

  return USBD_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2205      	movs	r2, #5
 800b162:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b166:	2300      	movs	r3, #0
 800b168:	2200      	movs	r2, #0
 800b16a:	2100      	movs	r1, #0
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fd8b 	bl	800bc88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b180:	2200      	movs	r2, #0
 800b182:	4912      	ldr	r1, [pc, #72]	@ (800b1cc <MX_USB_DEVICE_Init+0x50>)
 800b184:	4812      	ldr	r0, [pc, #72]	@ (800b1d0 <MX_USB_DEVICE_Init+0x54>)
 800b186:	f7fe fcd9 	bl	8009b3c <USBD_Init>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b190:	f7f5 fea1 	bl	8000ed6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b194:	490f      	ldr	r1, [pc, #60]	@ (800b1d4 <MX_USB_DEVICE_Init+0x58>)
 800b196:	480e      	ldr	r0, [pc, #56]	@ (800b1d0 <MX_USB_DEVICE_Init+0x54>)
 800b198:	f7fe fd00 	bl	8009b9c <USBD_RegisterClass>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b1a2:	f7f5 fe98 	bl	8000ed6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b1a6:	490c      	ldr	r1, [pc, #48]	@ (800b1d8 <MX_USB_DEVICE_Init+0x5c>)
 800b1a8:	4809      	ldr	r0, [pc, #36]	@ (800b1d0 <MX_USB_DEVICE_Init+0x54>)
 800b1aa:	f7fe fc37 	bl	8009a1c <USBD_CDC_RegisterInterface>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b1b4:	f7f5 fe8f 	bl	8000ed6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b1b8:	4805      	ldr	r0, [pc, #20]	@ (800b1d0 <MX_USB_DEVICE_Init+0x54>)
 800b1ba:	f7fe fd25 	bl	8009c08 <USBD_Start>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d001      	beq.n	800b1c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b1c4:	f7f5 fe87 	bl	8000ed6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b1c8:	bf00      	nop
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	200000ac 	.word	0x200000ac
 800b1d0:	2000a56c 	.word	0x2000a56c
 800b1d4:	20000018 	.word	0x20000018
 800b1d8:	20000098 	.word	0x20000098

0800b1dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4905      	ldr	r1, [pc, #20]	@ (800b1f8 <CDC_Init_FS+0x1c>)
 800b1e4:	4805      	ldr	r0, [pc, #20]	@ (800b1fc <CDC_Init_FS+0x20>)
 800b1e6:	f7fe fc33 	bl	8009a50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b1ea:	4905      	ldr	r1, [pc, #20]	@ (800b200 <CDC_Init_FS+0x24>)
 800b1ec:	4803      	ldr	r0, [pc, #12]	@ (800b1fc <CDC_Init_FS+0x20>)
 800b1ee:	f7fe fc51 	bl	8009a94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b1f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	2000b048 	.word	0x2000b048
 800b1fc:	2000a56c 	.word	0x2000a56c
 800b200:	2000a848 	.word	0x2000a848

0800b204 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b204:	b480      	push	{r7}
 800b206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b208:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	4603      	mov	r3, r0
 800b21c:	6039      	str	r1, [r7, #0]
 800b21e:	71fb      	strb	r3, [r7, #7]
 800b220:	4613      	mov	r3, r2
 800b222:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b224:	79fb      	ldrb	r3, [r7, #7]
 800b226:	2b23      	cmp	r3, #35	@ 0x23
 800b228:	d84a      	bhi.n	800b2c0 <CDC_Control_FS+0xac>
 800b22a:	a201      	add	r2, pc, #4	@ (adr r2, 800b230 <CDC_Control_FS+0x1c>)
 800b22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b230:	0800b2c1 	.word	0x0800b2c1
 800b234:	0800b2c1 	.word	0x0800b2c1
 800b238:	0800b2c1 	.word	0x0800b2c1
 800b23c:	0800b2c1 	.word	0x0800b2c1
 800b240:	0800b2c1 	.word	0x0800b2c1
 800b244:	0800b2c1 	.word	0x0800b2c1
 800b248:	0800b2c1 	.word	0x0800b2c1
 800b24c:	0800b2c1 	.word	0x0800b2c1
 800b250:	0800b2c1 	.word	0x0800b2c1
 800b254:	0800b2c1 	.word	0x0800b2c1
 800b258:	0800b2c1 	.word	0x0800b2c1
 800b25c:	0800b2c1 	.word	0x0800b2c1
 800b260:	0800b2c1 	.word	0x0800b2c1
 800b264:	0800b2c1 	.word	0x0800b2c1
 800b268:	0800b2c1 	.word	0x0800b2c1
 800b26c:	0800b2c1 	.word	0x0800b2c1
 800b270:	0800b2c1 	.word	0x0800b2c1
 800b274:	0800b2c1 	.word	0x0800b2c1
 800b278:	0800b2c1 	.word	0x0800b2c1
 800b27c:	0800b2c1 	.word	0x0800b2c1
 800b280:	0800b2c1 	.word	0x0800b2c1
 800b284:	0800b2c1 	.word	0x0800b2c1
 800b288:	0800b2c1 	.word	0x0800b2c1
 800b28c:	0800b2c1 	.word	0x0800b2c1
 800b290:	0800b2c1 	.word	0x0800b2c1
 800b294:	0800b2c1 	.word	0x0800b2c1
 800b298:	0800b2c1 	.word	0x0800b2c1
 800b29c:	0800b2c1 	.word	0x0800b2c1
 800b2a0:	0800b2c1 	.word	0x0800b2c1
 800b2a4:	0800b2c1 	.word	0x0800b2c1
 800b2a8:	0800b2c1 	.word	0x0800b2c1
 800b2ac:	0800b2c1 	.word	0x0800b2c1
 800b2b0:	0800b2c1 	.word	0x0800b2c1
 800b2b4:	0800b2c1 	.word	0x0800b2c1
 800b2b8:	0800b2c1 	.word	0x0800b2c1
 800b2bc:	0800b2c1 	.word	0x0800b2c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b2c0:	bf00      	nop
  }

  return (USBD_OK);
 800b2c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	4808      	ldr	r0, [pc, #32]	@ (800b300 <CDC_Receive_FS+0x30>)
 800b2de:	f7fe fbd9 	bl	8009a94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b2e2:	4807      	ldr	r0, [pc, #28]	@ (800b300 <CDC_Receive_FS+0x30>)
 800b2e4:	f7fe fbf4 	bl	8009ad0 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  USB_My_Receive(Buf, *Len);
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7f5 fb98 	bl	8000a24 <USB_My_Receive>

  return (USBD_OK);
 800b2f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	2000a56c 	.word	0x2000a56c

0800b304 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b304:	b480      	push	{r7}
 800b306:	b087      	sub	sp, #28
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	4613      	mov	r3, r2
 800b310:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b312:	2300      	movs	r3, #0
 800b314:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b316:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	371c      	adds	r7, #28
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
	...

0800b328 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	6039      	str	r1, [r7, #0]
 800b332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2212      	movs	r2, #18
 800b338:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b33a:	4b03      	ldr	r3, [pc, #12]	@ (800b348 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	200000cc 	.word	0x200000cc

0800b34c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	6039      	str	r1, [r7, #0]
 800b356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2204      	movs	r2, #4
 800b35c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b35e:	4b03      	ldr	r3, [pc, #12]	@ (800b36c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b360:	4618      	mov	r0, r3
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	200000ec 	.word	0x200000ec

0800b370 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	6039      	str	r1, [r7, #0]
 800b37a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b37c:	79fb      	ldrb	r3, [r7, #7]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d105      	bne.n	800b38e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	4907      	ldr	r1, [pc, #28]	@ (800b3a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b386:	4808      	ldr	r0, [pc, #32]	@ (800b3a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b388:	f7ff fe18 	bl	800afbc <USBD_GetString>
 800b38c:	e004      	b.n	800b398 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	4904      	ldr	r1, [pc, #16]	@ (800b3a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b392:	4805      	ldr	r0, [pc, #20]	@ (800b3a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b394:	f7ff fe12 	bl	800afbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b398:	4b02      	ldr	r3, [pc, #8]	@ (800b3a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	2000b848 	.word	0x2000b848
 800b3a8:	0800be84 	.word	0x0800be84

0800b3ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	6039      	str	r1, [r7, #0]
 800b3b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	4904      	ldr	r1, [pc, #16]	@ (800b3cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b3bc:	4804      	ldr	r0, [pc, #16]	@ (800b3d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b3be:	f7ff fdfd 	bl	800afbc <USBD_GetString>
  return USBD_StrDesc;
 800b3c2:	4b02      	ldr	r3, [pc, #8]	@ (800b3cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	2000b848 	.word	0x2000b848
 800b3d0:	0800be9c 	.word	0x0800be9c

0800b3d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	6039      	str	r1, [r7, #0]
 800b3de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	221a      	movs	r2, #26
 800b3e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b3e6:	f000 f855 	bl	800b494 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b3ea:	4b02      	ldr	r3, [pc, #8]	@ (800b3f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	200000f0 	.word	0x200000f0

0800b3f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	4603      	mov	r3, r0
 800b400:	6039      	str	r1, [r7, #0]
 800b402:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b404:	79fb      	ldrb	r3, [r7, #7]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d105      	bne.n	800b416 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b40a:	683a      	ldr	r2, [r7, #0]
 800b40c:	4907      	ldr	r1, [pc, #28]	@ (800b42c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b40e:	4808      	ldr	r0, [pc, #32]	@ (800b430 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b410:	f7ff fdd4 	bl	800afbc <USBD_GetString>
 800b414:	e004      	b.n	800b420 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	4904      	ldr	r1, [pc, #16]	@ (800b42c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b41a:	4805      	ldr	r0, [pc, #20]	@ (800b430 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b41c:	f7ff fdce 	bl	800afbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b420:	4b02      	ldr	r3, [pc, #8]	@ (800b42c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b422:	4618      	mov	r0, r3
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	2000b848 	.word	0x2000b848
 800b430:	0800beb0 	.word	0x0800beb0

0800b434 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	4603      	mov	r3, r0
 800b43c:	6039      	str	r1, [r7, #0]
 800b43e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d105      	bne.n	800b452 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	4907      	ldr	r1, [pc, #28]	@ (800b468 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b44a:	4808      	ldr	r0, [pc, #32]	@ (800b46c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b44c:	f7ff fdb6 	bl	800afbc <USBD_GetString>
 800b450:	e004      	b.n	800b45c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	4904      	ldr	r1, [pc, #16]	@ (800b468 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b456:	4805      	ldr	r0, [pc, #20]	@ (800b46c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b458:	f7ff fdb0 	bl	800afbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b45c:	4b02      	ldr	r3, [pc, #8]	@ (800b468 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	2000b848 	.word	0x2000b848
 800b46c:	0800bebc 	.word	0x0800bebc

0800b470 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	6039      	str	r1, [r7, #0]
 800b47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	220c      	movs	r2, #12
 800b480:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b482:	4b03      	ldr	r3, [pc, #12]	@ (800b490 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b484:	4618      	mov	r0, r3
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	200000e0 	.word	0x200000e0

0800b494 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b49a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d8 <Get_SerialNum+0x44>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b4a0:	4b0e      	ldr	r3, [pc, #56]	@ (800b4dc <Get_SerialNum+0x48>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b4a6:	4b0e      	ldr	r3, [pc, #56]	@ (800b4e0 <Get_SerialNum+0x4c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d009      	beq.n	800b4ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b4ba:	2208      	movs	r2, #8
 800b4bc:	4909      	ldr	r1, [pc, #36]	@ (800b4e4 <Get_SerialNum+0x50>)
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f000 f814 	bl	800b4ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	4908      	ldr	r1, [pc, #32]	@ (800b4e8 <Get_SerialNum+0x54>)
 800b4c8:	68b8      	ldr	r0, [r7, #8]
 800b4ca:	f000 f80f 	bl	800b4ec <IntToUnicode>
  }
}
 800b4ce:	bf00      	nop
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	1fff7590 	.word	0x1fff7590
 800b4dc:	1fff7594 	.word	0x1fff7594
 800b4e0:	1fff7598 	.word	0x1fff7598
 800b4e4:	200000f2 	.word	0x200000f2
 800b4e8:	20000102 	.word	0x20000102

0800b4ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4fe:	2300      	movs	r3, #0
 800b500:	75fb      	strb	r3, [r7, #23]
 800b502:	e027      	b.n	800b554 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	0f1b      	lsrs	r3, r3, #28
 800b508:	2b09      	cmp	r3, #9
 800b50a:	d80b      	bhi.n	800b524 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	0f1b      	lsrs	r3, r3, #28
 800b510:	b2da      	uxtb	r2, r3
 800b512:	7dfb      	ldrb	r3, [r7, #23]
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	4619      	mov	r1, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	440b      	add	r3, r1
 800b51c:	3230      	adds	r2, #48	@ 0x30
 800b51e:	b2d2      	uxtb	r2, r2
 800b520:	701a      	strb	r2, [r3, #0]
 800b522:	e00a      	b.n	800b53a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	0f1b      	lsrs	r3, r3, #28
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
 800b52c:	005b      	lsls	r3, r3, #1
 800b52e:	4619      	mov	r1, r3
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	440b      	add	r3, r1
 800b534:	3237      	adds	r2, #55	@ 0x37
 800b536:	b2d2      	uxtb	r2, r2
 800b538:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	011b      	lsls	r3, r3, #4
 800b53e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	3301      	adds	r3, #1
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	4413      	add	r3, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
 800b550:	3301      	adds	r3, #1
 800b552:	75fb      	strb	r3, [r7, #23]
 800b554:	7dfa      	ldrb	r2, [r7, #23]
 800b556:	79fb      	ldrb	r3, [r7, #7]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d3d3      	bcc.n	800b504 <IntToUnicode+0x18>
  }
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	371c      	adds	r7, #28
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
	...

0800b56c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b0b0      	sub	sp, #192	@ 0xc0
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b574:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b578:	2200      	movs	r2, #0
 800b57a:	601a      	str	r2, [r3, #0]
 800b57c:	605a      	str	r2, [r3, #4]
 800b57e:	609a      	str	r2, [r3, #8]
 800b580:	60da      	str	r2, [r3, #12]
 800b582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b584:	f107 0318 	add.w	r3, r7, #24
 800b588:	2294      	movs	r2, #148	@ 0x94
 800b58a:	2100      	movs	r1, #0
 800b58c:	4618      	mov	r0, r3
 800b58e:	f000 fc33 	bl	800bdf8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b59a:	d174      	bne.n	800b686 <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b59c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b5a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b5a8:	f107 0318 	add.w	r3, r7, #24
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fa fb55 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b5b8:	f7f5 fc8d 	bl	8000ed6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5bc:	4b34      	ldr	r3, [pc, #208]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b5be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5c0:	4a33      	ldr	r2, [pc, #204]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b5c2:	f043 0301 	orr.w	r3, r3, #1
 800b5c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b5c8:	4b31      	ldr	r3, [pc, #196]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b5ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b5d4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800b5d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5dc:	2302      	movs	r3, #2
 800b5de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b5ee:	230a      	movs	r3, #10
 800b5f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b5fe:	f7f7 ffed 	bl	80035dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b602:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b60a:	2300      	movs	r3, #0
 800b60c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b610:	2300      	movs	r3, #0
 800b612:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b616:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800b61a:	4619      	mov	r1, r3
 800b61c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b620:	f7f7 ffdc 	bl	80035dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b624:	4b1a      	ldr	r3, [pc, #104]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b628:	4a19      	ldr	r2, [pc, #100]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b62a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b62e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b630:	4b17      	ldr	r3, [pc, #92]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b634:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b638:	613b      	str	r3, [r7, #16]
 800b63a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b63c:	4b14      	ldr	r3, [pc, #80]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b63e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d114      	bne.n	800b672 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b648:	4b11      	ldr	r3, [pc, #68]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b64a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b64c:	4a10      	ldr	r2, [pc, #64]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b64e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b652:	6593      	str	r3, [r2, #88]	@ 0x58
 800b654:	4b0e      	ldr	r3, [pc, #56]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b65c:	60fb      	str	r3, [r7, #12]
 800b65e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800b660:	f7f9 fc04 	bl	8004e6c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b664:	4b0a      	ldr	r3, [pc, #40]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b668:	4a09      	ldr	r2, [pc, #36]	@ (800b690 <HAL_PCD_MspInit+0x124>)
 800b66a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b66e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b670:	e001      	b.n	800b676 <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b672:	f7f9 fbfb 	bl	8004e6c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b676:	2200      	movs	r2, #0
 800b678:	2100      	movs	r1, #0
 800b67a:	2043      	movs	r0, #67	@ 0x43
 800b67c:	f7f7 fcbd 	bl	8002ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b680:	2043      	movs	r0, #67	@ 0x43
 800b682:	f7f7 fcd6 	bl	8003032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b686:	bf00      	nop
 800b688:	37c0      	adds	r7, #192	@ 0xc0
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	40021000 	.word	0x40021000

0800b694 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	f7fe faf9 	bl	8009ca2 <USBD_LL_SetupStage>
}
 800b6b0:	bf00      	nop
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b6ca:	78fa      	ldrb	r2, [r7, #3]
 800b6cc:	6879      	ldr	r1, [r7, #4]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	78fb      	ldrb	r3, [r7, #3]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	f7fe fb33 	bl	8009d4c <USBD_LL_DataOutStage>
}
 800b6e6:	bf00      	nop
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b082      	sub	sp, #8
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b700:	78fa      	ldrb	r2, [r7, #3]
 800b702:	6879      	ldr	r1, [r7, #4]
 800b704:	4613      	mov	r3, r2
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	4413      	add	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	440b      	add	r3, r1
 800b70e:	3348      	adds	r3, #72	@ 0x48
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	78fb      	ldrb	r3, [r7, #3]
 800b714:	4619      	mov	r1, r3
 800b716:	f7fe fbcc 	bl	8009eb2 <USBD_LL_DataInStage>
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b730:	4618      	mov	r0, r3
 800b732:	f7fe fd06 	bl	800a142 <USBD_LL_SOF>
}
 800b736:	bf00      	nop
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b746:	2301      	movs	r3, #1
 800b748:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d001      	beq.n	800b756 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b752:	f7f5 fbc0 	bl	8000ed6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b75c:	7bfa      	ldrb	r2, [r7, #15]
 800b75e:	4611      	mov	r1, r2
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fcaa 	bl	800a0ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7fe fc52 	bl	800a016 <USBD_LL_Reset>
}
 800b772:	bf00      	nop
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
	...

0800b77c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	6812      	ldr	r2, [r2, #0]
 800b792:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b796:	f043 0301 	orr.w	r3, r3, #1
 800b79a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fe fc99 	bl	800a0da <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6a1b      	ldr	r3, [r3, #32]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7b0:	4b04      	ldr	r3, [pc, #16]	@ (800b7c4 <HAL_PCD_SuspendCallback+0x48>)
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	4a03      	ldr	r2, [pc, #12]	@ (800b7c4 <HAL_PCD_SuspendCallback+0x48>)
 800b7b6:	f043 0306 	orr.w	r3, r3, #6
 800b7ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7bc:	bf00      	nop
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	e000ed00 	.word	0xe000ed00

0800b7c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	6812      	ldr	r2, [r2, #0]
 800b7de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b7e2:	f023 0301 	bic.w	r3, r3, #1
 800b7e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d007      	beq.n	800b800 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7f0:	4b08      	ldr	r3, [pc, #32]	@ (800b814 <HAL_PCD_ResumeCallback+0x4c>)
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	4a07      	ldr	r2, [pc, #28]	@ (800b814 <HAL_PCD_ResumeCallback+0x4c>)
 800b7f6:	f023 0306 	bic.w	r3, r3, #6
 800b7fa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b7fc:	f000 faf6 	bl	800bdec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fc83 	bl	800a112 <USBD_LL_Resume>
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	e000ed00 	.word	0xe000ed00

0800b818 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b82a:	78fa      	ldrb	r2, [r7, #3]
 800b82c:	4611      	mov	r1, r2
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe fcd9 	bl	800a1e6 <USBD_LL_IsoOUTIncomplete>
}
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b84e:	78fa      	ldrb	r2, [r7, #3]
 800b850:	4611      	mov	r1, r2
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe fc95 	bl	800a182 <USBD_LL_IsoINIncomplete>
}
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fe fceb 	bl	800a24a <USBD_LL_DevConnected>
}
 800b874:	bf00      	nop
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fe fce8 	bl	800a260 <USBD_LL_DevDisconnected>
}
 800b890:	bf00      	nop
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d13c      	bne.n	800b922 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8a8:	4a20      	ldr	r2, [pc, #128]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a1e      	ldr	r2, [pc, #120]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8b8:	4b1c      	ldr	r3, [pc, #112]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b8be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b8c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8c2:	2206      	movs	r2, #6
 800b8c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b8c6:	4b19      	ldr	r3, [pc, #100]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8cc:	4b17      	ldr	r3, [pc, #92]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8d2:	4b16      	ldr	r3, [pc, #88]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b8d8:	4b14      	ldr	r3, [pc, #80]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b8de:	4b13      	ldr	r3, [pc, #76]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b8e4:	4b11      	ldr	r3, [pc, #68]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b8ea:	4b10      	ldr	r3, [pc, #64]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b8f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b8f6:	480d      	ldr	r0, [pc, #52]	@ (800b92c <USBD_LL_Init+0x94>)
 800b8f8:	f7f8 f84c 	bl	8003994 <HAL_PCD_Init>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b902:	f7f5 fae8 	bl	8000ed6 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b906:	2180      	movs	r1, #128	@ 0x80
 800b908:	4808      	ldr	r0, [pc, #32]	@ (800b92c <USBD_LL_Init+0x94>)
 800b90a:	f7f9 f9b6 	bl	8004c7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b90e:	2240      	movs	r2, #64	@ 0x40
 800b910:	2100      	movs	r1, #0
 800b912:	4806      	ldr	r0, [pc, #24]	@ (800b92c <USBD_LL_Init+0x94>)
 800b914:	f7f9 f96a 	bl	8004bec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b918:	2280      	movs	r2, #128	@ 0x80
 800b91a:	2101      	movs	r1, #1
 800b91c:	4803      	ldr	r0, [pc, #12]	@ (800b92c <USBD_LL_Init+0x94>)
 800b91e:	f7f9 f965 	bl	8004bec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	2000ba48 	.word	0x2000ba48

0800b930 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b938:	2300      	movs	r3, #0
 800b93a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b946:	4618      	mov	r0, r3
 800b948:	f7f8 f948 	bl	8003bdc <HAL_PCD_Start>
 800b94c:	4603      	mov	r3, r0
 800b94e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	2b03      	cmp	r3, #3
 800b954:	d816      	bhi.n	800b984 <USBD_LL_Start+0x54>
 800b956:	a201      	add	r2, pc, #4	@ (adr r2, 800b95c <USBD_LL_Start+0x2c>)
 800b958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b95c:	0800b96d 	.word	0x0800b96d
 800b960:	0800b973 	.word	0x0800b973
 800b964:	0800b979 	.word	0x0800b979
 800b968:	0800b97f 	.word	0x0800b97f
    case HAL_OK :
      usb_status = USBD_OK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	73fb      	strb	r3, [r7, #15]
    break;
 800b970:	e00b      	b.n	800b98a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b972:	2303      	movs	r3, #3
 800b974:	73fb      	strb	r3, [r7, #15]
    break;
 800b976:	e008      	b.n	800b98a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b978:	2301      	movs	r3, #1
 800b97a:	73fb      	strb	r3, [r7, #15]
    break;
 800b97c:	e005      	b.n	800b98a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b97e:	2303      	movs	r3, #3
 800b980:	73fb      	strb	r3, [r7, #15]
    break;
 800b982:	e002      	b.n	800b98a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b984:	2303      	movs	r3, #3
 800b986:	73fb      	strb	r3, [r7, #15]
    break;
 800b988:	bf00      	nop
  }
  return usb_status;
 800b98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	4608      	mov	r0, r1
 800b99e:	4611      	mov	r1, r2
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	70fb      	strb	r3, [r7, #3]
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	70bb      	strb	r3, [r7, #2]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b9bc:	78bb      	ldrb	r3, [r7, #2]
 800b9be:	883a      	ldrh	r2, [r7, #0]
 800b9c0:	78f9      	ldrb	r1, [r7, #3]
 800b9c2:	f7f8 fdf2 	bl	80045aa <HAL_PCD_EP_Open>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b9ca:	7bbb      	ldrb	r3, [r7, #14]
 800b9cc:	2b03      	cmp	r3, #3
 800b9ce:	d817      	bhi.n	800ba00 <USBD_LL_OpenEP+0x6c>
 800b9d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d8 <USBD_LL_OpenEP+0x44>)
 800b9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d6:	bf00      	nop
 800b9d8:	0800b9e9 	.word	0x0800b9e9
 800b9dc:	0800b9ef 	.word	0x0800b9ef
 800b9e0:	0800b9f5 	.word	0x0800b9f5
 800b9e4:	0800b9fb 	.word	0x0800b9fb
    case HAL_OK :
      usb_status = USBD_OK;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ec:	e00b      	b.n	800ba06 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f2:	e008      	b.n	800ba06 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9f8:	e005      	b.n	800ba06 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9fa:	2303      	movs	r3, #3
 800b9fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9fe:	e002      	b.n	800ba06 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ba00:	2303      	movs	r3, #3
 800ba02:	73fb      	strb	r3, [r7, #15]
    break;
 800ba04:	bf00      	nop
  }
  return usb_status;
 800ba06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba2a:	78fa      	ldrb	r2, [r7, #3]
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7f8 fe23 	bl	800467a <HAL_PCD_EP_Close>
 800ba34:	4603      	mov	r3, r0
 800ba36:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba38:	7bbb      	ldrb	r3, [r7, #14]
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	d816      	bhi.n	800ba6c <USBD_LL_CloseEP+0x5c>
 800ba3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba44 <USBD_LL_CloseEP+0x34>)
 800ba40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba44:	0800ba55 	.word	0x0800ba55
 800ba48:	0800ba5b 	.word	0x0800ba5b
 800ba4c:	0800ba61 	.word	0x0800ba61
 800ba50:	0800ba67 	.word	0x0800ba67
    case HAL_OK :
      usb_status = USBD_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]
    break;
 800ba58:	e00b      	b.n	800ba72 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba5e:	e008      	b.n	800ba72 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba60:	2301      	movs	r3, #1
 800ba62:	73fb      	strb	r3, [r7, #15]
    break;
 800ba64:	e005      	b.n	800ba72 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba66:	2303      	movs	r3, #3
 800ba68:	73fb      	strb	r3, [r7, #15]
    break;
 800ba6a:	e002      	b.n	800ba72 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba70:	bf00      	nop
  }
  return usb_status;
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba96:	78fa      	ldrb	r2, [r7, #3]
 800ba98:	4611      	mov	r1, r2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7f8 feb2 	bl	8004804 <HAL_PCD_EP_SetStall>
 800baa0:	4603      	mov	r3, r0
 800baa2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	2b03      	cmp	r3, #3
 800baa8:	d816      	bhi.n	800bad8 <USBD_LL_StallEP+0x5c>
 800baaa:	a201      	add	r2, pc, #4	@ (adr r2, 800bab0 <USBD_LL_StallEP+0x34>)
 800baac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab0:	0800bac1 	.word	0x0800bac1
 800bab4:	0800bac7 	.word	0x0800bac7
 800bab8:	0800bacd 	.word	0x0800bacd
 800babc:	0800bad3 	.word	0x0800bad3
    case HAL_OK :
      usb_status = USBD_OK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	73fb      	strb	r3, [r7, #15]
    break;
 800bac4:	e00b      	b.n	800bade <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bac6:	2303      	movs	r3, #3
 800bac8:	73fb      	strb	r3, [r7, #15]
    break;
 800baca:	e008      	b.n	800bade <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bacc:	2301      	movs	r3, #1
 800bace:	73fb      	strb	r3, [r7, #15]
    break;
 800bad0:	e005      	b.n	800bade <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bad2:	2303      	movs	r3, #3
 800bad4:	73fb      	strb	r3, [r7, #15]
    break;
 800bad6:	e002      	b.n	800bade <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bad8:	2303      	movs	r3, #3
 800bada:	73fb      	strb	r3, [r7, #15]
    break;
 800badc:	bf00      	nop
  }
  return usb_status;
 800bade:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb02:	78fa      	ldrb	r2, [r7, #3]
 800bb04:	4611      	mov	r1, r2
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7f8 fede 	bl	80048c8 <HAL_PCD_EP_ClrStall>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb10:	7bbb      	ldrb	r3, [r7, #14]
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d816      	bhi.n	800bb44 <USBD_LL_ClearStallEP+0x5c>
 800bb16:	a201      	add	r2, pc, #4	@ (adr r2, 800bb1c <USBD_LL_ClearStallEP+0x34>)
 800bb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1c:	0800bb2d 	.word	0x0800bb2d
 800bb20:	0800bb33 	.word	0x0800bb33
 800bb24:	0800bb39 	.word	0x0800bb39
 800bb28:	0800bb3f 	.word	0x0800bb3f
    case HAL_OK :
      usb_status = USBD_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb30:	e00b      	b.n	800bb4a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb32:	2303      	movs	r3, #3
 800bb34:	73fb      	strb	r3, [r7, #15]
    break;
 800bb36:	e008      	b.n	800bb4a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb3c:	e005      	b.n	800bb4a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	73fb      	strb	r3, [r7, #15]
    break;
 800bb42:	e002      	b.n	800bb4a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bb44:	2303      	movs	r3, #3
 800bb46:	73fb      	strb	r3, [r7, #15]
    break;
 800bb48:	bf00      	nop
  }
  return usb_status;
 800bb4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	da0b      	bge.n	800bb88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb70:	78fb      	ldrb	r3, [r7, #3]
 800bb72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb76:	68f9      	ldr	r1, [r7, #12]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	4413      	add	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	440b      	add	r3, r1
 800bb82:	333e      	adds	r3, #62	@ 0x3e
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	e00b      	b.n	800bba0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb88:	78fb      	ldrb	r3, [r7, #3]
 800bb8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb8e:	68f9      	ldr	r1, [r7, #12]
 800bb90:	4613      	mov	r3, r2
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	4413      	add	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	440b      	add	r3, r1
 800bb9a:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800bb9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3714      	adds	r7, #20
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbc6:	78fa      	ldrb	r2, [r7, #3]
 800bbc8:	4611      	mov	r1, r2
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7f8 fcc8 	bl	8004560 <HAL_PCD_SetAddress>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bbd4:	7bbb      	ldrb	r3, [r7, #14]
 800bbd6:	2b03      	cmp	r3, #3
 800bbd8:	d816      	bhi.n	800bc08 <USBD_LL_SetUSBAddress+0x5c>
 800bbda:	a201      	add	r2, pc, #4	@ (adr r2, 800bbe0 <USBD_LL_SetUSBAddress+0x34>)
 800bbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe0:	0800bbf1 	.word	0x0800bbf1
 800bbe4:	0800bbf7 	.word	0x0800bbf7
 800bbe8:	0800bbfd 	.word	0x0800bbfd
 800bbec:	0800bc03 	.word	0x0800bc03
    case HAL_OK :
      usb_status = USBD_OK;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf4:	e00b      	b.n	800bc0e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbf6:	2303      	movs	r3, #3
 800bbf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bbfa:	e008      	b.n	800bc0e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	73fb      	strb	r3, [r7, #15]
    break;
 800bc00:	e005      	b.n	800bc0e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc02:	2303      	movs	r3, #3
 800bc04:	73fb      	strb	r3, [r7, #15]
    break;
 800bc06:	e002      	b.n	800bc0e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc0c:	bf00      	nop
  }
  return usb_status;
 800bc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	607a      	str	r2, [r7, #4]
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	460b      	mov	r3, r1
 800bc26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bc36:	7af9      	ldrb	r1, [r7, #11]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	f7f8 fdb1 	bl	80047a2 <HAL_PCD_EP_Transmit>
 800bc40:	4603      	mov	r3, r0
 800bc42:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bc44:	7dbb      	ldrb	r3, [r7, #22]
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d816      	bhi.n	800bc78 <USBD_LL_Transmit+0x60>
 800bc4a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc50 <USBD_LL_Transmit+0x38>)
 800bc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc50:	0800bc61 	.word	0x0800bc61
 800bc54:	0800bc67 	.word	0x0800bc67
 800bc58:	0800bc6d 	.word	0x0800bc6d
 800bc5c:	0800bc73 	.word	0x0800bc73
    case HAL_OK :
      usb_status = USBD_OK;
 800bc60:	2300      	movs	r3, #0
 800bc62:	75fb      	strb	r3, [r7, #23]
    break;
 800bc64:	e00b      	b.n	800bc7e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc66:	2303      	movs	r3, #3
 800bc68:	75fb      	strb	r3, [r7, #23]
    break;
 800bc6a:	e008      	b.n	800bc7e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	75fb      	strb	r3, [r7, #23]
    break;
 800bc70:	e005      	b.n	800bc7e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc72:	2303      	movs	r3, #3
 800bc74:	75fb      	strb	r3, [r7, #23]
    break;
 800bc76:	e002      	b.n	800bc7e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bc78:	2303      	movs	r3, #3
 800bc7a:	75fb      	strb	r3, [r7, #23]
    break;
 800bc7c:	bf00      	nop
  }
  return usb_status;
 800bc7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3718      	adds	r7, #24
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	607a      	str	r2, [r7, #4]
 800bc92:	603b      	str	r3, [r7, #0]
 800bc94:	460b      	mov	r3, r1
 800bc96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bca6:	7af9      	ldrb	r1, [r7, #11]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	f7f8 fd2f 	bl	800470e <HAL_PCD_EP_Receive>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bcb4:	7dbb      	ldrb	r3, [r7, #22]
 800bcb6:	2b03      	cmp	r3, #3
 800bcb8:	d816      	bhi.n	800bce8 <USBD_LL_PrepareReceive+0x60>
 800bcba:	a201      	add	r2, pc, #4	@ (adr r2, 800bcc0 <USBD_LL_PrepareReceive+0x38>)
 800bcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc0:	0800bcd1 	.word	0x0800bcd1
 800bcc4:	0800bcd7 	.word	0x0800bcd7
 800bcc8:	0800bcdd 	.word	0x0800bcdd
 800bccc:	0800bce3 	.word	0x0800bce3
    case HAL_OK :
      usb_status = USBD_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	75fb      	strb	r3, [r7, #23]
    break;
 800bcd4:	e00b      	b.n	800bcee <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	75fb      	strb	r3, [r7, #23]
    break;
 800bcda:	e008      	b.n	800bcee <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	75fb      	strb	r3, [r7, #23]
    break;
 800bce0:	e005      	b.n	800bcee <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bce2:	2303      	movs	r3, #3
 800bce4:	75fb      	strb	r3, [r7, #23]
    break;
 800bce6:	e002      	b.n	800bcee <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bce8:	2303      	movs	r3, #3
 800bcea:	75fb      	strb	r3, [r7, #23]
    break;
 800bcec:	bf00      	nop
  }
  return usb_status;
 800bcee:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3718      	adds	r7, #24
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	460b      	mov	r3, r1
 800bd02:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd0a:	78fa      	ldrb	r2, [r7, #3]
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7f8 fd2f 	bl	8004772 <HAL_PCD_EP_GetRxCount>
 800bd14:	4603      	mov	r3, r0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
	...

0800bd20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bd2c:	78fb      	ldrb	r3, [r7, #3]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <HAL_PCDEx_LPM_Callback+0x18>
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d01f      	beq.n	800bd76 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bd36:	e03b      	b.n	800bdb0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a1b      	ldr	r3, [r3, #32]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d007      	beq.n	800bd50 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bd40:	f000 f854 	bl	800bdec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd44:	4b1c      	ldr	r3, [pc, #112]	@ (800bdb8 <HAL_PCDEx_LPM_Callback+0x98>)
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	4a1b      	ldr	r2, [pc, #108]	@ (800bdb8 <HAL_PCDEx_LPM_Callback+0x98>)
 800bd4a:	f023 0306 	bic.w	r3, r3, #6
 800bd4e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	6812      	ldr	r2, [r2, #0]
 800bd5e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bd62:	f023 0301 	bic.w	r3, r3, #1
 800bd66:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe f9cf 	bl	800a112 <USBD_LL_Resume>
    break;
 800bd74:	e01c      	b.n	800bdb0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	6812      	ldr	r2, [r2, #0]
 800bd84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bd88:	f043 0301 	orr.w	r3, r3, #1
 800bd8c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fe f9a0 	bl	800a0da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d005      	beq.n	800bdae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bda2:	4b05      	ldr	r3, [pc, #20]	@ (800bdb8 <HAL_PCDEx_LPM_Callback+0x98>)
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	4a04      	ldr	r2, [pc, #16]	@ (800bdb8 <HAL_PCDEx_LPM_Callback+0x98>)
 800bda8:	f043 0306 	orr.w	r3, r3, #6
 800bdac:	6113      	str	r3, [r2, #16]
    break;
 800bdae:	bf00      	nop
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	e000ed00 	.word	0xe000ed00

0800bdbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bdc4:	4b03      	ldr	r3, [pc, #12]	@ (800bdd4 <USBD_static_malloc+0x18>)
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	2000bf54 	.word	0x2000bf54

0800bdd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]

}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bdf0:	f7f5 f81e 	bl	8000e30 <SystemClock_Config>
}
 800bdf4:	bf00      	nop
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <memset>:
 800bdf8:	4402      	add	r2, r0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d100      	bne.n	800be02 <memset+0xa>
 800be00:	4770      	bx	lr
 800be02:	f803 1b01 	strb.w	r1, [r3], #1
 800be06:	e7f9      	b.n	800bdfc <memset+0x4>

0800be08 <__libc_init_array>:
 800be08:	b570      	push	{r4, r5, r6, lr}
 800be0a:	4d0d      	ldr	r5, [pc, #52]	@ (800be40 <__libc_init_array+0x38>)
 800be0c:	4c0d      	ldr	r4, [pc, #52]	@ (800be44 <__libc_init_array+0x3c>)
 800be0e:	1b64      	subs	r4, r4, r5
 800be10:	10a4      	asrs	r4, r4, #2
 800be12:	2600      	movs	r6, #0
 800be14:	42a6      	cmp	r6, r4
 800be16:	d109      	bne.n	800be2c <__libc_init_array+0x24>
 800be18:	4d0b      	ldr	r5, [pc, #44]	@ (800be48 <__libc_init_array+0x40>)
 800be1a:	4c0c      	ldr	r4, [pc, #48]	@ (800be4c <__libc_init_array+0x44>)
 800be1c:	f000 f826 	bl	800be6c <_init>
 800be20:	1b64      	subs	r4, r4, r5
 800be22:	10a4      	asrs	r4, r4, #2
 800be24:	2600      	movs	r6, #0
 800be26:	42a6      	cmp	r6, r4
 800be28:	d105      	bne.n	800be36 <__libc_init_array+0x2e>
 800be2a:	bd70      	pop	{r4, r5, r6, pc}
 800be2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be30:	4798      	blx	r3
 800be32:	3601      	adds	r6, #1
 800be34:	e7ee      	b.n	800be14 <__libc_init_array+0xc>
 800be36:	f855 3b04 	ldr.w	r3, [r5], #4
 800be3a:	4798      	blx	r3
 800be3c:	3601      	adds	r6, #1
 800be3e:	e7f2      	b.n	800be26 <__libc_init_array+0x1e>
 800be40:	0800bf44 	.word	0x0800bf44
 800be44:	0800bf44 	.word	0x0800bf44
 800be48:	0800bf44 	.word	0x0800bf44
 800be4c:	0800bf48 	.word	0x0800bf48

0800be50 <memcpy>:
 800be50:	440a      	add	r2, r1
 800be52:	4291      	cmp	r1, r2
 800be54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800be58:	d100      	bne.n	800be5c <memcpy+0xc>
 800be5a:	4770      	bx	lr
 800be5c:	b510      	push	{r4, lr}
 800be5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be66:	4291      	cmp	r1, r2
 800be68:	d1f9      	bne.n	800be5e <memcpy+0xe>
 800be6a:	bd10      	pop	{r4, pc}

0800be6c <_init>:
 800be6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6e:	bf00      	nop
 800be70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be72:	bc08      	pop	{r3}
 800be74:	469e      	mov	lr, r3
 800be76:	4770      	bx	lr

0800be78 <_fini>:
 800be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7a:	bf00      	nop
 800be7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7e:	bc08      	pop	{r3}
 800be80:	469e      	mov	lr, r3
 800be82:	4770      	bx	lr
